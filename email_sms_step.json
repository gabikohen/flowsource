{
  "accountId": "61781717-a289-435f-b623-c8915ad90753",
  "schemaVersion": 21,
  "data": {
    "meta": {
      "dataOuts": [
        {
          "ttl": 86400000,
          "meta": {
            "chat": "`0sol8vi`",
            "type": "rwc-init-chat",
            "lookAndFeel": {
              "theme": "Auto-detect",
              "title": "Weather Bot",
              "botIcon": {
                "ext": "png",
                "key": "weather_bot_icon.png",
                "name": "weather_bot_icon.png",
                "size": 1440374,
                "mimeExt": "image/png",
                "isPublic": false,
                "location": "https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_icon.png?Expires=1664457869&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaWNvbi5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2NjQ0NTc4Njl9fX1dfQ__&Signature=drTwPGMizrI9Qu9S7CIK2owxavxwQb3orPsJTcbpe77351ErcUh0Edv7Z5yI7dYdMeGrKfkJ6mcE6Z6PVIDlPhqCZ--bH2g9SGJgX3yYzITXXY643yOEKInyxsn0eavyuSEVpKO2d~-rSs4Qs1bRnDvm3GT-qV4ifoB7ZU6CJnAyk0A9PSUpUE-s40bOh6IlDLJdfWaTjzbSFiPhIuiDjOqBF-1PIRYdWMdRCvtc2U15MZSDS85MMDs3GJXqasDCAXgoB0whBOFnh6jjLPhyil-AB7APpv5KXILVF1fpbsT3ZdshSzDATEwJnr8u15NAigaCIMTB0W15mCFvsG8TJQ__&Key-Pair-Id=K33HFYYO5LG4DE"
              },
              "footerJs": "",
              "headerJs": "",
              "footerCss": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
              "headerCss": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
              "useFooter": false,
              "footerHtml": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
              "headerHtml": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
              "description": "It's that time",
              "headerImage": {
                "ext": "png",
                "key": "weather_bot_header.png",
                "name": "weather_bot_header.png",
                "size": 1393261,
                "mimeExt": "image/png",
                "isPublic": false,
                "location": "https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_header.png?Expires=1664457826&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaGVhZGVyLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTY2NDQ1NzgyNn19fV19&Signature=AruEPo4AGhvIIEHdmufkvzNt2PCYpCAJuBe97KeyElGKrPvF7Bdf1N30lD83KiwKZJvZwud05jtBNFW9dbpIFEP7rRfE1~ontDw04lXYvO~AKX~NRlAfMLSgHBm1bfGHcv975-4amjZmHPlEf3ZEX1y3sgkwimsQlnd53nrychAJLdDL7Als15u0I~mQMhNDXu9r5FWv246MYpYTxFF7KaZ1wwc8vKTYPcx-3dJY5faoxvBDdMUngmTDimi1q6BHhI7U9R70H5bs8nMcIZfDLdAOU59Vs7mp4Jpl49r6gL7eiyCLFodwTTsAAPT6vUnzQ8vnCcNBl7F3V7R5m6Ehjw__&Key-Pair-Id=K33HFYYO5LG4DE"
              },
              "customStyles": [],
              "showFooterAt": [
                "desktop",
                "mobile",
                "embed"
              ],
              "useCustomCss": false,
              "botAnswerDelay": "`1 seconds`",
              "closeEventType": "`command`",
              "customizeHeader": false,
              "closeEventCommand": "``",
              "messageTimeFormat": "``",
              "useGlobalCommands": false,
              "globalCommandsList": [],
              "allowRestoreSession": false,
              "typingIndicatorTime": "`1 seconds`",
              "allowStartNewSession": true,
              "globalCommandsCustom": [],
              "isCustomMessageTimeFormat": false
            },
            "conversationType": "rwc-chat",
            "additionalContent": {
              "type": "`empty`"
            },
            "conversationStarter": true
          },
          "name": "rwcEntry",
          "type": "shared",
          "outputExample": {
            "appId": "String",
            "rwcUrl": "string",
            "context": "Object",
            "headers": "Object",
            "deviceId": "String",
            "pageData": "Object",
            "sessionId": "String",
            "answerDelay": "String",
            "queryParams": "object",
            "userTimezone": {
              "name": "String",
              "offset": "Number"
            },
            "customVariables": "Object",
            "browserFingerprint": "String"
          },
          "stepLabel": "rwc entry",
          "stepId": "f16122c6-0252-4dc2-8c26-b908cb27e29b"
        },
        {
          "ttl": 86400000,
          "meta": {},
          "name": "location",
          "type": "session",
          "stepLabel": "Location",
          "stepId": "02849481-c787-441c-9390-1bb4032c1a9f"
        },
        {
          "ttl": 86400000,
          "meta": {
            "type": "rwc-request-response"
          },
          "name": "msg",
          "type": "session",
          "outputExample": {
            "checkbox": [
              {
                "label": "string",
                "value": "string"
              }
            ],
            "checkboxText": "String"
          },
          "stepLabel": "msg",
          "stepId": "30398d3d-738d-4fbb-8a1b-26b0b3e706a3"
        },
        {
          "ttl": 86400000,
          "meta": {},
          "name": "emailstep",
          "type": "session",
          "outputExample": {
            "allResponses": [],
            "latestResponse": {
              "tag": {
                "contents": "",
                "attributes": {
                  "id": "",
                  "title": ""
                }
              },
              "link": "",
              "type": "",
              "value": "",
              "datetime": "",
              "messageId": "",
              "eventSender": {
                "name": "",
                "email": ""
              }
            },
            "outgoingMessage": {
              "sender": {
                "name": "",
                "address": ""
              },
              "beacons": [],
              "content": {
                "html": "",
                "plain": "",
                "trimmedHtml": "",
                "trimmedText": ""
              },
              "subject": {
                "text": "",
                "trimmed": ""
              },
              "datetime": "",
              "inReplyTo": "",
              "messageId": "",
              "timestamp": "",
              "recipients": {
                "cc": [],
                "to": [],
                "bcc": []
              },
              "references": [],
              "attachments": []
            }
          },
          "stepLabel": "EMAILSTEP",
          "stepId": "364659f5-a761-40b3-bd90-37274e9afc48"
        },
        {
          "ttl": 86400000,
          "meta": {
            "conversationType": "sms",
            "conversationStarter": true
          },
          "name": "smsstep",
          "type": "session",
          "outputExample": {
            "botNumber": "+17205555555",
            "transcriptId": "",
            "endUserNumber": "+17205555551",
            "lastTranscriptId": ""
          },
          "stepLabel": "SMSSTEP",
          "stepId": "70d2cd0e-b462-479b-9db3-2d9440c48c20"
        },
        {
          "ttl": 86400000,
          "meta": {},
          "name": "greetingDay",
          "type": "shared",
          "stepLabel": "Greeting Day",
          "stepId": "77e0d9e5-9b28-47b1-8dcc-532746c062f7"
        },
        {
          "ttl": 86400000,
          "meta": {},
          "name": "data",
          "type": "session",
          "outputExample": {
            "dayTime": "`Day`"
          },
          "stepLabel": "data",
          "stepId": "a2c528a3-e052-4bd9-a93b-37f0d8ee830f"
        },
        {
          "ttl": 86400000,
          "name": "getGreetingTz",
          "type": "session",
          "outputExample": {
            "nowDate": "2018-01-04 09:38",
            "nowDateInMS": 1515051480000
          },
          "stepLabel": "Get greeting tz",
          "stepId": "e6cb0a56-25dd-4c1f-98ea-70525aa40e87"
        },
        {
          "ttl": 86400000,
          "meta": {},
          "name": "location",
          "type": "session",
          "stepLabel": "Location",
          "stepId": "ff1b299e-5c4c-4ea7-aa38-350f1f0d9a3e"
        }
      ]
    },
    "color": null,
    "label": "[0.1] Entry",
    "trees": {
      "main": {
        "position": {
          "x": 0,
          "y": 0
        },
        "steps": [
          {
            "id": "f16122c6-0252-4dc2-8c26-b908cb27e29b",
            "label": "rwc entry",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "7e0f2b5c-e827-4a00-b18b-6850ec0bff63",
            "description": "",
            "isGatewayStep": true,
            "pinLabel": true,
            "data": {
              "appId": "FLbbF4M3RQakyHozK1kCQA.apps.staging.onereach.ai",
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "c3481b3b-f203-448f-9fd3-0c736f6c8502",
                  "condition": ""
                }
              ],
              "appUrl": "https://xn--ew8h.o-o.ai/Gk4c9HX34",
              "chatId": "`0sol8vi`",
              "appName": "`Weather Bot`",
              "chatUrl": "https://chat.staging.onereach.ai/YXgXF6KJQ1-2I8iRWtkHUw/0sol8vi",
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "chat": "`0sol8vi`",
                  "type": "rwc-init-chat",
                  "lookAndFeel": {
                    "theme": "Auto-detect",
                    "title": "Weather Bot",
                    "botIcon": {
                      "ext": "png",
                      "key": "weather_bot_icon.png",
                      "name": "weather_bot_icon.png",
                      "size": 1440374,
                      "mimeExt": "image/png",
                      "isPublic": false,
                      "location": "https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_icon.png?Expires=1664457869&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaWNvbi5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2NjQ0NTc4Njl9fX1dfQ__&Signature=drTwPGMizrI9Qu9S7CIK2owxavxwQb3orPsJTcbpe77351ErcUh0Edv7Z5yI7dYdMeGrKfkJ6mcE6Z6PVIDlPhqCZ--bH2g9SGJgX3yYzITXXY643yOEKInyxsn0eavyuSEVpKO2d~-rSs4Qs1bRnDvm3GT-qV4ifoB7ZU6CJnAyk0A9PSUpUE-s40bOh6IlDLJdfWaTjzbSFiPhIuiDjOqBF-1PIRYdWMdRCvtc2U15MZSDS85MMDs3GJXqasDCAXgoB0whBOFnh6jjLPhyil-AB7APpv5KXILVF1fpbsT3ZdshSzDATEwJnr8u15NAigaCIMTB0W15mCFvsG8TJQ__&Key-Pair-Id=K33HFYYO5LG4DE"
                    },
                    "footerJs": "",
                    "headerJs": "",
                    "footerCss": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
                    "headerCss": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
                    "useFooter": false,
                    "footerHtml": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
                    "headerHtml": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
                    "description": "It's that time",
                    "headerImage": {
                      "ext": "png",
                      "key": "weather_bot_header.png",
                      "name": "weather_bot_header.png",
                      "size": 1393261,
                      "mimeExt": "image/png",
                      "isPublic": false,
                      "location": "https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_header.png?Expires=1664457826&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaGVhZGVyLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTY2NDQ1NzgyNn19fV19&Signature=AruEPo4AGhvIIEHdmufkvzNt2PCYpCAJuBe97KeyElGKrPvF7Bdf1N30lD83KiwKZJvZwud05jtBNFW9dbpIFEP7rRfE1~ontDw04lXYvO~AKX~NRlAfMLSgHBm1bfGHcv975-4amjZmHPlEf3ZEX1y3sgkwimsQlnd53nrychAJLdDL7Als15u0I~mQMhNDXu9r5FWv246MYpYTxFF7KaZ1wwc8vKTYPcx-3dJY5faoxvBDdMUngmTDimi1q6BHhI7U9R70H5bs8nMcIZfDLdAOU59Vs7mp4Jpl49r6gL7eiyCLFodwTTsAAPT6vUnzQ8vnCcNBl7F3V7R5m6Ehjw__&Key-Pair-Id=K33HFYYO5LG4DE"
                    },
                    "customStyles": [],
                    "showFooterAt": [
                      "desktop",
                      "mobile",
                      "embed"
                    ],
                    "useCustomCss": false,
                    "botAnswerDelay": "`1 seconds`",
                    "closeEventType": "`command`",
                    "customizeHeader": false,
                    "closeEventCommand": "``",
                    "messageTimeFormat": "``",
                    "useGlobalCommands": false,
                    "globalCommandsList": [],
                    "allowRestoreSession": false,
                    "typingIndicatorTime": "`1 seconds`",
                    "allowStartNewSession": true,
                    "globalCommandsCustom": [],
                    "isCustomMessageTimeFormat": false
                  },
                  "conversationType": "rwc-chat",
                  "additionalContent": {
                    "type": "`empty`"
                  },
                  "conversationStarter": true
                },
                "name": "rwcEntry",
                "type": "shared"
              },
              "appColor": "#409fec",
              "footerJs": "",
              "headerJs": "",
              "tabTitle": "``",
              "embedLogo": [],
              "footerCss": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
              "headerCss": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
              "useFooter": false,
              "extendHead": false,
              "footerHtml": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
              "headerHtml": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
              "rwcContext": {
                "store": {},
                "output": {
                  "selectStyle": true
                },
                "contextKey": "__rwc_context"
              },
              "__codeModes": {},
              "embedInvite": "``",
              "isAppActive": false,
              "savedFlowId": "c6a3bd7c-0dc3-4827-aa36-3b57931bcc5a",
              "widgetColor": "#409fec",
              "isAppCreated": true,
              "isAppUpdated": false,
              "isFlowActive": true,
              "savedAppName": "Weather Bot",
              "savedChatUrl": "``",
              "showFooterAt": [
                "`desktop`",
                "`mobile`",
                "`embed`"
              ],
              "stepVariable": "defaultValue",
              "addMfHeadVars": false,
              "embedPosition": "bottom-right",
              "headVariables": [],
              "savedAppColor": "#409fec",
              "changeTabTitle": false,
              "closeEventCode": "",
              "closeEventType": "`command`",
              "embedAnimation": "pulse",
              "extendHeadHtml": "<script>console.log('Hello from head script!')</script>",
              "hideChatLoader": false,
              "previousChatId": "`0sol8vi`",
              "autoExpandDelay": 15000,
              "customizeHeader": false,
              "defaultTabTitle": "`OneReach.ai Chat`",
              "embedInviteImage": {},
              "lookAndFeelTheme": "Auto-detect",
              "lookAndFeelTitle": "`Weather Bot`",
              "tabTitleInterval": {
                "input": "`0s`",
                "outputMode": "ms"
              },
              "closeEventCommand": "``",
              "embedInviteButton": "``",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "c3481b3b-f203-448f-9fd3-0c736f6c8502",
                "condition": ""
              },
              "useGlobalCommands": false,
              "autoExpandDelayStr": "`15 seconds`",
              "embedInviteTimeout": 5000,
              "embedUseInvitation": false,
              "emdedShowCloseIcon": false,
              "faviconSourceImage": {},
              "globalCommandsList": [],
              "lookAndFeelBotIcon": {
                "ext": "png",
                "key": "weather_bot_icon.png",
                "name": "weather_bot_icon.png",
                "size": 1440374,
                "mimeExt": "image/png",
                "isPublic": false,
                "location": "https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_icon.png?Expires=1664457869&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaWNvbi5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2NjQ0NTc4Njl9fX1dfQ__&Signature=drTwPGMizrI9Qu9S7CIK2owxavxwQb3orPsJTcbpe77351ErcUh0Edv7Z5yI7dYdMeGrKfkJ6mcE6Z6PVIDlPhqCZ--bH2g9SGJgX3yYzITXXY643yOEKInyxsn0eavyuSEVpKO2d~-rSs4Qs1bRnDvm3GT-qV4ifoB7ZU6CJnAyk0A9PSUpUE-s40bOh6IlDLJdfWaTjzbSFiPhIuiDjOqBF-1PIRYdWMdRCvtc2U15MZSDS85MMDs3GJXqasDCAXgoB0whBOFnh6jjLPhyil-AB7APpv5KXILVF1fpbsT3ZdshSzDATEwJnr8u15NAigaCIMTB0W15mCFvsG8TJQ__&Key-Pair-Id=K33HFYYO5LG4DE"
              },
              "manualConversation": false,
              "customizeBrowserTab": false,
              "embedPreviewPageUrl": "``",
              "globalCommandsCustom": [],
              "additionalContentType": "`empty`",
              "embedInviteTimeoutStr": "`5 seconds`",
              "lookAndFeelDescription": "`It's that time`",
              "lookAndFeelHeaderImage": {
                "ext": "png",
                "key": "weather_bot_header.png",
                "name": "weather_bot_header.png",
                "size": 1393261,
                "mimeExt": "image/png",
                "isPublic": false,
                "location": "https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_header.png?Expires=1664457826&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaGVhZGVyLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTY2NDQ1NzgyNn19fV19&Signature=AruEPo4AGhvIIEHdmufkvzNt2PCYpCAJuBe97KeyElGKrPvF7Bdf1N30lD83KiwKZJvZwud05jtBNFW9dbpIFEP7rRfE1~ontDw04lXYvO~AKX~NRlAfMLSgHBm1bfGHcv975-4amjZmHPlEf3ZEX1y3sgkwimsQlnd53nrychAJLdDL7Als15u0I~mQMhNDXu9r5FWv246MYpYTxFF7KaZ1wwc8vKTYPcx-3dJY5faoxvBDdMUngmTDimi1q6BHhI7U9R70H5bs8nMcIZfDLdAOU59Vs7mp4Jpl49r6gL7eiyCLFodwTTsAAPT6vUnzQ8vnCcNBl7F3V7R5m6Ehjw__&Key-Pair-Id=K33HFYYO5LG4DE"
              },
              "isAppsProviderAvailable": true,
              "lookAndFeelCustomStyles": [],
              "lookAndFeelUseCustomCss": false,
              "embedAllowDragChatWindow": true,
              "lookAndFeelBotAnswerDelay": {
                "input": "`1 seconds`",
                "outputMode": "'ms'"
              },
              "embedAllowChangeWindowSize": false,
              "isRequestForRegisterSended": false,
              "additionalHeroVideoPosition": "Floating",
              "lookAndFeelCustomTimeFormat": "``",
              "additionalContentCardPosition": "Fixed left",
              "lookAndFeelAllowToViewHistory": false,
              "lookAndFeelAllowRestoreSession": false,
              "lookAndFeelAllowStartNewSession": true,
              "embedAppearanceBlurredBackground": false,
              "lookAndFeelIsCustomMessageTimeFormat": false
            },
            "outputExample": {
              "appId": "String",
              "rwcUrl": "string",
              "context": "Object",
              "headers": "Object",
              "deviceId": "String",
              "pageData": "Object",
              "sessionId": "String",
              "answerDelay": "String",
              "queryParams": "object",
              "userTimezone": {
                "name": "String",
                "offset": "Number"
              },
              "customVariables": "Object",
              "browserFingerprint": "String"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "session": {
                "tags": [],
                "type": "session",
                "label": "Session",
                "enabled": true,
                "canDisable": false
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "appName": "\"`Weather Bot`\"",
              "savedAppName": "\"Weather Bot\"",
              "appColor": "\"#409fec\"",
              "appId": "\"FLbbF4M3RQakyHozK1kCQA.apps.staging.onereach.ai\"",
              "savedAppColor": "\"#409fec\"",
              "savedChatUrl": "\"``\"",
              "isAppCreated": "true",
              "isAppActive": "false",
              "isAppUpdated": "false",
              "isRequestForRegisterSended": "false",
              "isAppsProviderAvailable": "true",
              "chatId": "`0sol8vi`",
              "isFlowActive": "true",
              "previousChatId": "\"`0sol8vi`\"",
              "appUrl": "\"https://xn--ew8h.o-o.ai/Gk4c9HX34\"",
              "chatUrl": "\"https://chat.staging.onereach.ai/YXgXF6KJQ1-2I8iRWtkHUw/0sol8vi\"",
              "lookAndFeelTheme": "\"Auto-detect\"",
              "hideChatLoader": "false",
              "lookAndFeelTitle": "`Weather Bot`",
              "lookAndFeelDescription": "`It's that time`",
              "lookAndFeelHeaderImage": "[{ location: \"https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_header.png?Expires=1664457826&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaGVhZGVyLnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTY2NDQ1NzgyNn19fV19&Signature=AruEPo4AGhvIIEHdmufkvzNt2PCYpCAJuBe97KeyElGKrPvF7Bdf1N30lD83KiwKZJvZwud05jtBNFW9dbpIFEP7rRfE1~ontDw04lXYvO~AKX~NRlAfMLSgHBm1bfGHcv975-4amjZmHPlEf3ZEX1y3sgkwimsQlnd53nrychAJLdDL7Als15u0I~mQMhNDXu9r5FWv246MYpYTxFF7KaZ1wwc8vKTYPcx-3dJY5faoxvBDdMUngmTDimi1q6BHhI7U9R70H5bs8nMcIZfDLdAOU59Vs7mp4Jpl49r6gL7eiyCLFodwTTsAAPT6vUnzQ8vnCcNBl7F3V7R5m6Ehjw__&Key-Pair-Id=K33HFYYO5LG4DE\", size: 1393261 }]",
              "lookAndFeelBotIcon": "[{ location: \"https://files.staging.api.onereach.ai/61781717-a289-435f-b623-c8915ad90753/weather_bot_icon.png?Expires=1664457869&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82MTc4MTcxNy1hMjg5LTQzNWYtYjYyMy1jODkxNWFkOTA3NTMvd2VhdGhlcl9ib3RfaWNvbi5wbmciLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2NjQ0NTc4Njl9fX1dfQ__&Signature=drTwPGMizrI9Qu9S7CIK2owxavxwQb3orPsJTcbpe77351ErcUh0Edv7Z5yI7dYdMeGrKfkJ6mcE6Z6PVIDlPhqCZ--bH2g9SGJgX3yYzITXXY643yOEKInyxsn0eavyuSEVpKO2d~-rSs4Qs1bRnDvm3GT-qV4ifoB7ZU6CJnAyk0A9PSUpUE-s40bOh6IlDLJdfWaTjzbSFiPhIuiDjOqBF-1PIRYdWMdRCvtc2U15MZSDS85MMDs3GJXqasDCAXgoB0whBOFnh6jjLPhyil-AB7APpv5KXILVF1fpbsT3ZdshSzDATEwJnr8u15NAigaCIMTB0W15mCFvsG8TJQ__&Key-Pair-Id=K33HFYYO5LG4DE\", size: 1440374 }]",
              "lookAndFeelBotAnswerDelay": "{input: `1 seconds`,outputMode: 'ms'}",
              "lookAndFeelAllowToViewHistory": "false",
              "lookAndFeelAllowRestoreSession": "false",
              "lookAndFeelAllowStartNewSession": "true",
              "customizeBrowserTab": "false",
              "embedLogo": "[]",
              "widgetColor": "\"#409fec\"",
              "embedPosition": "'bottom-right'",
              "embedAnimation": "'pulse'",
              "autoExpandDelay": 15000,
              "autoExpandDelayStr": "`15 seconds`",
              "embedAllowChangeWindowSize": "false",
              "embedAllowDragChatWindow": "true",
              "embedAppearanceBlurredBackground": "false",
              "embedUseInvitation": "false",
              "embedPreviewPageUrl": "``",
              "stepVariable": "\"defaultValue\"",
              "useGlobalCommands": "false",
              "additionalContentType": "`empty`",
              "lookAndFeelUseCustomCss": "false",
              "lookAndFeelIsCustomMessageTimeFormat": "false",
              "customizeHeader": "false",
              "useFooter": "false",
              "extendHead": "false",
              "manualConversation": "false",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: {},output: {selectStyle: \"manual\",value: {}},ttlBuffer: undefined}, this))(require('conv-context'))"
            }
          },
          {
            "id": "02849481-c787-441c-9390-1bb4032c1a9f",
            "label": "Location",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17",
                  "label": "result",
                  "stepId": "840f39b3-2805-4615-b372-83505885ecd6",
                  "dynamic": true
                }
              ],
              "flowId": "a1dba194-f5a6-44df-900d-7b05e75db304",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "location",
                "type": "session"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [
                "result"
              ],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [
                {
                  "name": "username",
                  "value": "`${await this.mergeFields['greetingDay'].get()}`",
                  "vforkey": "0a15e107-4e06-4616-abf0-1b017b8718b9"
                }
              ],
              "processTimeout": false,
              "flowIdToTrigger": "8c0474fe-bb9f-48c0-8ed3-97e553bfa4f7",
              "targetAccountId": "",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17"
                }
              ],
              "customSubFlowName": "`weatherbot/location`",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17",
                "label": "result",
                "stepId": "4c53bf86-6824-489e-a195-3e8e60f10b2c",
                "dynamic": true
              },
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "a1dba194-f5a6-44df-900d-7b05e75db304",
              "customFlowParameters": [
                {
                  "name": "username",
                  "value": "`${await this.mergeFields['greetingDay'].get()}`",
                  "vforkey": "0a15e107-4e06-4616-abf0-1b017b8718b9"
                }
              ],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0,
              "customTriggerTargetAccountId": "``"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "flowParameters": "{\"username\": `${await this.mergeFields['greetingDay'].get()}`}",
              "customFlowParameters": "{\"username\": `${await this.mergeFields['greetingDay'].get()}`}",
              "flowId": "\"a1dba194-f5a6-44df-900d-7b05e75db304\"",
              "flowToGetParamsFrom": "\"a1dba194-f5a6-44df-900d-7b05e75db304\"",
              "customSubFlowName": "`weatherbot/location`",
              "isUseCustomSubflow": true,
              "flowIdToTrigger": "\"8c0474fe-bb9f-48c0-8ed3-97e553bfa4f7\"",
              "paramsProcessType": "\"manually\"",
              "targetAccountId": "\"\"",
              "isAsync": "true",
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "customTriggerTargetAccountId": "``",
              "processError": false,
              "processTimeout": false,
              "timeoutDuration": "`30 sec`"
            }
          },
          {
            "id": "22cec524-b033-4a97-9db9-3cc09336e82b",
            "label": "jump1",
            "icon": "goto",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [],
              "firstEnter": true,
              "gotoStepId": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`",
              "__codeModes": {},
              "handleLimit": false,
              "selectedStep": {
                "label": "msg",
                "value": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`"
              },
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "textExpressionMode": "text"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "selectedStep": "{label: \"msg\",value: \"`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`\"}",
              "gotoStepId": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`",
              "handleLimit": false,
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "firstEnter": true
            }
          },
          {
            "id": "30398d3d-738d-4fbb-8a1b-26b0b3e706a3",
            "label": "msg",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "ff1b299e-5c4c-4ea7-aa38-350f1f0d9a3e",
                  "condition": ""
                },
                {
                  "id": "__timeout__",
                  "label": "timeout",
                  "stepId": "77e0d9e5-9b28-47b1-8dcc-532746c062f7",
                  "condition": "processTimeout"
                },
                {
                  "id": "__error__",
                  "label": "error",
                  "stepId": "364659f5-a761-40b3-bd90-37274e9afc48",
                  "condition": "processError"
                }
              ],
              "medias": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-request-response"
                },
                "name": "msg",
                "type": "session"
              },
              "videoSrc": {},
              "rateInput": true,
              "sliderMax": "``",
              "sliderMin": "``",
              "dataOutput": {
                "checkbox": [
                  {
                    "label": "string",
                    "value": "string"
                  }
                ],
                "checkboxText": "String"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "sliderStep": "``",
              "sliderType": "single",
              "sliderUnit": "``",
              "__codeModes": {},
              "creditTerms": {},
              "savedStepId": "30398d3d-738d-4fbb-8a1b-26b0b3e706a3",
              "showBotIcon": false,
              "textMessage": "`test`",
              "videoPoster": {},
              "conversation": {},
              "processError": true,
              "radioDefault": "`No option`",
              "radioOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "signatureBtn": "``",
              "workingHours": {
                "to": null,
                "from": null,
                "timezone": {
                  "id": "1",
                  "zone": "GMT+00:00"
                },
                "timeFormat": "12"
              },
              "additionalCss": "",
              "hasCancelExit": false,
              "skipStepLogic": false,
              "textInputType": "text",
              "videoAutoplay": true,
              "videoBtnLabel": "``",
              "videoUsedLink": false,
              "additionalHtml": "",
              "autoSuggestion": {
                "input": false,
                "isExtraLeg": false
              },
              "creditBtnLabel": "``",
              "geolocationBtn": "``",
              "geolocationLat": "``",
              "geolocationLng": "``",
              "inputComponent": "`checkbox`",
              "isPrivateFiles": false,
              "optionsButtons": [
                {
                  "label": "``",
                  "value": "``",
                  "buttonStyle": "default"
                }
              ],
              "processTimeout": true,
              "videoStartTime": "0",
              "carouselOptions": [
                {
                  "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
                  "image": {},
                  "title": "``",
                  "value": "``",
                  "video": {},
                  "hasModal": false,
                  "modalType": "default-modal",
                  "buttonLabel": "``",
                  "buttonStyle": "default",
                  "description": "``",
                  "childWindowType": "html",
                  "additionalContentLink": {},
                  "showModalButtonInUserResponse": true
                }
              ],
              "checkboxDefault": [],
              "checkboxOptions": [
                {
                  "label": "`test`",
                  "value": "`1`",
                  "vforkey": "348dd83c-55f5-438b-a450-2b568ff87cd8"
                },
                {
                  "label": "`test2`",
                  "value": "`2`",
                  "vforkey": "c4aa63e0-0588-4d62-860c-7cc066e8e09b"
                },
                {
                  "label": "`test3`",
                  "value": "`3`",
                  "vforkey": "cdb39462-d4ef-4614-bdf2-cf40a5495ef5"
                },
                {
                  "label": "`test4`",
                  "value": "`4`",
                  "vforkey": "661d2e1f-7db4-46f7-81bc-3fc63486c952"
                }
              ],
              "customVariables": [],
              "dropdownOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratePlaceholder": "``",
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": false,
              "additionalScript": "",
              "creditTermsLabel": "``",
              "customTemplateId": null,
              "datepickerFormat": "`MM-DD-YYYY`",
              "dropdownMultiple": false,
              "sliderDefaultEnd": "``",
              "timepickerFormat": "`auto`",
              "attachmentsNumber": "`0`",
              "optionListOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratingSubmitLabel": "``",
              "scheduleDisableMf": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "ff1b299e-5c4c-4ea7-aa38-350f1f0d9a3e",
                "condition": ""
              },
              "videoShowInThread": true,
              "autoSuggestionType": "`emty`",
              "customTemplateType": "`vue`",
              "ratingDiscardLabel": "``",
              "sliderCustomLabels": [
                {
                  "label": "``",
                  "value": "``"
                },
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "sliderDefaultStart": "``",
              "sliderDefaultValue": "``",
              "sliderUnitPosition": "`start`",
              "userAnswerFunction": "// You have access to checkbox: array, checkboxText: string\nreturn ''",
              "videoTotalDuration": 0,
              "carouselAlternative": {
                "value": "``",
                "buttonLabel": "``",
                "buttonStyle": "default",
                "description": "``"
              },
              "carouselMultiselect": false,
              "dropdownPlaceholder": "``",
              "scheduleButtonLabel": "``",
              "scheduleDisableByMf": false,
              "scheduleOptionItems": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "creditCancelBtnLabel": "``",
              "datepickerBlockDates": false,
              "datepickerStartsFrom": "`0`",
              "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
              "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
              "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
              "geolocationSetDefault": false,
              "scheduleDisableManual": [],
              "sliderUseCustomLabels": false,
              "additionalContentVideo": [],
              "attachmentsAllowChosen": false,
              "carouselCancelBtnLabel": "``",
              "carouselHasAlternative": false,
              "carouselSubmitBtnLabel": "``",
              "customTempalateScripts": [],
              "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
              "textInputCustomPattern": "``",
              "additionalCardvariables": [],
              "attachmentsAllowedTypes": [],
              "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
              "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
              "recordMultimediaOptions": [
                "`audio`",
                "`video`",
                "`screen`",
                "`file`"
              ],
              "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
              "autoSubmitCustomTemplate": true,
              "datepickerBlockedOptions": [],
              "datepickerSuggestedDates": false,
              "scheduleAllowMultiselect": false,
              "videoStartTimeTimestring": "``",
              "autoSuggestionOptionsList": [
                {
                  "text": "``"
                }
              ],
              "customTemplateCompiledCSS": "",
              "scheduleDisableByFunction": false,
              "scheduleDisableByManually": false,
              "datepickerSuggestedOptions": [],
              "datepickerBlockedMergefield": "this.get('')",
              "scheduleMultiselectQuantity": "3",
              "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
              "showCustomComponentInMessage": true,
              "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
              "datepickerSuggestedMergefield": "this.get('')",
              "hideCustomComponentAfterSubmit": false,
              "additionalContentCardChangeType": "`append`",
              "autoSuggestionOptionsMergeField": "this.get('')",
              "customTemplateCSSWrapperClassName": ""
            },
            "outputExample": {
              "checkbox": [
                {
                  "label": "string",
                  "value": "string"
                }
              ],
              "checkboxText": "String"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "requestTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Request Transcript",
                "enabled": true
              },
              "responseTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Response Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "inputComponent": "`checkbox`",
              "textMessage": "`test`",
              "checkboxOptions": "[{label: \"`test`\",value: \"`1`\",vforkey: \"348dd83c-55f5-438b-a450-2b568ff87cd8\"},{label: \"`test2`\",value: \"`2`\",vforkey: \"c4aa63e0-0588-4d62-860c-7cc066e8e09b\"},{label: \"`test3`\",value: \"`3`\",vforkey: \"cdb39462-d4ef-4614-bdf2-cf40a5495ef5\"},{label: \"`test4`\",value: \"`4`\",vforkey: \"661d2e1f-7db4-46f7-81bc-3fc63486c952\"}]",
              "checkboxDefault": "[]",
              "useCustomAnswer": "false",
              "savedStepId": "\"30398d3d-738d-4fbb-8a1b-26b0b3e706a3\"",
              "dataOutput": "{\"checkbox\": [{\"label\": \"string\",\"value\": \"string\"}],\"checkboxText\": \"String\"}",
              "autoSuggestion": "{input: false,isExtraLeg: false}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "processError": true,
              "processTimeout": true,
              "timeoutDuration": "`1h`"
            }
          },
          {
            "id": "364659f5-a761-40b3-bd90-37274e9afc48",
            "label": "EMAILSTEP",
            "icon": "send_email",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "e56b38fd-146f-49f3-b77a-754ca873f9b9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "mode": {
                "label": "Plain text",
                "value": "plain"
              },
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "70d2cd0e-b462-479b-9db3-2d9440c48c20",
                  "condition": ""
                },
                {
                  "id": "__error__",
                  "label": "error",
                  "stepId": "7d8749f4-4541-4498-bbe4-0d35893c2097",
                  "condition": "processError"
                }
              ],
              "ccList": [],
              "toList": [
                "``"
              ],
              "bccList": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "emailstep",
                "type": "session"
              },
              "isReply": false,
              "replyTo": "``",
              "subject": "``",
              "nameFrom": "``",
              "useSource": false,
              "references": [],
              "useThreads": false,
              "__codeModes": {},
              "attachments": [],
              "emailConfig": {
                "accountId": "61781717-a289-435f-b623-c8915ad90753",
                "activated": true,
                "address": "13jvyv9l9ocji6x@stg.botmail.ai",
                "createdAt": "2022-10-25T15:12:20.714Z",
                "id": "ecafb0c8-6516-4541-ad07-d326464ba4b1",
                "inbound": true,
                "label": "13jvyv9l9ocji6x@stg.botmail.ai",
                "outbound": true,
                "type": "botmail",
                "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByOKbc9QYANoaI+rHzzPEagAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMCZO2sYGdvpS4iOV4AgEQgIIBG67rPu6jb1+B+RzgXDURj8v/VInd5Y3Dy/XjvYZhaRcq2pDFdH3VQDjPhV/D7ya3uEUHPTEYQvj3FEJASnyEPTfeb+65daLlbyhs09tcKmN+uExPfQpfSLz53QTDX8QZIa/j7VjZJDKO+FUEPNSFLfhdC+ZG5+pgBluwQWqgNzYUAqRxUjeiJGesQZDob+sPA6EZ+8nz6l/Gbolnsxe1neL2RGahb7bDyJKkjqK54AL7ae2zR19XhpH2cNfcWHDF5HXhtVW2vTuwsPRLtex73D211zG1HnCaxulS7eR7wBSS8eVobmNFFt+qDimPupmPfGN5tACQYMNZWhTPD4+ab9sxXAdnJyyEKiEVin9/hcGjxClJkPTP3W8FkTkAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTVRjNE1UY3hOeTFoTWpnNUxUUXpOV1l0WWpZeU15MWpPRGt4TldGa09UQTNOVE1pTENKMWMyVnlTV1FpT2lKaU1ERmxNVFJtTXkxaE0yRmxMVFE0TmpRdFltUTRNUzFsTmpZek5qRXhOamc0Tm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmpOREJoTVRaa055MHlOR1F5TFRRNE5qY3RPVFExTXkwelltVTJORGM1T0dJNVltSWlMQ0pwWVhRaU9qRTJOalkyTkRVeU56Sjkudm1fdGtSdUtXa3NPVVBnT1VUVHUyekJvbmVFSjhta2E3VWFGMlhNeDJnbw==",
                "mailOptions": [
                  {
                    "accountId": "61781717-a289-435f-b623-c8915ad90753",
                    "activated": true,
                    "address": "13jvyv9l9ocji6x@stg.botmail.ai",
                    "createdAt": "2022-10-25T15:12:20.714Z",
                    "id": "ecafb0c8-6516-4541-ad07-d326464ba4b1",
                    "inbound": true,
                    "label": "13jvyv9l9ocji6x@stg.botmail.ai",
                    "outbound": true,
                    "type": "botmail",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByOKbc9QYANoaI+rHzzPEagAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMCZO2sYGdvpS4iOV4AgEQgIIBG67rPu6jb1+B+RzgXDURj8v/VInd5Y3Dy/XjvYZhaRcq2pDFdH3VQDjPhV/D7ya3uEUHPTEYQvj3FEJASnyEPTfeb+65daLlbyhs09tcKmN+uExPfQpfSLz53QTDX8QZIa/j7VjZJDKO+FUEPNSFLfhdC+ZG5+pgBluwQWqgNzYUAqRxUjeiJGesQZDob+sPA6EZ+8nz6l/Gbolnsxe1neL2RGahb7bDyJKkjqK54AL7ae2zR19XhpH2cNfcWHDF5HXhtVW2vTuwsPRLtex73D211zG1HnCaxulS7eR7wBSS8eVobmNFFt+qDimPupmPfGN5tACQYMNZWhTPD4+ab9sxXAdnJyyEKiEVin9/hcGjxClJkPTP3W8FkTkAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTVRjNE1UY3hOeTFoTWpnNUxUUXpOV1l0WWpZeU15MWpPRGt4TldGa09UQTNOVE1pTENKMWMyVnlTV1FpT2lKaU1ERmxNVFJtTXkxaE0yRmxMVFE0TmpRdFltUTRNUzFsTmpZek5qRXhOamc0Tm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmpOREJoTVRaa055MHlOR1F5TFRRNE5qY3RPVFExTXkwelltVTJORGM1T0dJNVltSWlMQ0pwWVhRaU9qRTJOalkyTkRVeU56Sjkudm1fdGtSdUtXa3NPVVBnT1VUVHUyekJvbmVFSjhta2E3VWFGMlhNeDJnbw=="
                  },
                  {
                    "accountId": "61781717-a289-435f-b623-c8915ad90753",
                    "activated": true,
                    "address": "3sdz069l9smay97@stg.botmail.ai",
                    "createdAt": "2022-10-28T14:56:42.488Z",
                    "id": "c99ce40f-2a32-4982-96d9-f6c0f02e99a4",
                    "inbound": true,
                    "label": "3sdz069l9smay97@stg.botmail.ai",
                    "outbound": true,
                    "type": "botmail",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BDLm/wmS4eD7ge6CcLkdO+gAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMtOJ3GU9XRxelib8YAgEQgIIBGz+eEzN2zsQYBvoHHBS7ycOUyHBtjvxf+6YCLTHM4SxzW7DykD/ZUGVHD+yaMqSvl0GOLVhouqPnw/udqyM7lEYX55MCyqwlkBC/4gKNPcUfjeuxM7dJVLTt7Z9SfqvNDLFGxWgYaKO8u7KyfF2X5zSu+wq1BbIP+FRFK43XabTvW19Q2k4tSvEMUZb9GIRKcws8RqdJsMy0EFpCqDIpTyvDm79jEr3Q1Fb2I+nedr3JSt1ZhAUk6h1wikPYU27X+CbGphUI2JUeUZgu/aZSaA7hIqVstem5DOj8KOnJsaMYN17Lkg3hSCJt3V2lTC2c9mlXIEkL4Xk8vs37HZ8d6gznAyKTb2O5XEyCIZWdj8HWhpUIXTAQ9cjGX40AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTVRjNE1UY3hOeTFoTWpnNUxUUXpOV1l0WWpZeU15MWpPRGt4TldGa09UQTNOVE1pTENKMWMyVnlTV1FpT2lKaU1ERmxNVFJtTXkxaE0yRmxMVFE0TmpRdFltUTRNUzFsTmpZek5qRXhOamc0Tm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmpOREJoTVRaa055MHlOR1F5TFRRNE5qY3RPVFExTXkwelltVTJORGM1T0dJNVltSWlMQ0pwWVhRaU9qRTJOalk1TmpJMk5URjkuWjcwZG5uUjRIaGVLOXNpUURSczJaMUZiSFNNM1I5XzA1a1hNSy15OTVzQQ=="
                  }
                ]
              },
              "hasShortUrl": false,
              "timeoutLeng": {
                "input": "`1 week`",
                "outputMode": "ms"
              },
              "wysiwygText": "``",
              "yourMessage": "``",
              "attachmentsF": [],
              "hasOpenEvent": false,
              "processError": true,
              "stepVariable": "defaultValue",
              "attachmentsFD": [],
              "senderAddress": "``",
              "useManualMode": false,
              "isRequestInput": false,
              "isSelectedStep": true,
              "replyToAddress": "``",
              "selectedStepId": null,
              "customMessageId": "this.get('')",
              "senderSubDomain": "``",
              "yourMessageHtml": "",
              "bounceHandleType": "ignore",
              "differentReplyTo": false,
              "emailPreviewLink": "",
              "emailTemplateStr": "",
              "handleComplaints": false,
              "replyToSubDomain": "``",
              "dynamicRecipients": "// [ \"recipient@domain.com\", \"John Doe <john@doe.com>\" ]\t// (all are 'To')\n   /* or */\n// [ { type: \"to\", recipient: \"recipient@domain.com\" }, { type: \"cc\", recipient: \"John Doe <john@doe.com>\" } ]",
              "emailTemplateData": {},
              "manualEmailConfig": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "70d2cd0e-b462-479b-9db3-2d9440c48c20",
                "condition": ""
              },
              "dynamicAttachments": "",
              "ignoreOtherBounces": true,
              "hasUrlClickTracking": false,
              "hasDynamicRecipients": false,
              "hasDynamicAttachments": false,
              "dynamicExitsArrayStart": 7,
              "isEmailInheritableStep": true,
              "__replyCollapsibleState": {
                "isOpen": true
              },
              "__bounceCollapsibleState": {
                "isOpen": true
              },
              "__messageCollapsibleState": {
                "isOpen": true
              },
              "__accountsCollapsibleState": {
                "isOpen": true,
                "_schemaValidators": {
                  "emailConfig": "!_.isEmpty(value)"
                }
              },
              "__responseCollapsibleState": {
                "isOpen": true
              },
              "emailTemplateMergeFieldsStr": "",
              "__recipientsCollapsibleState": {
                "isOpen": true
              }
            },
            "outputExample": {
              "allResponses": [],
              "latestResponse": {
                "tag": {
                  "contents": "",
                  "attributes": {
                    "id": "",
                    "title": ""
                  }
                },
                "link": "",
                "type": "",
                "value": "",
                "datetime": "",
                "messageId": "",
                "eventSender": {
                  "name": "",
                  "email": ""
                }
              },
              "outgoingMessage": {
                "sender": {
                  "name": "",
                  "address": ""
                },
                "beacons": [],
                "content": {
                  "html": "",
                  "plain": "",
                  "trimmedHtml": "",
                  "trimmedText": ""
                },
                "subject": {
                  "text": "",
                  "trimmed": ""
                },
                "datetime": "",
                "inReplyTo": "",
                "messageId": "",
                "timestamp": "",
                "recipients": {
                  "cc": [],
                  "to": [],
                  "bcc": []
                },
                "references": [],
                "attachments": []
              }
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "transcript": {
                "tags": [],
                "type": "transcript",
                "label": "transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "__accountsCollapsibleState": "{\"isOpen\": true,\"_schemaValidators\": {\"emailConfig\": \"!_.isEmpty(value)\"}}",
              "useManualMode": "false",
              "emailConfig": "{\"label\":\"3sdz069l9smay97@stg.botmail.ai\",\"accountId\":\"61781717-a289-435f-b623-c8915ad90753\",\"activated\":true,\"address\":\"3sdz069l9smay97@stg.botmail.ai\",\"createdAt\":\"2022-10-28T14:56:42.488Z\",\"id\":\"c99ce40f-2a32-4982-96d9-f6c0f02e99a4\",\"inbound\":true,\"outbound\":true,\"type\":\"botmail\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BDLm/wmS4eD7ge6CcLkdO+gAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMtOJ3GU9XRxelib8YAgEQgIIBGz+eEzN2zsQYBvoHHBS7ycOUyHBtjvxf+6YCLTHM4SxzW7DykD/ZUGVHD+yaMqSvl0GOLVhouqPnw/udqyM7lEYX55MCyqwlkBC/4gKNPcUfjeuxM7dJVLTt7Z9SfqvNDLFGxWgYaKO8u7KyfF2X5zSu+wq1BbIP+FRFK43XabTvW19Q2k4tSvEMUZb9GIRKcws8RqdJsMy0EFpCqDIpTyvDm79jEr3Q1Fb2I+nedr3JSt1ZhAUk6h1wikPYU27X+CbGphUI2JUeUZgu/aZSaA7hIqVstem5DOj8KOnJsaMYN17Lkg3hSCJt3V2lTC2c9mlXIEkL4Xk8vs37HZ8d6gznAyKTb2O5XEyCIZWdj8HWhpUIXTAQ9cjGX40AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTVRjNE1UY3hOeTFoTWpnNUxUUXpOV1l0WWpZeU15MWpPRGt4TldGa09UQTNOVE1pTENKMWMyVnlTV1FpT2lKaU1ERmxNVFJtTXkxaE0yRmxMVFE0TmpRdFltUTRNUzFsTmpZek5qRXhOamc0Tm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmpOREJoTVRaa055MHlOR1F5TFRRNE5qY3RPVFExTXkwelltVTJORGM1T0dJNVltSWlMQ0pwWVhRaU9qRTJOalk1TmpJMk5URjkuWjcwZG5uUjRIaGVLOXNpUURSczJaMUZiSFNNM1I5XzA1a1hNSy15OTVzQQ==\",\"mailOptions\":[{\"accountId\":\"61781717-a289-435f-b623-c8915ad90753\",\"activated\":true,\"address\":\"13jvyv9l9ocji6x@stg.botmail.ai\",\"createdAt\":\"2022-10-25T15:12:20.714Z\",\"id\":\"ecafb0c8-6516-4541-ad07-d326464ba4b1\",\"inbound\":true,\"label\":\"13jvyv9l9ocji6x@stg.botmail.ai\",\"outbound\":true,\"type\":\"botmail\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByOKbc9QYANoaI+rHzzPEagAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMCZO2sYGdvpS4iOV4AgEQgIIBG67rPu6jb1+B+RzgXDURj8v/VInd5Y3Dy/XjvYZhaRcq2pDFdH3VQDjPhV/D7ya3uEUHPTEYQvj3FEJASnyEPTfeb+65daLlbyhs09tcKmN+uExPfQpfSLz53QTDX8QZIa/j7VjZJDKO+FUEPNSFLfhdC+ZG5+pgBluwQWqgNzYUAqRxUjeiJGesQZDob+sPA6EZ+8nz6l/Gbolnsxe1neL2RGahb7bDyJKkjqK54AL7ae2zR19XhpH2cNfcWHDF5HXhtVW2vTuwsPRLtex73D211zG1HnCaxulS7eR7wBSS8eVobmNFFt+qDimPupmPfGN5tACQYMNZWhTPD4+ab9sxXAdnJyyEKiEVin9/hcGjxClJkPTP3W8FkTkAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTVRjNE1UY3hOeTFoTWpnNUxUUXpOV1l0WWpZeU15MWpPRGt4TldGa09UQTNOVE1pTENKMWMyVnlTV1FpT2lKaU1ERmxNVFJtTXkxaE0yRmxMVFE0TmpRdFltUTRNUzFsTmpZek5qRXhOamc0Tm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmpOREJoTVRaa055MHlOR1F5TFRRNE5qY3RPVFExTXkwelltVTJORGM1T0dJNVltSWlMQ0pwWVhRaU9qRTJOalkyTkRVeU56Sjkudm1fdGtSdUtXa3NPVVBnT1VUVHUyekJvbmVFSjhta2E3VWFGMlhNeDJnbw==\"},{\"accountId\":\"61781717-a289-435f-b623-c8915ad90753\",\"activated\":true,\"address\":\"3sdz069l9smay97@stg.botmail.ai\",\"createdAt\":\"2022-10-28T14:56:42.488Z\",\"id\":\"c99ce40f-2a32-4982-96d9-f6c0f02e99a4\",\"inbound\":true,\"label\":\"3sdz069l9smay97@stg.botmail.ai\",\"outbound\":true,\"type\":\"botmail\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BDLm/wmS4eD7ge6CcLkdO+gAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMtOJ3GU9XRxelib8YAgEQgIIBGz+eEzN2zsQYBvoHHBS7ycOUyHBtjvxf+6YCLTHM4SxzW7DykD/ZUGVHD+yaMqSvl0GOLVhouqPnw/udqyM7lEYX55MCyqwlkBC/4gKNPcUfjeuxM7dJVLTt7Z9SfqvNDLFGxWgYaKO8u7KyfF2X5zSu+wq1BbIP+FRFK43XabTvW19Q2k4tSvEMUZb9GIRKcws8RqdJsMy0EFpCqDIpTyvDm79jEr3Q1Fb2I+nedr3JSt1ZhAUk6h1wikPYU27X+CbGphUI2JUeUZgu/aZSaA7hIqVstem5DOj8KOnJsaMYN17Lkg3hSCJt3V2lTC2c9mlXIEkL4Xk8vs37HZ8d6gznAyKTb2O5XEyCIZWdj8HWhpUIXTAQ9cjGX40AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTVRjNE1UY3hOeTFoTWpnNUxUUXpOV1l0WWpZeU15MWpPRGt4TldGa09UQTNOVE1pTENKMWMyVnlTV1FpT2lKaU1ERmxNVFJtTXkxaE0yRmxMVFE0TmpRdFltUTRNUzFsTmpZek5qRXhOamc0Tm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmpOREJoTVRaa055MHlOR1F5TFRRNE5qY3RPVFExTXkwelltVTJORGM1T0dJNVltSWlMQ0pwWVhRaU9qRTJOalk1TmpJMk5URjkuWjcwZG5uUjRIaGVLOXNpUURSczJaMUZiSFNNM1I5XzA1a1hNSy15OTVzQQ==\"}]}",
              "nameFrom": "``",
              "differentReplyTo": "false",
              "senderAddress": "``",
              "senderSubDomain": "``",
              "replyToAddress": "``",
              "replyToSubDomain": "``",
              "__replyCollapsibleState": "{\"isOpen\": true}",
              "isRequestInput": "false",
              "replyTo": "``",
              "references": "[]",
              "isReply": "false",
              "isSelectedStep": "true",
              "__recipientsCollapsibleState": "{\"isOpen\": true}",
              "toList": "[``]",
              "ccList": "[]",
              "bccList": "[]",
              "hasDynamicRecipients": "false",
              "dynamicRecipients": "[]",
              "__messageCollapsibleState": "{\"isOpen\": true}",
              "subject": "``",
              "yourMessage": "``",
              "yourMessageHtml": "``",
              "mode": "{\"label\":\"Plain text\",\"value\":\"plain\"}",
              "emailTemplateMergeFieldsStr": "``",
              "attachments": "[]",
              "attachmentsFD": "[]",
              "attachmentsF": "[]",
              "dynamicAttachments": "[]",
              "hasDynamicAttachments": "false",
              "useSource": "false",
              "__responseCollapsibleState": "{\"isOpen\": true}",
              "useThreads": "false",
              "timeoutLeng": "{input: `1 week`,outputMode: \"ms\"}",
              "hasOpenEvent": "false",
              "hasUrlClickTracking": "false",
              "stepVariable": "\"defaultValue\"",
              "handleComplaints": "false",
              "bounceHandleType": "\"ignore\"",
              "ignoreOtherBounces": "true",
              "customMessageId": "this.get('')",
              "__bounceCollapsibleState": "{\"isOpen\": true}",
              "isEmailInheritableStep": "true",
              "processError": true
            }
          },
          {
            "id": "3b9e94b9-cb00-4304-8c6b-3e2107b2e642",
            "label": "jump3",
            "icon": "goto",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [],
              "firstEnter": true,
              "gotoStepId": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`",
              "__codeModes": {},
              "handleLimit": false,
              "selectedStep": {
                "label": "msg",
                "value": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`"
              },
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "textExpressionMode": "text"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "selectedStep": "{label: \"msg\",value: \"`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`\"}",
              "gotoStepId": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`",
              "handleLimit": false,
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "firstEnter": true
            }
          },
          {
            "id": "44b192a2-5d8f-43bb-91ff-b565fbb4275d",
            "label": "dayTimeAfternoon",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "4c62ca42-aa1f-480f-a540-5a3be90c8979",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "eca7fa02-3ab8-41d2-ae21-2e6ef7a43476",
                  "valueType": "string",
                  "variableName": {
                    "type": "session",
                    "label": "data.dayTime"
                  },
                  "variableValue": "`Afternoon`"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "outputExample": {
              "undefined": "`Afternoon`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "variables": "[{vforkey: \"eca7fa02-3ab8-41d2-ae21-2e6ef7a43476\",valueType: \"string\",variableName: {type: \"session\",label: \"data.dayTime\"},variableValue: `Afternoon`}]",
              "isInvalidChangeDataStep": "false",
              "changeDataStepErrors": "[]",
              "mountedFlag": "true",
              "additionalMergeFields": "[]",
              "processError": false
            }
          },
          {
            "id": "4c62ca42-aa1f-480f-a540-5a3be90c8979",
            "label": "jump2",
            "icon": "goto",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [],
              "firstEnter": true,
              "gotoStepId": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`",
              "__codeModes": {},
              "handleLimit": false,
              "selectedStep": {
                "label": "msg",
                "value": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`"
              },
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "textExpressionMode": "text"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "selectedStep": "{label: \"msg\",value: \"`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`\"}",
              "gotoStepId": "`30398d3d-738d-4fbb-8a1b-26b0b3e706a3`",
              "handleLimit": false,
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "firstEnter": true
            }
          },
          {
            "id": "6062a179-4c53-4410-acac-f25c22bb68f7",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "6fa3f7e0-241e-40c9-9d02-50872c5c7b89",
            "label": "dayTimeNight",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "3b9e94b9-cb00-4304-8c6b-3e2107b2e642",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "eca7fa02-3ab8-41d2-ae21-2e6ef7a43476",
                  "valueType": "string",
                  "variableName": {
                    "type": "session",
                    "label": "data.dayTime"
                  },
                  "variableValue": "`Night`"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "outputExample": {
              "undefined": "`Night`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "variables": "[{vforkey: \"eca7fa02-3ab8-41d2-ae21-2e6ef7a43476\",valueType: \"string\",variableName: {type: \"session\",label: \"data.dayTime\"},variableValue: `Night`}]",
              "isInvalidChangeDataStep": "false",
              "changeDataStepErrors": "[]",
              "mountedFlag": "true",
              "additionalMergeFields": "[]",
              "processError": false
            }
          },
          {
            "id": "70d2cd0e-b462-479b-9db3-2d9440c48c20",
            "label": "SMSSTEP",
            "icon": "text",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-left",
            "type": "7cbb0341-55c0-42b8-962d-a8721585e89d",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "6062a179-4c53-4410-acac-f25c22bb68f7",
                  "condition": ""
                },
                {
                  "id": "__error__",
                  "label": "error",
                  "stepId": "b3ca5de9-8c79-4eb9-94e6-dc1953b204b0",
                  "condition": "processError"
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "conversationType": "sms",
                  "conversationStarter": true
                },
                "name": "smsstep",
                "type": "session"
              },
              "options": [
                {
                  "label": "+18302126912",
                  "value": "`+18302126912`",
                  "custom": true
                },
                {
                  "fromProvider": true,
                  "id": "+18302126912",
                  "label": "+18302126912 (+1 830-212-6912)",
                  "value": "`+18302126912`"
                }
              ],
              "timeout": "`24h`",
              "useFiles": false,
              "botNumber": "`+18302126912`",
              "__codeModes": {},
              "activeTabId": "single",
              "checkStatus": false,
              "isSingleExit": true,
              "processError": true,
              "randomGroups": [
                {
                  "medias": [],
                  "weight": "`1`",
                  "message": "``",
                  "vforkey": "64422b82-6870-4afc-a56a-c74104db6701",
                  "weightLabel": "Weight (50%)"
                },
                {
                  "medias": [],
                  "weight": "`1`",
                  "message": "``",
                  "vforkey": "107961ed-5e89-430d-91ae-a9c3fdada3c3",
                  "weightLabel": "Weight (50%)"
                }
              ],
              "endUserNumber": "``",
              "singleMessage": {
                "medias": [],
                "message": "``",
                "useFiles": false
              },
              "conditionGroups": [
                {
                  "label": "`New condition 1`",
                  "rules": [
                    {
                      "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "``",
                      "secondValue": "``",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "medias": [],
                  "weight": "`1`",
                  "dataOut": "``",
                  "message": "``",
                  "useFiles": false,
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              ],
              "conversationMeta": "",
              "noConditionMedias": [],
              "noConditionMessage": "``",
              "continueConversation": false,
              "hasNoConditionDataOut": false,
              "conditionRuleHasDataOut": false
            },
            "outputExample": {
              "botNumber": "+17205555555",
              "transcriptId": "",
              "endUserNumber": "+17205555551",
              "lastTranscriptId": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "transcript": {
                "tags": [],
                "type": "transcript",
                "label": "Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "activeTabId": "\"single\"",
              "singleMessage": "{medias: [],message: ``,useFiles: false}",
              "continueConversation": "false",
              "conversationMeta": "\"\"",
              "botNumber": "`+18302126912`",
              "endUserNumber": "``",
              "options": "[{label: \"+18302126912\",value: \"`+18302126912`\",custom: true},{fromProvider: true,id: \"+18302126912\",label: \"+18302126912 (+1 830-212-6912)\",value: \"`+18302126912`\"}]",
              "checkStatus": "false",
              "timeout": "`24h`",
              "processError": true
            }
          },
          {
            "id": "77e0d9e5-9b28-47b1-8dcc-532746c062f7",
            "label": "Greeting Day",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "username",
                  "label": "username",
                  "stepId": "02849481-c787-441c-9390-1bb4032c1a9f",
                  "dynamic": true
                }
              ],
              "flowId": "fbcbe985-d347-41a1-9bf5-bd8690c86b0f",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "greetingDay",
                "type": "shared"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [
                "username"
              ],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [
                {
                  "name": "dayTime",
                  "value": "``"
                },
                {
                  "name": "sessionId",
                  "value": "``"
                }
              ],
              "processTimeout": false,
              "flowIdToTrigger": "e2d5c8af-c028-4407-8681-234fe5d483ca",
              "targetAccountId": "",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "username",
                  "vforkey": "df1da399-bb04-45db-92f3-22057def4770"
                }
              ],
              "customSubFlowName": "`weatherbot/greeting`",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "username",
                "label": "username",
                "stepId": "02849481-c787-441c-9390-1bb4032c1a9f",
                "dynamic": true
              },
              "isUseCustomSubflow": false,
              "flowToGetParamsFrom": "fbcbe985-d347-41a1-9bf5-bd8690c86b0f",
              "customFlowParameters": [
                {
                  "name": "dayTime",
                  "value": "`${await this.mergeFields['data'].get({path: 'dayTime'})}`",
                  "vforkey": "0b758e7e-09af-47c1-aab5-b436430c37c1"
                },
                {
                  "name": "sessionId",
                  "value": "`${await this.mergeFields['rwcEntry'].get({path: 'sessionId'})}`",
                  "vforkey": "7fbef750-3793-4830-b381-b5a004c0f7f3"
                }
              ],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0,
              "customTriggerTargetAccountId": "``"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "flowParameters": "{\"dayTime\": ``,\"sessionId\": ``}",
              "customFlowParameters": "{\"dayTime\": `${await this.mergeFields['data'].get({path: 'dayTime'})}`,\"sessionId\": `${await this.mergeFields['rwcEntry'].get({path: 'sessionId'})}`}",
              "flowId": "\"fbcbe985-d347-41a1-9bf5-bd8690c86b0f\"",
              "flowToGetParamsFrom": "\"fbcbe985-d347-41a1-9bf5-bd8690c86b0f\"",
              "customSubFlowName": "`weatherbot/greeting`",
              "isUseCustomSubflow": false,
              "flowIdToTrigger": "\"e2d5c8af-c028-4407-8681-234fe5d483ca\"",
              "paramsProcessType": "\"manually\"",
              "targetAccountId": "\"\"",
              "isAsync": "true",
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "customTriggerTargetAccountId": "``",
              "processError": false,
              "processTimeout": false,
              "timeoutDuration": "`30 sec`"
            }
          },
          {
            "id": "7d8749f4-4541-4498-bbe4-0d35893c2097",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "840f39b3-2805-4615-b372-83505885ecd6",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "910a874d-941b-4142-a1ef-a128d0fb85eb",
            "label": "dayTimeMorning",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "22cec524-b033-4a97-9db9-3cc09336e82b",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "eca7fa02-3ab8-41d2-ae21-2e6ef7a43476",
                  "valueType": "string",
                  "variableName": {
                    "type": "session",
                    "label": "data.dayTime"
                  },
                  "variableValue": "`Morning`"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "outputExample": {
              "undefined": "`Morning`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "variables": "[{vforkey: \"eca7fa02-3ab8-41d2-ae21-2e6ef7a43476\",valueType: \"string\",variableName: {type: \"session\",label: \"data.dayTime\"},variableValue: `Morning`}]",
              "isInvalidChangeDataStep": "false",
              "changeDataStepErrors": "[]",
              "mountedFlag": "true",
              "additionalMergeFields": "[]",
              "processError": false
            }
          },
          {
            "id": "a2c528a3-e052-4bd9-a93b-37f0d8ee830f",
            "label": "data",
            "icon": "create_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "1683b915-08e7-419c-b4b1-b99cdce7717b",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "e6cb0a56-25dd-4c1f-98ea-70525aa40e87",
                  "condition": ""
                }
              ],
              "jsonE": {},
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "data",
                "type": "session"
              },
              "valueType": "string",
              "variables": [
                {
                  "vforkey": "a1576f04-d87f-4138-a147-191b1c5ef34b",
                  "valueType": "string",
                  "variableName": "dayTime",
                  "variableValue": "`Day`"
                }
              ],
              "mergeField": "",
              "nativeJson": {},
              "simpleData": "",
              "__codeModes": {},
              "virtualJson": [],
              "processError": false,
              "selectedMode": "Extended",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "09495fed-66b3-497a-a3cf-cafd6d332cb2",
                "condition": ""
              },
              "virtualJsonEditable": []
            },
            "outputExample": {
              "dayTime": "`Day`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "selectedMode": "\"Extended\"",
              "simpleData": "",
              "valueType": "\"string\"",
              "mergeField": "\"\"",
              "variables": "[{vforkey: \"a1576f04-d87f-4138-a147-191b1c5ef34b\",valueType: \"string\",variableName: \"dayTime\",variableValue: `Day`}]",
              "jsonE": "{}",
              "nativeJson": "{}",
              "virtualJson": "[]",
              "virtualJsonEditable": "[]",
              "processError": false
            }
          },
          {
            "id": "b3ca5de9-8c79-4eb9-94e6-dc1953b204b0",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "c3481b3b-f203-448f-9fd3-0c736f6c8502",
            "label": "Log",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "a2c528a3-e052-4bd9-a93b-37f0d8ee830f"
                }
              ],
              "logData": "{}",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`Showing ${await this.mergeFields['rwcEntry'].get({path: 'userTimezone.name'})} ${await this.mergeFields['rwcEntry'].get({path: 'accountId'})}`",
              "__codeModes": {}
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`Showing ${await this.mergeFields['rwcEntry'].get({path: 'userTimezone.name'})} ${await this.mergeFields['rwcEntry'].get({path: 'accountId'})}`",
              "logData": "{}"
            }
          },
          {
            "id": "c47d0418-4514-4a21-905a-eb5cf8c0c03f",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "e6cb0a56-25dd-4c1f-98ea-70525aa40e87",
            "label": "Get greeting tz",
            "icon": "clock",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "2e743d60-345a-4c9b-997e-ed691724bfa2",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "f8e04583-6468-42c2-8d1d-169886b4f088",
                  "label": "Morning",
                  "stepId": "910a874d-941b-4142-a1ef-a128d0fb85eb",
                  "dynamic": true
                },
                {
                  "id": "071e144b-c265-4729-9c3a-5296b63889c4",
                  "label": "Afternoo...",
                  "stepId": "44b192a2-5d8f-43bb-91ff-b565fbb4275d",
                  "dynamic": true
                },
                {
                  "id": "7319ea0b-3b9f-4671-9771-dbdc60fed2bf",
                  "label": "Night",
                  "stepId": "6fa3f7e0-241e-40c9-9d02-50872c5c7b89",
                  "dynamic": true
                },
                {
                  "id": "2c51f1d3-f35c-4ec0-ab30-d88c4db770b3",
                  "label": "else",
                  "stepId": "30398d3d-738d-4fbb-8a1b-26b0b3e706a3"
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "name": "getGreetingTz",
                "type": "session"
              },
              "timeZone": {
                "value": "`${await this.mergeFields['incomingChatRwc'].get({path: 'userTimezone.name'})}`"
              },
              "__codeModes": {
                "timeZone": "{\"value\": `${await this.mergeFields['rwcEntry'].get({path: 'userTimezone.name'})}`}",
                "routingLegsList": "[{\"vforkey\": \"f8e04583-6468-42c2-8d1d-169886b4f088\",\"weeklyList\": [{\"vforkey\": \"d1dec80a-b243-48fd-8094-c5a57feb7669\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"11:59\",\"from\": \"07:00\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"}],\"routingLegLabel\": \"Morning\",\"specificDatesList\": []},{\"vforkey\": \"071e144b-c265-4729-9c3a-5296b63889c4\",\"weeklyList\": [{\"vforkey\": \"d270cf6e-501d-4c79-a78d-1334fc1b4d68\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"17:59\",\"from\": \"12:00\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"}],\"routingLegLabel\": \"Afternoon\",\"specificDatesList\": []},{\"vforkey\": \"7319ea0b-3b9f-4671-9771-dbdc60fed2bf\",\"weeklyList\": [{\"vforkey\": \"84ccf11a-3e4d-428c-a47a-efa6f8122348\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"23:59\",\"from\": \"18:00\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"},{\"vforkey\": \"7e9ee6c1-feac-4cb2-b97d-5d7881ea585c\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"06:59\",\"from\": \"\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"}],\"routingLegLabel\": \"Night\",\"specificDatesList\": []}]"
              },
              "processError": false,
              "routingLegsList": [
                {
                  "vforkey": "f8e04583-6468-42c2-8d1d-169886b4f088",
                  "weeklyList": [
                    {
                      "vforkey": "d1dec80a-b243-48fd-8094-c5a57feb7669",
                      "weekDays": [
                        {
                          "label": "Mon",
                          "value": "1"
                        },
                        {
                          "label": "Tue",
                          "value": "2"
                        },
                        {
                          "label": "Wed",
                          "value": "3"
                        },
                        {
                          "label": "Thu",
                          "value": "4"
                        },
                        {
                          "label": "Fri",
                          "value": "5"
                        },
                        {
                          "label": "Sat",
                          "value": "6"
                        },
                        {
                          "label": "Sun",
                          "value": "7"
                        }
                      ],
                      "periodOfTime": [
                        {
                          "to": "11:59",
                          "from": "07:00"
                        }
                      ],
                      "weeklyTimePeriodTypeOfDay": "Specific Time"
                    }
                  ],
                  "routingLegLabel": "Morning",
                  "specificDatesList": []
                },
                {
                  "vforkey": "071e144b-c265-4729-9c3a-5296b63889c4",
                  "weeklyList": [
                    {
                      "vforkey": "d270cf6e-501d-4c79-a78d-1334fc1b4d68",
                      "weekDays": [
                        {
                          "label": "Mon",
                          "value": "1"
                        },
                        {
                          "label": "Tue",
                          "value": "2"
                        },
                        {
                          "label": "Wed",
                          "value": "3"
                        },
                        {
                          "label": "Thu",
                          "value": "4"
                        },
                        {
                          "label": "Fri",
                          "value": "5"
                        },
                        {
                          "label": "Sat",
                          "value": "6"
                        },
                        {
                          "label": "Sun",
                          "value": "7"
                        }
                      ],
                      "periodOfTime": [
                        {
                          "to": "17:59",
                          "from": "12:00"
                        }
                      ],
                      "weeklyTimePeriodTypeOfDay": "Specific Time"
                    }
                  ],
                  "routingLegLabel": "Afternoon",
                  "specificDatesList": []
                },
                {
                  "vforkey": "7319ea0b-3b9f-4671-9771-dbdc60fed2bf",
                  "weeklyList": [
                    {
                      "vforkey": "84ccf11a-3e4d-428c-a47a-efa6f8122348",
                      "weekDays": [
                        {
                          "label": "Mon",
                          "value": "1"
                        },
                        {
                          "label": "Tue",
                          "value": "2"
                        },
                        {
                          "label": "Wed",
                          "value": "3"
                        },
                        {
                          "label": "Thu",
                          "value": "4"
                        },
                        {
                          "label": "Fri",
                          "value": "5"
                        },
                        {
                          "label": "Sat",
                          "value": "6"
                        },
                        {
                          "label": "Sun",
                          "value": "7"
                        }
                      ],
                      "periodOfTime": [
                        {
                          "to": "23:59",
                          "from": "18:00"
                        }
                      ],
                      "weeklyTimePeriodTypeOfDay": "Specific Time"
                    },
                    {
                      "vforkey": "7e9ee6c1-feac-4cb2-b97d-5d7881ea585c",
                      "weekDays": [
                        {
                          "label": "Mon",
                          "value": "1"
                        },
                        {
                          "label": "Tue",
                          "value": "2"
                        },
                        {
                          "label": "Wed",
                          "value": "3"
                        },
                        {
                          "label": "Thu",
                          "value": "4"
                        },
                        {
                          "label": "Fri",
                          "value": "5"
                        },
                        {
                          "label": "Sat",
                          "value": "6"
                        },
                        {
                          "label": "Sun",
                          "value": "7"
                        }
                      ],
                      "periodOfTime": [
                        {
                          "to": "06:59",
                          "from": ""
                        }
                      ],
                      "weeklyTimePeriodTypeOfDay": "Specific Time"
                    }
                  ],
                  "routingLegLabel": "Night",
                  "specificDatesList": []
                }
              ],
              "skipStepLogicExit": {
                "id": "f8e04583-6468-42c2-8d1d-169886b4f088",
                "label": "Morning",
                "stepId": "6c2024c3-fad7-4e46-8ea0-b6cf63f6764a",
                "dynamic": true
              },
              "dynamicExitsArrayStart": 0
            },
            "outputExample": {
              "nowDate": "2018-01-04 09:38",
              "nowDateInMS": 1515051480000
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "routingLegsList": "[{\"vforkey\": \"f8e04583-6468-42c2-8d1d-169886b4f088\",\"weeklyList\": [{\"vforkey\": \"d1dec80a-b243-48fd-8094-c5a57feb7669\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"11:59\",\"from\": \"07:00\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"}],\"routingLegLabel\": \"Morning\",\"specificDatesList\": []},{\"vforkey\": \"071e144b-c265-4729-9c3a-5296b63889c4\",\"weeklyList\": [{\"vforkey\": \"d270cf6e-501d-4c79-a78d-1334fc1b4d68\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"17:59\",\"from\": \"12:00\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"}],\"routingLegLabel\": \"Afternoon\",\"specificDatesList\": []},{\"vforkey\": \"7319ea0b-3b9f-4671-9771-dbdc60fed2bf\",\"weeklyList\": [{\"vforkey\": \"84ccf11a-3e4d-428c-a47a-efa6f8122348\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"23:59\",\"from\": \"18:00\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"},{\"vforkey\": \"7e9ee6c1-feac-4cb2-b97d-5d7881ea585c\",\"weekDays\": [{\"label\": \"Mon\",\"value\": \"1\"},{\"label\": \"Tue\",\"value\": \"2\"},{\"label\": \"Wed\",\"value\": \"3\"},{\"label\": \"Thu\",\"value\": \"4\"},{\"label\": \"Fri\",\"value\": \"5\"},{\"label\": \"Sat\",\"value\": \"6\"},{\"label\": \"Sun\",\"value\": \"7\"}],\"periodOfTime\": [{\"to\": \"06:59\",\"from\": \"\"}],\"weeklyTimePeriodTypeOfDay\": \"Specific Time\"}],\"routingLegLabel\": \"Night\",\"specificDatesList\": []}]",
              "timeZone": "{\"value\": `${await this.mergeFields['rwcEntry'].get({path: 'userTimezone.name'})}`}",
              "processError": false
            }
          },
          {
            "id": "ff1b299e-5c4c-4ea7-aa38-350f1f0d9a3e",
            "label": "Location",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17",
                  "label": "result",
                  "stepId": "c47d0418-4514-4a21-905a-eb5cf8c0c03f",
                  "dynamic": true
                }
              ],
              "flowId": "a1dba194-f5a6-44df-900d-7b05e75db304",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "location",
                "type": "session"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [
                {
                  "name": "test",
                  "value": "JSON.stringify(await this.mergeFields['msg'].get({path: 'checkbox'}))",
                  "vforkey": "0a15e107-4e06-4616-abf0-1b017b8718b9"
                }
              ],
              "processTimeout": false,
              "flowIdToTrigger": "8c0474fe-bb9f-48c0-8ed3-97e553bfa4f7",
              "targetAccountId": "",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17"
                }
              ],
              "customSubFlowName": "`weatherbot/test`",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17",
                "label": "result",
                "stepId": "c47d0418-4514-4a21-905a-eb5cf8c0c03f",
                "dynamic": true
              },
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "a1dba194-f5a6-44df-900d-7b05e75db304",
              "customFlowParameters": [
                {
                  "name": "test",
                  "value": "JSON.stringify(await this.mergeFields['msg'].get({path: 'checkbox'}))",
                  "vforkey": "0a15e107-4e06-4616-abf0-1b017b8718b9"
                }
              ],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0,
              "customTriggerTargetAccountId": "``"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true,
            "stepInputData": {
              "flowParameters": "{\"test\": JSON.stringify(await this.mergeFields['msg'].get({path: 'checkbox'}))}",
              "customFlowParameters": "{\"test\": JSON.stringify(await this.mergeFields['msg'].get({path: 'checkbox'}))}",
              "flowId": "\"a1dba194-f5a6-44df-900d-7b05e75db304\"",
              "flowToGetParamsFrom": "\"a1dba194-f5a6-44df-900d-7b05e75db304\"",
              "customSubFlowName": "`weatherbot/test`",
              "isUseCustomSubflow": true,
              "flowIdToTrigger": "\"8c0474fe-bb9f-48c0-8ed3-97e553bfa4f7\"",
              "paramsProcessType": "\"manually\"",
              "targetAccountId": "\"\"",
              "isAsync": "true",
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "customTriggerTargetAccountId": "``",
              "processError": false,
              "processTimeout": false,
              "timeoutDuration": "`30 sec`"
            }
          }
        ]
      },
      "29fa0789-4255-4c2c-a53f-4ca3f3c17a16": {
        "position": {
          "x": -556,
          "y": 144
        },
        "steps": [
          {
            "id": "1edf7201-7324-492d-a961-25e5214d610d",
            "label": "checkbox",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "eff12010-4591-44b7-af9d-99a62eb63b6a",
                  "condition": ""
                },
                {
                  "id": "__timeout__",
                  "label": "timeout",
                  "stepId": "e0e2a973-82c2-4974-a895-74b5709bc5ff",
                  "condition": "processTimeout"
                },
                {
                  "id": "__error__",
                  "label": "error",
                  "stepId": "60ca6180-95ad-48fd-b5fa-7922982a8eb9",
                  "condition": "processError"
                }
              ],
              "medias": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-request-response"
                },
                "name": "checkbox",
                "type": "session"
              },
              "videoSrc": {},
              "rateInput": true,
              "sliderMax": "``",
              "sliderMin": "``",
              "dataOutput": {
                "checkbox": [
                  {
                    "label": "string",
                    "value": "string"
                  }
                ],
                "checkboxText": "String"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "sliderStep": "``",
              "sliderType": "single",
              "sliderUnit": "``",
              "__codeModes": {},
              "creditTerms": {},
              "savedStepId": "1edf7201-7324-492d-a961-25e5214d610d",
              "showBotIcon": false,
              "textMessage": "``",
              "videoPoster": {},
              "conversation": {},
              "processError": true,
              "radioDefault": "`No option`",
              "radioOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "signatureBtn": "``",
              "workingHours": {
                "to": null,
                "from": null,
                "timezone": {
                  "id": "1",
                  "zone": "GMT+00:00"
                },
                "timeFormat": "12"
              },
              "additionalCss": "",
              "hasCancelExit": false,
              "skipStepLogic": false,
              "textInputType": "text",
              "videoAutoplay": true,
              "videoBtnLabel": "``",
              "videoUsedLink": false,
              "additionalHtml": "",
              "autoSuggestion": {
                "input": false,
                "isExtraLeg": false
              },
              "creditBtnLabel": "``",
              "geolocationBtn": "``",
              "geolocationLat": "``",
              "geolocationLng": "``",
              "inputComponent": "`checkbox`",
              "isPrivateFiles": false,
              "optionsButtons": [
                {
                  "label": "``",
                  "value": "``",
                  "buttonStyle": "default"
                }
              ],
              "processTimeout": true,
              "videoStartTime": "0",
              "carouselOptions": [
                {
                  "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
                  "image": {},
                  "title": "``",
                  "value": "``",
                  "video": {},
                  "hasModal": false,
                  "modalType": "default-modal",
                  "buttonLabel": "``",
                  "buttonStyle": "default",
                  "description": "``",
                  "childWindowType": "html",
                  "additionalContentLink": {},
                  "showModalButtonInUserResponse": true
                }
              ],
              "checkboxDefault": [],
              "checkboxOptions": [
                {
                  "label": "`aa`",
                  "value": "`1`",
                  "vforkey": "1cf1f6d1-dc45-4aa6-8e6a-b2f522674629"
                },
                {
                  "label": "`ab`",
                  "value": "`2`",
                  "vforkey": "241d2833-6707-4f17-9ccf-02c1cef343d3"
                },
                {
                  "label": "`bc`",
                  "value": "`3`",
                  "vforkey": "09988f3b-b809-46fe-b3a6-01332ee37921"
                },
                {
                  "label": "`aaaa`",
                  "value": "`4`",
                  "vforkey": "bb336d73-cf78-4646-a807-b629f87038ff"
                },
                {
                  "label": "`batata`",
                  "value": "`5`",
                  "vforkey": "6456c4cc-7018-4b66-b1bd-5a51a51e1e38"
                }
              ],
              "customVariables": [],
              "dropdownOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratePlaceholder": "``",
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": false,
              "additionalScript": "",
              "creditTermsLabel": "``",
              "customTemplateId": null,
              "datepickerFormat": "`MM-DD-YYYY`",
              "dropdownMultiple": false,
              "sliderDefaultEnd": "``",
              "timepickerFormat": "`auto`",
              "attachmentsNumber": "`0`",
              "optionListOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratingSubmitLabel": "``",
              "scheduleDisableMf": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "eff12010-4591-44b7-af9d-99a62eb63b6a",
                "condition": ""
              },
              "videoShowInThread": true,
              "autoSuggestionType": "`emty`",
              "customTemplateType": "`vue`",
              "ratingDiscardLabel": "``",
              "sliderCustomLabels": [
                {
                  "label": "``",
                  "value": "``"
                },
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "sliderDefaultStart": "``",
              "sliderDefaultValue": "``",
              "sliderUnitPosition": "`start`",
              "userAnswerFunction": "// You have access to checkbox: array, checkboxText: string\nreturn ''",
              "videoTotalDuration": 0,
              "carouselAlternative": {
                "value": "``",
                "buttonLabel": "``",
                "buttonStyle": "default",
                "description": "``"
              },
              "carouselMultiselect": false,
              "dropdownPlaceholder": "``",
              "scheduleButtonLabel": "``",
              "scheduleDisableByMf": false,
              "scheduleOptionItems": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "creditCancelBtnLabel": "``",
              "datepickerBlockDates": false,
              "datepickerStartsFrom": "`0`",
              "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
              "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
              "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
              "geolocationSetDefault": false,
              "scheduleDisableManual": [],
              "sliderUseCustomLabels": false,
              "additionalContentVideo": [],
              "attachmentsAllowChosen": false,
              "carouselCancelBtnLabel": "``",
              "carouselHasAlternative": false,
              "carouselSubmitBtnLabel": "``",
              "customTempalateScripts": [],
              "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
              "textInputCustomPattern": "``",
              "additionalCardvariables": [],
              "attachmentsAllowedTypes": [],
              "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
              "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
              "recordMultimediaOptions": [
                "`audio`",
                "`video`",
                "`screen`",
                "`file`"
              ],
              "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
              "autoSubmitCustomTemplate": true,
              "datepickerBlockedOptions": [],
              "datepickerSuggestedDates": false,
              "scheduleAllowMultiselect": false,
              "videoStartTimeTimestring": "``",
              "autoSuggestionOptionsList": [
                {
                  "text": "``"
                }
              ],
              "customTemplateCompiledCSS": "",
              "scheduleDisableByFunction": false,
              "scheduleDisableByManually": false,
              "datepickerSuggestedOptions": [],
              "datepickerBlockedMergefield": "this.get('')",
              "scheduleMultiselectQuantity": "3",
              "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
              "showCustomComponentInMessage": true,
              "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
              "datepickerSuggestedMergefield": "this.get('')",
              "hideCustomComponentAfterSubmit": false,
              "additionalContentCardChangeType": "`append`",
              "autoSuggestionOptionsMergeField": "this.get('')",
              "customTemplateCSSWrapperClassName": ""
            },
            "stepInputData": {
              "dataOutput": "{\"checkbox\": [{\"label\": \"string\",\"value\": \"string\"}],\"checkboxText\": \"String\"}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "savedStepId": "\"1edf7201-7324-492d-a961-25e5214d610d\"",
              "textMessage": "``",
              "processError": true,
              "autoSuggestion": "{input: false,isExtraLeg: false}",
              "inputComponent": "`checkbox`",
              "processTimeout": true,
              "checkboxDefault": "[]",
              "checkboxOptions": "[{label: \"`aa`\",value: \"`1`\",vforkey: \"1cf1f6d1-dc45-4aa6-8e6a-b2f522674629\"},{label: \"`ab`\",value: \"`2`\",vforkey: \"241d2833-6707-4f17-9ccf-02c1cef343d3\"},{label: \"`bc`\",value: \"`3`\",vforkey: \"09988f3b-b809-46fe-b3a6-01332ee37921\"},{label: \"`aaaa`\",value: \"`4`\",vforkey: \"bb336d73-cf78-4646-a807-b629f87038ff\"},{label: \"`batata`\",value: \"`5`\",vforkey: \"6456c4cc-7018-4b66-b1bd-5a51a51e1e38\"}]",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": "false"
            },
            "outputExample": {
              "checkbox": [
                {
                  "label": "string",
                  "value": "string"
                }
              ],
              "checkboxText": "String"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "requestTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Request Transcript",
                "enabled": true
              },
              "responseTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Response Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "0aacec6f-1286-4ecc-9ea4-028a337d4535",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "60ca6180-95ad-48fd-b5fa-7922982a8eb9",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "e0e2a973-82c2-4974-a895-74b5709bc5ff",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "eff12010-4591-44b7-af9d-99a62eb63b6a",
            "label": "",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "0aacec6f-1286-4ecc-9ea4-028a337d4535"
                }
              ],
              "logData": "{}",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`${await this.mergeFields['checkbox'].get({path: 'checkbox'})}`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "{}",
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`${await this.mergeFields['checkbox'].get({path: 'checkbox'})}`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          }
        ]
      }
    },
    "deploy": {
      "role": "USER",
      "memory": 1024,
      "timeout": 30,
      "logLevel": "warn"
    },
    "changelog": [
      {
        "date": 1666200913157,
        "text": "Test",
        "version": "1.0.0",
        "flowVersion": 1666970803749
      }
    ],
    "categories": null,
    "annotations": [
      {
        "x": 361,
        "y": 84,
        "id": "ae2486ac-552a-4e6f-ad45-4a21015d9e14",
        "text": "<p>Hello world</p>",
        "type": "text"
      }
    ],
    "description": "",
    "stepTemplates": [
      {
        "id": "e56b38fd-146f-49f3-b77a-754ca873f9b9",
        "version": "1.6.9",
        "cacheVersion": "1d7dafef-e905-41a4-b66e-7dd9f4afed74",
        "label": "Send Message (Email)",
        "icon": "send_email",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-right",
        "description": "Sends an email to specified recipients and optionally handles delivery failure messages or end-user interaction.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Email"
        ],
        "recommended": [
          "76ffa5be-da20-4b21-9fd2-bbe746e53f8f",
          "8f424db3-543b-42ee-b2e9-b0cb9570495c"
        ],
        "tags": [],
        "template": "const axios = require('axios');\nconst htmlMinifierTerser = require('html-minifier-terser');\nconst linkCheck = require('link-check');\nconst joi = require('@hapi/joi');\nconst Storage = require('or-sdk/storage');\nconst Request = require('or-sdk/request');\nconst timestring = require('timestring');\nconst validator = require('html-validator');\nconst cheerio = require('cheerio');\nconst striptags = require('striptags');\nconst { v4: uuid } = require('uuid');\nconst moment = require('moment');\nconst planer = require('planer');\nconst { JSDOM } = require('jsdom');\nconst dom = new JSDOM();\nconst emailjs = require('emailjs');\nconst htmlToText = require('html-to-text');\nconst mimeTypes = require('mime-types');\nconst fetch = require('node-fetch');\n\nconst request = new Request(this);\nconst storage = new Storage(this);\n\nlet key = emailConfig.id;\nlet emailRecord = emailConfig;\nconst iterationCount = this.session.get(`iterations_${this.currentStepId}${this.config.flowId}`) || 0;\nconst iterationDepth = 1;\n\nconst emailRegex = /(mailto:)|[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/i;\nconst linkRegex = /(?:(?:https?|ftp):\\/\\/|\\b(?:[a-z\\d]+\\.))(?:(?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))?\\))+(?:\\((?:[^\\s()<>]+|(?:\\(?:[^\\s()<>]+\\)))?\\)|[^\\d\\s`!()\\[\\]{};:'\".,<>?«»\"\"'']))?/i;\nconst plainLinkRegex = /((((((http|ftp|https):\\/{2})|www\\.)+(([0-9a-z_-]+\\.))|([0-9a-z_-]+@[0-9a-z_-]+\\.)|([0-9a-z_-]+\\.))+(aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mn|mo|mp|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|nom|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ra|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw|arpa)(:[0-9]+)?((\\/([~0-9a-zA-Z\\#\\+\\%@\\.\\/_-]+))?(\\?[0-9a-zA-Z\\+\\%@\\/&\\[\\];=_-]+)?)?))\\b/gi\nconst wysiwygRegex = /<span class=\"or-mf\">((((((http|ftp|https):\\/{2})|www\\.)+(([0-9a-z_-]+\\.))|([0-9a-z_-]+@[0-9a-z_-]+\\.)|([0-9a-z_-]+\\.))+(aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mn|mo|mp|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|nom|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ra|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw|arpa)(:[0-9]+)?((\\/([~0-9a-zA-Z\\#\\+\\%@\\.\\/_-]+))?(\\?[0-9a-zA-Z\\+\\%@\\/&\\[\\];=_-]+)?)?))\\b<\\/span>/gmi\n\n//---------------- report Transcript Event ----------------\n// generate / read transcript id\nconst transcriptId = this.get(`${this.currentStepId}.transcriptId`) || uuid();\nthis.set(`${this.currentStepId}.transcriptId`, transcriptId);\n\nconst report = (direction, params) => {\n  const { transcriptId, previousTranscriptId, botIdentifier, endUserIdentifier } = params;\n  const mediaUrl = _.get(params, 'attachements');\n\n  let reportingObject = {\n    eventId            : transcriptId,\n    botIdentifier      : botIdentifier,\n    channel            : 'Email',\n    toIdentifier         : endUserIdentifier,\n    fromIdentifier       : botIdentifier,\n    fromIdentifierType   : 'Email',\n    fromId               : this.config.flowId,\n    fromType             : 'Bot',\n    toType               : 'Visitor',\n    toIdentifierType     : 'Email',\n    reportingSettingsKey : 'transcript',\n    message            : _.get(params, 'message.text'),\n    media              : _.map(mediaUrl, file => ({\n      fileUrl  : file.location,\n      fileType : 'File'\n    })),\n    previousTranscriptId\n  };\n  \n  return this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\nconst getCurrentMode = () => {\n  if (mode.value) {\n    return mode.value;\n  } else {\n    return mode;\n  }\n}\n\nconst getStepTimeout = () => {\n  try {\n    const timeout = _.isObject(timeoutLeng) ? timestring(_.get(timeoutLeng, 'input'), _.get(timeoutLeng, 'outputMode')) : timeofutLeng;\n    \n    const ranges = {\n        low: 10000,\n        up: 2629800000\n    }\n    \n    if (timeout > ranges.up || timeout < ranges.low) {\n        throw 'invalid timeout: Must be a timestring duration value between 10 s and 1 month'\n    }\n    \n    return timeout;\n  } catch (error) {\n    const err = {\n      name: \"Invalid timeout duration\",\n      code: null,\n      message: `${error}`\n    }\n    throw err\n  }\n}\n\nconst getRemainingTimeout = () => {\n  const stepTimeout = getStepTimeout()\n  \n  if (this.session.timeout >= stepTimeout) {\n    return stepTimeout - (new Date().getTime() - new Date(this.session.startDate).getTime());\n  } else {\n    return this.session.timeout - (new Date().getTime() - new Date(this.session.startDate).getTime());\n  }\n}\n\nconst getSenderAddress = () => {\n  const subDomain = senderSubDomain ? `${senderSubDomain}.` : '';\n  if (emailConfig.type !== 'advanced') return emailConfig.address;\n  return `${senderAddress}@${subDomain}${emailConfig.domain}`;\n};\n\nconst getReplyAddress = () => {\n  const replySubDomain = replyToSubDomain ? `${replyToSubDomain}.` : '';\n  if (emailConfig.type !== 'advanced') return emailRecord.address;\n  return `${replyToAddress}@${replySubDomain}${emailConfig.domain}`;\n};\n\nconst getRecipientsArray = () => {\n  return toList.concat(ccList).concat(bccList)\n    .map(r => r.replace(/.*\\s*<(.+)>/, (match, email) => email))\n    .map(r => r.trim());\n};\n\nconst getFirstRef = () => {\n  const firstRef =  Array.isArray(references) ? references[0] : references.split(' ')[0];\n  return firstRef ? firstRef.replace(/[<>]/g, '') : null;\n};\n\nconst isHtmlContent = () => {\n  if (!mode) return;\n  if (mode.value) {\n    if (mode.value === 'plain') return false;\n  } else {\n    if (mode === 'plain') return false;\n  }\n  return true;\n};\n\nconst isTemplateString = () => {\n  if (mode.value) return mode.value === 'template';\n  return mode === 'template';\n}\n\nconst isHtmlMarkdown = () => {\n  if (mode.value) return mode.value === 'visual';\n  return mode === 'visual';\n}\n\nconst checkAtt = (arr) => {\n  if (arr) {\n    const filtered = arr.filter(el => el.alternative)\n    return filtered.length === arr.length\n  }\n  return false\n}\n\nconst checkFileExtension = (file) => {\n  var extension = file.substr((file.lastIndexOf('.') +1));\n  // blocked by amazon\n  if (!/(ade|adp|app|asp|bas|bat|cer|chm|cmd|com|cpl|crt|csh|der|exe|fxp|gadget|hlp|hta|inf|ins|isp|its|js|jse|ksh|lib|lnk|mad|maf|mag|mam|maq|mar|mas|mat|mau|mav|maw|mda|mdb|mde|mdt|mdw|mdz|msc|msh|msh1|msh2|mshxml|msh1xml|msh2xml|msi|msp|mst|ops|pcd|pif|plg|prf|prg|reg|scf|scr|sct|shb|shs|sys|ps1|ps1xml|ps2|ps2xml|psc1|psc2|tmp|url|vb|vbe|vbs|vps|vsmacros|vss|vst|vsw|vxd|ws|wsc|wsf|wsh|xnk)$/ig.test(extension)) {\n    return {\n      isValid: true,\n      message: file\n    }\n  } else {\n    return {\n      isValid: false,\n      message: \"Invalid file type: \" + extension + \" please use allowed file type\"\n    }\n  }\n}\n\nconst withHttp = url => !/^https?:\\/\\//i.test(url) ? `http://${url}` : url;\n\nconst validateAttachments = async (arrOfAttachments) => {\n  const isOutlookAtt = checkAtt(arrOfAttachments)\n  if (arrOfAttachments && arrOfAttachments.length && !isOutlookAtt) {\n      return new Promise( async function (res, rej) {\n        for (const att of arrOfAttachments) {\n          if(!att.alternative) {\n            \n            const file = att.filename || att.name\n            const path = withHttp(att.path || att.href || att.location)\n            \n            const validationRes = checkFileExtension(file)\n            \n            if (validationRes.isValid) {\n              linkCheck(path, function (err, result) {\n                if (err) {\n                    rej({\n                        message: 'cant check attachment link health',\n                    })\n                } else {\n                  if (result.status === 'dead') {\n                    rej({\n                      message: 'invalid attachment link',\n                      code: '404',\n                      url: path\n                    })\n                  }\n                  if(result.err){\n                    rej({\n                      message: 'invalid attachment link',\n                      code: 'ENOTFOUND',\n                      url: path\n                    })\n                  }\n                  res(result)\n                }\n            });\n            } else {\n              rej({\n                message: validationRes.message,\n              })\n            }\n          }\n        }\n    })\n  }\n}\n\nconst pipeLine = pipes => {\n  const _pipes = pipes || [];\n  const execute = async (data) => {\n    let result = data;\n    for (let p of _pipes) {\n      result = await p(result)\n    }\n    return result;\n  };\n  return { execute };\n};\n\nconst emailServer = async () => {\n  if (emailRecord.type !== 'mail-server') throw new Error('Can not create email server');\n\n  const config = { user: emailRecord.address };\n  \n  const gmailConfig = async () => {\n    const url = this.helpers.gatewayUrl('email/mail-server/gmail/auth/xoauth2/v2', this.helpers.providersAccountId);\n    const options = { headers: { authorization: emailRecord.userToken }, params: { id: key, emailAddress: config.user } };\n    \n    let token;\n    try {\n      token = _.get(\n        await axios.get(url, options),\n        'data.accessToken.access_token'\n      );\n    } catch(error) {\n      this.log.error('error gmailConfig', error )\n    }\n\n    return {\n      ...config,\n      host: 'smtp.gmail.com',\n      ssl: true,\n      port: 465,\n      password: token,\n      authentication: ['XOAUTH2']\n    }\n  };\n\n  const outlookConfig = () => {\n    return {\n      ...config,\n      password: emailRecord.password,\n      host: 'smtp-mail.outlook.com',\n      port: 587,\n      tls: { ciphers: 'SSLv3' }\n    }\n  };\n\n  const customServiceConfig = () => {\n    const { address: user, password, smtp: { host, port, tls, cipher } } = emailRecord;\n    const config = { user, password, host, port: parseInt(port), ssl: parseInt(port) === 465 ? true : false };\n    const tlsConfig = cipher ? { tls: { ciphers: cipher } } : tls ? { tls: true } : {};\n    \n    return _.assign(config, tlsConfig);\n  };\n  \n  const server = config => {\n    const { SMTPClient } = emailjs;\n    const client = new SMTPClient(config);\n\n    return client;\n  }\n  \n  switch (emailRecord.service) {\n    case 'gmail-xoauth': return server(await gmailConfig());\n    //case 'outlook': return server(outlookConfig());\n    default: return server(customServiceConfig());\n  }\n};\n\nconst attachDynamicAttachments = () => {\n  if (!Array.isArray(dynamicAttachments)) { \n    return;\n  }\n  attachments.push(...dynamicAttachments\n    .map(att => {\n      if (typeof att === 'string') {\n        return { location: att };\n      } else {\n        if (!att.location) return null;\n        return { location: att.location, name: att.name }\n      }\n    })\n    .filter(item => item)\n  );\n};\n\nconst prepareAttachments = async (cb) => {\n  \n\n  if (hasDynamicAttachments) {\n    attachDynamicAttachments();\n  }\n\n  const ext = str => _.get(/\\.([a-z]+)$/.exec(str.trim()), '[1]', '');\n  const nameFromUrl = str => _.get(/\\/([^\\/]+?\\.[a-z]+)$/.exec(str.trim()), '[1]', '');\n\n  return cb(mimeTypes, fetch, ext, nameFromUrl);\n};\n\nconst emailServerMessage = async () => {\n  const { decode } = htmlEntities();\n  const dec = str => execWithTextMask(str, /(?:&lt;|&gt;)/g, str => decode(str));\n  \n  try {\n    await validateAttachments(attachments)\n  } catch(error) {\n      if (processError) {\n        this.exitStep('error', error)\n      }\n      throw error\n    }\n\n  const prepareAttachmentsMailServer = async () => {\n    return await prepareAttachments(async (mimeTypes, fetch, ext, nameFromUrl) => {\n      const promisedAttachments = attachments.map(att => new Promise(async (res, rej) => {\n        const url = att.location.trim();\n        const buffer = await fetch(url).then(resp => resp.buffer());\n        const name = (att.name || nameFromUrl(url)).trim();\n        const type = mimeTypes.lookup(ext(name) || ext(url) || 'application/octet-stream');\n        \n        return res({ name, type, data: buffer });\n      }));\n\n      return await Promise.all(promisedAttachments);\n    });\n  };\n\n  const arrayToAddressString = arr => arr\n    .filter(item => item && (item !== 'undefined'))\n    .join(',');\n\n  const message = {\n    subject: subject,\n    attachment: await prepareAttachmentsMailServer(),\n    'Message-ID': `<${uuid(51)}@onereach.ai>`, // XXX Why do we have '@onereach.ai' ? \n  };\n  \n  if (isReply) {\n    if (replyTo) message['in-reply-to'] = replyTo;\n    if (references.length) {\n      const strToReferencesHeader = rs => {\n        return rs.split(',').join(' ').split(' ').map(r => r.trim()).join(' ');\n      };\n      message.references = Array.isArray(references) ? strToReferencesHeader(references.join()) : strToReferencesHeader(references);\n    }\n  }\n\n  message.from = `${nameFrom} <${emailRecord.address}>`;\n  \n  switch(getCurrentMode()) {\n    case 'visual':\n      message.text = dec(wysiwygText);\n      message.attachment.push({ data: dec(wysiwygText), type: 'text/html', alternative: true });\n      break;\n    case 'plain':\n      message.text = yourMessage;\n      break;\n    case 'html':\n      message.text = striptags(yourMessageHtml);\n      message.attachment.push({ data: yourMessageHtml, type: 'text/html', alternative: true });\n      break;\n    case 'template':\n      message.text = await htmlMinifierTerser.minify(emailTemplateMergeFieldsStr, { maxLineLength: 20 })\n      message.attachment.push({ data: await htmlMinifierTerser.minify(emailTemplateMergeFieldsStr, { maxLineLength: 20 }), type: 'text/html', alternative: true });\n      break;\n    default:\n      break;\n  }\n  \n  message.to = arrayToAddressString(toList);\n  \n  const cc = arrayToAddressString(ccList);\n  const bcc = arrayToAddressString(bccList);\n\n  if (ccList.length > 0) message.cc = cc;\n  if (bccList.length > 0) message.bcc = bcc;\n  \n  try {\n    validateMailServerRecipients({ to: message.to,  cc: message.cc, bcc: message.bcc})\n  } catch(error) {\n    if (processError) {\n      this.exitStep('error', error)\n    }\n    throw error\n  }\n  \n  const { execute } = pipeLine([\n    addTrackableLinksSmtp,\n    addEmailOpenBeaconSmtp,\n  ]);\n  \n  return execute(message);\n};\n\nconst sendByMailServer = async () => {\n  try {\n    const message = await emailServerMessage();\n    const server = await emailServer();\n  \n    return new Promise((res, rej) => {\n      const slf = this;\n      server.send(message, function (err, data) {\n        if (err) return rej({ message: err.toString() });\n        const messageId = message['Message-ID'].replace(/<|>/g, '');\n        return res(messageId)\n      });\n    })\n  } catch(error) {\n     if (processError) {\n      this.exitStep('error', error)\n    }\n    throw error;\n  }\n};\n\nconst botmailMessage = async () => {\n  const { decode } = htmlEntities();\n  const dec = str => execWithTextMask(str, /(?:&lt;|&gt;)/g, str => decode(str));\n\n  const prepareAttachmentsBotmail = async () => {\n    let mailAttachments = [...attachments , ...dynamicAttachments]\n    return prepareAttachments((mimeTypes, fetch, ext, nameFromUrl) => {\n      return mailAttachments.map(att => {\n        const path = att.location.trim();\n        const filename = att.name && att.name !== 'undefined'? att.name : nameFromUrl(path).trim() || '';\n        return { path, filename };\n      });\n    });\n  };\n  \n  const mailOptions = {\n    from: dec(nameFrom).length && nameFrom !== 'undefined' ? `${dec(nameFrom)} <${getSenderAddress()}>` : getSenderAddress(),\n    to: toList,\n    subject: subject !== 'undefined' ?  dec(subject) : '',\n  };\n\n  if (differentReplyTo) mailOptions.replyTo = getReplyAddress();\n\n  if (isHtmlContent() && !isTemplateString() &&!isHtmlMarkdown()) {\n    \n    _.assign(mailOptions, {\n      text: striptags(dec(yourMessageHtml)),\n      html: dec(yourMessageHtml)\n    });\n\n  } else if (isTemplateString()) {\n    \n    _.assign(mailOptions, {\n      text: emailTemplateMergeFieldsStr,\n      html: dec(emailTemplateMergeFieldsStr)\n    });\n    \n  } else if (isHtmlMarkdown()) {\n    \n    _.assign(mailOptions, {\n      text: wysiwygText, \n      html: dec(wysiwygText)\n    });\n    \n  } else {\n    mailOptions.text = dec(yourMessage);\n    mailOptions.html = dec(yourMessage).replace(/\\n/gmu, \"<br>\");\n  }\n\n  if (ccList.length) mailOptions.cc = ccList;\n  if (bccList.length) mailOptions.bcc = bccList;\n\n  if (attachments.length || dynamicAttachments) mailOptions.attachments = await prepareAttachmentsBotmail();\n  \n  if (isReply) {\n    if (replyTo) mailOptions.inReplyTo = replyTo;\n    if (references.length) {\n      const strToReferencesArray = str => {\n        return str.split(' ').join().split().map(r => r.trim());\n      };\n      mailOptions.references = Array.isArray(references) ? strToReferencesArray(references.join()) : strToReferencesArray(references);\n    }\n  }\n  \n  const { execute } = pipeLine([\n    addTrackableLinksBotmail,\n    addEmailOpenBeaconBotmail,\n  ]);\n  \n  return execute(mailOptions);\n};\n\nconst validateMailServerRecipients = (recipients) => {\n  if (recipients) {\n    if ('to' in recipients && !_.isEmpty(toList)) {\n      if(!emailRegex.test(recipients.to)){\n        throw { type: 'RecipientsError', message: `recipient in 'to' expected to be a valid address but got ${recipients.to}` }\n      }\n    }\n    if ('cc' in recipients && !_.isEmpty(ccList)) {\n      if(!emailRegex.test(recipients.cc)){\n        throw { type: 'RecipientsError',  message: `recipient in 'cc' expected to be a valid address but got ${recipients.cc}` }\n      }\n    }\n    if ('bcc' in recipients && !_.isEmpty(bccList)) {\n      if(!emailRegex.test(recipients.bcc)){\n         throw { type: 'RecipientsError', message: `recipient in 'bcc' expected to be a valid address but got ${recipients.bcc}` }\n      }\n    }\n  } else {\n    throw { type: 'RecipientsError', message: `empty recipient, at least one 'to' recipient is required` }\n  }\n}\n\nconst validateRecipients = (recipients) => {\n    _.forIn(recipients, (list, key) => {\n      _.map(list, (val) => {\n        if (!emailRegex.test(val)) {\n          switch(key) {\n            case 'to':  throw { type: 'RecipientsError', message: `recipient in 'to' expected to be a valid address but got ${val}` }\n            case 'cc':  throw { type: 'RecipientsError',  message: `recipient in 'cc' expected to be a valid address but got ${val}` }\n            case 'bcc':  throw { type: 'RecipientsError', message: `recipient in 'bcc' expected to be a valid address but got ${val}` }\n            default:\n              break\n          }\n        }\n      })\n    })\n};\n\nconst outlookServerMessage = async () => {\n  const { decode } = htmlEntities();\n  const dec = str => execWithTextMask(str, /(?:&lt;|&gt;)/g, str => decode(str));\n  \n  const prepareAttachmentsMailServer = async () => {\n    return await prepareAttachments((mimeTypes, fetch, ext, nameFromUrl) => {\n      return attachments.map(att => {\n        const path = att.location.trim();\n        const filename = att.name && att.name !== 'undefined'? att.name : nameFromUrl(path).trim() || '';\n        return { href: path, filename };\n      });\n    });\n  };\n\n  const arrayToAddressString = arr => arr\n    .filter(item => item && (item !== 'undefined'))\n    .join(',');\n\n  const message = {\n    subject: subject,\n    attachment: await prepareAttachmentsMailServer(),\n    'Message-ID': `<${uuid(20)}@onereach.ai>`,\n  };\n  \n  if (isReply) {\n    if (replyTo) message['in-reply-to'] = replyTo;\n    if (references.length) {\n      const strToReferencesHeader = rs => {\n        return rs.split(',').join(' ').split(' ').map(r => r.trim()).join(' ');\n      };\n      message.references = Array.isArray(references) ? strToReferencesHeader(references.join()) : strToReferencesHeader(references);\n    }\n  }\n\n  message.from = `${nameFrom} <${emailRecord.address}>`;\n\n  switch(getCurrentMode()) {\n    case 'visual':\n      message.text = dec(wysiwygText);\n      message.attachment.push({ data: dec(wysiwygText), type: 'text/html', alternative: true });\n      break;\n    case 'plain':\n      message.text = yourMessage;\n      break;\n    case 'html':\n      message.text = striptags(yourMessageHtml);\n      message.attachment.push({ data: yourMessageHtml, type: 'text/html', alternative: true });\n      break;\n    case 'template':\n      message.text = emailTemplateMergeFieldsStr;\n      message.attachment.push({ data: emailTemplateMergeFieldsStr, type: 'text/html', alternative: true });\n      break;\n    default:\n      break;\n  }\n  \n  message.to = arrayToAddressString(toList);\n  \n  const cc = arrayToAddressString(ccList);\n  const bcc = arrayToAddressString(bccList);\n\n  if (cc) message.cc = cc;\n  if (bcc) message.bcc = bcc;\n  \n  const { execute } = pipeLine([\n    addTrackableLinksSmtp,\n    addEmailOpenBeaconSmtp,\n  ]);\n  return execute(message);\n};\n\nconst sendByOutlook = async () => {\n  try {\n    const message = await outlookServerMessage();\n    validateMailServerRecipients({ to: message.to,  cc: message.cc, bcc: message.bcc})\n    await validateAttachments(message.attachment)\n    const { data } = getHtmlAttachmentSmtp(message);\n    \n    message.html = data\n    \n    if (message.attachment[0].alternative) {\n      message.attachment.shift()\n    }\n    \n    const resp = await this.eventManager.emit({\n      target: this.config.accountId,\n      name: 'email/events/smtp/send-message-smtp',\n      params: {\n        auth: {\n          user: _.get(emailRecord, 'address'),\n          pass: _.get(emailRecord, 'password'),\n        },\n        address: getSenderAddress(),\n        token: _.get(emailRecord, 'access.token'),\n        email: message,\n      },\n      reporting: {\n          sessionId: this.session.get('reporting.sessionId')\n      }\n      }, {\n          invocationType: 'sync',\n          timeout: 30000\n      }\n    );\n    \n    \n    if (resp.error) {\n      throw resp.error\n    }\n    const messageId = _.get(resp, 'data.MessageId');\n    \n    return messageId;\n  } catch (error) {\n    if (processError) {\n      this.exitStep('error', error)\n    }\n      \n    throw error;\n  }\n}\n\nconst sendByBotmail = async () => {\n  try {\n    const message = await botmailMessage();\n    \n    await validateAttachments(message.attachments)\n    validateRecipients({ to: message.to,  cc: message.cc, bcc: message.bcc})\n\n    const resp = await this.eventManager.emit({\n      target: this.helpers.providersAccountId,\n      name: 'email/events/botmail/send',\n      params: {\n        address: getSenderAddress(),\n        token: _.get(emailRecord, 'access.token'),\n        email: message,\n        ignoreOtherBounces: ignoreOtherBounces,\n        customMessageId: customMessageId,\n        iterationKey: this.currentStepId,\n        iterationCount: iterationCount\n      },\n      reporting: {\n          sessionId: this.session.get('reporting.sessionId')\n      }\n      }, {\n          invocationType: 'sync',\n          timeout: 30000\n      }\n    );\n    \n    if (resp.error) {\n      throw resp.error\n    }\n    \n    if ( !resp.data || !resp.data.MessageId) {\n      this.log.warn(\"can't send message: can't genereate messageId or there is unhadled bounce\")\n    }\n    \n    return resp.data.MessageId\n    \n  } catch (error) {\n    \n    if (error.details && _.isArray(error.details) && error.details[0]) {\n      throw {\n        type: \"invalid address\",\n        message: error.details[0].message\n      }\n    }\n    \n    if (processError) {\n      if (error.syscall) {\n        const message = {\n          message: `${error.syscall} ${error.hostname}`,\n          code: error.code,\n          stack: error.syscall\n        }\n        \n        throw message\n\n      }\n      \n      throw error;\n    }\n      \n    throw error\n  }\n};\n\nconst sendMessage = async () => {\n  if (emailRecord.service === 'outlook') return sendByOutlook();\n  if (emailRecord.type === 'mail-server') {\n    const res = await sendByMailServer();\n    return res\n  }\n  return await sendByBotmail();\n};\n\nconst registerBeacons = async (messageId) => {\n \n  const beacons = thisStep.get(this.process.main, 'beacons')\n  const recipient = _.get(getRecipientsArray(), '[0]', 'unknown');\n  \n  const payload = {\n    messageId,\n    accountId: this.config.accountId,\n    stepId: this.currentStepId,\n    iterationKey: this.currentStepId,\n    iterationCount,\n    email: differentReplyTo ? getReplyAddress() : getSenderAddress(),\n    recipient,\n    expire: Date.now() + 604800000,\n    beacons\n  };\n  \n  try {\n    const registeredBeacons = await this.eventManager.emit({\n      target: this.helpers.providersAccountId,\n      name: 'email/events/beacons/register',\n      params: payload,\n      reporting: {\n          sessionId: this.session.get('reporting.sessionId')\n      }\n      }, {\n          invocationType: 'sync',\n          timeout: 30000\n      }\n    );\n\n    return registeredBeacons;\n    \n  } catch (error) {\n    this.log.error('registerBeacons error', error)\n    throw error;\n  }\n};\n\nconst generateShortUrl = async (url) => {\n  try {\n    \n    const request = new Request(this);\n    const req = await request.post({\n      uri: `${this.helpers.urlShortenerUrl}/acc/${this.config.accountId}/link`,\n      headers: {\n        Authorization: `FLOW ${this.config.flowToken}`,\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      body: {\n        url,\n        deepLink: false\n      },\n      json: true\n    })\n    \n    return req.shortUrl;\n    \n  } catch (e) {\n    this.log.error('Error generating short URL: ', e);\n    return url;\n  } \n}\n\nconst createEmailBeacon = async (id, payload) => {\n  try {\n    const url = this.helpers.gatewayUrl('email/beacon', this.helpers.providersAccountId);\n    const key = 'beacons';\n    let beaconLink;\n    \n    if (!url) {\n      this.log.error('cant get url for open beacon generation');\n      throw {\n        name: \"open beacon link generation failed\",\n        message: \"can't get gateway url\"\n      }\n    }\n    \n    if (hasShortUrl) {\n      beaconLink = await generateShortUrl(`${url}?id=${id}`)\n    } else {\n      beaconLink = `${url}?id=${id}`\n    }\n    \n    const beacon = {\n      id,\n      beaconLink,\n      ...payload\n    };\n    \n    const beacons = thisStep.get(this.process.main, key)\n    \n    if (beacons) {\n       thisStep.set(this.process.main, key, [...beacons, beacon])\n    } else {\n       thisStep.set(this.process.main, 'beacons', [ beacon ])\n    }\n    \n    return beacon;\n  } catch (error) {\n    this.log.error('createEmailBeacon error', error)\n  }\n};\n\nconst beaconImage = (link) => {\n  return `<img style=\"display: none !important;\" src=\"${link}\" />`\n};\n\nconst getHtmlAttachmentSmtp = (message) => {\n  const htmlAttQuery = { type: 'text/html', alternative: true };\n  const att = _.chain(message)\n    .get('attachment')\n    .find(htmlAttQuery)\n    .value();\n  return _.cloneDeep(att) || _.assign({}, htmlAttQuery, { data: _.get(message, 'text') });\n};\n\nconst addHtmlAttachmentSmtp = (message, htmlAttachment) => {\n  const m = _.cloneDeep(message);\n  const attachments = _.filter((m.attachment || []), item => !_.isMatch(item, { type: 'text/html', alternative: true }));\n  m.attachment = [htmlAttachment, ...attachments];\n  return m;\n};\n\nconst addEmailOpenBeaconSmtp = async message => {\n  const id = uuid();\n  const beacon = await createEmailBeacon(id, { type: 'open' });\n  const htmlAtt = getHtmlAttachmentSmtp(message);\n  htmlAtt.data = `\n    ${htmlAtt.data || message.text}\n    ${beaconImage(beacon.beaconLink)}\n  `;\n  return addHtmlAttachmentSmtp(message, htmlAtt);\n};\n\nconst addEmailOpenBeaconBotmail = async opts => {\n  if (useThreads) {\n    const id = uuid();\n    const beacon = await createEmailBeacon(id, { type: 'open' });\n    const html = `\n      ${opts.html || opts.text}\n      ${beaconImage(beacon.beaconLink)}\n    `;\n    return _.assign({}, opts, { html });\n  }\n  return _.assign({}, opts, { html: opts.html || opts.text });\n};\n\nconst addTrackableLinks = async mailBody => {\n  let beaconsAnchors = []\n  let bodyWithBeaconsAnchors = ''\n  \n  const validateHtml = async (options) => {\n    try {\n      const result = await validator(options)\n      return result\n    } catch (error) {\n      this.log.error('addTrackableLinks html validation error', error)\n    }\n  }\n  \n  const validateUrl = (url) => {\n    return linkRegex.test(url)\n  }\n  \n  const validateEmailAddress = (address) => {\n    return emailRegex.test(address)\n  }\n  \n  const parseHtml = (html) => {\n    try {\n      const result = cheerio.load(html, { xmlMode: true })\n      return result\n    } catch (error) {\n      this.log.error('addTrackableLinks html parse error', error)\n    }\n  }\n  \n  const createUrl = (url) => {\n    try {\n     const link = new URL(url)\n     return link\n    } catch(error) {\n      try {\n        const link = new URL(`http://${url}`)\n        return link\n      } catch(error) {\n        throw error\n      }\n    }\n  }\n  \n  const getDomainNameFromURL = (url)=> {\n    const hostNameArr = url.host.split('.')\n    return _.last(hostNameArr)\n  }\n  \n  const validateDomainName = (name) => {\n\n    const schema = joi.string().domain({ minDomainSegments: 1 })\n    const res = schema.validate(name)\n    \n    if (res.error) {\n      const { details } = res.error\n      throw {\n        name: details.type,\n        code: null,\n        message: details.message\n      }\n    }\n  }\n  \n  const processLinks = async (parsed) => {\n    try{\n    const self = this;\n    parsed('a').each(function() {\n      const hrefVal = parsed(this).attr('href') || '#'\n      const isEmailAddr = validateEmailAddress(hrefVal)\n      const isTrackable = validateUrl(hrefVal)\n      \n      if (!isEmailAddr && isTrackable) {\n        const url = createUrl(hrefVal)\n        parsed(this).attr('href', url.href)\n        \n        const domainName = getDomainNameFromURL(url)\n        validateDomainName(domainName)\n        const anchor = uuid();\n        \n        const tagData = {\n          attributes: _.omit(parsed(this)[0].attribs, ['style']),\n          children: _.pick(parsed(this)[0].children[0], ['type', 'data', 'name'])\n        }\n        \n        beaconsAnchors = [...beaconsAnchors, { link: parsed(this).attr('href'), value: anchor, tagData }]\n        parsed(this).attr('href', anchor)\n      }\n    })\n    return parsed\n    } catch (err) {\n        err = {\n          name: \"Link processing error\",\n          code: null,\n          message: \"Invalid href value in html template\"\n        }\n      throw err\n    }\n  }\n  \n  const processWysiwygLinks = (html) => {\n    const res = html.replace( wysiwygRegex, (link) => {\n      const plainLink = link.match(plainLinkRegex)\n      const processedLink = processPlain(plainLink[0])\n      return processedLink\n    })\n    return res\n  }\n  \n  const processHtml = async (html) => {\n   // empty messsage\n   if (!html) return ''\n    \n    const processedHtml = await validateHtml({\n      data: html,\n      validator: 'WHATWG',\n      isFragment: true\n    })\n    \n    if (!processedHtml.isValid) {\n      this.log.info('ivalid html template', processedHtml)\n    }\n  \n    try {\n      const parsedHtml = parseHtml(html)\n      const processedLinks = await processLinks(parsedHtml)\n      return processedLinks.html()\n    } catch (error) {\n      throw error\n    }\n  }\n  \n  const processWysiwygHtml = async (html) => {\n   if (!html) return ''\n    \n    const processedHtml = await validateHtml({\n      data: html,\n      validator: 'WHATWG',\n      isFragment: true\n    })\n    \n    if (!processedHtml.isValid) {\n      this.log.info('ivalid html template', processedHtml)\n    }\n  \n    try {\n      const processedWysiwygLinks = processWysiwygLinks(html);\n      const parsedHtml = parseHtml(processedWysiwygLinks)\n      const processedLinks = await processLinks(parsedHtml)\n      return processedLinks.html()\n    } catch (error) {\n      throw error\n    }\n  }\n  \n  const processPlain = (plain) => {\n    const processed = plain.replace(plainLinkRegex, (link) => {\n      const isEmailAddress = validateEmailAddress(link)\n      if (isEmailAddress) {\n        return `<a href=\"mailto:${link}\">${link}</a>`\n      }\n      return `<a href=\"${link}\">${link}</a>`\n    })\n    return processed\n  }\n  \n  switch(getCurrentMode()) {\n    case 'plain':\n      bodyWithBeaconsAnchors = await processHtml(processPlain(mailBody));\n      break;\n    case 'visual':\n      bodyWithBeaconsAnchors = await processWysiwygHtml(mailBody);\n      break;\n    default:\n      bodyWithBeaconsAnchors = await processHtml(mailBody);\n      break;\n  }\n  \n  const beacons = await beaconsAnchors.reduce((acc, anchor) => {\n    return acc.then(async beacons => { \n      const id = anchor.value;\n      const beacon = await createEmailBeacon(id, { type: 'click', link: anchor.link.trim() });\n      return [...beacons, { beacon, anchor: anchor.value }];\n      \n    });\n  }, Promise.resolve([]));\n  \n  thisStep.set(this.process.main, 'beacons_tags_data', beaconsAnchors)\n  return beacons.reduce((str, { beacon, anchor }) => str.replace(anchor, beacon.beaconLink), bodyWithBeaconsAnchors);\n};\n\nconst addTrackableLinksSmtp = async message => {\n  const htmlAtt = getHtmlAttachmentSmtp(message);\n  if (useThreads) {\n    htmlAtt.data = await addTrackableLinks(htmlAtt.data || message.text);\n  }\n  return addHtmlAttachmentSmtp(message, htmlAtt);\n};\n\nconst addTrackableLinksBotmail = async opts => {\n  let html;\n  if (useThreads) {\n    html = await addTrackableLinks(opts.html || opts.text);\n  } else {\n    html = opts.html || opts.text\n  }\n  // const html = await addTrackableLinks(opts.html || opts.text);\n  return _.assign({}, opts, { html });\n};\n\nconst transformBotmailMessageContent = async (opts, callback) => {\n  return _.assign({}, opts, { html: await callback(opts.html || opts.text) });\n};\n\nconst htmlEntities = () => {\n  const Entities = require('html-entities');\n  const { encode, decode } = Entities\n  return { encode, decode };\n};\n\nconst execWithTextMask = (str, regex, callback) => {\n  const masksMap = new Map();\n  const masked = str.replace(regex, match => {\n    const mask = `_____MASK____${Math.random()}_${Math.random()}_${Math.random()}____MASK____`;\n    masksMap.set(mask, match);\n    return mask;\n  });\n  const cbResult = callback(masked);\n  return Array.from(masksMap.keys()).reduce((result, mask)=> {\n    return result.replace(mask, masksMap.get(mask));\n  }, cbResult);\n};\n\n const getCurrentBeaconTagData = (beaconId, beaconsTagsData) => {\n   return _.find(beaconsTagsData, (beaconTagsData) => { \n     return beaconTagsData.value === beaconId; \n   })\n }\n\nconst setLatestClickData = async (responseData) => {\n  const now = moment();\n  const { type, messageId, sender, link, beaconLink, id } = responseData.event.params.beacon\n  const beaconsData = thisStep.get(this.process.main, 'beacons')\n  const beaconsTagsData = thisStep.get(this.process.main, 'beacons_tags_data')\n  const currentTagData = getCurrentBeaconTagData(id, beaconsTagsData)\n  \n  if (responseData) {\n    const key = 'latest_response';\n    const latestResponse = {\n    \tmessageId,\n      timestamp: Date.now(),\n      datetime: now.format(),\n    \ttype: type,\n    \tlink,\n    \tbeaconLink,\n    \teventSender: {\n    \t\temail: sender,\n    \t},\n    \tvalue: currentTagData.tagData.children.data,\n     \ttag: {\n     \t\tattributes: currentTagData.tagData.attributes ,\n     \t\tcontents: currentTagData.tagData.children.data\n      }\n    }\n    \n    thisStep.set(this.process.main, key,latestResponse)\n    await updateAllResponsesData(latestResponse)\n  }\n}\n\nconst setLatestOpenData = async (eventData) => {\n  const now = moment();\n  const { type, messageId, sender, link } = eventData.params.beacon\n\n  if (eventData) {\n    const key = 'latest_response';\n    const latestResponse = {\n    \tmessageId,\n      timestamp: Date.now(),\n      datetime: now.format(),\n    \teventSender: {\n    \t\temail: sender,\n    \t},\n    \ttype: type,\n    }\n    \n    thisStep.set(this.process.main, key, latestResponse)\n    await updateAllResponsesData(latestResponse)\n  }\n}\n\nconst updateAllResponsesData = async (latestResponse) => {\n  const key = 'response_list';\n  const allResponses = thisStep.get(this.process.main, key)\n  if (allResponses) {\n     thisStep.set(this.process.main, key, [...allResponses, latestResponse])\n  } else {\n     thisStep.set(this.process.main, key, [ latestResponse ])\n  }\n}\n\nconst resolveReponseData = async (responseData) => {\n  const { type } = responseData.event.params.beacon\n  switch(type) {\n    case 'click': return setLatestClickData(responseData)\n    case 'open': return setLatestOpenData(responseData.event)\n  }\n}\n\n// Get outgoing message fields content helpers\n\nconst replaceBreakLinesHtml = (html) => {\n  return html.replace(/\\n/gmu, \"<br>\");\n}\n\nconst processHtmlToPlain = (html) => {\n  const params = {\n    wordwrap: 130\n  }\n  return htmlToText.fromString(html, params)\n}\n\nconst convert = {\n  html: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return replaceBreakLinesHtml(yourMessageHtml)\n      case 'plain':\n        return processHtmlToPlain(yourMessageHtml)\n      case 'trimmedHtml':\n        return planer.extractFrom(yourMessageHtml, 'text/html', dom.window.document)\n      case 'trimmedText':\n        return planer.extractFrom(processHtmlToPlain(yourMessageHtml), 'text/plain')\n    }\n  },\n  plain: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return replaceBreakLinesHtml(yourMessage)\n      case 'plain':\n        return yourMessage\n      case 'trimmedHtml':\n        return replaceBreakLinesHtml(planer.extractFrom(yourMessage, 'text/plain'))\n      case 'trimmedText':\n        return planer.extractFrom(yourMessage, 'text/plain')\n    }\n  },\n  visual: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return wysiwygText\n      case 'plain':\n        return processHtmlToPlain(wysiwygText)\n      case 'trimmedHtml':\n        return planer.extractFrom(wysiwygText, 'text/html', dom.window.document)\n      case 'trimmedText':\n        return planer.extractFrom(processHtmlToPlain(wysiwygText), 'text/plain')\n    }\n  },\n  template: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return emailTemplateMergeFieldsStr\n      case 'plain':\n        return  processHtmlToPlain(emailTemplateMergeFieldsStr)\n      case 'trimmedHtml':\n        return planer.extractFrom(emailTemplateMergeFieldsStr, 'text/html', dom.window.document)\n      case 'trimmedText':\n        return planer.extractFrom(processHtmlToPlain(emailTemplateMergeFieldsStr), 'text/plain')\n    }\n  }\n}\n\nconst getMessageContent = (mode, type) => {\n  const _mode = mode.value || mode\n  return convert[_mode](type)\n}\n\nconst messageToOutput = async () => {\n  try {\n    const now = moment();\n    const subjectRegex = /^([rR][eE]|[fF][wW][dD]|[fF][wW]):\\s/;\n    const currentMessageMode = mode\n    \n    const messageId = thisStep.get(this.process.main, 'messageId')\n    const latestResponse = thisStep.get(this.process.main, 'latest_response') || {}\n    const allResponses = thisStep.get(this.process.main, 'response_list') || []\n    const beacons = thisStep.get(this.process.main, 'beacons')\n    \n    \n    const message = {\n      latestResponse: latestResponse,\n      allResponses: allResponses,\n      outgoingMessage: {\n        messageId,\n        timestamp: Date.now(),\n        datetime: now.format(),\n        sender: {\n          name: nameFrom,\n          address: getSenderAddress()\n        },\n      \tsubject: {\n    \t\t\ttext: subject,\n    \t\t\ttrimmed: subject.replace(subjectRegex,'')\n    \t\t},\n    \t\trecipients: {\n    \t\t\tto: toList,\n    \t\t\tcc: ccList,\n    \t\t\tbcc: bccList\n    \t\t},\n    \t\tcontent: {\n    \t\t\tplain: getMessageContent(currentMessageMode, 'plain'),\n    \t\t\thtml: getMessageContent(currentMessageMode, 'html'),\n\t   \t\t\ttrimmedText: getMessageContent(currentMessageMode, 'trimmedText'),\n    \t\t\ttrimmedHtml: getMessageContent(currentMessageMode, 'trimmedHtml')\n    \t\t},\n    \t\tinReplyTo: replyTo,\n\t      references: Array.isArray(references) ? references : [],\n        attachments,\n        beacons\n      }\n    }\n\n    return message\n  } catch (error) {\n    this.log.error('messageToOutput error', error)\n  }\n};\n\nconst attachDynamicRecipients = () => {\n  if (!Array.isArray(dynamicRecipients)) return;\n\n  dynamicRecipients.forEach(r => {\n    if (typeof r === 'string') {\n      toList.push(r);\n      return;\n    }\n\n    if (typeof r === 'object') {\n      switch (_.get(r, 'type', '').toLowerCase()) {\n        case 'to': toList.push(r.recipient); break;\n        case 'cc': ccList.push(r.recipient); break;\n        case 'bcc': bccList.push(r.recipient); break;\n      }\n    }\n  });\n};\n\n// EVENTS HANDLERS\n\nconst updateSessionTimeout = () => {\n  const remainingTime = this.session.timeout - (new Date().getTime() - new Date(this.session.startDate).getTime());\n  const neededTime = getStepTimeout();\n  if (neededTime > remainingTime) this.session.set('timeout', neededTime);\n};\n\nconst eventsTriggersNames = (email, inReplyTo, firstRef, sender) => {\n  return [\n    `in/email/reaction/${inReplyTo}`,\n  ].filter(e => e);\n};\n\nconst exit = (data = null) => { \n  this.exitFlow(data);\n}\n\nconst exitStep = async (leg, data) => {\n  const callback = this.takeCallback();\n  const eventManagerResult = await this.eventManager.callbackResolve(callback, { caught: true });\n  // await removeStoredMessageData();\n  return this.exitStep(leg, data);\n};\n\nconst exitThread = async (type, data) => {\n  \n  const callback = this.takeCallback();\n  const eventManagerResult = await this.eventManager.callbackResolve(callback, { caught: true });\n  \n  const id = `${type}_${uuid()}`\n  \n  this.process.newThread(id, thread => {\n      thread.currentStep = thisStep.getExitStepId(type);\n      thread.activate({ type: data });\n  });\n  \n  await this.mergeFields[this.currentStep.dataOut.name].set(data);\n  return exit(data);\n}\n\nconst resolveEventHandler = ({\n  email, inReplyTo, firstRef,\n  senders, bounceHandleType,\n  ignoreOtherBounces, beacons, hasOpenEvent,\n  hasUrlClickTracking\n}) => async event => {\n  const sender = _.get(event,'params.sender');\n  const references = _.get(event, 'params.message.references', '');\n  const threadRegex = new RegExp(`${inReplyTo}|${firstRef}`, 'g');\n  const type = _.get(event, 'params.type');\n  \n  const getStringEmailFromArray = (arr) => {\n    const result = _.reduce(arr, (stringData, item) => {\n      return `${stringData ? stringData + ' | ' : ''}${item.name ? '<' + item.name + '>' : ''} ${item.address}`;\n    }, '');\n    \n    return result;\n  }\n  \n  // if (type !== 'delivery') {\n  //   let toIdentifier, fromIdentifier;\t\n    \t\n  //   if (type === 'bounce' || type === 'complaint') {\t\n  //     toIdentifier = emailConfig.label;\t\n  //     fromIdentifier = _.get(event, 'sender');\t\n  //   } else if (type === 'beacon') {\t\n  //     toIdentifier = emailConfig.label;\t\n  //     fromIdentifier = _.get(event, 'params.beacon.sender');\t\n  //   } else {\t\n  //     const toData = _.get(event, 'params.message.to.value');\t\n  //     const fromData = _.get(event, 'params.message.from.value');\t\n      \t\n  //     toIdentifier = getStringEmailFromArray(toData);\t\n  //     fromIdentifier = getStringEmailFromArray(fromData);\t\n  //   }\n    \n  //   report('in', _.assign({}, event.params, {\n  //     transcriptId         : uuid(),\n  //     previousTranscriptId : this.get(`${this.currentStepId}.transcriptId`), \n  //     botIdentifier        : toIdentifier, \n  //     endUserIdentifier    : fromIdentifier\n  //   })); \n  // }\n  \n  const messageEventHandler = async event => {\n    const handleOmitCondition = async condition => {\n      if (condition) return exit();\n      return exitStep('next', await messageToOutput());\n    };\n    \n    switch (event) {\n      case 'thread': return handleOmitCondition(!threadRegex.test(references));\n      case 'to': return handleOmitCondition(false);\n      case 'recipient': return handleOmitCondition(!_.includes(senders, sender));\n      default: throw new Error('Wrong handling case in message handler')\n    }\n  };\n  \n  const bounceEventHandler = async event => {\n    try {\n      const messageId = thisStep.get(this.process.main, 'messageId')\n      const { sender } = event.params\n    \n      const now = moment()\n      const message = await messageToOutput();\n      const { type } = event.params.bounce\n      const isOptOut = event.params.isOptOut || false\n      \n      message.latestResponse = { \n        messageId,\n        timestamp: Date.now(),\n        datetime: now.format(),\n      \teventSender: {\n    \t\t  email: sender,\n    \t  },\n      \ttype: type,\n      \tisOptOut\n      }\n      \n      if (bounceHandleType === 'ignore') return exit(event);\n      \n      if (ignoreOtherBounces) {\n        if (sender !== _.get(senders, '[0]')) return exit(event);\n      }\n      \n      if (bounceHandleType === 'error') {\n        const bounceResp = messageToOutput(event)\n        \n        const message = {\n          message: bounceResp.latestResponse,\n          code: \"bounce\",\n          stack: \"sendByBotmail -> bounce\"\n        }\n        \n        throw message\n      };\n      \n      if (bounceHandleType !== 'separately') return exitStep('bounce', message);\n  \n      switch (type) {\n        case 'hard-bounce': return exitStep('hard-bounce', message);\n        case 'soft-bounce': return exitStep('soft-bounce', message);\n      }\n    } catch (error) {\n      throw error\n    }\n  };\n  \n  const beaconEventHandler = async event => {\n    const beaconData = _.get(event, 'params.beacon');\n    const type = _.get(event, 'params.beacon.type');\n    const key = 'beacons'\n    \n    const handleClick = async () => {\n      \n      if (!hasUrlClickTracking) {\n        return exit(event);\n      }\n      \n      const beacons = thisStep.get(this.process.main, key)\n      \n      const responseData = {\n        event,\n        beacons\n      }\n      \n      await resolveReponseData(responseData)\n      let message = await messageToOutput()\n      \n      return exitThread('click', message)\n    }\n    \n    const handleOpen = async  () => {\n      if (!hasOpenEvent) {\n        return exit(event);\n      }\n      \n      const responseData = {\n        event,\n        beacons: null\n      }\n      \n      await resolveReponseData(responseData)\n      let message = await messageToOutput()\n      \n      return exitThread('open', message);\n    };\n    \n    switch (type) {\n      case 'click': return handleClick();\n      case 'open': return handleOpen();\n    }\n  };\n  \n  const complaintEventHandler = async event => {\n    const messageId = thisStep.get(this.process.main, 'messageId')\n    const { type } = event.params\n    const { complainedRecipient } = event.params.complaint\n    const now = moment()\n    // const isOptOut = event.params.isOptOut || false\n    const isOptOut = _.get(event, 'params.isOptOut') || false\n    const message = await messageToOutput();\n    \n    message.latestResponse = { \n      messageId,\n      timestamp: Date.now(),\n      datetime: now.format(),\n    \teventSender: {\n  \t\t  email: complainedRecipient,\n  \t  },\n    \ttype: type,\n    \tisOptOut\n    }\n    \n    if (!handleComplaints) return exit(event);\n    if (bounceHandleType === 'ignore') return exit(event);\n    if (bounceHandleType === 'error') return exitStep('error', message);\n    if (bounceHandleType !== 'separately') return exitStep('bounce', message);\n    \n    return exitStep('hard-bounce', message)\n  };\n  \n  const eventType = _.get(event, 'params.type');\n\n  switch (eventType) {\n    case 'bounce': return bounceEventHandler(event);\n    case 'beacon': return beaconEventHandler(event);\n    case 'complaint': return complaintEventHandler(event);\n    // case 'delivery': return deliveryNotificationhandler(event);\n    default: return exit();\n  }\n};\n\nconst triggers = async (thread, messageId, timeout) => {\n  const email = differentReplyTo ? getReplyAddress() : getSenderAddress();\n  const inReplyTo = messageId;\n  const firstRef = getFirstRef();\n  const senders = getRecipientsArray();\n  const beacons = thisStep.get(this.process.main, 'beacons') || [];\n\n  const resolverOptions = {\n    email,\n    inReplyTo,\n    firstRef,\n    senders,\n    bounceHandleType,\n    ignoreOtherBounces,\n    beacons,\n    hasOpenEvent,\n    hasUrlClickTracking\n  };\n  \n  if (useThreads) {\n    thread.triggers.once(`in/email/reaction/${messageId}`, event => {\n      return resolveEventHandler(resolverOptions)(event);\n    });\n    \n    thread.triggers.timeout(timeout, async () => exitStep('timeout', await messageToOutput()))\n  }\n  \n  return thread.triggers\n    .otherwise(async () => {\n      return useThreads ?\n        exitThread('next', await messageToOutput()) :\n        exitStep('next', await messageToOutput());\n    });\n};\n\nconst validateEmailConfig = async (selectedAddress, mailOptions) => {\n  \n  let opts = _.isArray(mailOptions) ? mailOptions : mailOptions.mailOptions\n  \n  const res = opts.filter(account => {\n    if (account.type === 'mail-server' || account.type === 'botmail'){\n      return account.address === selectedAddress\n    } else {\n      return account.domain === selectedAddress\n    }\n  })\n  \n  if (!res.length) {\n    const error = {\n      name: \"invalid sender address\",\n      message: \"Unknown sender address\",\n      stack: new Error().stack\n    }\n    throw error\n  } else {\n    emailConfig = res[0]\n    key = emailConfig.id;\n    emailRecord = emailConfig;\n  }\n}\n\nconst main = async () => {\n  let messageId = thisStep.get(this.process.main, 'messageId')\n\n  if (hasDynamicRecipients) {\n    attachDynamicRecipients();\n  }\n  \n  if (iterationCount && iterationCount >= iterationDepth) {\n    return exitStep('next')\n  }\n  \n  if (useManualMode) {\n    await validateEmailConfig(manualEmailConfig, emailConfig)\n  }\n  \n  if (messageId) {\n    const timeout = getRemainingTimeout()\n    return triggers(this, messageId, timeout);\n  } else {\n    const timeout = getStepTimeout()\n    const params = {\n      message: {\n        text: yourMessage || yourMessageHtml,\n      },\n    };\n    const endUserIdentifier = _.concat(toList, ccList, bccList).join(' ');\n    report('out', _.assign({}, params, {\n      transcriptId         : uuid(),\n      previousTranscriptId : this.get(`${this.currentStepId}.transcriptId`), \n      botIdentifier        : emailConfig.label, \n      endUserIdentifier,\n    }));\n    \n    messageId = await sendMessage();\n    thisStep.set(this.process.main, 'messageId', messageId);\n    \n    if (useThreads) {\n      const beacons = await registerBeacons(messageId);\n      thisStep.set(this.process.main, 'registered_beacons', beacons);\n    }\n    \n    updateSessionTimeout()\n\n    return triggers(this, messageId, timeout);\n  }\n};\n\nreturn main();\n",
        "form": {
          "component": null
        },
        "data": {
          "mode": {
            "label": "Plain text",
            "value": "plain"
          },
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "97229878-c536-49af-9766-3eb4eeeae5bc",
              "label": "timeout",
              "condition": "schema.useThreads"
            },
            {
              "id": "c2db4ced-cb1b-4af2-8055-35c509e310ed",
              "label": "open",
              "condition": "schema.useThreads && schema.hasOpenEvent"
            },
            {
              "id": "5b4aeba1-5fd2-4331-bfc6-7a43908f722c",
              "label": "click",
              "condition": "schema.useThreads && schema.hasUrlClickTracking"
            },
            {
              "id": "682bac89-015d-485a-904a-29412cf7b316",
              "label": "bounce",
              "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode) && schema.bounceHandleType === \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType != \"separately\" && schema.bounceHandleType != \"error\""
            },
            {
              "id": "54056279-f0a6-4d51-b406-ae5070863ea8",
              "label": "soft-bounce",
              "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
            },
            {
              "id": "e96b04db-c323-41da-a4de-d45b77f39b33",
              "label": "hard-bounce",
              "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "ccList": [],
          "toList": [
            "``"
          ],
          "bccList": [],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "isReply": false,
          "replyTo": "``",
          "subject": "``",
          "nameFrom": "``",
          "useSource": false,
          "references": [],
          "useThreads": false,
          "attachments": [],
          "emailConfig": "",
          "hasShortUrl": false,
          "timeoutLeng": {
            "input": "`1 week`",
            "outputMode": "ms"
          },
          "wysiwygText": "``",
          "yourMessage": "``",
          "attachmentsF": [],
          "hasOpenEvent": false,
          "processError": true,
          "stepVariable": "defaultValue",
          "attachmentsFD": [],
          "senderAddress": "``",
          "useManualMode": false,
          "isRequestInput": false,
          "isSelectedStep": true,
          "replyToAddress": "``",
          "customMessageId": "this.get('')",
          "senderSubDomain": "``",
          "yourMessageHtml": "",
          "bounceHandleType": "ignore",
          "differentReplyTo": false,
          "emailPreviewLink": "",
          "emailTemplateStr": "",
          "handleComplaints": false,
          "replyToSubDomain": "``",
          "dynamicRecipients": "// [ \"recipient@domain.com\", \"John Doe <john@doe.com>\" ]\t// (all are 'To')\n   /* or */\n// [ { type: \"to\", recipient: \"recipient@domain.com\" }, { type: \"cc\", recipient: \"John Doe <john@doe.com>\" } ]",
          "emailTemplateData": {},
          "manualEmailConfig": "this.get('')",
          "dynamicAttachments": "",
          "ignoreOtherBounces": true,
          "hasUrlClickTracking": false,
          "hasDynamicRecipients": false,
          "hasDynamicAttachments": false,
          "dynamicExitsArrayStart": 7,
          "isEmailInheritableStep": true,
          "__replyCollapsibleState": {
            "isOpen": true
          },
          "__bounceCollapsibleState": {
            "isOpen": false
          },
          "__messageCollapsibleState": {
            "isOpen": true
          },
          "__accountsCollapsibleState": {
            "isOpen": true,
            "_schemaValidators": {
              "emailConfig": "!_.isEmpty(value)"
            }
          },
          "__responseCollapsibleState": {
            "isOpen": true
          },
          "emailTemplateMergeFieldsStr": "",
          "__recipientsCollapsibleState": {
            "isOpen": true
          }
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "transcript": {
            "tags": [],
            "type": "transcript",
            "label": "transcript",
            "enabled": true
          }
        },
        "outputExample": {
          "allResponses": [],
          "latestResponse": {
            "tag": {
              "contents": "",
              "attributes": {
                "id": "",
                "title": ""
              }
            },
            "link": "",
            "type": "",
            "value": "",
            "datetime": "",
            "messageId": "",
            "eventSender": {
              "name": "",
              "email": ""
            }
          },
          "outgoingMessage": {
            "sender": {
              "name": "",
              "address": ""
            },
            "beacons": [],
            "content": {
              "html": "",
              "plain": "",
              "trimmedHtml": "",
              "trimmedText": ""
            },
            "subject": {
              "text": "",
              "trimmed": ""
            },
            "datetime": "",
            "inReplyTo": "",
            "messageId": "",
            "timestamp": "",
            "recipients": {
              "cc": [],
              "to": [],
              "bcc": []
            },
            "references": [],
            "attachments": []
          }
        },
        "help": "To use this step you must create a Botmail or connect an external email account to your OneReach.ai account. To do this go to the *Email acсount* section, open the dropdown and follow the instructions under the *add an email account*.\n\nUse this step to send an email to specified recipients. Options to handle delivery failure messages or an end-user interaction are also available. To send any messages the step requires the bot's and recipient's email addresses.\n\n### Email acсount\nBy default, the bot email account is chosen from the list with an option to add new account. Option to define the email account via merge field is available for Botmail and IMAP accounts.\n\n*Sender name* isn't required, is limited by 78 characters and will be shown as the name next to the bot email address.\n\n### Reply options\nTo continue a conversation that has happened within current flow select the respective option, then choose the step with conversation details from the list and click the *populate this message as a reply* button. The recipients, the subject and the content of previous message exchange will be added from the chosen step.\n\n### Recipients\nThe recipient of the email is expected as an email address and can be set manually or using merge fields. Multiple recipients can be defined via the *add recipient* button, with options to add them as CC, BCC or dynamically in code mode.\n\n### Message content\nThe outgoing message can contain a subject, a body and/or media file(s). Options to define the message body in plain text, using HTLM, WYSIWYG or template builder are available. Media files can be chosen either from OneReach.ai's storage or set as URLs. All message settings and limits are described in the *Body authoring mode* field under the *Info* icon.\n\n### Event handling\nBy default, the step will proceed down the *next* exit after sending the email. To be able to process delivery failure messages and end-user interactions, turn on the *enable event handling* option. Note that `Wait for Events (Email)` step template can also be used for event handling purposes; you can find the information on the types of events in that step's help.\n\nOptions to process *hard* and *soft bounces*, as well as *open*, *click* and *complaint* events are available. In this case the step will also wait for 1 week for any chosen event to happen. The timeout limits are between 10 seconds and 1 month. Examples of acceptable time formats: `26d`, `12h`, `125m` or `530s`. If no event happens after set timeout ends, the flow will proceed down the *timeout* exit. Please note that this value extends the lifespan of the session.\n\nIf a *hard bounce* or a *complaint* was received, that email account is saved to a separate list. All future messages sent to or received from accounts in the list are handled as hard bounces or complaints, respectively. Contact OneReach.ai team to change the list. \n\n### Advanced settings\n\nAn option to override an automatically generated ID of the outgoing message with value stored in a merge field is available.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in *merge field name*. It may include the following properties: all previous responses, the latest response, as well as outgoing message data. Each response may include the time of event, the bot and recipient email addresses, the email contact and content information as well as the unique identifiers of the request and response messages. The structure of the output depends on the event that has triggered the step and is as follows:\n```json\n{\n  \"latestResponse\": {\n    \"messageId\": \"\",\n    \"datetime\": \"\",\n    \"timestamp\": 1,\n    \"type\": \"\",\n    \"link\": \"\",\n    \"beaconLink\": \"\",\n    \"eventSender\": {\n      \"email\": \"\",\n      \"name\": \"\"\n    },\n    \"value\": \"\",\n    \"tag\": {\n      \"attributes\": {\n        \"id\": \"\",\n        \"title\": \"\"\n      },\n      \"contents\": \"\"\n    }\n  },\n  \"allResponses\": [],\n  \"outgoingMessage\": {\n    \"messageId\": \"\",\n    \"timestamp\": \"\",\n    \"datetime\": \"\",\n    \"sender\": {\n      \"name\": \"\",\n      \"address\": \"\"\n    },\n    \"subject\": {\n      \"text\": \"\",\n      \"trimmed\": \"\"\n    },\n    \"recipients\": {\n      \"to\": [],\n      \"cc\": [],\n      \"bcc\": []\n    },\n    \"content\": {\n      \"plain\": \"\",\n      \"html\": \"\",\n      \"trimmedText\": \"\",\n      \"trimmedHtml\": \"\"\n    },\n    \"inReplyTo\": \"\",\n    \"references\": [],\n    \"attachments\": [],\n    \"beacons\": []\n  }\n}\n```\n\n### Error handling\n*Handle error* is on by default and adds an *error* exit to the step. The flow will exit through it if any error was encountered during the execution of the step (e.g. if recipient's email address is invalid and bounce handling is off).\n\n### Reporting\n*Step* and *Transcript* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services Dependencies:\n- flow builder - 2.4.0 or higher\n- event-manager - 2.0.1 or higher\n- deployer - 2.0.0 or higher\n- Email_SMTP adapter - the latest version\n\n### Release notes:\nv1.6.4\n- Adapters installation feature was hidden.\n- Adding an email account from the merge field was added.\n- Complaints and bounce accounts lists were added.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "c58ab054-6838-4b33-994e-d4d35c7aad49",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "eec0db72-ae6f-473c-94f3-573d183bf178",
              "data": {
                "id": "97229878-c536-49af-9766-3eb4eeeae5bc",
                "label": "timeout",
                "condition": "schema.useThreads"
              },
              "component": "exitStatic"
            },
            {
              "id": "b2bd9c68-888f-471b-89fc-cb70fd10d145",
              "data": {
                "id": "c2db4ced-cb1b-4af2-8055-35c509e310ed",
                "label": "open",
                "condition": "schema.useThreads && schema.hasOpenEvent"
              },
              "component": "exitStatic"
            },
            {
              "id": "2197c23b-6468-41f6-a081-3b5d3f08a5e9",
              "data": {
                "id": "5b4aeba1-5fd2-4331-bfc6-7a43908f722c",
                "label": "click",
                "condition": "schema.useThreads && schema.hasUrlClickTracking"
              },
              "component": "exitStatic"
            },
            {
              "id": "706e4b82-6bdf-4a6a-9de9-c8b8df37b5ef",
              "data": {
                "id": "682bac89-015d-485a-904a-29412cf7b316",
                "label": "bounce",
                "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode) && schema.bounceHandleType === \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType != \"separately\" && schema.bounceHandleType != \"error\""
              },
              "component": "exitStatic"
            },
            {
              "id": "8836a78d-226c-41be-bfea-b6603d4014df",
              "data": {
                "id": "54056279-f0a6-4d51-b406-ae5070863ea8",
                "label": "soft-bounce",
                "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
              },
              "component": "exitStatic"
            },
            {
              "id": "ee07f609-f419-429e-a985-5fb9e781c774",
              "data": {
                "id": "e96b04db-c323-41da-a4de-d45b77f39b33",
                "label": "hard-bounce",
                "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
              },
              "component": "exitStatic"
            },
            {
              "id": "aa984491-fe2d-4a66-91cf-531e421a884a",
              "data": {
                "index": 7
              },
              "component": "exitDynamic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "9483dbad-89de-44b8-afb4-319fecac707d",
              "data": {
                "open": true,
                "header": "Email account",
                "inputs": [
                  {
                    "id": "7dc7cad8-4352-44ec-ab39-b693f5ace322",
                    "data": {
                      "data": "{\n  \"__accountsCollapsibleState\": {\n    \"isOpen\": true,\n    \"_schemaValidators\": {\n      \"emailConfig\": \"!_.isEmpty(value)\"\n    }\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__accountsCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-dvqwfselbipmcgrzukhtanyxjo",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "3bd8c36e-8537-4d37-826f-c07ac957d124",
                    "data": {
                      "label": "Add account from merge field",
                      "helpText": "Bounce events can't be handled for Gmail, Outlook, AOL, and Yahoo accounts",
                      "variable": "useManualMode",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "a4b32421-3f29-4d8b-93c1-a29c61920817",
                    "data": {
                      "inbound": true,
                      "multiple": true,
                      "outbound": true,
                      "filterRules": [
                        {
                          "err": null,
                          "exp": "true",
                          "vforkey": "383d649c-f0bb-44a9-8d90-43162dd851c4"
                        }
                      ],
                      "variableName": "emailConfig",
                      "inboundRequired": false,
                      "renderCondition": "schema.useManualMode === false",
                      "disableCondition": "schema.useManualMode === true",
                      "outboundRequired": false
                    },
                    "meta": {
                      "name": "manage-email",
                      "type": "onereach-studio-form-input",
                      "version": "1.2.2"
                    },
                    "label": "Manage Email Accounts (1.2.2)",
                    "compiled": {},
                    "component": [
                      "manage-email",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3.us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3.us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/index.js\"][\"manage-email-accounts\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3.us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/index.js\"][\"manage-email\"]"
                    ]
                  },
                  {
                    "id": "d8f036f5-eaa9-4db5-b93f-396f5595492e",
                    "data": {
                      "label": "",
                      "helpText": "",
                      "variable": "manualEmailConfig",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a253541-43dc-4dc2-9ed9-2506e73a98af",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.useManualMode === true",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "8d21a7ee-9bc4-487f-9d37-29c15c4b8368",
                          "errorMessage": "The Email account is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "1a3f5127-6cb4-41f1-93a3-be1c69391c53",
                                "ruleType": {
                                  "func": "{ return !validators.validateMergeTagInput(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "merge tag doesn't have value",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.manualEmailConfig",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a253541-43dc-4dc2-9ed9-2506e73a98af",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.useManualMode === true",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "395c6a3d-edfc-48c8-bc1d-8962f50136c1",
                    "data": {
                      "data": "{\n  \"nameFrom\": \"``\",\n  \"differentReplyTo\": false,\n  \"senderAddress\": \"``\",\n  \"senderSubDomain\": \"``\",\n  \"replyToAddress\": \"``\",\n  \"replyToSubDomain\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n// function fromStr(str){\n//   const isNestedStrRegex = /^['\"`]([\\n]||.)*['\"`]$/;\n//   const isMergeFildRegex = /this.get\\(['\"`].*['\"`]\\)/g;\n//   if (!isNestedStrRegex.test(str) && !isMergeFildRegex.test(str)) return `\\`${str}\\``;\n//   return str;\n// }\n\nfunction toJson(data) {\n\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  replyToAddress: {\n    required(value) {\n      if (!this.schema.differentReplyTo) return true;\n      const validator = createValidatorRequired('Reply to address is required');\n      return validator.call(this, value);\n    }\n  },\n  senderAddress: {\n    required(value) {\n      if (this.schema.emailConfig.type !== 'advanced') return true;\n      \n      if (!this.schema.senderAddress) return true;\n      const validator = createValidatorRequired('The Sender email address is required.');\n      return validator.call(this, value);\n    }\n  }\n}\n\nfunction createValidatorRequired(errorMessage) {\n  return function (value = '``') {\n    if (this.isNew) return true;\n    const val = value[0] === '`' && value[value.length - 1] === '`' ? value.slice(1, -1) : value;\n    return validators.helpers.withParams(\n      { type: 'required', error: errorMessage },\n      validators.required\n    )(val);\n  }\n}\n",
                      "applyToJson": true,
                      "formTemplate": "<wildcard :schema.sync=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\" :steps=\"steps\" :step-id=\"stepId\" :v=\"$v\" :merge-fields=\"mergeFields\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bdafoigmvtucskprnzhjyelxqw",
                      "componentLogic": "{\n  components: {\n    'sender-name-input': {\n      template: `\n        <or-text-expression name=\"name\" \n        label=\"Sender name\" \n        v-model=\"name\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :readonly=\"readonly\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n      `,\n      props: {\n        emailFrom: {\n          type: String,\n          default: \"``\"\n        },\n        nameFrom: {\n          type: String,\n          default: \"``\"\n        },\n        mailClient: {\n          type: String,\n          default: \"\"\n        },\n        userEmail: {\n          type: String,\n          default: \"``\"\n        },\n        sendType: {\n          type: String,\n          default: 'smtp'\n        },\n        steps: '',\n        stepId: '',\n        readonly: {\n          type: Boolean,\n          default: false\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        }\n      },\n      computed: {\n        email: {\n          get() {return this.emailFrom},\n          set(newEmail) {this.$emit('update:emailFrom', newEmail)}\n        },\n        name: {\n          get() { return this.nameFrom },\n          set(newName) {this.$emit('update:nameFrom', newName)}\n        },\n        readonlyEmail() {return this.mailClient !== 'Other' && this.sendType == 'smtp'}\n      },\n      watch: {\n        userEmail() {\n          if (this.readonlyEmail === true) {\n            this.email = this.userEmail;\n          }\n        },\n        mailClient() {\n          this.email = this.userEmail;\n        }\n      }\n    },\n    'different-reply-addreess-toggle': {\n      template: `\n        <div class=\"different-reply-to-wrapper\">\n          <or-switch v-model=\"differentReplyTo\" :disabled=\"readonly\">\n            Use a different reply-to address\n          </or-switch>\n        </div>\n      `,\n      computed : {\n        differentReplyTo : {\n          get () { return this.value; },\n          set (value) { this.$emit('input', value); }\n        }\n      },\n      props : {\n        value : {\n          type : String,\n          default : ''\n        },\n        readonly: {\n          type : Boolean \n        },\n        stepId: '',\n      }\n    },\n    'email-domain-input': {\n      template: `\n        <div class=\"reply-to-address-wrapper\">\n          <div class=\"pac-row with-icon\">\n            <or-text-expression\n              :readonly=\"readonly\"\n              :steps=\"steps\"\n              :step-id=\"stepId\"\n              :label=\"labelTextEmail\"\n              placeholder=\"some_address\"\n              v-model=\"_address\"\n              :invalid=\"isInvalid\"\n              :error=\"errorMessage\"\n              :merge-fields=\"mergeFields\"\n            >\n            </or-text-expression>\n            <span class=\"ui-icon\">@</span>\n          </div>\n          <div class=\"pac-row\">\n            <or-text-expression\n              :readonly=\"readonly\"\n              v-static-value=\"domain\"\n              :steps=\"steps\"\n              :step-id=\"stepId\" \n              :label=\"labelTextDomain\"\n              placeholder=\"optional\"\n              :merge-fields=\"mergeFields\"\n              v-model=\"_subdomain\">\n            </or-text-expression>\n          </div>\n        </div>\n      `,\n      directives: {\n        'static-value': {\n          bind(el, binding, vnode) {\n            const listenEvents = (rootElement, eventsStrign, handler) => {\n              eventsStrign.split(' ').forEach(eventName => {\n                rootElement.addEventListener(eventName, handler);\n              });\n            };\n            \n            const appendStaticValue = () => {\n              const div = document.createElement('div');\n              div.className = 'static-value';\n              div.innerText = binding.value;\n              const wrapper = el.querySelector('.or-editable-wrapper');\n              wrapper.appendChild(div);\n            };\n            \n            el.classList.add('with-static-val');\n            const editableElement = el.querySelector('.editable');\n    \n            listenEvents(editableElement, 'focus blur', () => {\n              vnode.componentInstance.$nextTick(() => el.classList.add('with-static-val'));\n            });\n    \n            appendStaticValue();\n          },\n          componentUpdated(el, binding) {\n            const staticValueElement = el.querySelector('.static-value');\n            staticValueElement.innerText = binding.value;\n          }\n        }\n      },\n      computed: {\n        _address: {\n          get() { return this.address },\n          set(value) { this.$emit('update:address', value); }\n        },\n        _subdomain: {\n          get() { return this.subdomain },\n          set(value) { this.$emit('update:subdomain', value); }\n        },\n        labelTextEmail() {\n          return `${this.label} email address`;\n        },\n        labelTextDomain() {\n          return `${this.label} email domain`;\n        },\n        isInvalid(){\n          return _.get(this.v.schema, `${this.validatorSchemaFields[0]}.$error`);\n        },\n        errorMessage(){\n          return _.get(this.v.schema, `${this.validatorSchemaFields[0]}.$params.required.error`);\n        }\n      },\n      props: {\n        isNew: Boolean,\n        readonly: {\n          type: Boolean\n        },\n        address: {\n          type: String,\n          default: '``'\n        },\n        label: {\n          type: String,\n          default: '',\n        },\n        domain: {\n          type: String,\n          default: 'example.com'\n        },\n        subdomain: {\n          type: String,\n          default: '``'\n        },\n        steps: {\n          type: Array,\n          default: []\n        },\n        stepId: {\n          type: String,\n          default: ''\n        },\n        v: {\n          type: Object,\n          default: {}\n        },\n        validatorSchemaFields: {\n          type: Array,\n          default: []\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        }\n      }\n    }\n  },\n  computed : {\n    disabled(){\n      return this.readonly;\n    },\n    isAdvancedAccount(){\n      const accountType = _.get(this.schema, 'emailConfig.type');\n      return accountType === 'advanced';\n    },\n    accountDomain(){\n      return `.${_.get(this.schema, 'emailConfig.domain', '')}`;\n    }\n  },\n  props : {\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps: {\n      type: Array,\n      default: []\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    v: {\n      type: Object,\n      default: {}\n    },\n    schema: {\n      type: Object,\n      default: {}\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"schema\">\n  <sender-name-input :name-from.sync=\"schema.nameFrom\"\n    :email-from.sync=\"schema.emailFrom\"\n    :mail-client=\"schema.mailClient\"\n    :user-email=\"schema.userEmail\"\n    :sendType=\"schema.sendType\"\n    :step-id=\"stepId\" \n    :steps=\"steps\"\n    :readonly=\"readonly\"\n    :merge-fields=\"mergeFields\">\n  </sender-name-input>\n  <!--TODO: Render for pro account only-->\n  <email-domain-input\n    v-if=\"isAdvancedAccount\"\n    :address.sync=\"schema.senderAddress\"\n    label=\"Sender\"\n    :subdomain.sync=\"schema.senderSubDomain\"\n    :domain=\"accountDomain\"\n    :validator-schema-fields=\"['senderAddress']\"\n    :is-new=\"isNew\"\n    :readonly=\"disabled\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :v=\"v\"\n    :merge-fields=\"mergeFields\">\n  </email-domain-input>\n  <!--TODO: Render for pro account only-->\n  <different-reply-addreess-toggle\n    v-if=\"isAdvancedAccount\"\n    v-model=\"schema.differentReplyTo\"\n    :readonly=\"disabled\">\n  </different-reply-addreess-toggle>\n  <or-collapsible v-if=\"schema.differentReplyTo && isAdvancedAccount\" title=\"Reply-to address\" borderless :invalid=\"false\" open>\n    <email-domain-input\n      :address.sync=\"schema.replyToAddress\"\n      label=\"Reply-to\"\n      :subdomain.sync=\"schema.replyToSubDomain\"\n      :domain=\"accountDomain\"\n      :validator-schema-fields=\"['replyToAddress']\"\n      :is-new=\"isNew\"\n      :readonly=\"disabled\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :v=\"v\"\n      :merge-fields=\"mergeFields\">\n    </email-domain-input>\n  </or-collapsible>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".different-reply-to-wrapper {\n  // border-bottom: 1px solid #dfdfdf;\n  padding: 11px 0px 8px;\n}\n\n.pac-row {\n  position: relative;\n  display: flex;\n\n  & > .or-text-expression {\n    flex-grow: 1;\n    margin-right: 32px;\n    max-width: calc(100% - 32px);\n  }\n\n  & > .ui-icon {\n    order: 1;\n    margin-left: 0.5rem;\n    align-self: flex-end;\n    margin-bottom: 20px;\n    color: rgba(0, 0, 0, 0.54);\n    line-height: 1;\n  }\n\n  & > .or-text-expression.invalid + .ui-icon {\n    margin-bottom: 34px;\n  }\n\n  & > .or-text-expression.active + .ui-icon {\n    color: #64b2da;\n  }\n\n  &.with-icon {\n    & > .or-text-expression {\n      margin-right: 0;\n    }\n  }\n}\n\n.with-static-val {\n  .or-editable-wrapper.single-line {\n    display: flex;\n    max-width: 100%;\n    overflow: hidden;\n  }\n\n  .editable {\n    flex-grow: 1;\n  }\n\n  .static-value {\n    font-size: 14px;\n    color: #0f232e;\n    bottom: 21px;\n    line-height: 1.5;\n    padding: 7px 10px;\n    max-width: 50%;\n    min-width: 30%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    text-align: right;\n  }\n\n  .placeholder {\n    position: absolute;\n    bottom: 0px;\n  }\n}\n\n.ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}\n\n"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "41d125ed-0e8b-402b-85a4-34860d3e2492",
              "data": {
                "open": true,
                "header": "Reply options",
                "inputs": [
                  {
                    "id": "1b825895-8c7f-4691-85e6-68ca7003c5fd",
                    "data": {
                      "data": "{\n  \"__replyCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__replyCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-gokmbjhzaduyipqnsxwcrevftl",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "62f20862-2368-4580-a7db-d5e70ccdfe3f",
                    "data": {
                      "data": "{\"isRequestInput\": false, \"replyTo\": \"``\", \"nameFrom\": \"``\", \"references\": [], \"isReply\": false, \"isSelectedStep\": true}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction fromStr(str){\n  const isNestedStrRegex = /^['\"`]([\\n]||.)*['\"`]$/;\n  const isMergeFildRegex = /this.get\\(['\"`].*['\"`]\\)/g;\n  if (!isNestedStrRegex.test(str) && !isMergeFildRegex.test(str)) return `\\`${str}\\``;\n  return str;\n}\n\nfunction toJson(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "isSelectedStep:{\n  custom(val) {\n    return val\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :reply.sync=\"schema.reply\"\n  :replyTo.sync=\"schema.replyTo\"\n  :references.sync=\"schema.references\"\n  :isReply.sync=\"schema.isReply\"\n  :isSelectedStep.sync=\"schema.isSelectedStep\"\n  :nameFrom.sync=\"schema.nameFrom\"\n  :selectedStepId.sync=\"schema.selectedStepId\"\n  :subject.sync=\"schema.subject\"\n  :yourMessageHtml.sync=\"schema.yourMessageHtml\"\n  :mode.sync=\"schema.mode\"\n  :toList.sync=\"schema.toList\"\n  :is-new=\"isNew\"\n  :steps=\"steps\"\n  :stepId=\"stepId\"\n  :readonly=\"readonly\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-btwnalpeyvzdqmukigrjxhcosf",
                      "componentLogic": "{\n  props : {\n    steps: {\n      type: Array,\n      default() {\n        return [];\n      },\n    },\n    readonly: {\n      type: Boolean\n    },\n    nameFrom: {\n      type: String,\n      default: ``,\n    },\n    isSelectedStep:{\n      type:Boolean,\n      default: false\n    },\n    subject: {\n      type: String,\n    },\n    yourMessageHtml: {\n      type: String\n    },\n    selectedStepId: {\n      type: String\n    },\n    isReply: {\n      type: Boolean\n    },\n    toList: {\n      type: String\n    },\n    stepId: {\n      type: String\n    },\n    references: {\n      type: Array\n    },\n    replyTo: {\n      type: String\n    },\n    mode: {\n      type: Object\n    },\n    isNew: {\n      type: Boolean\n    }\n  },\n  computed: {\n    _isReply: {\n      get(){\n        return this.isReply;\n      },\n      set(value){\n        if (value && !this.selectedStepId) {\n          this.$emit('update:selectedStepId', _.get(this.parents, '[0].id'));\n        }\n        \n        if (!value) {\n          this._selectedStepId = null\n          this.isSelectedStepExists = true\n        }\n        \n        this.$emit('update:isReply', value);\n      }\n    },\n    _selectedStepId: {\n      get(){ return this._isReply ? this.selectedStepId : null; },\n      set(value){ this.$emit('update:selectedStepId', value); }\n    },\n    parents() {\n      const index = _.findIndex(this.steps, { id: this.stepId });\n      if (index === -1) return [];\n      const parents = id => {\n        const parent = _.find(\n          this.steps, \n          { data: { exits: [{stepId: id}] } }\n        );\n        return parent ? [parent, ...parents(parent.id)] : [];\n      };\n      \n      return parents(this.steps[index].id)\n        .filter(step => _.get(step, 'data.isEmailInheritable', false));\n    },\n    options() {\n      return _.chain(this.parents)\n        .map(step => ({ label: step.label, value: step.id }))\n        .filter(step => step.label)\n        .sort()\n        .value();\n    },\n    selectedStepMergeField() {\n      let mergeData = _.chain(this.steps)\n        .find({ id: this.selectedStepId })\n        .get('data')\n        .value();\n        \n      mergeData = Object.assign({ mfCode: 'await this.mergeFields' }, mergeData);\n      \n      return mergeData;\n    },\n    isSelectedStepExists: {\n      set(val) {\n        if (val) {\n          this.$emit('update:isSelectedStep', true)\n          return false\n        }\n      },\n      get() {\n       if (this._isReply) {\n         if (!this.selectedStepId) {\n          // this.$emit('update:errorMessage', 'Destination step is required.')\n          this.errorMsg = 'Destination step is required.'\n           this.$emit('update:isSelectedStep', false)\n          \n           return true\n         } else if (_.isEmpty(this.options)) {\n          // this.$emit('update:errorMessage', 'Broken reference: the selected step is detached from the main flow tree.')\n           this.errorMsg = 'Broken reference: the selected step is detached from the main flow tree.'\n           this.$emit('update:isSelectedStep', false)\n          \n           return true\n         } else if (this.selectedStepId && !_.isEmpty(this.options)) {\n\n           this.$emit('update:isSelectedStep', true)\n           return false\n         }\n       } else {\n\n         this.$emit('update:isSelectedStep', true)\n         return false\n       }\n      }\n    }\n  },\n  watch: {\n    _selectedStepId(stepId, oldStepId){\n      this.highlightToggle(stepId, oldStepId);\n    },\n  },\n  data(){\n    return {\n      errorMsg: 'Destination step is required.',\n      isSelectedStep: this.isSelectedStep,\n      propsToPopulate: {\n        nameFrom: mf => mf.waitForEmailStep ? \"``\" : \"`${\" + this.createMergeField(mf, 'outgoingMessage.sender.name') + \"}`\",\n        subject: mf => \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.subject.text' : 'outgoingMessage.subject.text') + \"}`\",\n        mode: mf => ({\n          \"label\": \"HTML (raw)\",\n          \"value\": \"html\",\n        }),\n        yourMessageHtml: mf => \"${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.content.html' : 'latestResponse.content.html') + \"}\",\n        toList: mf => [ \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.recipient.address' : 'outgoingMessage.recipients.to') + \"}`\"],\n        replyTo: mf => \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.messageId' : 'outgoingMessage.messageId') + \"}`\",\n        references: mf => \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.references' : 'outgoingMessage.references') + \", \" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.messageId' : 'outgoingMessage.messageId') + \"}`\",\n      }\n    }\n  },\n  methods: {\n    createMergeField(mfData, field) {\n      if (!mfData) return \"``\";\n      \n      return mfData.mfCode + \"['\" + mfData.dataOut.name + \"']\" + \".get({path: '\" + field + \"'})\";\n    },\n    highlight(stepId, state, inNextTick){\n      if (!stepId) return;\n      const opts = { stepId, highlightClass : 'hover' };\n      if (state) {\n        this.$flow.highlightStepOn(opts);\n      } else {\n        this.$flow.highlightStepOff(opts);\n      }\n    },\n    highlightToggle(stepId, oldStepId){\n      if (oldStepId) {\n        this.highlight(oldStepId, false);\n      }\n      this.highlight(stepId, true);\n    },\n    handlePopulateClick(){\n      if (this.isPropsEmpty()) {\n        return this.populate();\n      }\n      this.showConfirmation();\n    },\n    handleSelectMouseOut(stepId){\n      if (this.selectedStepId === stepId) return;\n      this.highlight(stepId, false);\n    },\n    showConfirmation(){\n      this.$refs.confirmation.open();\n    },\n    populate(){\n      if(!this.selectedStepMergeField) return;\n\n      const keys = _.keys(this.propsToPopulate);\n      _.forEach(keys, prop => {\n        this.$emit(`update:${prop}`, this.propsToPopulate[prop](this.selectedStepMergeField));\n      });\n    },\n    isPropsEmpty(){\n      return _.without(\n        _.keys(this.propsToPopulate),\n        'htmlFlag'\n      ).reduce((acc, key) => {\n        if (!acc) return acc;\n        const value = this[key];\n        \n        const checkString = val => {\n          if(!val) return true;\n          const str = (val + '').trim();\n          if(/^`.*`$/.test(str)) {\n            return !str.slice(1, -1);\n          }\n          return !str;\n        };\n        \n        if (_.isArray(value)) {\n          return checkString(value[0]);\n        }\n        \n        return checkString(value);\n      }, true);\n    },\n    setIsReply(){\n      if (this.isNew && this.parents.length) {\n        this._isReply = true;\n      }\n    },\n    validateSelected() {\n      if(!this._isReply) {\n        return true\n      } else {\n        return this.isSelectedStepExists\n      }\n    },\n    validateSelectedStep(options, selected) {\n      const found = options.filter((option) => {\n          return option.value === selected\n      })\n      return _.isEmpty(found)\n    },\n  },\n  mounted(){\n    this.highlight(this._selectedStepId, true);\n    this.setIsReply();\n  },\n  beforeDestroy(){\n    this.highlight(this._selectedStepId, false);\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch v-model=\"_isReply\" :disabled=\"readonly\">\n    Continue conversation\n  </or-switch>\n  <div v-if=\"isReply\">\n    <or-modal ref=\"confirmation\" title=\"Are you sure?\">\n      Existing message content will be discarded.\n      <div slot=\"footer\">\n        <or-button @click=\"$refs.confirmation.close()\">Cancel</or-button>\n        <or-button @click=\"() => { $refs.confirmation.close(); populate() }\" color=\"primary\">Okay</or-button>\n      </div>\n    </or-modal>\n    <div class=\"select-destination-wr\">\n      <or-select \n        has-search \n        class=\"select-destination\"\n        placeholder=\"Select a step\"\n        search-placeholder=\"Type to search\"\n        :options=\"options\"\n        v-model=\"_selectedStepId\"\n        :invalid=\"isSelectedStepExists\"\n        :error=\"errorMsg\"\n        :disabled=\"readonly\"\n      >\n        <template slot-scope=\"props\" slot=\"option\">\n          <div \n            class=\"ui-select-option__basic_full\"\n            @mouseenter=\"highlight(props.option.value, true)\"\n            @mouseout=\"handleSelectMouseOut(props.option.value)\"\n          >\n            {{props.option.label}}\n          </div>\n        </template>\n      </or-select>\n    </div>\n    <or-button :disabled=\"readonly || _.isEmpty(options)\" size=\"small\" color=\"primary\" icon=\"reply\" @click=\"handlePopulateClick\">Populate this message as a reply</or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-select-option__basic_full {\n  min-width: 100%;\n}\n\n.ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}\n\n.ui-checkbox {\n  .ui-checkbox__checkmark {\n    top: 3px;\n  }\n  \n  .ui-checkbox__label-text {\n    color: #373a3c;\n    font-size: .9375rem;\n    font-weight: 400;\n    line-height: 1.5;\n  }\n}\n\n.ui-checkbox.ui-checkbox--color-primary.is-checked,\n.ui-checkbox.ui-checkbox--color-primary.is-checked.is-active {\n  .ui-checkbox__checkmark:before {\n    background-color: #2196f3;\n    border-color: #2196f3;\n  }\n  \n  .ui-checkbox__checkmark:after {\n    border-color: #fff;\n  }\n  \n  &:hover {\n    .ui-checkbox__checkmark:before {\n      background-color: #2196f3;\n      border-color: #2196f3;\n    }\n    \n    .ui-checkbox__checkmark:after {\n      border-color: #fff;\n    }\n  }\n  \n  &.is-disabled {\n    opacity: .5;\n  }\n}\n"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "7ca1b216-9546-43b6-9d13-4ccbccf8b806",
              "data": {
                "open": true,
                "header": "Recipients",
                "inputs": [
                  {
                    "id": "84956a96-41b5-4788-8361-944306b78126",
                    "data": {
                      "data": "{\n  \"__recipientsCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__recipientsCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zaikwybtjrcvhfmdoxugpsleqn",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": "",
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "2248084b-db65-4e80-bc95-219391a641bf",
                    "data": {
                      "data": "{\n  \"toList\": [\"``\"],\n  \"ccList\": [],\n  \"bccList\": [],\n  \"hasDynamicRecipients\": false,\n  \"dynamicRecipients\": \"// [ \\\"recipient@domain.com\\\", \\\"John Doe <john@doe.com>\\\" ]\\t// (all are 'To')\\n   /* or */\\n// [ { type: \\\"to\\\", recipient: \\\"recipient@domain.com\\\" }, { type: \\\"cc\\\", recipient: \\\"John Doe <john@doe.com>\\\" } ]\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nconst replaceComments = str => str\n      .replace(/\\/\\/[\\s\\S]+?.*(\\n || $)/g, '')\n      .replace(/\\/\\*[.\\s\\S\\n]*\\*\\//g, '')\n      .trim();\n\nfunction toJson(data, key) {\n  \n  if (key === 'dynamicRecipients') {\n    return replaceComments(data) || '[]';\n  }\n  \n  if (typeof data === 'string') {\n    return data;\n  }\n  \n  if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  \n  return JSON.stringify(data);\n}\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  toList: {\n    $each: {\n      required\n    }\n  },\n  ccList: {\n    $each: {\n      required\n    }\n  },\n  bccList: {\n    $each: {\n      required\n    }\n  }\n}\n\nfunction required(model, field, type){\n  if (this.isNew) return true;\n  const val = model.replace(/^(`).*(`)$/, (m, f, s) => (f && s) ? m.slice(1, -1) : m );\n  return validators.helpers.withParams(\n    { type: 'required', error: 'The Recipient address is required.' },\n    validators.required\n  )(val);\n}\n\nfunction email(model){\n  if (this.isNew) return true;\n  const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const mergeFieldRegex = /\\$\\{[^\\}]*\\}|this\\.get\\(['\"`].*?['\"`]\\)/g;\n  const val = model\n    .replace(/^(`).*(`)$/, (m, f, s) => (f && s) ? m.slice(1, -1) : m )\n    .replace(/.*\\s*<(.+)>/, (match, email) => email)\n    .replace(mergeFieldRegex, ' ')\n    .trim();\n  return validators.helpers.withParams(\n    { type: 'email', error: 'Invalid email' },\n    v => v ? emailRegex.test(v) : true\n  )(val);\n}\n\nfunction validMergeField (value = '') {\n  if (this.isNew) return true;\n  const containMergeFields = /\\$\\{[^\\}]*\\}|this\\.get\\(['\"`].*?['\"`]\\)/g.test(value);\n  const isMergeFieldsValid = /\\$\\{this\\.get\\(['\"`][a-zA-Z0-9_.\\[\\]]+?['\"`]\\)\\}/g.test(value);\n  return validators.helpers.withParams(\n    {type: 'validMergeField', error: 'Invalid merge field.'},\n    (v) => containMergeFields ? isMergeFieldsValid : true\n  )(value);\n}\n",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-apikldxrumjoezbn\n  :to-list.sync=\"schema.toList\"\n  :cc-list.sync=\"schema.ccList\"\n  :bcc-list.sync=\"schema.bccList\"\n  :has-dynamic-recipients.sync=\"schema.hasDynamicRecipients\"\n  :dynamic-recipients.sync=\"schema.dynamicRecipients\"\n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :v=\"$v\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\">\n</or-wildcard-apikldxrumjoezbn>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-apikldxrumjoezbn",
                      "componentLogic": "{\n  props : {\n    toList: {\n      type: Array,\n      default () {\n        return ['``'];\n      }\n    },\n    ccList: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    bccList: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    dynamicRecipients: {\n      type: String,\n      default () {\n        return \"\";\n      }\n    },\n    hasDynamicRecipients: {\n      type: Boolean,\n      default () { return false; }\n    },\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v: {\n      type: Object,\n      default: {}\n    },\n    isNew: Boolean,\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  },\n  computed : {\n    toArr : {\n      get () { return this.toList; },\n      set (value) { this.$emit('update:toList', value); }\n    },\n    ccArr : {\n      get () { return this.ccList; },\n      set (value) { this.$emit('update:ccList', value); }\n    },\n    bccArr : {\n      get () { return this.bccList; },\n      set (value) { this.$emit('update:bccList', value); }\n    },\n    addRecipientOpts () {\n      return [\n        { label: \"To\", disabled: false },\n        { label: \"Cc\", disabled: false },\n        { label: \"Bcc\", disabled: false },\n        { label: \"Dynamic\", disabled: this.hasDynamicRecipients }\n      ]\n    }\n  },\n  watch: {\n    hasDynamicRecipients (newVal) {\n      this.$emit('update:hasDynamicRecipients', newVal);\n    },\n    dynamicRecipients (newVal) {\n      this.$emit('update:dynamicRecipients', newVal);\n    }\n  },\n  methods: {\n    isInvalid(index, listLabel){\n      const list = _.get(this, `v.schema.${listLabel}.$each`, []);\n      const current = list[index] || null;\n      return _.get(current, '$invalid', true);\n    },\n    errorMessage(index, listLabel) {\n      const list = _.get(this, `v.schema.${listLabel}.$each`, []);\n      const current = list[index] || {};\n      if(!current.$invalid) return '';\n      const errorsKeys = Object.getOwnPropertyNames(current).filter(p => p[0] !== '$');\n      const error = _.find(errorsKeys, key => !current[key]);\n      return _.get(current, `$params.${error}.error`, 'NO MESSAGE');\n    },\n    addField (arr) {\n      arr.push('``');\n    },\n    removeField (arr, index) {\n      arr.splice(index, 1)\n    },\n    addRecipientOptSelect(selection) {\n      switch (selection.label.toLowerCase()) {\n        case 'to': \n          this.addField(this.toArr);\n          break;\n        case 'cc':\n          this.addField(this.ccArr);\n          break;\n        case 'bcc':\n          this.addField(this.bccArr)\n          break;\n        case 'dynamic':\n          this.hasDynamicRecipients = true;\n          break;\n        default:\n          console.error('Impossible recipient menu selection!', selection);\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"!!toArr.length\" class=\"emails-section\">\n  <h4 v-if=\"!!ccArr.length || !!bccArr.length || hasDynamicRecipients\">To</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\" v-for=\"(toEmail, index) in toArr\" :key=\"index\">\n      <or-text-expression v-model=\"toArr[index]\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :invalid=\"isInvalid(index, 'toList')\"\n        :error=\"errorMessage(index, 'toList')\"\n        :readonly=\"readonly\"\n        placeholder=\"John Doe <johndoe@acme.co>\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n        <button v-if=\"(toArr.length > 1) || hasDynamicRecipients\" class=\"btn-remove-input\" :disabled=\"readonly\" @click=\"removeField(toArr, index)\"><or-icon>close</or-icon></button>\n    </div>\n  </div>\n</div>\n<div class=\"emails-section\" v-if=\"!!ccArr.length\">\n  <h4>CC</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\" v-for=\"(ccEmail, index) in ccArr\" :key=\"index\">\n      <or-text-expression v-model=\"ccArr[index]\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :invalid=\"isInvalid(index, 'ccList')\"\n        :error=\"errorMessage(index, 'ccList')\"\n        :readonly=\"readonly\"\n        placeholder=\"John Doe <johndoe@acme.co>\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n        <button class=\"btn-remove-input\" :disabled=\"readonly\" @click=\"removeField(ccArr, index)\"><or-icon>close</or-icon></button>\n    </div>\n  </div>\n</div>\n<div class=\"emails-section\" v-if=\"!!bccArr.length\">\n  <h4>BCC</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\" v-for=\"(bccEmail, index) in bccArr\" :key=\"index\">\n      <or-text-expression v-model=\"bccArr[index]\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :invalid=\"isInvalid(index, 'bccList')\"\n        :error=\"errorMessage(index, 'bccList')\"\n        :readonly=\"readonly\"\n        placeholder=\"John Doe <johndoe@acme.co>\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n        <button class=\"btn-remove-input\" :disabled=\"readonly\" @click=\"removeField(bccArr, index)\"><or-icon>close</or-icon></button>\n    </div>\n  </div>\n</div>\n<div class=\"emails-section\" v-if=\"hasDynamicRecipients\">\n  <h4 style=\"margin-bottom:-24px;\">Dynamic</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\">\n      <or-code\n        v-model=\"dynamicRecipients\"\n        :readonly=\"readonly\"\n        mode=\"javascript\"\n        disableAutocomplete\n        disableWarnings\n        :steps=\"steps\"\n        :step-id=\"stepId\"\n      ></or-code>\n      <button\n        v-if=\"toList.length\"\n        class=\"btn-remove-input\"\n        :disabled=\"readonly\"\n        @click=\"hasDynamicRecipients = false;\"\n        style=\"margin-top: 42px;\"\n      >\n        <or-icon>close</or-icon>\n      </button>\n    </div>\n  </div>\n</div>\n<or-button\n  class=\"clear-btn-dropdown\"\n  ref=\"addRecipientBtn\"\n  color=\"primary\"\n  size=\"small\"\n  type=\"secondary\"\n  v-if=\"!readonly\"\n  has-dropdown\n  :disableRipple=\"true\">\n    <or-menu\n      contain-focus\n      slot=\"dropdown\"\n      :options=\"addRecipientOpts\"\n      @select=\"addRecipientOptSelect\"\n      @close=\"$refs.addRecipientBtn.closeDropdown()\"\n    ></or-menu>\n  + Add recipient\n</or-button>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".email-field-wr {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: start;\n\tmargin-bottom: 12px;\n\t\n\t&:first-child {\n\t  margin-top: -32px;\n\t}\n\t\n\t.or-text-expression, .or-code {\n\t  width: calc(100% - 35px);\n\t  flex: 100%;\n\t  margin-bottom: 0;\n\t}\n}\n\n.btn-add-input,\n.btn-remove-input {\n\tborder: 0;\n\tbackground: none;\n  color: #64B2DA;\t\n  font-size: 14px;\t\n  line-height: 16px;\n  font-weight: normal;\n  cursor: pointer;\n  font-family: inherit;\n}\n\n.btn-remove-input {\n  height: 37px;\n  line-height: 37px;\n  display: flex;\n  width: 35px;\n  flex: 0 35px;\n  color: #91969D;\n  margin-top: 36px;\n  .ui-icon.material-icons {\n    font-size: 20px;\n  }\n}\n\n.clear-btn-dropdown {\n  border: none;\n  font-size: 15px;\n  padding: 0;\n  .ui-button__dropdown-icon {\n    display: none;\n  }\n}\n\nbutton.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  border-color: #2196f3;\n  color: #2196f3;\n  \n  &:hover:not([disabled]) {\n    border-color: #2196f3;\n    color: #2196f3;\n    \n    opacity: .5;\n  }\n}"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "fd6fa353-d71f-4e12-ab0a-e6eaffc3abba",
              "data": {
                "open": true,
                "header": "Message content",
                "inputs": [
                  {
                    "id": "08ebb9d4-afbe-458b-971f-9f3dfba49005",
                    "data": {
                      "data": "{\n  \"__messageCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__messageCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-lbhyzqrkeafucojwgsxdtnpvim",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "cab44456-a063-4d25-a9f8-dd497f7dbedc",
                    "data": {
                      "data": "{\"subject\": \"``\"}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard v-model=\"schema.subject\" :is-new=\"isNew\" :readonly=\"readonly\" :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-cmyrnibwaephofjqldzutgxkvs",
                      "componentLogic": "{\n  computed : {\n    subject : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n  },\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps: {\n      type: Array,\n      default: []\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-text-expression\n    label=\"Subject\"\n    v-model=\"subject\"\n    :readonly=\"readonly\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :merge-fields=\"mergeFields\">\n  </or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "cd4e2624-5bfb-483a-a3fa-ab5eb09ede5d",
                    "data": {
                      "data": "{\n  \"yourMessage\": \"``\",\n  \"yourMessageHtml\": \"\",\n  \"mode\": { \"label\": \"Plain text\", \"value\": \"plain\" }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data, key) {\n  if (key === 'yourMessageHtml') {\n    return `\\`${data}\\``;\n  }\n  \n  if (key === 'mode') {\n    return JSON.stringify(data);\n  }\n  \n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-bfelpgxvidshnruz \n  :merge-fields=\"mergeFields\"\n  :mode.sync=\"schema.mode\"\n  :readonly=\"readonly\"\n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :v=\"$v\"\n  :your-message.sync=\"schema.yourMessage\"\n  :your-message-html.sync=\"schema.yourMessageHtml\">\n</or-wildcard-bfelpgxvidshnruz>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bfelpgxvidshnruz",
                      "componentLogic": "{\n  props: {\n    yourMessage: {\n      type: String,\n      default: \"``\"\n    },\n    yourMessageHtml: {\n      type: String,\n      default: \"\"\n    },\n    mode: {\n      type: String,\n      default: 'plain'\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    steps: '',\n    stepId: '',\n    v: {\n      type: Object,\n      default: {}\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      authoringOptions: [\n        { label: 'Plain text', value: 'plain' },\n        { label: 'HTML (raw)', value: 'html' },\n        { label: 'WYSIWYG', value: 'visual'},\n        { label: 'Template builder', value: 'template' },\n      ],\n      codeMode: 'html'\n    }\n  },\n  computed: {\n    message: {\n      get() { return this.yourMessage },\n      set(value) { this.$emit('update:yourMessage', value) }\n    },\n    messageHtml: {\n      get() { return this.yourMessageHtml },\n      set(value) { this.$emit('update:yourMessageHtml', value) }\n    },\n    authoringMode: {\n      get() {\n        if (this.mode.value) {\n          return this.mode.value\n        } else {\n          return this.mode\n        }\n      },\n      set(value) { this.$emit('update:mode', value) }\n    },\n    getHelpInput () {\n      return {\n        modal: {\n          icon: 'info',\n          title: 'Help',\n          content: `\n            <h3 id=\"email-message-settings\">Email message settings</h3>\n<p><strong>Text message</strong>\nA text message is limited by up to 262 Kb in size. Using merge field values makes the size of a message a variable, so make sure that it is below the limit.</p>\n<p><strong>Attachments</strong>\nMaximum cumulative size of attachments is limited by 7 MB. Each added media file is sent and will be received as a separate message. File types support depends on the recipient&#39;s email server.</p>\n<p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary media in the modal window of <code>Files</code>. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. </p>\n<p>To use a link to a file, click <em>URL</em> and specify it manually or declare it with a merge field. The link must start with <code>http:\\\\</code> or <code>https:\\\\</code>. An option to create a name for each file added as a URL is also available.</p>\n<p>Multiple attachments and/or links can be chosen via appropriate button or removed by a click on <code>X</code> next to it in the step details panel.</p>\n          `\n        }\n      }\n    },\n  },\n} ",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-select-expression \n  :disabled=\"readonly\" \n  label=\"Body authoring mode\" \n  placeholder=\"\" \n  :options=\"authoringOptions\" \n  :advancedHelp=\"getHelpInput\" \n  v-model=\"authoringMode\"></or-select-expression>\n <div class=\"msg-field-wr\">\n   <or-code v-if=\"authoringMode === 'html'\"\n      label=\"Message body (HTML)\"\n      v-model=\"messageHtml\" \n      :mode=\"codeMode\"\n      :readonly=\"readonly\"\n\t\t  :step-id=\"stepId\"\n\t\t  :merge-fields=\"mergeFields\"\n      :steps=\"steps\"></or-code>\n    <or-text-expression v-if=\"authoringMode === 'plain'\"\n      label=\"Message body\"\n      class=\"message-content\"\n      v-model=\"message\" \n      :multi-line=\"true\" \n      :readonly=\"readonly\"\n\t\t  :step-id=\"stepId\"\n\t\t  :merge-fields=\"mergeFields\"\n      :steps=\"steps\"></or-text-expression>\n</div>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".message-content .or-editable-wrapper .editable,\n.ace-wrapper {\n  min-height: 120px;\n  padding-bottom: 30px;\n}\n\n.or-code .header .label-text {\n    font-size: 12px;\n    line-height: 1.3;\n    color: rgba(94,101,109,.55);\n    transition: color .1s ease;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.msg-field-wr {\n  position: relative;\n}"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "e75fb933-f7b0-4fd5-83b3-6ba3e319e12b",
                    "data": {
                      "data": "{\n  \"emailTemplateData\": {},\n  \"emailTemplateStr\": \"\",\n  \"emailTemplateMergeFieldsStr\": \"\",\n  \"emailPreviewLink\": \"\"\n}",
                      "toJson": "return {\n  emailTemplateMergeFieldsStr: '`' + data.emailTemplateMergeFieldsStr + '`'\n}",
                      "validators": "{}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :schema=\"schema\"\n  :email-template-data.sync=\"schema.emailTemplateData\"\n  :email-template-str.sync=\"schema.emailTemplateStr\"\n  :email-template-merge-fields-str.sync=\"schema.emailTemplateMergeFieldsStr\"\n  :email-preview-link.sync=\"schema.emailPreviewLink\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qvsrwmgxpuzckeajhindylbfot",
                      "componentLogic": "{\n  data() {\n    return {\n      iframeLoading: true,\n      emailPreviewLoading: false,\n      emailPreviewError: false,\n      emailPreviewErrorMsg: 'Can\\'t load email preview.',\n      authToken: this.$settings.token,\n      accountId: this.$flow.accountId,\n      // templateBuilderSrc: `${this.$flow.sharedUrl}/#/views/25fb9c36-a269-4d77-8ef4-cf5f2d6626d7?token=AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ%2BCo8BpBdArx6mbzNYwnuD9pg%2BJgAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQML6JCDfqcBbu8pHbpAgEQgIIBG243fcwKgpzr4JcDIY%2Fotp8LsCWxeeRzjMGnW1r0Cm%2B%2F50JA0oZmyzvV%2F7fHL5yKKDb9fyJ%2BYz2Pj%2F7UM4XvW%2BKlxP39B1UHihrUACK0gH7Gz97flc9Y5KKCqbpuX9GRU0%2BM%2FuvF99HnbsOOJGgxN4Aai6UVDK4Ce2UH%2F4GaBeaV0ZxwM0J%2Bf6anPO5KQ0MEH5vKm5%2FU%2Fje0N6JgXdyVDkybwst663aG%2FU6qH6zA2UQWkYY7bPlquhssdUMxNgfkCoWDxFnO2CIRUfv1Zn4aL%2F1G3hdhMwyRF1ehHZ9706dRUwtTkmJdRJf62qW4sUUU%2B%2BJNNohs3DEaeLIXS2dzzNS3%2FCiXDFdGOT1mXD72egdhqjFwcjQbTF5HvBIAAAExZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUl6Wm1JMk9EbGlZeTA1T1dNeUxUUXdaVGd0WWpka01pMDFZakEyT1RjMVpHRm1OVElpTENKMWMyVnlTV1FpT2lJME1EZGhZV1pqTWkwMU56TXdMVFEwTm1RdE9EZ3hOeTFtTXpBMU5UWTJaalV5WldNaUxDSmhkWFJvVkc5clpXNGlPaUl5TmpFME1ESTFNeTAwTnpkaExUUTRabVV0T1dOa015MDBNVFUxWlRnNU1qZzNPV0lpTENKcFlYUWlPakUxTlRBM05UWXlPVFo5LnFlU3NfdDBzcF9kbkNXcWgyVzJJd0pqVHFOVE53c1VhaDBUVXM4OWVaQ2M%3D`\n      templateBuilderSrc: 'https://shared-staging.onereach.ai/#/views/69f8a9f7-b006-4cf0-a504-4fc1d10bd5f7?token=AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ%2BCo8BxD6wE%2F%2Bicaq1pPe%2FZVCV7wAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM8GfuAi8NW%2FzZIGJ1AgEQgIIBG%2BlEqZdar1w8JG7mOFKA4J9KPsXi12FFxK46J4EMhmRQIFtMruNEmJ4%2F6zt9fb9xF0cZuiIRT1%2BAgBFqN6dDvtVD93SwKZ4Y%2BdHqcBC8jXRI7CNurVP8BF55%2FA7NZtLcFgh09UAU2s3wvxuo%2Bbno%2B5bGimM12b%2BqamM5SyLxiUNGqN2%2ByhzZjEVRY4TtI5HbH4a5oLusA7mA2wPq0TjoEbWW5ryY24imAPyITN6m34%2F5yA45ATEVetsWI9LO9URFkFM1dMD0dLPkere1YSv1rQYkzLE86sUj71E7%2F4BdVqFk4fb%2FRzRiFDJ6vy8X6POy%2BcM52gUwBsfrVXLX3QBsKF1Zwgzq9r4p5HKi21nQgL63qhVV6rGrhzMDFIYAAAExZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTldRMU5UWTBaaTAyT0dJMUxUUmpZakl0T1daall5MDJOR1V3WVdWa1pXRm1ZV1FpTENKMWMyVnlTV1FpT2lKbU5EZzVNbUUzWmkwM1kyTmlMVFJsT1dNdE9HUXpOQzB5WWpCaU0ySTJORE0wTlRraUxDSmhkWFJvVkc5clpXNGlPaUppTTJJek1XTTBNUzAyWXpobUxUUm1Oemd0T1dVM05DMHdNR0U1TWpWalpXTXdNRFlpTENKcFlYUWlPakUxTkRjeE16a3pNalI5LnowWGhXeEdDalpGRDItMTdreE5hRGFVWGpqbUE3cURYTVhwTzdrVUo2ZkE%3D'\n      \n    };\n  },\n  \n  computed : {\n    isStepInTree() {\n      return !_.isEmpty(this.stepId);  \n    },\n    \n    localEmailTemplateData: {\n      get() {\n        return this.emailTemplateData;\n      },\n      \n      set(value) {\n        this.$emit('update:emailTemplateData', value);\n      }\n    },\n    \n    localEmailTemplateStr: {\n      get() {\n        return this.emailTemplateStr;\n      },\n      \n      set(value) {\n        this.$emit('update:emailTemplateStr', value);\n      }\n    },\n    \n    localEmailTemplateMergeFieldsStr: {\n      get() {\n        return this.emailTemplateMergeFieldsStr;\n      },\n      \n      set(value) {\n        this.$emit('update:emailTemplateMergeFieldsStr', value);\n      }\n    },\n    \n    localEmailPreviewLink: {\n      get() {\n        return this.emailPreviewLink;\n      },\n      \n      set(value) {\n        this.$emit('update:emailPreviewLink', value);\n      }\n    },\n    \n    dataOuts() {\n      const SYSTEM_PREFIX = '#';\n      const systemMergeTags = [\n        {\n          title     : 'System',\n          variables : [\n            {\n                variableName  : `${SYSTEM_PREFIX}session`\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.sessionId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.beginningSessionId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.previousSessionId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.startedBy`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.startTime`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.sessionType`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.groupId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}helpers`\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}helpers.providersAccountId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}helpers.sdkApiUrl`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config`\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.accountId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.flowId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.botId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.executionStartTime`,\n                subObject     : true\n            }\n          ]\n        }\n      ];\n      \n      const dataOutMergeTags = [\n        {\n          title     : 'Flow',\n          variables : this.convertStepsToMergeTags(this.steps, this.stepId, 'session')\n        }\n      ];\n      const additionalMergeFields = _.cloneDeep(this.mergeFields) || [];\n\n      _.forEach(additionalMergeFields, titledMergeFields => {\n        let flowAdditionalMergeTags = [];\n        switch (titledMergeFields.title) {\n          case 'Shared':\n            flowAdditionalMergeTags = this.convertStepsToMergeTags(this.steps, this.stepId, 'shared', `${SYSTEM_PREFIX}shared.`);\n            break;\n          case 'Global':\n            flowAdditionalMergeTags = this.convertStepsToMergeTags(this.steps, this.stepId, 'global', `${SYSTEM_PREFIX}global.`);\n            break;\n          default:\n            break;\n        }\n        titledMergeFields.variables = _.concat(titledMergeFields.variables, flowAdditionalMergeTags);\n      });\n\n      return _.concat(dataOutMergeTags, additionalMergeFields, systemMergeTags);\n    }\n  },\n  \n  methods: {\n    handleIframeEvents(e) {\n      const data = _.get(e, 'data') || null;\n      \n      if (data === 'get-initial-data') {\n        let htmlData = '';\n        let cssData = ''\n        \n        if (_.has(this.localEmailTemplateData, 'gjs-components')) {\n          try {\n            htmlData = JSON.parse(_.get(this.localEmailTemplateData, 'gjs-components', ''));\n            cssData = JSON.parse(_.get(this.localEmailTemplateData, 'gjs-styles', ''));\n          } catch(e) {\n            console.error('error parseing localEmailTemplateData', e)\n          }\n        }\n        \n        document.querySelector('#emailBuilderIframe').contentWindow.postMessage({\n          eventType: 'set-initial-data',\n          html: htmlData, \n          css: cssData,\n          authToken: this.authToken,\n          dataOuts: this.dataOuts,\n          mergeFields: this.mergeFields,\n          accountId: this.accountId\n        }, \"*\");\n      } else {\n        _.forEach(data, item => {\n          _.set(this.schema, item.key, item.value);\n        });\n      }\n    },\n    \n    closeEmailBuilderHandler() {\n      if (this.localEmailTemplateStr) {\n        this.createEmailPreview();\n      } else {\n        this.localEmailPreviewLink = '';\n      }\n    },\n    \n    flattenSubDataOuts(data, mergeTag) {\n      const result = {};\n      const recurse = (cur, prop, root) => {\n        if (_.isArray(cur) && !_.isEmpty(cur)) {\n          result[prop] = [];\n          _.forEach(cur, (value, key) => {\n            recurse(value, prop || _.isNumber(prop) ? `${prop}[${key}]` : `[${key}]`);\n          });\n        } else if (_.isObject(cur) && !_.isEmpty(cur)) {\n          if (!root) {\n            result[prop] = cur;\n          }\n          _.forEach(cur, (value, key) => {\n            recurse(value, prop || _.isNumber(prop) ? `${prop}.${key}` : key);\n          });\n        } else if (_.isArray(cur) && _.isEmpty(cur)) {\n          result[prop] = [];\n        } else if (_.isObject(cur) && _.isEmpty(cur) && !root) {\n          result[prop] = {};\n        } else if (!root) {\n          result[prop] = cur;\n        }\n      };\n      recurse(data, mergeTag, true);\n      return result;\n    },\n    \n    async createEmailPreview() {\n      this.emailPreviewError = false;\n      this.emailPreviewLoading = true;\n      this.localEmailPreviewLink = '';\n      \n      const successCallbackUrl = await this.$http.post(`${this.$flow.toolboxUrl}/convert/html`, {\n      // const successCallbackUrl = await this.$http.post(`https://toolbox-staging.onereach.ai/convert/html`, {\n        src: this.localEmailTemplateStr,\n        filename: `emailPreview${uuid.v4()}.png`,\n        path: 'email/previews/',\n        expireTime: 2592000,\n        browser: {\n          cookies: [],\n          javaScriptEnabled: true,\n          loadWaitingTime: 3000,\n          defaultNavigationTimeout: 20000,\n          offlineMode: false,\n          userAgent: \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Mobile Safari/537.36\",\n          viewport: {\n            width: 1280,\n            height: 720,\n            deviceScaleFactor: 1,\n            mobile: false\n          }\n        },\n        screenshot: {\n          clip: {\n            x: 0,\n            y: 0,\n            width: 1280,\n            height: 720\n          }\n        },\n        resize: {\n          width: 1280,\n          height: 720\n        },\n      },\n      {\n        headers: {\n          authorization: this.authToken\n        }\n      }).then(response => {\n        return response.body.pollUrl;\n      }, err => {\n        console.error('error', err)\n        this.emailPreviewLoading = false;\n        this.emailPreviewError = true;\n      });\n      \n      let startExecution = new Date();\n      const pollingResult = (uri) => {\n        return this.$http.get(uri, {\n            headers: {\n              authorization: this.authToken\n            },\n            json: true\n        }).then(response => {\n          // this.emailPreviewLoading = false;\n          if (response.status === 202) {\n            let endExecution = new Date() - startExecution;\n            \n            if (endExecution + 3000 > 20000) {\n              this.emailPreviewLoading = false;\n              this.emailPreviewError = true;\n              console.error('Timeout error. Try again later.')\n            }\n            \n            return Promise.delay(2000)\n              .then(() => pollingResult(uri))\n          } else {\n            this.emailPreviewLoading = false;\n            return response\n          }\n        }, err => {\n          console.error('error', err)\n          // this.emailPreviewLoading = false;\n          this.emailPreviewError = true;\n          return false\n        });\n      }\n      \n      const pollResult = await pollingResult(successCallbackUrl);\n      \n      if (pollResult) \n        this.localEmailPreviewLink = _.get(pollResult, 'body.url') || '';\n        \n      this.emailPreviewLoading = false;\n    },\n    \n    openModal(ref) {\n      this.$refs[ref].open();\n    },\n    \n    iframeLoadHandler() {\n      this.iframeLoading = false;\n    },\n    \n    convertStepsToMergeTags (steps, stepId, type = 'session', variablePrefix = '') { // eslint-disable-line max-params\n      return _.chain(steps)\n      .reject({type : 'empty'})\n      .reject({id : stepId})\n      .map(step => {\n        const dataOut = _.isObject(step.data.dataOut) ? step.data.dataOut.name : step.data.dataOut;\n        return {\n          stepLabel     : step.label,\n          variableName  : dataOut ? `${variablePrefix}${dataOut}` : null,\n          type          : _.get(step, 'data.dataOut.type', 'session'),\n          outputExample : step.outputExample || null\n        };\n      })\n      .reject({variableName : null})\n      .filter({type})\n      .uniqBy('variableName')\n      .sortBy('variableName')\n      .flatMap(dataOut => {\n        let subData = [];\n        if (_.isObject(dataOut.outputExample) || _.isArray(dataOut.outputExample)) {\n          const dataOutObj = {};\n          dataOutObj[dataOut.variableName] = dataOut.outputExample;\n          const flattenedSubOuts = this.flattenSubDataOuts(dataOut.outputExample, dataOut.variableName);\n          subData = _.chain(flattenedSubOuts)\n            .keys()\n            .sortBy()\n            .map(subDataOut => ({\n              stepLabel: dataOut.stepLabel,\n              variableName: subDataOut,\n              subObject: true,\n              outputExample: flattenedSubOuts[subDataOut]\n            }))\n            .value();\n        }\n        return [dataOut].concat(subData);\n      })\n      .value();\n    },\n  },\n  \n  mounted() {\n    console.log(this.$flow);\n    if (!this.isStepInTree) {\n      this.iframeLoading = false;\n    }\n    \n    window.addEventListener(\"message\", this.handleIframeEvents, false);\n    \n  },\n  \n  beforeDestroy() {\n    window.removeEventListener(\"message\", this.handleIframeEvents);\n  },\n  \n  props : {\n    schema: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    emailTemplateData: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    emailTemplateStr: {\n      type: String,\n      default: ''\n    },\n    emailTemplateMergeFieldsStr: {\n      type: String,\n      default: ''\n    },\n    emailPreviewLink: {\n      type: String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    stepId: '',\n    steps: '',\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"schema.mode && schema.mode === 'template'\">\n  <div \n    class=\"email-preview\"\n    v-if=\"!!localEmailPreviewLink\">\n    <img :src=\"localEmailPreviewLink\">\n  </div>\n  <div v-else-if=\"emailPreviewError\">{{emailPreviewErrorMsg}}</div>\n  <or-button \n    @click=\"openModal('emailBuilder')\" \n    :loading=\"iframeLoading || emailPreviewLoading\"\n    :disabled=\"iframeLoading || readonly\"\n    icon=\"mail\" \n    icon-position=\"left\" \n    size=\"small\" \n    type=\"secondary\" \n    color=\"primary\"\n  >\n    Open template builder\n  </or-button>\n  <or-modal \n    title=\"Template builder\"\n    @close=\"closeEmailBuilderHandler\"\n    ref=\"emailBuilder\" \n    size=\"large\" \n    class=\"email-builder\">\n    <iframe \n      v-if=\"isStepInTree\"\n      allowfullscreen=\"allowfullscreen\"\n      mozallowfullscreen=\"mozallowfullscreen\" \n      msallowfullscreen=\"msallowfullscreen\" \n      oallowfullscreen=\"oallowfullscreen\" \n      webkitallowfullscreen=\"webkitallowfullscreen\"\n      id=\"emailBuilderIframe\" \n      @load=\"iframeLoadHandler\" \n      :src=\"templateBuilderSrc\"></iframe>\n  </or-modal>\n</div>\n      <!--src=\"https://shared-staging.onereach.ai/#/views/52db7ceb-b2e9-4dbd-ad72-b2c7cb6c0a9e?token=AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ%2BCo8BVX5xWS9fC4UKZxrQfd1FeAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMpslgTlnOiGrQo7vnAgEQgIIBG26ixDSSdqxPTzFojEs9uQSGAcCQpCZuFToE1cuanudO7%2FBMwpeMCzGlXOa4TzkuaiK%2F%2FQm6SafX8C3VHA8cHPLKUI1QA0yn2XorGutcYLK5OV%2BtBXsgFUOVavjWdaemcJm9LYKd5U1azP4QCe%2FIh3KoducX8APqE7KxLFa2%2F39FcVZrMctRnfLCK5tGG6EKu5azk65LujPSFNlrzu9lSos0eD%2BdQvr4lsE6rG3V6JjngZ3QHITIgwGexxLhTVD0RoNa4bY8o%2FkYEd911B33I7Gvu5sBqXUrmcBnBC3F%2BKFWcWVDgR9Sp2MXjIQiGRDgJJ7VVUHfASKpIkiraZPII9pnh4ytLjuLALmlGi6Y1cr8HczvXg6DaUNm%2Fi0AAAExZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUppTnpGbFlXUXpZeTFsWXpBMkxUUTRZVFl0T0dZeVpDMDJOekV3TkRGaFpqSTVabVVpTENKMWMyVnlTV1FpT2lJNVpESXpOV1ptTmkxa1ltVTJMVFJtTmpBdFlqQXdNUzFqWm1abE1UTTFNemxqTWpNaUxDSmhkWFJvVkc5clpXNGlPaUprWkRoaE9EWTRaaTFoWkRKaExUUTRZV1V0WVRFNFpDMDVNRE15T0RBek9HVmlPRGNpTENKcFlYUWlPakUxTkRJNE1UTTRNRFY5LkctZHlYQThYT3k3TDBvZjQ1dG56Sng1WWNZdXlrMmdaaFNZWGFfekVkMnc%3D\"></iframe>-->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".email-builder {\n  .ui-modal__container {\n    width: 100vw;\n    height: 100vh;\n  }\n  \n  &.ui-modal>.ui-modal__wrapper>.ui-modal__container>.ui-modal__body {\n    height: 100%;\n    padding: 0;\n  }\n  \n  iframe {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n}\n\n.email-preview {\n  margin-bottom: 15px;\n  \n  img {\n    max-width: 100%;\n  }\n}\n\nbutton.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  border-color: #2196f3;\n  color: #2196f3;\n  \n  &:hover:not([disabled]) {\n    border-color: #2196f3;\n    color: #2196f3;\n    \n    opacity: .5;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "2e0e41cb-4019-44a4-b83e-c44e63a27e26",
                    "data": {
                      "readonly": true,
                      "variable": "wysiwygText",
                      "defaultValue": "``",
                      "defaultControls": [
                        "heading",
                        "fontFamily",
                        "fontSize",
                        "fontColor",
                        "fontBackgroundColor",
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough",
                        "subscript",
                        "superscript",
                        "link",
                        "bulletedList",
                        "numberedList",
                        "indent",
                        "outdent",
                        "blockQuote",
                        "insertTable",
                        "alignment",
                        "undo",
                        "redo",
                        "insertMergeTag"
                      ],
                      "renderCondition": "schema.mode === 'visual'",
                      "trimWhitespaces": true,
                      "_defaultControls": [
                        "heading",
                        "fontFamily",
                        "fontSize",
                        "fontColor",
                        "fontBackgroundColor",
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough",
                        "subscript",
                        "superscript",
                        "link",
                        "bulletedList",
                        "numberedList",
                        "indent",
                        "outdent",
                        "blockQuote",
                        "insertTable",
                        "alignment",
                        "undo",
                        "redo",
                        "insertMergeTag"
                      ],
                      "validateRequired": false,
                      "defaultFontSizeOptions": [
                        "default",
                        12,
                        14,
                        16,
                        18,
                        20,
                        24,
                        28,
                        32,
                        36,
                        42
                      ],
                      "_defaultFontSizeOptions": [
                        "default",
                        12,
                        14,
                        16,
                        18,
                        20,
                        24,
                        28,
                        32,
                        36,
                        42
                      ],
                      "defaultFontFamilyOptions": [
                        "Arial, Helvetica, sans-serif",
                        "Verdana, sans-serif",
                        "Arial Black, sans-serif",
                        "Avant Garde, sans-serif",
                        "Comic Sans MS, sans-serif",
                        "Trebuchet MS, sans-serif",
                        "Impact, sans-serif",
                        "Times New Roman, Times, serif",
                        "Courier New, Courier, serif",
                        "Palatino, serif",
                        "Garamond, serif",
                        "Bookman, serif",
                        "Georgia, serif"
                      ],
                      "_defaultFontFamilyOptions": [
                        "Arial, Helvetica, sans-serif",
                        "Verdana, sans-serif",
                        "Arial Black, sans-serif",
                        "Avant Garde, sans-serif",
                        "Comic Sans MS, sans-serif",
                        "Trebuchet MS, sans-serif",
                        "Impact, sans-serif",
                        "Times New Roman, Times, serif",
                        "Courier New, Courier, serif",
                        "Palatino, serif",
                        "Garamond, serif",
                        "Bookman, serif",
                        "Georgia, serif"
                      ]
                    },
                    "meta": {
                      "name": "wysiwyg-editor",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.5"
                    },
                    "label": "Wysiwyg Editor (1.0.5)",
                    "compiled": {},
                    "component": [
                      "wysiwyg-editor",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/wysiwyg-editor_v1-0-5/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/wysiwyg-editor_v1-0-5/index.js\"][\"wysiwyg-editor\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/wysiwyg-editor_v1-0-5/index.js\"][\"wysiwyg-editor\"]"
                    ]
                  },
                  {
                    "id": "f77f9b56-14ba-4945-8d64-09b9e5ebab80",
                    "data": {
                      "data": "{\n  \"mode\": { \"label\": \"Plain text\", \"value\": \"plain\" },\n  \"attachments\": [],\n  \"attachmentsFD\":[],\n  \"attachmentsF\":[],\n  \"dynamicAttachments\": \"\",\n  \"hasDynamicAttachments\": false,\n  \"useSource\": false\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nconst replaceComments = str => str\n      .replace(/\\/\\/[\\s\\S]+?.*(\\n || $)/g, '')\n      .replace(/\\/\\*[.\\s\\S\\n]*\\*\\//g, '')\n      .trim();\n\nfunction toJson(data, key) {\n  if(key === 'dynamicAttachments') {\n    return data || '[]'\n  }\n  \n  if(key === 'attachments') {\n    return `[${_.map(data, (val, index) => {\n      if (val.attType === '`link`') return toJson(val);\n      return JSON.stringify(val);\n    }).join(',')}]`;\n  }\n  \n  if(key === 'attachmentsFD') {\n    return `[${_.map(data, (val, index) => {\n      if (val.attType === '`link`') return toJson(val);\n      return JSON.stringify(val);\n    }).join(',')}]`;\n  }\n  \n  if(key === 'attachmentsF') {\n    return `[${_.map(data, (val, index) => {\n      if (val.attType === '`link`') return toJson(val);\n      return JSON.stringify(val);\n    }).join(',')}]`;\n  }\n  \n  if (key === 'yourMessageHtml') {\n    return `\\`${data}\\``;\n  }\n  \n  if (key === 'mode') {\n    return JSON.stringify(data);\n  }\n  \n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  attachments: {\n    isJsAttached(model){\n      return !_.find(model, { ext: 'js' });\n    },\n    $each: {\n      location: {\n        required: createValidatorRequired('file location is required')\n      },\n      ext: {\n        required: (val, model) => {\n          if (model.location.indexOf('${this.') !== -1 || !val) return true;\n          const validator = createValidatorRequired('file extension is required');\n          return validator(val);\n        }\n      } \n    }\n  }\n}\nfunction createValidatorRequired(errorMessage) {\n  return function (value = '``') {\n    if (this.isNew) return true;\n    const val = value[0] === '`' && value[value.length - 1] === '`' ? value.slice(1, -1) : value;\n    return validators.helpers.withParams(\n      { type: 'required', error: errorMessage },\n      validators.required\n    )(val);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard \n  :mode.sync=\"schema.mode\"\n  :attachments.sync=\"schema.attachments\"\n  :attachmentsFD.sync=\"schema.attachmentsFD\"\n  :attachmentsF.sync=\"schema.attachmentsF\"\n  :useSource.sync=\"schema.useSource\"\n  :dynamicAttachments.sync=\"schema.dynamicAttachments\"\n  :hasDynamicAttachments.sync=\"schema.hasDynamicAttachments\"\n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\">\n</or-wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-fxzjdboaeprhkgcwlutvqmiysn",
                      "componentLogic": "{\n  components: {\n    'link-attachment': {\n      template: `\n        <div>\n          <or-text-expression\n            label=\"link\"\n            v-model=\"item.location\"\n            :readonly=\"readonly\"\n            placeholder=\"link to file\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :invalid=\"isInvalid('location')\"\n            :error=\"errorMessage('location')\"\n            :merge-fields=\"mergeFields\"\n            disableCodeMode>example\n          </or-text-expression>\n          <or-text-expression\n            label=\"name\"\n            v-model=\"item.name\"\n            :readonly=\"readonly\"\n            placeholder=\"my_file.txt\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :invalid=\"isInvalid('ext')\"\n            :error=\"errorMessage('ext')\"\n            :merge-fields=\"mergeFields\"\n            disableCodeMode>\n          </or-text-expression>\n        </div>\n      `,\n      props: {\n        value: String,\n        readonly: Boolean,\n        steps: {\n          type: Array,\n          default: []\n        },\n        stepId: String,\n        v: {\n          type: Object,\n          default: {}\n        },\n        index: Number,\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        }\n      },\n      computed: {\n        item: {\n          get() { return this.value; },\n          set(value) { this.$emit('input', value) }\n        },\n        location() {\n          return this.item.location.slice(1, -1).trim();\n        },\n        name() {\n          return this.item.name.slice(1, -1).trim();\n        }\n      },\n      watch: {\n        'item.name'(){\n          this.updateFileExtension();\n        },\n        'item.location'() {\n          this.updateFileExtension();\n        },\n      },\n      methods: {\n        updateFileExtension() {\n          const ext = str => _.get(/\\.([a-z]+)$/.exec(str.trim()), '[1]', '');\n          const nameFromUrl = str => _.get(/\\/([^\\/]+?\\.[a-z]+)$/.exec(str.trim()), '[1]', '');\n\n          if (!this.name) {\n            this.item.name = `\\`${nameFromUrl(this.location)}\\``;\n          }\n          \n          if (this.name.indexOf('${') === -1) {\n            this.item.ext = `\\`${ext(this.name) || ext(this.location)}\\``;\n          } else {\n            this.item.ext = `\\`${this.name}\\``;\n          }\n        },\n        isInvalid(field){\n          return _.get(this.v, `schema.attachments.$each[${this.index}]['${field}'].$error`);\n        },\n        errorMessage(field){\n          const chain = _.chain(this.v).get(`schema.attachments.$each[${this.index}]['${field}']`, {});\n          return chain\n            .reduce((acc, item, key) => {\n              if(!/^\\$/.test(key) && !item) {\n                acc += `${chain.get(`$params.${key}.error`).value()}\\n`;\n              }\n              return acc;\n            }, '')\n            .value();\n        }\n      }\n    }\n  },\n  props: {\n    yourMessage: {\n      type: String,\n      default: \"``\"\n    },\n    yourMessageHtml: {\n      type: String,\n      default: \"\"\n    },\n    mode: {\n      type: Object,\n      default() {\n        return { \n          label: 'Plain text', \n          value: 'plain',\n        };\n      }\n    },\n    attachments: {\n      type: Array,\n      default: []\n    },\n    attachmentsFD: {\n      type: Array,\n      default: []\n    },\n    attachmentsF: {\n      type: Array,\n      default: []\n    },\n    dynamicAttachments: {\n      type: String,\n      default: \"\"\n    },\n    hasDynamicAttachments: {\n      type: Boolean,\n      default: false\n    },\n    useSource: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    steps: '',\n    stepId: '',\n    v: {\n      type: Object,\n      default: {}\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  },\n  watch:{\n    dynamicAttachments: function (val) {\n      return this.$emit('update:dynamicAttachments', val);\n    },\n  },\n  data() {\n    return {\n      allowedFileTypes: ['txt', 'doc', 'docx', 'xls', 'xlsx', 'csv' , 'jpg', 'jpeg', 'gif', 'bmp', 'mp3', 'wav', 'avi', 'mpg', 'mpeg', 'flv', 'pdf', 'rar', 'zip', '7z', 'htm', 'html', 'dll', 'sys'],\n      defaultAttachment: {\n        name: '``',\n        location: '``',\n        ext: '``'\n      }\n    }\n  },\n  computed: {\n    assetsUrl() { return `${this.$flow.customDataApiUrl}/api/v1/assets` },\n    authToken() { return this.$settings.token },\n    useSourceComputed : {\n      get () {\n        return true\n      }\n    },\n    attachmentLinks: {\n      get() { \n        if (this.useSourceComputed) {\n          return this.attachmentsF\n        } else {\n          return this.attachmentsFD\n        }\n        \n      },\n      set(value) {\n        let model, res;\n        const prev = this.attachmentLinks;\n\n        if (this.useSourceComputed) {\n            model = ['name', 'key', 'location', 'isPublic', 'attType']\n            res = _.map(value, item => _.pick(item, model));\n            if (prev.length && !value.length) {\n              this.$emit('update:attachmentsF', prev);\n              this.$emit('update:attachments', prev);\n            } else {\n              this.$emit('update:attachmentsF', res);\n              this.$emit('update:attachments', res);\n            }\n         } else {\n            model = ['acl', 'data','ext','id', 'location','name', 'note', 'type', 'attType' ]\n            res = _.map(value, item => _.pick(item, model));\n            if (prev.length && !value.length) {\n              this.$emit('update:attachmentsFD', prev);\n              this.$emit('update:attachments', prev);\n            } else {\n              this.$emit('update:attachmentsFD', res);\n              this.$emit('update:attachments', res);\n            }\n         }\n      }\n    },\n    attachmentsMenuOptions() {\n      return [\n        { label: 'From files', value: 'file' },\n        { label: 'From URL', value: 'link' },\n        // { label: 'Array (advanced)', value: 'array', disabled: this.hasDynamicAttachments }\n      ];\n    },\n  },\n  methods: {\n    toggleArrayOfAtt() {\n      return this.$emit('update:hasDynamicAttachments', !this.hasDynamicAttachments);\n    },\n    addFilesAtt() {\n      this.openModal('attachment-modal');\n    },\n    addUrlAtt() {\n      return this.addAttachmentLink();\n    },\n    openModal(ref) {\n      this.$refs[ref].open();\n    },\n    removeSelectedItem(key) {\n      this.attachmentLinks.splice(key, 1);\n    },\n    addAttachmentLink() {\n      const att = _.assign({ attType: '`link`' }, this.defaultAttachment);\n      this.attachmentLinks = [...this.attachments, att];\n    },\n    handleAttachmentOptionSelected(opt) {\n      const value = _.get(opt, 'value');\n      if (!value) return;\n      switch (value) {\n        case 'array': return this.$emit('update:hasDynamicAttachments', true);\n        case 'link': return this.addAttachmentLink();\n        default: this.openModal('attachment-modal');\n      }\n    },\n    deleteDynamicAttachments() {\n      const defaultValue = \"\";\n      this.$emit('update:hasDynamicAttachments', false);\n      this.$emit('update:dynamicAttachments', defaultValue);\n    }\n  }\n} ",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-modal ref=\"attachment-modal\" size=\"large\" title=\"Attachments\">\n <or-asset-manager\n    :assets-url=\"assetsUrl\"\n    :use-files.sync=\"useSourceComputed\"\n    :files-api-url=\"$flow.filesApiUrl\"\n    :auth-token=\"authToken\"\n    :multi-select=\"true\"\n    :allowed-file-types=\"allowedFileTypes\"\n    v-model=\"attachmentLinks\">\n  </or-asset-manager>\n</or-modal>\n<or-alert :dismissible=\"false\" type=\"error\" v-show=\"_.find(attachmentLinks, { ext: 'js' })\">\n  You can't send <span style=\"font-weight: 600\">.js</span> files in emails\n</or-alert>\n<div class=\"att-block\">\n  + Add attachment from\n  <or-button\n    :disabled=\"readonly\"\n    @click=\"addFilesAtt\"\n    :class=\"['btn-add-attachment', { disabled : readonly }]\"\n    disableRipple>\n    Files\n  </or-button>\n  or\n  <or-button\n    :disabled=\"readonly\"\n    @click=\"addUrlAtt\"\n    :class=\"['btn-add-attachment', { disabled : readonly }]\"\n    disableRipple>\n    URL\n  </or-button>\n<!--  or add-->\n<!--    <or-button-->\n<!--    :disabled=\"readonly\"-->\n<!--    @click=\"toggleArrayOfAtt\"-->\n<!--    :class=\"['btn-add-attachment', { disabled : readonly }]\"-->\n<!--    disableRipple>-->\n<!--    Array of attachments-->\n<!--  </or-button>-->\n<!--  <button class=\"adv_attachments_button\" @click=\"openModal('modal1')\">-->\n<!--    <or-icon>info</or-icon>-->\n<!--  </button>-->\n<!--  <or-modal ref=\"modal1\" size=\"large\" title=\"Array of attachments example\">-->\n<!--   <pre><code class=\"lang-javascript\">-->\n<!--    [-->\n<!--      { <span class=\"hljs-attr\">\"location\"</span>: <span class=\"hljs-string\">\"https://www.google.com/index.html\"</span>, <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"index.html\"</span> }, -->\n<!--      { <span class=\"hljs-attr\">\"location\"</span>: <span class=\"hljs-string\">\"https://bipbap.ru/wp-content/uploads/2017/04/3dr-19.jpg\"</span>, <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"my_file1.jpg\"</span> },-->\n<!--      { <span class=\"hljs-attr\">\"location\"</span>: <span class=\"hljs-string\">\"https://files.qa.api.onereach.ai/public/ee2427cd-5886-4dfd-b776-30e60dbd22f7/ww.doc\"</span>, <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"\"</span> }-->\n<!--    ]-->\n<!--</code></pre>-->\n\n<!--    </or-modal>-->\n</div>\n<h5 v-if=\"!_.isEmpty(attachments)\" class=\"attHead\">Attachments</h5>\n<ul class=\"attachment-items-list\">\n  <li class=\"attachment-item\" v-for=\"(item, index) in attachmentLinks\" :key=\"index\">\n    <div v-if=\"!item.attType\">\n      {{item.name}}\n      <button class=\"btn-delete-attachment\" :disabled=\"readonly\" @click=\"removeSelectedItem(index)\">\n        <or-icon>close</or-icon>\n      </button>\n    </div>\n    <div v-if=\"item.attType === '`link`'\" class=\"link-attachment-wrapper\">\n      <link-attachment v-model=\"item\" :index=\"index\" :readonly=\"readonly\" :steps=\"steps\" :step-id=\"stepId\" :v=\"v\" :merge-fields=\"mergeFields\"></link-attachment>\n      <button class=\"btn-delete-attachment\" :disabled=\"readonly\" @click=\"removeSelectedItem(index)\">\n          <or-icon>close</or-icon>\n      </button>\n    </div>\n  </li>\n  <li class=\"attachment-item\" v-if=\"hasDynamicAttachments\">\n    <or-code :steps=\"steps\" label=\"Array of attachments\" mode=\"javascipt\" :step-id=\"stepId\" v-model=\"dynamicAttachments\" :merge-fields=\"mergeFields\"></or-code>\n    <button class=\"btn-delete-attachment\" :disabled=\"readonly\" @click=\"deleteDynamicAttachments()\">\n        <or-icon>close</or-icon>\n    </button>\n  </li>\n</ul>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".attHead {\n  margin-top: .5rem;\n}\n\n\n.adv_attachments_button {\n  cursor: pointer;\n  border: none;\n  background: none;\n  padding: 0;\n  margin: 0;\n}\n\n.adv_attachments_button .ui-icon{\n  color: #d1d1d1;\n}\n\n.adv_attachments_button:hover .ui-icon{\n  color: #64b2da;\n}\n\n.dynamic-attachments-wrapper {\n  padding: 10px;\n}\n\n.att-block {\n  font-weight: bold;\n  font-size: 14px;\n}\n\n.asset-manager-wrapper .ui-switch__wrapper {\n  display:none;\n}\n\n.btn-add-attachment {\n  padding: 0 !important;\n  min-width: auto !important;\n  // margin-bottom: 10px !important;\n  background: none !important;\n  border: 0 !important;\n  font-weight: bold !important;;\n  line-height: 14px !important;\n  font-size: 14px !important;\n  color: #64b2da !important;\n  cursor: pointer !important;\n  font-family: inherit !important;\n  \n  &.outside {\n    bottom: -20px;\n  }\n}\n\n.clear-btn-dropdown {\n  border: none;\n  font-size: 15px;\n  padding: 0;\n  .ui-button__dropdown-icon {\n    display: none;\n  }\n}\n\n.attachment-items-list {\n  list-style: none;\n  margin: 0;\n  padding-left: 0;\n}\n\n.attachment-item {\n  position: relative;\n  max-width: 100%;\n  padding-right: 25px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: 20px;\n  color: #91969D;\n  font-size: 12px;\n  text-align: left;\n  \n  .btn-delete-attachment {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n}\n\n.link-attachment-wrapper {\n  padding: 10px;\n  padding-top: 0;\n  background-color: #ededed;\n  border-radius: 3px;\n  margin: 5px 0;\n\n  .or-text-expression {\n    margin-bottom: 0;\n  }\n}\n\n.dynamic-attachments-wrapper {\n  background-color: #ededed;\n  border-radius: 3px;\n  margin: 5px 0;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "e24e7ad6-7f25-4f3c-9e33-37ec8f3369c8",
              "data": {
                "open": true,
                "header": "Event handling",
                "inputs": [
                  {
                    "id": "cd451ec1-caf4-45da-b4b0-909de1cd962c",
                    "data": {
                      "data": "{\n  \"__responseCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__responseCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-uiravnegopjlsqfcmkhwztdbxy",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "7d0f7e41-eb35-44c9-bb2f-bf286604da5e",
                    "data": {
                      "label": "Enable events handling",
                      "helpText": "",
                      "variable": "useThreads",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "11cda51a-ae27-4e7e-9a5f-45597778028e",
                    "data": {
                      "label": "Timeout",
                      "helpText": "",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "defaultValue": "`1 week`",
                      "errorMessage": "Must be a timestring duration value between 10 s and 1 month",
                      "variableName": "timeoutLeng",
                      "maxTimeoutValue": "`1 month`",
                      "minTimeoutValue": "`10 s`",
                      "renderCondition": "schema.useThreads",
                      "validateRequired": true,
                      "allowDynamicValues": true
                    },
                    "meta": {
                      "name": "validated-timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.0"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": [
                      "validated-timestring",
                      "https://content-assets.onereach.ai/component/validated-timestring/v1-3-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/validated-timestring/v1-3-0/index.js\"][\"validated-timestring\"]",
                      "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/validated-timestring/v1-3-0/index.js\"][\"validated-timestring\"]"
                    ]
                  },
                  {
                    "id": "f5244276-2acd-48ae-ac78-db22c2f25e95",
                    "data": {
                      "data": "{ \"hasOpenEvent\": false }",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.hasOpenEvent\" :useThreads=\"schema.useThreads\" :emailConfig=\"schema.emailConfig\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-cvojhsmxtlybpgarnuzdkwefiq",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    emailConfig: {\n      type: Object,\n      default: {},\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    hasOpenEvent: {\n      get() { \n         return this.value;\n      },\n      set(value) { this.$emit('input', value); },\n    },\n    tooltipMessage() {\n      if (!this.useThreads) return 'To enable this option, you should turn on \\'enable events handling\\' option';\n    },\n  },\n  watch: {\n    useThreads(val) {\n      if (!val) this.hasOpenEvent = false;\n    },\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch \n    v-model=\"hasOpenEvent\" \n    v-if=\"useThreads\"\n    :disabled=\"readonly || !useThreads\"\n    :tooltip=\"tooltipMessage\"\n    tooltipPosition='top center'\n  >\n    Handle email-open events\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}\n\ncode:not([class]) {\n  padding: .125rem .25rem;\n  \n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: .25rem;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "20691807-c39c-460c-88e7-edd5c3e4c5ee",
                    "data": {
                      "data": "{ \"hasUrlClickTracking\": false }",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.hasUrlClickTracking\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ovkbfthypuanlrximgsjqewdcz",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    hasUrlClickTracking: {\n      get() { return this.value; },\n      set(value) { this.$emit('input', value); },\n    },\n    tooltipMessage() {\n      if (!this.useThreads) return 'To enable this option, you should turn on \\'enable events handling\\' option';\n    },\n  },\n  watch: {\n    useThreads(val) {\n      if (!val) this.hasUrlClickTracking = false;\n    },\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch \n    v-model=\"hasUrlClickTracking\" \n    v-if=\"useThreads\"\n    :disabled=\"readonly || !useThreads\"\n    :tooltip=\"tooltipMessage\"\n    tooltipPosition='top center'\n  >\n    Handle clicks on URLs in the email body\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "dcad4b1b-4441-4d3b-bc2d-f18b2009bb19",
                    "data": {
                      "label": "Shorten click tracking URLs",
                      "helpText": "",
                      "variable": "hasShortUrl",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "92120617-6293-48fa-b064-9ed96f5f64f5",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.hasUrlClickTracking",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "04b0136a-710e-4ae5-a2df-f2e475b7fe18",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useThreads",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "04b0136a-710e-4ae5-a2df-f2e475b7fe18",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useThreads",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "92120617-6293-48fa-b064-9ed96f5f64f5",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.hasUrlClickTracking",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "d6f7c8fb-f077-47e7-a11b-65eb9702f7de",
                    "data": {
                      "data": "{\"stepVariable\": \"defaultValue\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.stepVariable\" :emailConfig=\"schema.emailConfig\" :useManualMode=\"schema.useManualMode\" :useThreads=\"schema.useThreads\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-dpjnxmoytvwrusbqgaklizchef",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        emailConfig: {\n          type: Object,\n          default: {}\n        },\n        useManualMode: {\n          type: Boolean\n        },\n        useThreads:{\n          type : Boolean,\n          default : false\n        },\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<h4 v-if=\"useManualMode || (useThreads && emailConfig.type !== 'mail-server')\">\n  Bounce handling\n</h4>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "13dfc0f1-3258-4fa2-9657-07f57c372892",
                    "data": {
                      "data": "{ \"handleComplaints\": false }",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.handleComplaints\" :useManualMode=\"schema.useManualMode\" :emailConfig=\"schema.emailConfig\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-isnchwekdfrpjgubmyqtvzxlao",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    useManualMode: {\n      type: Boolean\n    },\n    emailConfig: {\n      type: Object,\n      default: {},\n    },\n    value: {\n      type: String,\n      default : '',\n    },\n  },\n  computed: {\n    handleComplaints: {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    tooltipMessage() {\n      if (!this.useThreads) return 'To enable this option, you should turn on \\'enable events handling\\' option';\n    },\n  },\n  watch: {\n    useThreads(val) {\n      if (!val) this.handleComplaints = false;\n    },\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch \n    v-model=\"handleComplaints\"\n    v-if=\"useManualMode || (useThreads && emailConfig.type !== 'mail-server')\"\n    :disabled=\"readonly || !useThreads\"\n    :tooltip=\"tooltipMessage\"\n    tooltipPosition='top center'\n  >\n    Handle complaints as hard bounces\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "a06f4543-25ac-42c5-b84c-265b61502adc",
                    "data": {
                      "data": "{\"bounceHandleType\": \"ignore\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.bounceHandleType\" :useManualMode=\"schema.useManualMode\" :emailConfig=\"schema.emailConfig\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ezvjrgtdcskoaplunyxhqiwbfm",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    useManualMode: {\n      type: Boolean\n    },\n    emailConfig: {\n      type: Object,\n      default: {}\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      bounceHandleOptions: [\n        { label: 'Process hard and soft bounces through the \\'bounce\\' exit', value: 'bounce' },\n        { label: 'Process hard and soft bounces through separate exits', value: 'separately' },\n        { label: 'Process bounces as errors', value: 'error' },\n        { label: 'Ignore bounces', value: 'ignore' },\n      ],\n    };\n  },\n  computed: {\n    bounceHandleType: {\n      get() { return this.value; },\n      set(value) { this.$emit('input', value); },\n    },\n  },\n  watch: {\n    emailConfig(val) {\n      if (val.type === 'mail-server') {\n        return this.bounceHandleType = 'error';\n     }\n   },\n    useThreads(val) {\n      if (!val) this.bounceHandleType = 'ignore';\n    }\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"bounces-handle-type-wrapper\">\n  <or-radio-group \n    v-model=\"bounceHandleType\"\n    v-if=\"useManualMode || (useThreads && emailConfig.type !== 'mail-server')\"\n    :disabled=\"readonly || !useThreads\"\n    name=\"bounceHandleTypeGroup\" \n    vertical :options=\"bounceHandleOptions\"\n  ></or-radio-group>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".bounces-handle-type-wrapper {\n  margin: 0 0 20px 0;\n}\n.ui-radio-group__radios {\n  \n  .ui-radio__label-text {\n    font-size: .9375rem;\n  }\n  \n  .ui-radio.is-checked {\n    .ui-radio__outer-circle {\n      border: 1px solid #2196f3;\n      background-color: #2196f3;\n    }\n    \n    .ui-radio__inner-circle {\n      background-color: #fff;\n      transform: scale(0.25);\n    }\n  }\n  \n  .ui-radio {\n    .ui-radio__outer-circle {\n      background-color: #fff;\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "ab1e675d-42f9-4908-8826-8a08c2c4003f",
                    "data": {
                      "data": "{\"ignoreOtherBounces\": true}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.ignoreOtherBounces\" :useManualMode=\"schema.useManualMode\" :emailConfig=\"schema.emailConfig\" :useThreads=\"schema.useThreads\" :bounceHandleType=\"schema.bounceHandleType\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-pabsryxvmhknzeqdolcgjtwuif",
                      "componentLogic": "{\n  computed : {\n    computedValue : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    }\n  },\n  props : {\n    value : {\n      type : Boolean,\n      default : true\n    },\n    emailConfig: {\n      type: Object,\n      default: {}\n    },\n    useThreads:{\n      type : Boolean,\n      default : false\n    },\n    useManualMode: {\n      type: Boolean\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    bounceHandleType: {\n      type: String,\n      default: 'bounce'\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-switch\n  v-if=\"(useManualMode && bounceHandleType !== 'ignore') || (useThreads && bounceHandleType !== 'ignore' && emailConfig.type !== 'mail-server')\"\n  v-model=\"computedValue\"\n  :disabled=\"readonly\"\n>\n  Ignore bounces from all but the first To recipient (recommended)\n</or-switch>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "disableBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "848e554e-ed46-473e-a9d1-a6d8a75e3041",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "57e49748-a7b2-4cc9-ae70-15e0cd2b937b",
                    "data": {
                      "label": "Custom message id",
                      "helpText": "Override step default autogenerated messageId",
                      "variable": "customMessageId",
                      "placeholder": "",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "775be2dd-5484-4990-9475-3aca1d194d0e",
                          "errorMessage": "The Custom message id is not a valid JavaScript expression.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "83ae2930-2bf8-47ad-882f-e665c7dec459",
                                "ruleType": {
                                  "func": "{ return !validators.jsExpression(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "invalid JS expression",
                                  "modes": [],
                                  "category": "code"
                                },
                                "codeValue": "``",
                                "valueType": "code",
                                "firstValue": "schema.customMessageId",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "9c3362d1-3c34-4db3-8f08-dac462b9a69b",
              "data": {
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "f05a160b-70fe-4828-aa56-df4ff0189860",
                    "data": {
                      "data": "{\n  \"__bounceCollapsibleState\": {\n    \"isOpen\": false\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__bounceCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xzfwuyjvkliepoanqbchdsgtrm",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "85117bf0-f553-43c7-bc17-420a62fd4174",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "9b247274-1fdf-4915-a5bb-30ca3b3c41f2",
              "data": {
                "data": "{ \"isEmailInheritableStep\": true }",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<wildcard :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                "allowCodeMode": true,
                "componentName": "or-wildcard-ytbqsmzfgnhdxiwvjacpolrkeu",
                "componentLogic": "{\n}",
                "renderCondition": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentTemplate": "<!-- THIS COMPONENT IS ONLY TO SET UP isEmailInheritableStep VARIABLE -->\n<div></div>",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "compiled": {},
              "component": "formWildcard"
            }
          ],
          "outputExample": "{\n  latestResponse: { \n    \tmessageId: \"\",\n    \tdatetime: \"\",\n    \ttype: \"\",\n    \tlink: \"\",\n    \teventSender: {\n    \t\temail: \"\",\n    \t\tname: \"\" \n    \t},\n    \tvalue: \"\",\n    \ttag: { \n    \t\tattributes: { \n    \t\t\tid: \"\", \n    \t\t\ttitle: \"\"\n    \t\t},\n    \t\tcontents: \"\"\n    \t}\n  },\n  allResponses: [],\n  outgoingMessage: {\n  \tmessageId: \"\",\n  \ttimestamp: \"\",\n  \tdatetime: \"\",\n\t  sender: {\n      name: \"\",\n      address:\"\"\n    },\n  \tsubject: {\n  \t\ttext: \"\",\n  \t\ttrimmed: \"\"\n  \t},\n  \trecipients: {\n  \t\tto: [],\n  \t\tcc: [],\n  \t\tbcc: [] \n    },\n  \tcontent: {\n  \t\tplain: \"\",\n  \t\thtml: \"\",\n  \t\ttrimmedText: \"\",\n  \t\ttrimmedHtml: \"\"\n  \t},\n  \tinReplyTo: \"\",\n  \treferences: [],\n  \tattachments: [],\n  \tbeacons: []\n  }\n}",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "const defaults = {\n  \"processError\":true, \n  \"requiredAdapters\":[],\n  \"__accountsCollapsibleState\": {\"isOpen\":true, \"_schemaValidators\":{\"emailConfig\":\"!_.isEmpty(value)\"}},\n  \"nameFrom\":\"``\",\n  \"differentReplyTo\":false,\n  \"senderAddress\":\"``\",\n  \"senderSubDomain\":\"``\",\n  \"replyToAddress\":\"``\",\n  \"replyToSubDomain\":\"``\",\n  \"__replyCollapsibleState\":{\"isOpen\":true},\n  \"isRequestInput\":true,\n  \"replyTo\":\"``\",\n  \"references\":[],\n  \"isReply\":false,\n  \"__recipientsCollapsibleState\":{\"isOpen\":true},\n  \"toList\":[\"``\"],\n  \"ccList\":[],\n  \"bccList\":[],\n  \"hasDynamicRecipients\":false,\n  \"dynamicRecipients\":\"// [ \\\"recipient@domain.com\\\", \\\"John Doe <john@doe.com>\\\" ]\\t// (all are 'To')\\n   /* or */\\n// [ { type: \\\"to\\\", recipient: \\\"recipient@domain.com\\\" }, { type: \\\"cc\\\", recipient: \\\"John Doe <john@doe.com>\\\" } ]\",\n  \"__responseCollapsibleState\":{\"isOpen\":true},\n  \"notWaitResponse\":false,\n  \"timeout\":604800000,\n  \"timeoutString\":\"`1 week`\",\n  \"hasOpenEvent\":false,\n  \"hasUrlClickTracking\":false,\n  \"handleComplaints\":false,\n  \"responseEvent\":\"thread\",\n  \"__messageCollapsibleState\":{\"isOpen\":true},\n  \"subject\":\"``\",\n  \"yourMessage\":\"``\",\n  \"yourMessageHtml\":\"\",\n  \"mode\":{\"label\":\"Plain text\",\"value\":\"plain\"},\n  \"attachments\":[],\n  \"dynamicAttachments\":\"// ['https://link/to/file/1.jpg', 'https://link/to/file/2.txt', ...]\\n// or\\n// [{ location: 'https://link/to/file', name: 'my_file.txt' }, ...]\",\n  \"hasDynamicAttachments\":false,\n  \"__bounceCollapsibleState\":{\"isOpen\":true},\n  \"ignoreOtherBounces\":true,\n  \"bounceHandleType\":\"bounce\",\n  \"dataOut\":{\"name\":\"emailInput\",\"type\":\"session\",\"ttl\":86400000},\n  \"isEmailInheritableStep\":true,\n  \"exits\":[{\"id\":\"next\",\"label\":\"response\"}, {\"id\":\"__error__\",\"label\":\"error\"}],\n  \"dynamicExitsArrayStart\":1\n};\n\nconst main = () => {\n  const dataKeys = Object.keys(step.data);\n  const defaultKeys = Object.keys(defaults);\n  console.log('Run migrations...');\n  defaultKeys.forEach(key => {\n    if (!dataKeys.includes(key)) {\n      console.log(`Add value - ${key}: ${JSON.stringify(defaults[key])}`);\n      step.data[key] = defaults[key];\n    }\n  });\n};\n\nmain();",
            "version": "0.0.507"
          },
          {
            "sample": null,
            "script": "step.data['adaptersLinks'] = [];\n",
            "version": "0.0.512"
          },
          {
            "sample": null,
            "script": "step.data['emailConfig'] = \"\";\n",
            "version": "0.0.513"
          },
          {
            "sample": null,
            "script": "step.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['false'] = \"\";\n",
            "version": "0.0.514"
          },
          {
            "sample": null,
            "script": "step.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['isTextOutput'] = false;\n",
            "version": "0.0.515"
          },
          {
            "sample": null,
            "script": "step.data['emailConfig'] = \"\";\nstep.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['isTextOutput'] = false;\n",
            "version": "0.0.516"
          },
          {
            "sample": null,
            "script": "step.data['requiredAdapters'] = [];\nstep.data['emailConfig'] = \"\";\nstep.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['isTextOutput'] = false;\n",
            "version": "0.0.517"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.518"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.519"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['emailConfig'])) step.data['emailConfig'] = \"\";\n",
            "version": "0.0.520"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['timestringDuration'])) step.data['timestringDuration'] = 0;\nif(_.isUndefined(step.data['timestringDurationStr'])) step.data['timestringDurationStr'] = \"``\";\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.521"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['timeoutLeng'])) step.data['timeoutLeng'] = {\"input\":\"`1 week`\",\"outputMode\":\"ms\"};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.522"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.523"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.524"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.525"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['wysiwygText'])) step.data['wysiwygText'] = \"\";\nif(_.isUndefined(step.data['wysiwygPlainText'])) step.data['wysiwygPlainText'] = \"\";\nif(_.isUndefined(step.data['isTextOutput'])) step.data['isTextOutput'] = false;\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.526"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['timeoutLeng'])) step.data['timeoutLeng'] = {\"input\":\"`1 week`\",\"outputMode\":\"ms\"};\n",
            "version": "0.0.528"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.531"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.532"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['s__accountsCollapsibleState'])) step.data['__accountsCollapsibleState'] = {\"isOpen\":true,\"_schemaValidators\":{\"emailConfig\":\"!_.isEmpty(value)\"}};\nif(_.isUndefined(step.data['emailConfig'])) step.data['emailConfig'] = \"\";\nif(_.isUndefined(step.data['nameFrom'])) step.data['nameFrom'] = \"``\";\nif(_.isUndefined(step.data['differentReplyTo'])) step.data['differentReplyTo'] = false;\nif(_.isUndefined(step.data['senderAddress'])) step.data['senderAddress'] = \"``\";\nif(_.isUndefined(step.data['senderSubDomain'])) step.data['senderSubDomain'] = \"``\";\nif(_.isUndefined(step.data['replyToAddress'])) step.data['replyToAddress'] = \"``\";\nif(_.isUndefined(step.data['replyToSubDomain'])) step.data['replyToSubDomain'] = \"``\";\nif(_.isUndefined(step.data['__replyCollapsibleState'])) step.data['__replyCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['isRequestInput'])) step.data['isRequestInput'] = true;\nif(_.isUndefined(step.data['replyTo'])) step.data['replyTo'] = \"``\";\nif(_.isUndefined(step.data['references'])) step.data['references'] = [];\nif(_.isUndefined(step.data['isReply'])) step.data['isReply'] = false;\nif(_.isUndefined(step.data['__recipientsCollapsibleState'])) step.data['__recipientsCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['toList'])) step.data['toList'] = [\"``\"];\nif(_.isUndefined(step.data['ccList'])) step.data['ccList'] = [];\nif(_.isUndefined(step.data['bccList'])) step.data['bccList'] = [];\nif(_.isUndefined(step.data['hasDynamicRecipients'])) step.data['hasDynamicRecipients'] = false;\nif(_.isUndefined(step.data['dynamicRecipients'])) step.data['dynamicRecipients'] = \"// [ \\\"recipient@domain.com\\\", \\\"John Doe <john@doe.com>\\\" ]\\t// (all are 'To')\\n   /* or */\\n// [ { type: \\\"to\\\", recipient: \\\"recipient@domain.com\\\" }, { type: \\\"cc\\\", recipient: \\\"John Doe <john@doe.com>\\\" } ]\";\nif(_.isUndefined(step.data['__responseCollapsibleState'])) step.data['__responseCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['timeoutLeng'])) step.data['timeoutLeng'] = {\"input\":\"`1 week`\",\"outputMode\":\"ms\"};\nif(_.isUndefined(step.data['hasOpenEvent'])) step.data['hasOpenEvent'] = false;\nif(_.isUndefined(step.data['hasUrlClickTracking'])) step.data['hasUrlClickTracking'] = false;\nif(_.isUndefined(step.data['handleComplaints'])) step.data['handleComplaints'] = false;\nif(_.isUndefined(step.data['__messageCollapsibleState'])) step.data['__messageCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['subject'])) step.data['subject'] = \"``\";\nif(_.isUndefined(step.data['yourMessage'])) step.data['yourMessage'] = \"``\";\nif(_.isUndefined(step.data['yourMessageHtml'])) step.data['yourMessageHtml'] = \"\";\nif(_.isUndefined(step.data['mode'])) step.data['mode'] = {\"label\":\"Plain text\",\"value\":\"plain\"};\nif(_.isUndefined(step.data['emailTemplateData'])) step.data['emailTemplateData'] = {};\nif(_.isUndefined(step.data['emailTemplateStr'])) step.data['emailTemplateStr'] = \"\";\nif(_.isUndefined(step.data['emailTemplateMergeFieldsStr'])) step.data['emailTemplateMergeFieldsStr'] = \"\";\nif(_.isUndefined(step.data['emailPreviewLink'])) step.data['emailPreviewLink'] = \"\";\nif(_.isUndefined(step.data['wysiwygText'])) step.data['wysiwygText'] = \"\";\nif(_.isUndefined(step.data['wysiwygPlainText'])) step.data['wysiwygPlainText'] = \"\";\nif(_.isUndefined(step.data['isTextOutput'])) step.data['isTextOutput'] = false;\nif(_.isUndefined(step.data['attachments'])) step.data['attachments'] = [];\nif(_.isUndefined(step.data['dynamicAttachments'])) step.data['dynamicAttachments'] = \"// ['https://link/to/file/1.jpg', 'https://link/to/file/2.txt', ...]\\n// or\\n// [{ location: 'https://link/to/file', name: 'my_file.txt' }, ...]\";\nif(_.isUndefined(step.data['hasDynamicAttachments'])) step.data['hasDynamicAttachments'] = false;\nif(_.isUndefined(step.data['useSource'])) step.data['useSource'] = false;\nif(_.isUndefined(step.data['__bounceCollapsibleState'])) step.data['__bounceCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['bounceHandleType'])) step.data['bounceHandleType'] = \"bounce\";\nif(_.isUndefined(step.data['ignoreOtherBounces'])) step.data['ignoreOtherBounces'] = true;\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{}};\nif(_.isUndefined(step.data['isEmailInheritableStep'])) step.data['isEmailInheritableStep'] = true;\napplyExitsMigration(step, stepTemplate); \napplyExitsMigration(step, stepTemplate); \nstep.data.dynamicExitsArrayStart = stepTemplate.data.dynamicExitsArrayStart; \n",
            "version": "0.0.567"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customMessageId'])) step.data['customMessageId'] = \"\";\n",
            "version": "0.0.639"
          },
          {
            "sample": null,
            "script": "if (step.data.hasOpenEvent || step.data.hasUrlClickTracking) {\n  step.data.useThreads = true;\n}\n",
            "version": "0.0.648"
          },
          {
            "sample": null,
            "script": "const timeoutLegData = _.find(step.data.exits, ['label', 'timeout']);\nconst timeoutLegStepId = _.get(timeoutLegData, 'id');\nconst stepOnTimeoutLeg = _.find(steps, ['id', timeoutLegStepId]);\nconst isTimeoutLegEmpty = _.get(stepOnTimeoutLeg, 'type') === 'empty';\nconst isBounceIgnored = _.get(step.data, 'bounceHandleType') === 'ignore'; \n\nif (step.data.hasOpenEvent || step.data.hasUrlClickTracking || !isTimeoutLegEmpty || !isBounceIgnored) {\n  step.data.useThreads = true;\n}",
            "version": "0.0.652"
          },
          {
            "sample": null,
            "script": "if(_.isObject(step.data.mode)) {\n  if (step.data.mode.value) {\n    step.data.mode = step.data.mode.value\n  } else {\n    step.data.mode = 'plain'\n  }\n}",
            "version": "0.0.667"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['bounceHandleType'])) step.data['bounceHandleType'] = \"bounce\";\n",
            "version": "0.0.668"
          },
          {
            "sample": null,
            "script": "step.data.dynamicAttachments = \"\"",
            "version": "0.0.729"
          },
          {
            "sample": null,
            "script": "if (step.data.useThreads) {\n  step.data.useThreads = false\n}; step.data.exits = _.remove(step.data.exits, (exit) => {\n  return exit.label === 'next' || exit.label === 'error'\n})",
            "version": "0.0.737"
          },
          {
            "script": "step.data.manualEmailConfig = \"this.get('')\"",
            "version": "1.4.1"
          }
        ],
        "modules": [
          {
            "name": "@hapi/joi",
            "version": ""
          },
          {
            "name": "axios",
            "version": ""
          },
          {
            "name": "cheerio",
            "version": ""
          },
          {
            "name": "emailjs",
            "version": "3.8.0"
          },
          {
            "name": "file-type",
            "version": ""
          },
          {
            "name": "html-entities",
            "version": ""
          },
          {
            "name": "html-to-text",
            "version": ""
          },
          {
            "name": "html-validator",
            "version": ""
          },
          {
            "name": "jsdom",
            "version": ""
          },
          {
            "name": "link-check",
            "version": ""
          },
          {
            "name": "mime-types",
            "version": ""
          },
          {
            "name": "moment",
            "version": ""
          },
          {
            "name": "nanoid",
            "version": ""
          },
          {
            "name": "node-fetch",
            "version": ""
          },
          {
            "name": "planer",
            "version": ""
          },
          {
            "name": "striptags",
            "version": ""
          },
          {
            "name": "timestring",
            "version": ""
          },
          {
            "name": "uuid",
            "version": ""
          },
          {
            "name": "html-minifier-terser",
            "version": ""
          }
        ],
        "dateModified": 1666695230327,
        "hooks": {
          "flow-deleted": "const setSelectedIMAPSettings = async (payload) => {\n  const url = $flow.gatewayUrl('email/mail-server/imap-smtp/set-poll-accounts/2.0', $flow.providersAccountId())\n  const updated = axios.post(url, payload)\n    .then(response => {\n      return JSON.parse(response.data.result)\n    })\n    .catch(err => console.error('error', err))\n  return updated\n}\n\nconst main = async () => {\n  try {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepId: step.id,\n        selectedAccounts: []\n      })\n  } catch (error) {\n    console.error('error updating selected imap accounts', error)\n  }\n}\n\nmain()",
          "flow-deactivated": "const setSelectedIMAPSettings = async (payload) => {\n  const url = $flow.gatewayUrl('email/mail-server/imap-smtp/set-poll-accounts/2.0', $flow.providersAccountId())\n  const updated = axios.post(url, payload)\n    .then(response => {\n      return JSON.parse(response.data.result)\n    })\n    .catch(err => console.error('error', err))\n  return updated\n}\n\nconst main = async () => {\n  try {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepId: step.id,\n        selectedAccounts: []\n      })\n  } catch (error) {\n    console.error('error updating selected imap accounts', error)\n  }\n}\n\nmain()",
          "before-activate-flow": "const setSelectedIMAPSettings = async (payload) => {\n  const url = $flow.gatewayUrl('email/mail-server/imap-smtp/set-poll-accounts/2.0', $flow.providersAccountId())\n  const updated = axios.post(url, payload)\n    .then(response => {\n      return JSON.parse(response.data.result)\n    })\n    .catch(err => console.error('error', err))\n  return updated\n}\n\nconst main = async () => {\n  try {\n    if (step.data.emailConfig.type === 'mail-server') {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepLabel: step.label,\n        stepId: step.id,\n        selectedAccounts: [ step.data.emailConfig.id ],\n        flowUrl: `http://studio${env.CLIENT_DOMAIN}/flows/${$flow.botId}/${$flow.id}`,\n      })\n    } else {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepLabel: step.label,\n        stepId: step.id,\n        selectedAccounts: [],\n        flowUrl: `http://studio${env.CLIENT_DOMAIN}/flows/${$flow.botId}/${$flow.id}`,\n      })\n    }\n  } catch (error) {\n    console.error('error updating selected imap accounts', error)\n  }\n}\n\nmain()"
        }
      },
      {
        "id": "7cbb0341-55c0-42b8-962d-a8721585e89d",
        "version": "1.7.5",
        "cacheVersion": "05b06f7f-3a7f-4405-b586-5a055e86edfd",
        "label": "Send Message (SMS/MMS)",
        "icon": "text",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-left",
        "description": "Use this step to send an SMS/MMS to the specified end user phone number.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "SMS"
        ],
        "recommended": [],
        "tags": [],
        "template": "//---------------- report Transcript Event ----------------\nconst report = ({\n  message, \n  mediaUrl, \n  transcriptId, \n  previousTranscriptId, \n  botIdentifier, \n  endUserIdentifier\n}) => {\n  const reportingObject = {\n    botIdentifier,\n    message,\n    previousTranscriptId,\n    eventId              : transcriptId,\n    channel              : _.isEmpty(mediaUrl) ? 'SMS' : 'MMS',\n    reportingSettingsKey : 'transcript',\n    media                : _.map(mediaUrl, fileUrl => ({fileUrl, fileType : 'File'})),\n    fromId               : this.config.flowId,\n    fromType             : 'Bot',\n    toType               : 'Visitor',\n    toIdentifier         : endUserIdentifier,\n    fromIdentifier       : botIdentifier\n  };\n\n  this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\n//---------------- Random and condtion logic ----------------\nconst makeCompare = (rule) => {\n  let firstValue = rule.valueType === 'other' ? rule.firstValue : rule.firstValue.trim();\n  let secondValue = rule.valueType === 'other' ? rule.secondValue : rule.secondValue.trim();\n  \n  if (rule.valueType === 'number') {\n    firstValue = isNaN(rule.firstValue) ? NaN : parseFloat(rule.firstValue);\n    secondValue = isNaN(rule.secondValue) ? NaN : parseFloat(rule.secondValue);\n  }\n\n  if (rule.valueType === 'advanced') {\n    const flowContext = this;\n    return new Function('_', `return ${rule.codeValue}`).bind(flowContext)(_)\n  } else {\n    let compareMethod = rule.compareMethod;\n    return compareMethod(firstValue, secondValue) \n  }\n}\n\nconst getRandomMessage = (messages) => {\n  const weights = _.map(messages, condition => {\n    if (isNaN(parseFloat(condition.weight)))\n      throw new Error(`Weight value ${condition.weight} is invalid.`);\n    \n    if (parseFloat(condition.weight) <= 0)\n      throw new Error(`Weight value should be a positive number.`);\n      \n    return parseFloat(condition.weight);\n   });\n   \n  const selectionIndex = weightedRandom(weights);\n  \n  return messages[selectionIndex];\n};\n\nconst getConditionsMessage = (messages) => {\n  let conditionMessage = {};\n  let isMatch = false;\n  try {\n    _.forEach(messages, message => {\n      let isRule = (message.trueValue === 'any') ? _.some(message.rules, rule => makeCompare(rule)) : _.every(message.rules, rule => makeCompare(rule))\n\n      if (isRule) {\n        conditionMessage = message;\n        isMatch = true;\n        return false;\n      }\n    })\n    \n    return isMatch ? conditionMessage : { \"message\": noConditionMessage, \"medias\": noConditionMedias };\n  } catch (error) {\n    throw error\n  }\n};\n\nconst getMessage = () => {\n  switch (activeTabId) {\n    case 'single':\n      return singleMessage;\n    case 'random':\n      return getRandomMessage(randomGroups);\n    case 'condition':\n      return getConditionsMessage(conditionGroups);\n  }\n};\n//----------------------------------------------------------\n\n//-------------------- exitStep helper ---------------------\nconst exitStep = async exit => {\n  return this.exitStep(exit, {\n    transcriptId,\n    ... _.pick(conversation, ['botNumber', 'endUserNumber', 'lastTranscriptId'])\n  });\n};\n//----------------------------------------------------------\n\n// dependencies\nconst uuid = require('uuid');\nconst Request = require('or-sdk/request');\nconst request = new Request(this);\nconst timestring = require('timestring');\nconst weightedRandom = require('weighted-random');\n\n// read/create conversation\nlet conversation;\nif (continueConversation) {\n  conversation = await this.mergeFields[conversationMeta].get();\n} else {\n  const normalizedBotNumber = _.isNumber(botNumber) ? `+${botNumber}` : botNumber; // when step updated from older version, bot number data could be type of number\n  const botNumberCountryCode = this.helpers.detectIdentifierCountry(normalizedBotNumber);\n  const normalizedUserNumber = this.helpers.normalizePhoneNumber(_.toString(endUserNumber), botNumberCountryCode);\n  conversation = {\n    botNumber        : normalizedBotNumber,\n    endUserNumber    : normalizedUserNumber,\n    lastTranscriptId : undefined\n  };\n}\n\n// main logic\nif (_.isEmpty(conversation.botNumber) && !continueConversation)\n  throw new Error('Bot number is not allowed to be empty');\n\nif (_.isEmpty(conversation.endUserNumber) && !continueConversation)\n  throw new Error('End user number is not allowed to be empty');\n\n// parse timeout\nlet timeoutTime;\ntry {\n  timeoutTime = timestring(String(timeout), 'ms');\n} catch(e) {\n  timeoutTime = timestring('24h', 'ms');\n};\n\n// generate / read transcript id\nconst transcriptId = await thisStep.getset(this, 'transcriptId', uuid.v4());\n    \nthis.triggers.once(`status/text/${transcriptId}`, event => {\n  if (event.params.status === 'delivered') {\n    return checkStatus ? exitStep('next') : this.exitFlow();\n  } else if (_.includes(['failed', 'undelivered', 'optout'], event.params.status)) {\n    throw new Error(event.params.status);\n  } else if (checkStatus) {\n    return this.exitFlow();\n  } else {\n    return exitStep('next');\n  }\n});\n\nif (checkStatus) {\n  this.triggers.timeout(timeoutTime, () => exitStep('next'));\n}\n\nreturn this.triggers.otherwise(async () => {\n  if (/^status\\/text\\/.*/.test(this.event.name) && !this.event.processed){\n    return this.exitFlow();\n  }\n  \n  const messageItem = getMessage();\n  const message = messageItem.message;\n  \n  const event = {\n    name    : 'out/text',\n    target  : this.helpers.providersAccountId,\n    params  : {\n      channel : {\n        id   : transcriptId,\n        from : conversation.botNumber,\n        to   : conversation.endUserNumber\n      },\n      message\n    }\n  };\n\n  const mediaLocations = _.chain(messageItem.medias)\n    .map('location')\n    .compact()\n    .value();\n\n  event.params.mediaUrl = _.compact(\n    await Promise.map(mediaLocations, async url => {\n      try {\n        const response = await request.head({\n          url,\n          timeout                 : 2000,\n          resolveWithFullResponse : true,\n          reporting               : {\n            disable : true\n          }\n        });\n  \n        if (response.statusCode === 200) return url;\n  \n        this.log.error(response);\n        this.log.error(`Error: Image ${url} Status Code: ${response.statusCode}`);\n      } catch (error) {\n        this.log.error(error);\n      }\n    })\n  );\n  \n  if (_.isEmpty(message) && _.isEmpty(event.params.mediaUrl))\n    throw new Error('Text or media is required');\n\n  await this.emitAsync(event);\n  \n  report({\n    ... event.params, \n    transcriptId, \n    previousTranscriptId : conversation.lastTranscriptId, \n    botIdentifier        : conversation.botNumber, \n    endUserIdentifier    : conversation.endUserNumber\n  });\n  \n  conversation.lastTranscriptId = transcriptId;\n  if (continueConversation) conversation = await this.mergeFields[conversationMeta].set(conversation);\n  \n  return this.exitFlow();\n});\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "options": [],
          "timeout": "`24h`",
          "useFiles": false,
          "botNumber": "``",
          "activeTabId": "single",
          "checkStatus": false,
          "isSingleExit": true,
          "processError": true,
          "randomGroups": [
            {
              "medias": [],
              "weight": "`1`",
              "message": "``",
              "weightLabel": "Weight"
            }
          ],
          "endUserNumber": "``",
          "singleMessage": {
            "medias": [],
            "message": "``",
            "useFiles": false
          },
          "conditionGroups": [
            {
              "label": "`New condition 1`",
              "rules": [
                {
                  "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                  "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                  "codeValue": "``",
                  "valueType": "string",
                  "firstValue": "``",
                  "secondValue": "``",
                  "isDisabledSecondValue": false
                }
              ],
              "medias": [],
              "weight": "`1`",
              "dataOut": "``",
              "message": "``",
              "useFiles": false,
              "trueValue": "any",
              "description": "``",
              "isNotCollapsed": true,
              "isEditableHeader": false
            }
          ],
          "conversationMeta": "",
          "noConditionMedias": [],
          "noConditionMessage": "``",
          "continueConversation": true,
          "hasNoConditionDataOut": false,
          "conditionRuleHasDataOut": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "transcript": {
            "tags": [],
            "type": "transcript",
            "label": "Transcript",
            "enabled": true
          }
        },
        "outputExample": {
          "botNumber": "+17205555555",
          "transcriptId": "",
          "endUserNumber": "+17205555551",
          "lastTranscriptId": ""
        },
        "help": "Use this step to send a SMS/MMS to a specified end user number from your account’s bot number or group of numbers. To send the message the step requires few parameters to be preset: both sender and recipient phone numbers and the message body.\n\n### Message\nMessage settings and limits are described in the Message field under the *Info* icon. To send a `Single` message, define the outgoing message via a text and/or media file(s).\n\nChoose the `Random` option to send a message that depends on probability. Each message is defined by a text and/or media, as well as its individual weight. The weight is used to calculate the probability of that message being chosen from the list. It is expected as a positive number with point used for decimals; its range is `> 0` and `< (2^53-1)`. When all weights are set manually with correct numbers, the probabilities for each message to send are calculated automatically and will be displayed. When step is reached in the flow, it chooses one of the messages randomly and sends it to the end user. \n\nUse the `Condition` option to select the prompt message depending on set conditions. Each message is defined by a text and/or media, as well as conditions that should be met for the step to select that message. There is no limit on the number of condition groups, but the step will choose only one during an execution. When step is reached in the flow, each group will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. If none of the rules were met, the step will send the message defined in the *If no condition is met* section. Additional information about condition builder can be found in the *Conditional Selection* step under the *Info* icon.\n\n### Advanced settings\nOption to continue conversation is on by default and allows to select a merge field name of a step, where the conversation you want to follow has been started. If the option is off, bot and end user phone numbers should be defined, and such a step becomes a conversation starter and will be listed in Conversation option for other steps.\n\n*Bot phone number* field lists all identifiers and groups of identifiers available in your OneReach.ai account. Select the value from the list or choose the one stored in the *merge field* value (click `{x}` icon).\n\nThe recipient's phone number should be defined in *End user phone number* field, it can be set manually, declared with a merge field value or written as a code in *code mode*. To make sure the message is sent to the end user, both numbers should be entered in international format, like `+44 871 222 1156`. For US or Canada local numbers the country code may be skipped. In case the value contains special characters or is empty, the message will be sorted out by OneReach.ai provider as invalid and will not be put in the queue to be sent.\n\nIn case your flow logic requires the message to be delivered before proceeding next in the flow, turn on the toggle *Wait for delivery confirmation* and define the timeout to wait. The waiting period is 24 hours by default but you can change it in *Waiting timeout* field to any value between 10 seconds and 48 hours. If no confirmation is received after timeout expires, the flow will proceed down the next leg.\nExamples of acceptable time formats: `28h 25m 12s` or `5m 12s`.\nIn case the value is not defined and the field is empty, default 24h timeout will be applied.\n\nThe step returns *transcriptId* as a unique identifier of the message. The value will be stored under the variable provided in *Merge field name* and can be used later in the flow.\n\n###Error handling\nTo handle flow execution in case of an error in the step, Process error option is set on by default. It enables additional `error` leg which will be exited in case the step execution fails, like faulty status is returned regardless of `Wait for delivery`, required field is empty (no message set) or invalid (e.g. invalid format of phone number). Details of the error will be shown in flow logs.\n\n### Reporting Events\nStep and Transcript events are reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n## Changelog\n```\n### 1.3.1\n- refactor step logic to use async/await\n- refactor reporting\n### 1.5.3\n- remove unnecessary dataOut meta updates\n### 1.6.0\n- remove undelivered leg\n- add standard `Process error` leg/form component\n- exit via `error` leg in case faulty status is returned regardless of `Wait for delivery`\n### 1.7.1\n- add single/random/condition message tabs\n\n```\n",
        "formBuilder": {
          "formCode": "return {\n    props : ['schema']\n};",
          "stepExits": [
            {
              "id": "d064065f-8c57-4d70-ac03-5e3083e1acd3",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "compiled": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ]
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "53c145fa-031c-49f9-830f-636ffd390273",
              "data": {
                "header": "Message",
                "headingType": "h4",
                "isHtmlLabel": false
              },
              "label": "Header",
              "compiled": {},
              "component": "formHeader"
            },
            {
              "id": "f68b8285-e596-4c75-b7b5-08eac2e7d62f",
              "data": {
                "tabs": [
                  {
                    "id": "single",
                    "title": "Single",
                    "inputs": [
                      {
                        "id": "4799a645-1c95-49ef-bb88-90c99e5895b4",
                        "data": {
                          "data": "{\n  \"singleMessage\": {\n    \"message\"  : \"``\",\n    \"medias\"   : [],\n    \"useFiles\" : false\n  }\n}",
                          "toJson": "function isExpression(path, data) {\n  return (/:(message)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n\n  if (_.isArray(data)) \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n\n  if (_.isObject(data))\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n\n  if (isExpression(path, data)) \n    return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                          "validators": "singleMessage : {\n  custom : (value, ctx) => {\n    return value.message.slice(1, -1) || (value.medias.length && _.filter(value.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length)\n  }\n}",
                          "applyToJson": true,
                          "formTemplate": "<wildcard \n  v-model=\"schema.singleMessage\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :readonly=\"readonly\"\n></wildcard>",
                          "componentName": "or-wildcard-pnglcsjrtziyvkbmhxouaqfdew",
                          "componentLogic": "{\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      localMessage: this.value,\r\n      messageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\r\n    }\r\n  },\r\n  \r\n  props : {\r\n    value : {\r\n      type : Object,\r\n      default () {\r\n        return {\r\n          medias: [],\r\n          message: '``',\r\n          useFiles: false\r\n        };\r\n      }\r\n    },\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    isNew: Boolean,\r\n    steps: Array,\r\n    stepId: String,\r\n    v : {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n  \r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    medias : {\r\n      get () {\r\n        return this.value.medias\r\n      },\r\n      set (value) {\r\n        const model = this.value.useFiles\r\n          ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n          : [\r\n              'acl',\r\n              'data',\r\n              'ext',\r\n              'id',\r\n              'location',\r\n              'name',\r\n              'note',\r\n              'type',\r\n              'linkUrl',\r\n            ];\r\n        const res = _.map(value, item => _.pick(item, model));\r\n        this.localMessage.medias = res;\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.value.useFiles;\r\n      },\r\n      set (value) {\r\n        this.localMessage.useFiles = value;\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted () {\r\n    // console.log('this', this)\r\n  },\r\n  \r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.localMessage.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.localMessage.medias[0], 'linkUrl')) {\r\n        this.localMessage.medias.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    localMessage: {\r\n      handler(newValue) {\r\n        this.$emit('input', this.localMessage);\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}",
                          "componentTemplate": "<div class=\"message-wrapper\">\n  <or-text-message  \n    v-model=\"localMessage.message\"\n    class=\"message-item\"\n    :readonly=\"readonly\"  \n    label=\"Message\" \n    placeholder=\"Enter text to be sent here\" \n    :max-char-length=\"160\" \n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\"  \n    :merge-fields=\"mergeFields\"\n    :stepId=\"stepId\"\n    :steps=\"steps\"\n    :invalid=\"v.$error\"\n    @input=\"v.$touch()\"\n    :component-info-text=\"messageInfoText\"\n  ></or-text-message>\n  <div class=\"select-media\">\n    <or-modal ref=\"select-media\" \n      title=\"Select media\" \n      size=\"large\"\n    >\n      <or-asset-manager :assets-url=\"assetsUrl\" \n        :auth-token=\"authToken\"\n        :multi-select=\"true\"\n        :max-files=\"maxFiles\"\n        :allowed-file-types=\"allowedFileTypes\"\n        :use-files.sync=\"useFilesComputed\"\n        :files-api-url=\"$flow.filesApiUrl\"\n        v-model=\"medias\"\n      ></or-asset-manager>\n    </or-modal>\n    \n    <or-list ref=\"mediaList\" \n      v-model=\"localMessage.medias\" \n      class=\"selected-media-list\"\n      :steps=\"steps\" \n      :step-id=\"stepId\" \n      :new-item-method=\"addNewUrl\"\n    >\n      <template slot-scope=\"item\">\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n          {{ item.item.name }}\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n          <or-text-expression\n            label=\"URL\" \n            placeholder=\"Enter image URL to be sent here\"\n            v-model=\"item.item.linkUrl\"\n            :merge-fields=\"mergeFields\"\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.$error\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\" \n          ></or-text-expression>\n            <!--:error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"-->\n            <!--:invalid=\"v.schema.responsesQuantity.$error\"-->\n            <!--@input=\"v.schema.responsesQuantity.$touch()\"-->\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n      </template>\n      <div slot=\"footer\">\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Add media</or-button>\n      </div>\n    </or-list>\n    <div v-if=\"!localMessage.medias.length\"\n      class=\"select-media__inline-message\"\n    >\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Files</or-button>\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>URL</or-button>\n    </div>\n    <p class=\"invalid\" v-show=\"v.$error\">Text or media content is required</p>\n  </div>\n</div>",
                          "wildcardTemplates": [],
                          "componentCompiledStyles": "",
                          "componentOriginalStyles": ".messages-list {\n  .add-button {\n    display: none;\n  }\n}\n\n.select-media {\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}"
                        },
                        "meta": {
                          "name": "formWildcard",
                          "type": "onereach-studio-form-input",
                          "version": "1.0"
                        },
                        "label": "Wildcard",
                        "component": "formWildcard",
                        "pluginRefs": [
                          "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                          "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                        ]
                      }
                    ],
                    "vforkey": "dad07acc-2b68-4bea-b3c5-6970a3439afd"
                  },
                  {
                    "id": "random",
                    "title": "Random",
                    "inputs": [
                      {
                        "id": "027c4015-5d97-4e0c-b4c4-856aee543c57",
                        "data": {
                          "data": "{\n  \"randomGroups\": [{\n    \"medias\": [],\n    \"message\": \"``\",\n    \"weight\": \"`1`\",\n    \"weightLabel\": \"Weight\"\n  }],\n  \"useFiles\": false\n}",
                          "toJson": "function isExpression(path, data) {\n  return (/:(message|weight$)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n  \n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                          "validators": "randomGroups : {\n  $each : {\n    message : {\n      custom : (value, ctx) => {\n        return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n      }\n    },\n    medias : {\n      custom : (value, ctx) => {\n        return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n      }\n    },\n    weight : {\n      custom : (value, ctx, some) => { \n        const isMergeField = value => {\n          return /this.*/.test(value) || /await this.*/.test(value);\n        }\n        \n        const isCodeMode = value => {\n          return !/^\\`.*\\`$/.test(value);\n        }\n        \n        if (isMergeField(value) && validators.jsExpression(value))\n          return true\n          \n        if (!isCodeMode(value))\n          return parseFloat(value.slice(1, -1)) > 0 && validators.jsExpressionNonEmptyString(value);\n          \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n    }\n  }\n}",
                          "applyToJson": true,
                          "formTemplate": "<wildcard \n  :v=\"$v\"\n  :random-groups.sync=\"schema.randomGroups\"\n  :active-tab-id=\"schema.activeTabId\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :use-files.sync=\"schema.useFiles\"\n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :schema=\"schema\"\n  :readonly=\"readonly\">\n</wildcard>",
                          "componentName": "or-wildcard-avcjbkzdruoqgihtfypnsxewlm",
                          "componentLogic": "{\n  data() {\n    return {\n    }\n  },\n  \n  props: {\n    randomGroups: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    useFiles: Boolean,\n    activeTabId: String,\n    isNew: Boolean,\n    schema: Object,\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  \n  computed: {\n    randomGroupsLocal : {\n      get () {\n        return this.randomGroups;\n      },\n      set (newValue) {\n        this.$emit('update:randomGroups', newValue);\n        this.$nextTick(() => {\n          if (this.$refs['message-weight-0'])\n            this.updateProbabilityInPercent(newValue);\n        })\n      }\n    },\n    useFilesComputed : {\t\t\n      get () {\t\t\n        return this.useFiles; \t\t\n      },\t\t\n      set (value) {\t\t\n        this.$emit('update:useFiles', value);\t\t\n      }\n    }\n  },\n  \n  watch: {\n    activeTabId (newValue) {\n      if (newValue === 'random' && this.randomGroupsLocal.length < 2)\n        this.$refs.randomList.addItem();\n    }\n  },\n  \n  mounted () {\n    if (this.activeTabId === 'random' && this.$refs.randomList && this.randomGroupsLocal.length < 2) {\n      this.$refs.randomList.addItem();\n      \n      if (!this.isNew && this.v) {\n        this.$nextTick(() => {\n          this.v.schema.$touch();\n        })\n      }\n    }\n  },\n  \n  methods: {\n    newMessage () {\n      return {\n        message          : '``',\n        medias           : [],\n        weight           : \"`1`\",\n        weightLabel      : \"Weight\"\n      };\n    },\n    updateProbabilityInPercent(messages) {\n      let isInvalidWeight = false;\n      let weightArr = [];\n      let weightSum = messages.reduce((sum, message, index) => {\n        let weight;\n        if (this.$refs['message-weight-' + index].mode == 'code') {\n          weight = parseFloat(message.weight);\n        } else {\n          weight = parseFloat(message.weight.slice(1, -1));\n        }\n        \n        if (isNaN(weight) || weight <= 0 || this.isMergeFieldWeight(index)) {\n          isInvalidWeight = true;\n          return false\n        }\n        \n        weightArr.push(weight);\n        return sum + weight\n      }, 0);\n      \n      _.forEach(messages, (message, index) => {\n        if (isNaN(weightSum) || isInvalidWeight) {\n          message.weightLabel = \"Weight\";\n        } else {\n          let calculatedResult = (weightArr[index] / weightSum * 100).toFixed(0);\n          \n          if (calculatedResult == 0) {\n            calculatedResult = 1;\n          } else if (calculatedResult == 100) {\n            calculatedResult = 99;\n          }\n          \n          message.weightLabel = `Weight (${(weightArr[index] / weightSum * 100).toFixed(0)}%)`\n        }\n      })\n    },\n    errorText (weight) {\n      let text = '';\n      \n      if (!weight || weight === '``') {\n        text = 'Weight is required';\n      } else if (!validators.jsExpression(weight)) {\n        text = 'Please enter a valid JavaScript expression.';\n      } else {\n        text = 'Only positive number can be used as a value';\n      }\n      \n      return text;\n    },\n    isMergeFieldWeight (index) {\n      const isMergeField = (value) => {\n        return /this.*/.test(value) || /await this.*/.test(value);\n      }\n      \n      return isMergeField(this.randomGroups[index].weight);\n    }\n  },\n\n  components: {\n    messageItem: {\n      template: `<%= messageItem %>`,\n      props : {\n        value : {\n          type : Object,\n          default () {\n            return {\n              medias: [],\n              message: '``'\n            };\n          }\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        useFiles : Boolean,\n        isNew : Boolean,\n        readonly : {\n          type : Boolean,\n          default : false\n        },\n        steps: Array,\n        stepId: String,\n        v : {\n          type: Object,\n          default () {\n            return {};\n          }\n        }\n      },\n      \n      data () {\n        return {\n          iconPosition: 'left',\n          allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\n          maxFiles: 10,\n          localMessage: this.value,\n          messageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\n    \n        }\n      },\n      \n      computed : {\n        assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\n        authToken () { return this.$settings.token },\n        medias : {\n          get () {\n            return this.value.medias\n          },\n          set (value) {\n            const model = this.useFiles\n              ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\n              : [\n                  'acl',\n                  'data',\n                  'ext',\n                  'id',\n                  'location',\n                  'name',\n                  'note',\n                  'type',\n                  'linkUrl',\n                ];\n            const res = _.map(value, item => _.pick(item, model));\n            this.localMessage.medias = res;\n          }\n        },\n        useFilesComputed : {\n          get () {\n            return this.useFiles;\n          },\n          set (value) {\n            this.$emit('update:useFiles', value);\n          }\n        }\n      },\n      \n      methods: {\n        openModal (ref) {\n          this.$refs[ref].open();\n        },\n        removeSelectedItem (key) {\n          this.localMessage.medias.splice(key, 1);\n        },\n        addMedia () {\n          if (_.has(this.localMessage.medias[0], 'linkUrl')) {\n            this.localMessage.medias.push(this.addNewUrl());\n          } else {\n            this.openModal('select-media');\n          }\n        },\n        addNewUrl () {\n          return {\n            linkUrl: \"``\"\n          }\n        }\n      },\n      \n      watch: {\n        localMessage: {\n          handler(newValue) {\n            this.$emit('input', newValue);\n          },\n          deep: true\n        }\n      }\n    },\n  }\n}",
                          "componentTemplate": "<div>\r\n  <or-list \r\n    v-model=\"randomGroupsLocal\"\r\n    ref=\"randomList\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n    :readonly=\"readonly\"\r\n    :new-item-method=\"newMessage\"\r\n    :add-button-label=\"'Add new message'\"\r\n    class=\"messages-list messages-list--random\"\r\n    :can-remove-last-item=\"false\"\r\n  >\r\n    <template slot-scope=\"item\">\r\n      <or-text-expression\r\n        v-model=\"item.item.weight\"\r\n        :ref=\"'message-weight-' + item.index\"\r\n        :label=\"item.item.weightLabel\"\r\n        helpText=\"This value is expected as a positive number\"\r\n        class=\"message-weight__input\"\r\n        placeholder=\"Enter value\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        :readonly=\"readonly\"\r\n        :invalid=\"v.schema.randomGroups.$each[item.index].weight.$error\"\r\n        @input=\"v.schema.randomGroups.$each[item.index].weight.$touch()\"\r\n        :error=\"errorText(item.item.weight)\"\r\n      ></or-text-expression>\r\n      <or-alert v-if=\"isMergeFieldWeight(item.index) || ($refs['message-weight-' + item.index] && $refs['message-weight-' + item.index].mode === 'code')\"\r\n        type=\"info\" \r\n        :dismissible=false \r\n        style=\"font-size:small;\">\r\n        <span v-if=\"isMergeFieldWeight(item.index)\">Using merge field input will hide a calculation of the message probability weight.</span>\r\n        <span v-else>Using code mode may hide a calculation of the message probability weight</span>\r\n      </or-alert>\r\n      \r\n      <message-item v-model=\"item.item\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"item.steps\" \r\n        :step-id=\"item.stepId\"\r\n        :readonly=\"item.readonly\"\r\n        :is-new=\"isNew\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :v=\"v.schema.randomGroups.$each[item.index]\"\r\n      ></message-item>\r\n    </template>\r\n  </or-list>\r\n</div>",
                          "wildcardTemplates": [
                            {
                              "id": "7cf5536a-94f5-4cea-8929-43a3bab33efb",
                              "mode": "",
                              "title": "Message item",
                              "template": "<div class=\"message-wrapper\">\r\n  <or-text-message v-model=\"localMessage.message\" class=\"message-item\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent here\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.message.$error\"\r\n    @input=\"v.message.$touch()\"\r\n    :component-info-text=\"messageInfoText\"\r\n    :merge-fields=\"mergeFields\"\r\n  ></or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\"\r\n    >\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :files-api-url=\"$flow.filesApiUrl\"\r\n        v-model=\"medias\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"localMessage.medias\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\" class=\"selected-media-list__item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.message.$error\"\r\n            :mergeFields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!localMessage.medias.length\"\r\n      class=\"select-media__inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>\r\n",
                              "variable": "messageItem"
                            }
                          ],
                          "componentCompiledStyles": "",
                          "componentOriginalStyles": ".select-media {\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}\n\n// Message list for tab random\n.messages-list.or-list {\n  &.single-item {\n    .list-item {\n      padding: 0;\n    }\n  }\n  \n  & > .or-list-items div {\n    .remove-button {\n      display: none;\n    }\n  }\n  \n  & > .or-list-items > div:first-child:nth-last-child(n + 3) ~ div {\n    &>.remove-button {\n      display: block;\n    }\n  }\n}\n\n.messages-list--random {\n  // margin-bottom: 20px;\n  \n  &--single-exit > .or-list-items > .list-item:not(:first-child) {\n    padding-top: 0;\n  }\n  \n  .or-list-items {\n    width: 100%;\n  }\n  \n  &.or-list {\n    \n    & > .or-list-items > .list-item {\n      position: relative;\n      flex-direction: column;\n      align-items: flex-start;\n      padding: 0 40px;\n      \n      .message-weight__input {\n        width: 100%;\n      }\n\n      > .remove-button {\n      \tposition: absolute;\n      \ttop: 145px;\n        right: 0;\n      }\n      \n      > .handle {\n        display: none;\n      }\n      \n      > .drag_handle {\n        position: absolute;\n      \ttop: 150px;\n        left: 0;\n      }\n    }\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}"
                        },
                        "meta": {
                          "name": "formWildcard",
                          "type": "onereach-studio-form-input",
                          "version": "1.0"
                        },
                        "label": "Wildcard",
                        "component": "formWildcard",
                        "pluginRefs": [
                          "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                          "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                        ]
                      }
                    ],
                    "vforkey": "ac8d16ab-b002-46e5-bb4a-cf45d328e69c"
                  },
                  {
                    "id": "condition",
                    "title": "Condition",
                    "inputs": [
                      {
                        "id": "7c1017c1-799f-4e14-a388-452e5a90a61d",
                        "data": {
                          "inputs": [
                            {
                              "id": "d508868c-b96c-4eda-bc69-a7fd502eccc8",
                              "data": {
                                "data": "{\n  \"medias\": [],\n  \"message\": \"``\",\n  \"weight\": \"`1`\",\n  \"useFiles\": false\n}",
                                "toJson": "function isExpression(path, data) {\n  return (/:(message|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                                "validators": "message : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nmedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n  }\n}",
                                "applyToJson": true,
                                "formTemplate": "<wildcard\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :use-files.sync=\"schema.useFiles\"\n  :v=\"$v\" :steps=\"steps\" \n  :step-id=\"stepId\"\n  :conditionItem=\"schema\"\n  :message.sync=\"schema.message\"\n  :medias.sync=\"schema.medias\"\n  :readonly=\"readonly\"\n></wildcard>",
                                "componentName": "or-wildcard-sygbkoxqrcmeltwfjhnudiavzp",
                                "componentLogic": "{\r\n  props : {\r\n    message : String,\r\n    medias : Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    useFiles: Boolean,\r\n    conditionItem : Object,\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      messageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\r\n    \r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    messageLocal : {\r\n      get () { return this.message },\r\n      set (value) {\r\n        this.$emit('update:message', value);\r\n      }\r\n    },\r\n    mediasLocal : {\r\n      get () { return this.medias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:medias', value);\r\n        } else {\r\n          const model = this.useFiles\r\n            ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n            : [\r\n                'acl',\r\n                'data',\r\n                'ext',\r\n                'id',\r\n                'location',\r\n                'name',\r\n                'note',\r\n                'type',\r\n                'linkUrl',\r\n              ];\r\n          const res = _.map(value, item => _.pick(item, model));\r\n          this.$emit('update:medias', res);\r\n        }\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.useFiles;\r\n      },\r\n      set (value) {\r\n        this.$emit('update:useFiles', value);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.medias[0], 'linkUrl')) {\r\n        this.mediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n  }\r\n}",
                                "componentTemplate": "<div class=\"message-block\">\r\n  <or-text-message  \r\n    v-model=\"messageLocal\"\r\n    :merge-fields=\"mergeFields\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n&lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n&lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.schema.message.$error\"\r\n    @input=\"v.schema.message.$touch()\"\r\n    :component-info-text=\"messageInfoText\"\r\n  >\r\n  </or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\">\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :files-api-url=\"$flow.filesApiUrl\"\r\n        v-model=\"mediasLocal\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"mediasLocal\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.message.$error\"\r\n            :merge-fields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!medias.length\"\r\n      class=\"select-media__inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"mediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.schema.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>",
                                "wildcardTemplates": [],
                                "componentCompiledStyles": "",
                                "componentOriginalStyles": ".message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  position: relative;\n  padding-bottom: 10px;\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n    \n    .or-text-expression .or-editable-wrapper {\n      background-color: #ffffff;\n    }\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -7px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                              },
                              "meta": {
                                "name": "formWildcard",
                                "type": "onereach-studio-form-input",
                                "version": "1.0"
                              },
                              "label": "Wildcard",
                              "component": "formWildcard",
                              "pluginRefs": [
                                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                                "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                              ]
                            }
                          ],
                          "isSingleExit": true,
                          "addButtonText": "Add condition",
                          "isSingleGroup": false,
                          "conditionExits": [],
                          "conditionTitle": "New condition",
                          "conditionGroups": [
                            {
                              "label": "`New condition 1`",
                              "rules": [
                                {
                                  "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                                  "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                                  "codeValue": "``",
                                  "valueType": "string",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "medias": [],
                              "weight": "`1`",
                              "dataOut": "``",
                              "message": "``",
                              "useFiles": false,
                              "trueValue": "any",
                              "description": "``",
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            }
                          ],
                          "renderCondition": "",
                          "usePredefinedValue": false,
                          "isNegativeLeftMargin": false,
                          "hasNoConditionDataOut": false,
                          "conditionRuleHasDataOut": false,
                          "noConditionDataOutValue": "``"
                        },
                        "meta": {
                          "name": "condition-builder-component",
                          "type": "onereach-studio-form-input",
                          "version": "0.9.0"
                        },
                        "label": "Conditon builder v0.9.0",
                        "component": [
                          "condition-builder-component",
                          "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                        ],
                        "pluginRefs": [
                          "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                          "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                        ]
                      },
                      {
                        "id": "3749944d-3efd-43b7-b461-2e91f3a35b89",
                        "data": {
                          "data": "{\n  \"noConditionMessage\": \"``\",\n  \"noConditionMedias\": [],\n  \"useFiles\": false\n}",
                          "toJson": "function isExpression(path, data) {\n  return (/:(noConditionMessage|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:noConditionMedias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                          "validators": "noConditionMessage : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.noConditionMedias.length && _.filter(ctx.noConditionMedias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nnoConditionMedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.noConditionMessage.slice(1,-1);\n  }\n}",
                          "applyToJson": true,
                          "formTemplate": "<wildcard \n  :v=\"$v\" :steps=\"steps\" \n  :is-new=\"isNew\"\n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  :conditionItem=\"schema\"\n  :use-files.sync=\"schema.useFiles\"\n  :no-condition-message.sync=\"schema.noConditionMessage\"\n  :no-condition-medias.sync=\"schema.noConditionMedias\"\n  :readonly=\"readonly\"\n></wildcard>",
                          "componentName": "or-wildcard-urjfchklznqxpvbwostgdeimay",
                          "componentLogic": "{\r\n  props : {\r\n    noConditionMessage: String,\r\n    noConditionMedias: Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    useFiles: Boolean,\r\n    conditionItem: Object,\r\n    readonly: {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      noConditionMessageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    noConditionMessageLocal : {\r\n      get () { return this.noConditionMessage },\r\n      set (value) {\r\n        this.$emit('update:noConditionMessage', value);\r\n      }\r\n    },\r\n    noConditionMediasLocal : {\r\n      get () { return this.noConditionMedias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:noConditionMedias', value);\r\n        } else {\r\n          const model = this.useFiles\r\n            ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n            : [\r\n                'acl',\r\n                'data',\r\n                'ext',\r\n                'id',\r\n                'location',\r\n                'name',\r\n                'note',\r\n                'type',\r\n                'linkUrl',\r\n              ];\r\n          const res = _.map(value, item => _.pick(item, model));\r\n          this.$emit('update:noConditionMedias', res);\r\n        }\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.useFiles;\r\n      },\r\n      set (value) {\r\n        this.$emit('update:useFiles', value);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.noConditionMedias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.noConditionMedias[0], 'linkUrl')) {\r\n        this.noConditionMediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n    // console.log('this in wc', this)\r\n  }\r\n}",
                          "componentTemplate": "<div\n  :class=\"['no-condition-data-out', { 'no-condition-data-out__indent': conditionItem.conditionGroups && conditionItem.conditionGroups.length > 1 }, { 'is-invalid': v.schema.noConditionMessage.$error || v.schema.noConditionMedias.$error }, { 'readonly': readonly }]\"\n>\n  <div class=\"no-condition-data-out__header\">If no condition is met</div>\n  <div class=\"no-condition-data-out__body\">\n    <div class=\"message-block\">\n      <or-text-message  \n        v-model=\"noConditionMessageLocal\"\n        :merge-fields=\"mergeFields\"\n        :readonly=\"readonly\"  \n        label=\"Message\" \n        placeholder=\"Enter text to be sent\" \n        :max-char-length=\"160\" \n        merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n    &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n        in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n    &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n        not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \n        :stepId=\"stepId\"\n        :steps=\"steps\"\n        :invalid=\"v.schema.noConditionMessage.$error\"\n        @input=\"v.schema.noConditionMessage.$touch()\"\n        :component-info-text=\"noConditionMessageInfoText\"\n      >\n      </or-text-message>\n      <div class=\"select-media\">\n        <or-modal ref=\"select-media\" \n          title=\"Select media\" \n          size=\"large\">\n          <or-asset-manager :assets-url=\"assetsUrl\" \n            :auth-token=\"authToken\"\n            :multi-select=\"true\"\n            :max-files=\"maxFiles\"\n            :allowed-file-types=\"allowedFileTypes\"\n            :use-files.sync=\"useFilesComputed\"\n            :files-api-url=\"$flow.filesApiUrl\"\n            v-model=\"noConditionMediasLocal\"\n          ></or-asset-manager>\n        </or-modal>\n        \n        <or-list ref=\"mediaList\" \n          v-model=\"noConditionMediasLocal\" \n          class=\"selected-media-list\"\n          :steps=\"steps\" \n          :step-id=\"stepId\" \n          :new-item-method=\"addNewUrl\"\n        >\n          <template slot-scope=\"item\">\n            <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n              {{ item.item.name }}\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n            <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n              <or-text-expression\n                label=\"URL\" \n                v-model=\"item.item.linkUrl\"\n                placeholder=\"Enter image URL to be sent here\"\n                :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.noConditionMessage.$error\"\n                :mergeFields=\"mergeFields\"\n                :steps=\"steps\"\n                :step-id=\"stepId\"\n                :readonly=\"readonly\" \n              ></or-text-expression>\n                <!--:error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"-->\n                <!--:invalid=\"v.schema.responsesQuantity.$error\"-->\n                <!--@input=\"v.schema.responsesQuantity.$touch()\"-->\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n          </template>\n          <div slot=\"footer\">\n            <or-button v-if=\"noConditionMedias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Add media</or-button>\n          </div>\n        </or-list> \n        \n        <div v-if=\"!noConditionMedias.length\"\n          class=\"select-media__inline-message\"\n        >\n          Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Files</or-button>\n          or use <or-button @click=\"noConditionMediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>URL</or-button>\n        </div>\n        \n        <p class=\"invalid\" v-show=\"v.schema.noConditionMessage.$error\">Text or media content is required</p>\n      </div>\n    </div>\n  </div>\n</div>",
                          "wildcardTemplates": [],
                          "componentCompiledStyles": "",
                          "componentOriginalStyles": ".no-condition-data-out {\n  width: 100%;\n  min-width: 350px;\n  flex-grow: 1;\n  padding: 6px 10px 0;\n  border-left: 3px solid #7ED321;\n  border-bottom: 1px solid #DFDFDF;\n  background: #F6F6F6;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n\n  &.is-invalid {\n    border-left-color: #f95d5d;\n  }\n  \n  &__indent {\n    margin-left: 24px;\n    max-width: calc(100% - 24px);\n    min-width: 326px;\n  }\n\n  &__header {\n    padding-left: 3px;\n    padding-bottom: 5px;\n    font-size: 15px;\n    font-weight: 600;\n  }\n\n  &__body {\n    padding: 0 10px 10px;\n    // background: #ffffff;\n    border-radius: 3px;\n  }\n\n  &.readonly {\n    .data-block__header {\n      color: rgba(0,0,0,.38);\n    }\n  }\n}\n\n.message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  position: relative;\n  padding-bottom: 10px;\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n  \n  .or-text-expression .or-editable-wrapper {\n    background-color: #fff;\n  }\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -7px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                        },
                        "meta": {
                          "name": "formWildcard",
                          "type": "onereach-studio-form-input",
                          "version": "1.0"
                        },
                        "label": "Wildcard",
                        "component": "formWildcard",
                        "pluginRefs": [
                          "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                          "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                        ]
                      }
                    ],
                    "vforkey": "a843b492-f234-48a7-ac90-f9242a8ac6e6"
                  }
                ],
                "class": "flex-box",
                "inputs": [
                  {
                    "id": "4799a645-1c95-49ef-bb88-90c99e5895b4",
                    "data": {
                      "data": "{\n  \"singleMessage\": {\n    \"message\" : \"``\",\n    \"medias\"  : []\n  }\n}",
                      "toJson": "function isExpression(path, data) {\n  return (/:(message)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n\n  if (_.isArray(data)) \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n\n  if (_.isObject(data))\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n\n  if (isExpression(path, data)) \n    return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "singleMessage : {\n  custom : (value, ctx) => {\n    return value.message.slice(1, -1) || (value.medias.length && _.filter(value.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length)\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.singleMessage\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :readonly=\"readonly\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-pnglcsjrtziyvkbmhxouaqfdew",
                      "componentLogic": "{\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      localMessage: this.value\r\n    }\r\n  },\r\n  \r\n  props : {\r\n    value : {\r\n      type : Object,\r\n      default () {\r\n        return {\r\n          medias: [],\r\n          message: '``'\r\n        };\r\n      }\r\n    },\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    isNew: Boolean,\r\n    steps: Array,\r\n    stepId: String,\r\n    v : {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n  \r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    medias : {\r\n      get () {\r\n        return this.value.medias\r\n      },\r\n      set (value) {\r\n        const model = {\r\n          data:null,\r\n          ext:null,\r\n          id:null,\r\n          location:null,\r\n          name:null,\r\n          note:null,\r\n          type:null,\r\n          linkUrl: null\r\n        };\r\n        const res = _.map(value, item => _.pick(item, _.keys(model)));\r\n        this.$emit('input', res);\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted () {\r\n    // console.log('this', this)\r\n  },\r\n  \r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.localMessage.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.localMessage.medias[0], 'linkUrl')) {\r\n        this.localMessage.medias.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    localMessage: {\r\n      handler(newValue) {\r\n        this.$emit('input', this.localMessage);\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}",
                      "componentTemplate": "<div class=\"message-wrapper\">\n  <or-text-message  \n    v-model=\"localMessage.message\"\n    class=\"message-item\"\n    :readonly=\"readonly\"  \n    label=\"Message\" \n    placeholder=\"Enter text to be sent here\" \n    :max-char-length=\"160\" \n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\"  \n    :merge-fields=\"mergeFields\"\n    :stepId=\"stepId\"\n    :steps=\"steps\"\n    :invalid=\"v.$error\"\n    @input=\"v.$touch()\"\n  ></or-text-message>\n  <div class=\"select-media\">\n    <or-modal ref=\"select-media\" \n      title=\"Select media\" \n      size=\"large\"\n    >\n      <or-asset-manager :assets-url=\"assetsUrl\" \n        :auth-token=\"authToken\"\n        :multi-select=\"true\"\n        :max-files=\"maxFiles\"\n        :allowed-file-types=\"allowedFileTypes\"\n        v-model=\"localMessage.medias\"\n      ></or-asset-manager>\n    </or-modal>\n    \n    <or-list ref=\"mediaList\" \n      v-model=\"localMessage.medias\" \n      class=\"selected-media-list\"\n      :steps=\"steps\" \n      :step-id=\"stepId\" \n      :new-item-method=\"addNewUrl\"\n    >\n      <template slot-scope=\"item\">\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n          {{ item.item.name }}\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n          <or-text-expression\n            label=\"URL\" \n            placeholder=\"Enter image URL to be sent here\"\n            v-model=\"item.item.linkUrl\"\n            :merge-fields=\"mergeFields\"\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.$error\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\" \n          ></or-text-expression>\n            <!--:error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"-->\n            <!--:invalid=\"v.schema.responsesQuantity.$error\"-->\n            <!--@input=\"v.schema.responsesQuantity.$touch()\"-->\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n      </template>\n      <div slot=\"footer\">\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Add media</or-button>\n      </div>\n    </or-list>\n    <div v-if=\"!localMessage.medias.length\"\n      class=\"select-media inline-message\"\n    >\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Files</or-button>\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>URL</or-button>\n    </div>\n    <p class=\"invalid\" v-show=\"v.$error\">Text or media content is required</p>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".messages-list {\n  .add-button {\n    display: none;\n  }\n}\n\n.select-media {\n  \n  &.inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "027c4015-5d97-4e0c-b4c4-856aee543c57",
                    "data": {
                      "data": "{\n  \"randomGroups\": [{\n    \"medias\": [],\n    \"message\": \"``\",\n    \"weight\": \"`1`\",\n    \"weightLabel\": \"Weight\"\n  }]\n}",
                      "toJson": "function isExpression(path, data) {\n  return (/:(message|weight$)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n  \n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "randomGroups : {\n  $each : {\n    message : {\n      custom : (value, ctx) => {\n        return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n      }\n    },\n    medias : {\n      custom : (value, ctx) => {\n        return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n      }\n    },\n    weight : {\n      custom : (value, ctx) => { \n        const isMergeField = (value) => {\n          return /this.*/.test(value) || /await this.*/.test(value);\n        }\n        \n        if (isMergeField(value))\n          return true\n\n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value) && (parseFloat(value.slice(1, -1)) > 0 || parseFloat(value > 0));\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :v=\"$v\"\n  :random-groups.sync=\"schema.randomGroups\"\n  :active-tab-id=\"schema.activeTabId\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :schema=\"schema\"\n  :readonly=\"readonly\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-avcjbkzdruoqgihtfypnsxewlm",
                      "componentLogic": "{\n  data() {\n    return {\n    }\n  },\n  \n  props: {\n    randomGroups: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    activeTabId: String,\n    isNew: Boolean,\n    schema: Object,\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  \n  computed: {\n    randomGroupsLocal : {\n      get () {\n        return this.randomGroups;\n      },\n      set (newValue) {\n        this.$emit('update:randomGroups', newValue);\n        this.$nextTick(() => {\n          if (this.$refs['message-weight-0'])\n            this.updateProbabilityInPercent(newValue);\n        })\n      }\n    }\n  },\n  \n  watch: {\n    activeTabId (newValue) {\n      if (newValue === 'random' && this.randomGroupsLocal.length < 2)\n        this.$refs.randomList.addItem();\n    }\n  },\n  \n  mounted () {\n    if (this.activeTabId === 'random' && this.$refs.randomList && this.randomGroupsLocal.length < 2) {\n      this.$refs.randomList.addItem();\n      \n      if (!this.isNew && this.v) {\n        this.$nextTick(() => {\n          this.v.schema.$touch();\n        })\n      }\n    }\n  },\n  \n  methods: {\n    newMessage () {\n      return {\n        message          : '``',\n        medias           : [],\n        weight           : \"`1`\",\n        weightLabel      : \"Weight\"\n      };\n    },\n    updateProbabilityInPercent(messages) {\n      let isInvalidWeight = false;\n      let weightArr = [];\n      let weightSum = messages.reduce((sum, message, index) => {\n        let weight;\n        if (this.$refs['message-weight-' + index].mode == 'code') {\n          weight = parseFloat(message.weight);\n        } else {\n          weight = parseFloat(message.weight.slice(1, -1));\n        }\n        \n        if (isNaN(weight) || weight <= 0) {\n          isInvalidWeight = true;\n          return false\n        }\n        \n        weightArr.push(weight);\n        return sum + weight\n      }, 0);\n      \n      _.forEach(messages, (message, index) => {\n        if (isNaN(weightSum) || isInvalidWeight) {\n          message.weightLabel = \"Weight\";\n        } else {\n          let calculatedResult = (weightArr[index] / weightSum * 100).toFixed(0);\n          \n          if (calculatedResult == 0) {\n            calculatedResult = 1;\n          } else if (calculatedResult == 100) {\n            calculatedResult = 99;\n          }\n          \n          message.weightLabel = `Weight(${(weightArr[index] / weightSum * 100).toFixed(0)}%)`\n        }\n      })\n    },\n    isMergeFieldWeight (index) {\n      const isMergeField = (value) => {\n        return /this.*/.test(value) || /await this.*/.test(value);\n      }\n      return isMergeField(this.randomGroups[index].weight)\n    }\n  },\n\n  components: {\n    messageItem: {\n      template: `<%= messageItem %>`,\n      props : {\n        value : {\n          type : Object,\n          default () {\n            return {\n              medias: [],\n              message: '``'\n            };\n          }\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        isNew : Boolean,\n        readonly : {\n          type : Boolean,\n          default : false\n        },\n        steps: Array,\n        stepId: String,\n        v : {\n          type: Object,\n          default () {\n            return {};\n          }\n        }\n      },\n      \n      data () {\n        return {\n          iconPosition: 'left',\n          allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\n          maxFiles: 10,\n          localMessage: this.value\n        }\n      },\n      \n      computed : {\n        assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\n        authToken () { return this.$settings.token },\n        medias : {\n          get () {\n            return this.value.medias\n          },\n          set (value) {\n            const model = {\n              data:null,\n              ext:null,\n              id:null,\n              location:null,\n              name:null,\n              note:null,\n              type:null\n            };\n            const res = _.map(value, item => _.pick(item, _.keys(model)));\n            this.$emit('input', res);\n          }\n        }\n      },\n      \n      methods: {\n        openModal (ref) {\n          this.$refs[ref].open();\n        },\n        removeSelectedItem (key) {\n          this.localMessage.medias.splice(key, 1);\n        },\n        addMedia () {\n          if (_.has(this.localMessage.medias[0], 'linkUrl')) {\n            this.localMessage.medias.push(this.addNewUrl());\n          } else {\n            this.openModal('select-media');\n          }\n        },\n        addNewUrl () {\n          return {\n            linkUrl: \"``\"\n          }\n        }\n      },\n      \n      watch: {\n        localMessage: {\n          handler(newValue) {\n            this.$emit('input', newValue);\n          },\n          deep: true\n        }\n      }\n    },\n  }\n}",
                      "componentTemplate": "<div>\r\n  <or-list \r\n    v-model=\"randomGroupsLocal\"\r\n    ref=\"randomList\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n    :readonly=\"readonly\"\r\n    :new-item-method=\"newMessage\"\r\n    :add-button-label=\"'Add new message'\"\r\n    class=\"messages-list messages-list--random\"\r\n    :can-remove-last-item=\"false\"\r\n  >\r\n    <template slot-scope=\"item\">\r\n      <or-text-expression\r\n        v-model=\"item.item.weight\"\r\n        :ref=\"'message-weight-' + item.index\"\r\n        :label=\"item.item.weightLabel\"\r\n        helpText=\"This value is expected as a positive number\"\r\n        class=\"message-weight__input\"\r\n        placeholder=\"Enter value\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        :readonly=\"readonly\"\r\n        :invalid=\"v.schema.randomGroups.$each[item.index].weight.$error\"\r\n        @input=\"v.schema.randomGroups.$each[item.index].weight.$touch()\"\r\n        :error=\"!item.item.weight || item.item.weight === '``' ? 'Weight is required' : 'Only positive number can be used as a value'\"\r\n      ></or-text-expression>\r\n      <or-alert v-if=\"isMergeFieldWeight(item.index) || ($refs['message-weight-' + item.index] && $refs['message-weight-' + item.index].mode === 'code')\"\r\n        type=\"info\" \r\n        :dismissible=false \r\n        style=\"font-size:small;\">\r\n        <span v-if=\"isMergeFieldWeight(item.index)\">Using merge field input will hide calculation of a message probability weight.</span>\r\n        <span v-else>Using code mode will hide calculation of a message probability weight.</span>\r\n      </or-alert>\r\n      \r\n      <message-item v-model=\"item.item\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"item.steps\" \r\n        :step-id=\"item.stepId\"\r\n        :readonly=\"item.readonly\"\r\n        :is-new=\"isNew\"\r\n        :v=\"v.schema.randomGroups.$each[item.index]\"\r\n      ></message-item>\r\n    </template>\r\n  </or-list>\r\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "7cf5536a-94f5-4cea-8929-43a3bab33efb",
                          "mode": "",
                          "title": "Message item",
                          "template": "<div class=\"message-wrapper\">\r\n  <or-text-message v-model=\"localMessage.message\" class=\"message-item\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent here\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.message.$error\"\r\n    @input=\"v.message.$touch()\"\r\n  ></or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\"\r\n    >\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        v-model=\"localMessage.medias\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"localMessage.medias\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\" class=\"selected-media-list__item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.message.$error\"\r\n            :mergeFields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!localMessage.medias.length\"\r\n      class=\"select-media inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>\r\n",
                          "variable": "messageItem"
                        }
                      ],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".select-media {\n  \n  &.inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}\n\n// Message list for tab random\n.messages-list.or-list {\n  &.single-item {\n    .list-item {\n      padding: 0;\n    }\n  }\n  \n  .or-list-items div {\n    .remove-button {\n      display: none;\n    }\n  }\n  \n  .or-list-items div:first-child:nth-last-child(n + 3) ~ div {\n    &>.remove-button {\n      display: block;\n    }\n  }\n}\n\n.messages-list--random {\n  // margin-bottom: 20px;\n  \n  &--single-exit > .or-list-items > .list-item:not(:first-child) {\n    padding-top: 0;\n  }\n  \n  .or-list-items {\n    width: 100%;\n  }\n  \n  &.or-list {\n    \n    & > .or-list-items > .list-item {\n      position: relative;\n      flex-direction: column;\n      align-items: flex-start;\n      padding: 0 40px;\n      \n      .message-weight__input {\n        width: 100%;\n      }\n\n      > .remove-button {\n      \tposition: absolute;\n      \ttop: 145px;\n        right: 0;\n      }\n      \n      > .handle {\n        display: none;\n      }\n      \n      > .drag_handle {\n        position: absolute;\n      \ttop: 150px;\n        left: 0;\n      }\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "3749944d-3efd-43b7-b461-2e91f3a35b89",
                    "data": {
                      "data": "{\n  \"noConditionMessage\": \"``\",\n  \"noConditionMedias\": []\n}",
                      "toJson": "function isExpression(path, data) {\n  return (/:(noConditionMessage|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:noConditionMedias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                      "validators": "noConditionMessage : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.noConditionMedias.length && _.filter(ctx.noConditionMedias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nnoConditionMedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.noConditionMessage.slice(1,-1);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :v=\"$v\" :steps=\"steps\" \n  :is-new=\"isNew\"\n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  :conditionItem=\"schema\"\n  :no-condition-message.sync=\"schema.noConditionMessage\"\n  :no-condition-medias.sync=\"schema.noConditionMedias\"\n  :readonly=\"readonly\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-urjfchklznqxpvbwostgdeimay",
                      "componentLogic": "{\r\n  props : {\r\n    noConditionMessage: String,\r\n    noConditionMedias: Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    conditionItem: Object,\r\n    readonly: {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    noConditionMessageLocal : {\r\n      get () { return this.noConditionMessage },\r\n      set (value) {\r\n        this.$emit('update:noConditionMessage', value);\r\n      }\r\n    },\r\n    noConditionMediasLocal : {\r\n      get () { return this.noConditionMedias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:noConditionMedias', value);\r\n        } else {\r\n          const model = {\r\n            data:null,\r\n            ext:null,\r\n            id:null,\r\n            location:null,\r\n            name:null,\r\n            note:null,\r\n            type:null\r\n          };\r\n          const res = _.map(value, item => _.pick(item, _.keys(model)));\r\n          this.$emit('update:noConditionMedias', res);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.noConditionMedias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.noConditionMedias[0], 'linkUrl')) {\r\n        this.noConditionMediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n    // console.log('this in wc', this)\r\n  }\r\n}",
                      "componentTemplate": "<div\n  :class=\"['no-condition-data-out', { 'no-condition-data-out__indent': conditionItem.conditionGroups && conditionItem.conditionGroups.length > 1 }, { 'is-invalid': v.schema.noConditionMessage.$error || v.schema.noConditionMedias.$error }, { 'readonly': readonly }]\"\n>\n  <div class=\"no-condition-data-out__header\">If no condition is met</div>\n  <div class=\"no-condition-data-out__body\">\n    <div class=\"message-block\">\n      <or-text-message  \n        v-model=\"noConditionMessageLocal\"\n        :merge-fields=\"mergeFields\"\n        :readonly=\"readonly\"  \n        label=\"Message\" \n        placeholder=\"Enter text to be sent\" \n        :max-char-length=\"160\" \n        merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n    &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n        in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n    &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n        not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \n        :stepId=\"stepId\"\n        :steps=\"steps\"\n        :invalid=\"v.schema.noConditionMessage.$error\"\n        @input=\"v.schema.noConditionMessage.$touch()\"\n      >\n      </or-text-message>\n      <div class=\"select-media\">\n        <or-modal ref=\"select-media\" \n          title=\"Select media\" \n          size=\"large\">\n          <or-asset-manager :assets-url=\"assetsUrl\" \n            :auth-token=\"authToken\"\n            :multi-select=\"true\"\n            :max-files=\"maxFiles\"\n            :allowed-file-types=\"allowedFileTypes\"\n            v-model=\"noConditionMediasLocal\"\n          ></or-asset-manager>\n        </or-modal>\n        \n        <or-list ref=\"mediaList\" \n          v-model=\"noConditionMediasLocal\" \n          class=\"selected-media-list\"\n          :steps=\"steps\" \n          :step-id=\"stepId\" \n          :new-item-method=\"addNewUrl\"\n        >\n          <template slot-scope=\"item\">\n            <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n              {{ item.item.name }}\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n            <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n              <or-text-expression\n                label=\"URL\" \n                v-model=\"item.item.linkUrl\"\n                placeholder=\"Enter image URL to be sent here\"\n                :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.noConditionMessage.$error\"\n                :mergeFields=\"mergeFields\"\n                :steps=\"steps\"\n                :step-id=\"stepId\"\n                :readonly=\"readonly\" \n              ></or-text-expression>\n                :error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"\n                :invalid=\"v.schema.responsesQuantity.$error\"\n                @input=\"v.schema.responsesQuantity.$touch()\"\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n          </template>\n          <div slot=\"footer\">\n            <or-button v-if=\"noConditionMedias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Add media</or-button>\n          </div>\n        </or-list> \n        \n        <div v-if=\"!noConditionMedias.length\"\n          class=\"select-media inline-message\"\n        >\n          Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Files</or-button>\n          or use <or-button @click=\"noConditionMediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>URL</or-button>\n        </div>\n        \n        <p class=\"invalid\" v-show=\"v.schema.noConditionMessage.$error\">Text or media content is required</p>\n      </div>\n    </div>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".no-condition-data-out {\n  flex-grow: 1;\n  padding: 6px 10px 0;\n  border-left: 3px solid #7ED321;\n  border-bottom: 1px solid #DFDFDF;\n  background: #F6F6F6;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n\n  &.is-invalid {\n    border-left-color: #f95d5d;\n  }\n  \n  &__indent {\n    margin-left: 24px;\n  }\n\n  &__header {\n    padding-left: 3px;\n    padding-bottom: 5px;\n    font-size: 15px;\n    font-weight: 600;\n  }\n\n  &__body {\n    padding: 0 10px 10px;\n    // background: #ffffff;\n    border-radius: 3px;\n  }\n\n  &.readonly {\n    .data-block__header {\n      color: rgba(0,0,0,.38);\n    }\n  }\n}\n\n.message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  \n  &.inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n  \n  .or-text-expression .or-editable-wrapper {\n    background-color: #fff;\n  }\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -15px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "7c1017c1-799f-4e14-a388-452e5a90a61d",
                    "data": {
                      "inputs": [
                        {
                          "id": "d508868c-b96c-4eda-bc69-a7fd502eccc8",
                          "data": {
                            "data": "{\n  \"medias\": [],\n  \"message\": \"``\",\n  \"weight\": \"`1`\",\n  \"useFiles\": false\n}",
                            "toJson": "function isExpression(path, data) {\n  return (/:(message|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                            "validators": "message : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nmedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n  }\n}",
                            "applyToJson": true,
                            "formTemplate": "<wildcard\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :use-files.sync=\"schema.useFiles\"\n  :v=\"$v\" :steps=\"steps\" \n  :step-id=\"stepId\"\n  :conditionItem=\"schema\"\n  :message.sync=\"schema.message\"\n  :medias.sync=\"schema.medias\"\n  :readonly=\"readonly\"\n></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-sygbkoxqrcmeltwfjhnudiavzp",
                            "componentLogic": "{\r\n  props : {\r\n    message : String,\r\n    medias : Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    useFiles: Boolean,\r\n    conditionItem : Object,\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    messageLocal : {\r\n      get () { return this.message },\r\n      set (value) {\r\n        this.$emit('update:message', value);\r\n      }\r\n    },\r\n    mediasLocal : {\r\n      get () { return this.medias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:medias', value);\r\n        } else {\r\n          const model = this.useFiles\r\n            ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n            : [\r\n                'acl',\r\n                'data',\r\n                'ext',\r\n                'id',\r\n                'location',\r\n                'name',\r\n                'note',\r\n                'type',\r\n                'linkUrl',\r\n              ];\r\n          const res = _.map(value, item => _.pick(item, model));\r\n          this.$emit('update:medias', res);\r\n        }\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.useFiles;\r\n      },\r\n      set (value) {\r\n        this.$emit('update:useFiles', value);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.medias[0], 'linkUrl')) {\r\n        this.mediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n  }\r\n}",
                            "componentTemplate": "<div class=\"message-block\">\r\n  <or-text-message  \r\n    v-model=\"messageLocal\"\r\n    :merge-fields=\"mergeFields\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n&lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n&lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.schema.message.$error\"\r\n    @input=\"v.schema.message.$touch()\"\r\n  >\r\n  </or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\">\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :files-api-url=\"$flow.filesApiUrl\"\r\n        v-model=\"mediasLocal\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"mediasLocal\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.message.$error\"\r\n            :merge-fields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!medias.length\"\r\n      class=\"select-media__inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"mediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.schema.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>",
                            "wildcardTemplates": [],
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ".message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  position: relative;\n  padding-bottom: 10px;\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n    \n    .or-text-expression .or-editable-wrapper {\n      background-color: #ffffff;\n    }\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -7px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                          ]
                        }
                      ],
                      "isSingleExit": true,
                      "addButtonText": "Add condition",
                      "isSingleGroup": false,
                      "conditionExits": [],
                      "conditionTitle": "New condition",
                      "conditionGroups": [
                        {
                          "label": "`New condition 1`",
                          "rules": [
                            {
                              "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                              "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                              "codeValue": "``",
                              "valueType": "string",
                              "firstValue": "``",
                              "secondValue": "``",
                              "isDisabledSecondValue": false
                            }
                          ],
                          "medias": [],
                          "weight": "`1`",
                          "dataOut": "``",
                          "message": "``",
                          "useFiles": false,
                          "trueValue": "any",
                          "description": "``",
                          "isNotCollapsed": true,
                          "isEditableHeader": false
                        }
                      ],
                      "renderCondition": "",
                      "usePredefinedValue": false,
                      "isNegativeLeftMargin": false,
                      "hasNoConditionDataOut": false,
                      "predefinedVariableName": "schema.inputData",
                      "conditionRuleHasDataOut": false,
                      "noConditionDataOutValue": "``"
                    },
                    "meta": {
                      "name": "condition-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "0.9.0"
                    },
                    "label": "Conditon builder v0.9.0",
                    "component": [
                      "condition-builder-component",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                    ]
                  }
                ],
                "fullWidth": true,
                "activeTabId": "single",
                "renderCondition": ""
              },
              "compiled": {},
              "component": [
                "or-tabs-component",
                "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/or-tabs/index.js"
              ]
            },
            {
              "id": "771921b9-6772-43e1-8362-ad3e2c2d87be",
              "data": {
                "open": true,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "0094f842-56ed-42a1-a1c0-45ef1c037400",
                    "data": {
                      "data": "{\"continueConversation\": true}",
                      "toJson": "//function that describe how to serialize wildcard data\n function toJson(data) {\n if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard :continue-conversation.sync=\"schema.continueConversation\" :step-id=\"stepId\" :steps=\"steps\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bctulnwkazemfoxvgdjhyqpisr",
                      "componentLogic": "{\n  props: {\n    continueConversation: {\n      type : Boolean,\n      default : true\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    stepId : {\n      type: String,\n      default: ''\n    },\n    steps : {\n      type: Array,\n      default: []\n    }\n  },\n  mounted() {\n    this.toggleConversation();\n  },\n  computed: {\n    localContinueConversation: {\n      get() {\n        return this.continueConversation;\n      },\n      set(value) {\n        if (this.continueConversation !== value) {\n          this.$emit('update:continueConversation', value);\n          this.$nextTick(() => this.toggleConversation());\n        }\n      }\n    }\n  },\n  methods: {\n    toggleConversation() {\n      const step = _.find(this.steps, {id : this.stepId});\n      if (!_.isObject(_.get(step, 'data.dataOut'))) {\n        return;\n      }\n\n      if (this.continueConversation && _.get(step, 'data.dataOut.meta.conversationStarter')) {\n        _.unset(step, 'data.dataOut.meta');\n      } else if (!this.continueConversation && !_.get(step, 'data.dataOut.meta.conversationStarter')) {\n        _.set(step, 'data.dataOut.meta', {\n          conversationType: 'sms',\n          conversationStarter: true\n        });\n      }\n    }\n  }\n}",
                      "componentTemplate": "<or-switch\n  v-model=\"localContinueConversation\"\n\n  :disabled=\"readonly\"\n  label=\"Continue conversation\"\n></or-switch>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5be3579b-72fd-42a3-b87f-eb5c1667b948",
                    "data": {
                      "data": "{\n  \"conversationMeta\": \"\"\n}",
                      "toJson": "return {conversationMeta : JSON.stringify(data.conversationMeta)};",
                      "validators": "conversationMeta: {\n  custom (value, schema) {\n    if (!this.schema.continueConversation)\n      return true\n\n    const flowMergeTags =  _.chain(mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const sharedMergeTags =  _.chain(mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const globalMergeTags =  _.chain(mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const options = _.chain([])\n      .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n      .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'sms')\n      .map('name')\n      .uniq()\n      .value();\n\n    return _.includes(options, value);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :continue-conversation=\"schema.continueConversation\"\n  :merge-fields=\"mergeFields\"\n  :conversation-meta.sync=\"schema.conversationMeta\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :v=\"$v\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bdtswmylvzerfcjiknxuhgqpoa",
                      "componentLogic": "{\n  props : {\n    continueConversation : {\n      type : Boolean,\n      default : true\n    },\n    mergeFields : {\n        type    : Array,\n        default () {\n            return [];\n        }\n    },\n    conversationMeta : {\n      type : String,\n      default : ''\n    },\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            conversationMeta: {}\n          }\n        };\n      }\n    }\n  },\n\n  data() {\n    return {\n      options : this.fillOptions(),\n      conversationRequiredMessage: 'Conversation is required.'\n    }\n  },\n\n  computed: {\n    selectedStepId () {\n        return this._findStepIdByDataOut(this.conversationMeta);\n    },\n\n    selectedConversation : {\n      get () {\n        return {name : this.conversationMeta};\n      },\n      set (value) {\n        this.$emit('update:conversationMeta', value.name);\n      }\n    }\n  },\n\n  methods : {\n    _getDataOutName (dataOut) {\n      return _.get(dataOut, 'name', dataOut);\n    },\n\n    _findStepIdByDataOut (mergeFieldMeta) {\n      return _.chain(this.steps)\n      .find(step => this._getDataOutName(_.get(step, 'data.dataOut')) === this._getDataOutName(mergeFieldMeta))\n      .get('id')\n      .value();\n    },\n\n    highlightConversationOn(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOff(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOffOnMouseout(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId && stepId !== this.selectedStepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    zoomInOnStep () {\n      if (this.selectedStepId) {\n        this.$flow.zoomInOnStep(this.selectedStepId);\n      }\n    },\n\n    fillOptions () {\n      const flowMergeTags = _.chain(this.mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n        name  : _.get(tag, 'name'),\n        meta  : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const sharedMergeTags = _.chain(this.mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n        name  : _.get(tag, 'name'),\n        meta  : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const globalMergeTags = _.chain(this.mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n        name  : _.get(tag, 'name'),\n        meta  : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      // options value has to be an object ({name : tag.name}), otherwise - weird behaviour\n      const options = _.chain([])\n        .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n        .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'sms')\n        .uniqBy('name')\n        .sortBy('name')\n        .map(tag => ({value : {name : tag.name}, label : tag.name}))\n        .value();\n\n      return options;\n    }\n  },\n\n  created () {\n    if (_.isEmpty(this.conversationMeta) && this.options && this.options.length === 1) {\n      console.log('this.selectedConversation =');\n      this.selectedConversation = _.get(this.options, '0.value');\n    }\n    this.$nextTick(() => {\n      this.highlightConversationOn(this.conversationMeta);\n    });\n  },\n\n  beforeDestroy () {\n    this.highlightConversationOff(this.conversationMeta);\n  }\n}",
                      "componentTemplate": "<div class=\"select-conversation\" v-if=\"continueConversation\">\n  <div class=\"select-conversation-header\">\n    <h4>Conversation</h4>\n  </div>\n  <div class=\"select-conversation-wr\">\n    <or-select has-search\n      class=\"select-conversation\"\n      placeholder=\"Select a conversation\"\n      search-placeholder=\"Type to search\"\n      :options=\"options\"\n      v-model=\"selectedConversation\"\n      :invalid=\"v.schema.conversationMeta.$error\"\n      :error=\"conversationRequiredMessage\"\n      :disabled=\"readonly\">\n      <template slot-scope=\"props\" slot=\"option\">\n        <div\n          class=\"ui-select-option__basic\"\n          @mouseenter=\"highlightConversationOn(props.option.value)\"\n          @mouseout=\"highlightConversationOffOnMouseout(props.option.value)\"\n          @click=\"highlightConversationOn(props.option.value)\">\n          {{props.option.label}}\n        </div>\n      </template>\n    </or-select>\n    <or-icon-button\n      class=\"zoom-in-button\"\n      icon=\"zoom_in\"\n      type=\"secondary\"\n      color=\"primary\"\n      @click=\"zoomInOnStep\"\n      tooltip=\"Show Conversation Step\"\n      tooltip-position=\"top right\"\n      :disabled=\"!selectedStepId\">\n    </or-icon-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".select-conversation {\n  .select-conversation-header {\n    position: relative;\n    height: 36px;\n    display: flex;\n    h4 {\n      margin-top: 0.2rem;\n      flex-grow: 1;\n    }\n  }\n\n  .select-conversation-wr {\n    position: relative;\n  }\n\n  .select-conversation {\n    width: calc(100% - 40px);\n  }\n\n  .zoom-in-button {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 1;\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "52208b63-bef5-4c1b-8014-79d6af0392d0",
                    "data": {
                      "data": "{\n  \"botNumber\": \"``\",\n  \"endUserNumber\": \"``\",\n  \"options\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data\nfunction isExpression(path, data) {\n  return (/:(botNumber|endUserNumber)/g).test(path);\n}\n\nfunction toJson(data, key = '', parentPath = '') {\n  const path = `${parentPath}:${key}`;\n\n  if (_.isArray(data)) {\n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  botNumber: {\n    custom: (value, schema) => {\n      return schema.continueConversation || Boolean(value.slice(1, -1));\n    }\n  },\n\n  endUserNumber: {\n    custom: (value, schema) => {\n      return schema.continueConversation || Boolean(value.slice(1, -1));\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-epkxscyrbdmtjogu :continue-conversation=\"schema.continueConversation\" :merge-fields=\"mergeFields\" :v=\"$v\" :options.sync=\"schema.options\" :end-user-number.sync=\"schema.endUserNumber\"    :bot-number.sync=\"schema.botNumber\"     :step-id=\"stepId\"       :steps=\"steps\"       :readonly=\"readonly\"></or-wildcard-epkxscyrbdmtjogu>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-epkxscyrbdmtjogu",
                      "componentLogic": "{\n  computed: {\n    botNumbers: {\n      get() {\n        return _.cloneDeep(this.options);\n      },\n      set(val) {\n        this.$emit('update:options', val);\n      }\n    },\n    localNumbers: {\n      get() {\n        return {\n          botData: this.botNumber,\n          userData: this.endUserNumber\n        }\n      },\n      set(val) {\n        this.$emit('update:botNumber', val.botData);\n        this.$emit('update:endUserNumber', val.userData);\n      }\n    }\n  },\n  mounted () {\n    if (!this.continueConversation) this.getNumbers();\n  },\n  beforeDestroy() {\n    this.botNumbers = [];\n  },\n  methods: {\n    notIncludes (arr, value) {\n      const filteredArr = _.filter(arr, item => _.includes(item, value));\n\n      return _.isEmpty(filteredArr)\n    },\n    async getNumbers () {\n      const response = await this.$http.post(this.$flow.gatewayUrl('provider-numbers-list', this.$flow.providersAccountId()), {accountId : this.$flow.accountId, getSmsNumbers : true});\n      const responseJson = await response.json();\n      console.log(responseJson);\n      const providerNumbers = _.chain(responseJson)\n        .map(number => ({\n          fromProvider : true,\n          id           : number.id,\n          label        : !number.isGroup ? number.phoneNumber + ' (' + number.name + ')' : number.name,\n          value        : '`' + number.phoneNumber + '`'\n        }))\n        .sortBy('label')\n        .value();\n\n      this.botNumbers = _.concat(_.filter(this.botNumbers, num => !num.fromProvider), providerNumbers);\n    }\n  },\n  props: {\n    continueConversation : {\n      type : Boolean,\n      default : true\n    },\n    botNumber: {\n      type: String,\n      default() {\n        return '``'\n      }\n    },\n    endUserNumber: {\n      type: String,\n      default() {\n        return '``'\n      }\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    options: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default() {\n        return false;\n      }\n    },\n    stepId: {\n      type: String,\n      default() {\n        return ''\n      }\n    },\n    steps: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    v: {\n      type: Object,\n      default() {\n        return {}\n      }\n    }\n  },\n  watch: {\n    continueConversation () {\n      if (!this.continueConversation) this.getNumbers();\n    }\n  }\n}\n",
                      "componentTemplate": "<or-select-phone-numbers\n  v-if=\"!continueConversation\"\n  :merge-fields=\"mergeFields\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :options.sync=\"botNumbers\"\n  v-model=\"localNumbers\"\n  :multiple=\"false\"\n  :autofillInputs=\"false\"\n  select-error=\"The bot phone number field is required.\"\n  :select-invalid=\"v.schema.botNumber.$error\"\n  :select-label=\"'Bot phone number'\"\n  select-placeholder=\"Select the bot number from the list\"\n  text-expression-error=\"The end user phone number field is required.\"\n  :text-expression-invalid=\"v.schema.endUserNumber.$error\"\n  :text-expression-label=\"'End user phone number'\"\n  text-expression-placeholder=\"Define recipient number\"\n  :readonly=\"readonly\"\n  ref=\"selectPhoneNumbers\"\n></or-select-phone-numbers>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": "\n\n.ui-select {\n    margin-bottom: 15px;\n\n  .or-text-expression {\n    margin-bottom: 0px;\n  }\n}\n\n"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "952c21ad-e5c1-4d8f-a37a-cafa7254ec6b",
                    "data": {
                      "data": "{\n  \"checkStatus\" : false,\n  \"timeout\"     : \"`24h`\"\n}",
                      "toJson": "return {\n  checkStatus : JSON.stringify(data.checkStatus),\n  timeout     : data.timeout\n}",
                      "validators": "timeout : {\n  required: validators.required,\n  custom(value) {\n    const regexMergefield = /\\${this\\.get\\(\\'(.{1,})\\'\\)}$/;\n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    let parsedTimeout;\n\n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return (parsedTimeout >= 1000 && parsedTimeout <= 172800000) || regexMergefield.test(timeout);\n    } catch(e) {\n      return false;\n    }\n  },\n  isValid(value) {\n    const regexMergefield = /\\${this\\.get\\(\\'(.{1,})\\'\\)}$/;\n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    let parsedTimeout;\n\n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return true\n    } catch(e) {\n      return false;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n :merge-fields=\"mergeFields\" \n :check-status.sync=\"schema.checkStatus\" \n :timeout.sync=\"schema.timeout\" \n :step-id=\"stepId\" \n :steps=\"steps\" \n :readonly=\"readonly\" \n :v=\"$v\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xlbtvpfumyoskgjhqrceaiwdzn",
                      "componentLogic": "{\n  props: {\n    checkStatus: {\n      type : Boolean,\n      default : false\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    stepId : {\n      type: String,\n      default: ''\n    },\n    steps : {\n      type: Array,\n      default: []\n    },\n    timeout: {\n      type: String,\n      default: '``'\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            timeout : {}\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    errors() {\n      const timeout = this.v.schema.timeout;\n\n      if (!timeout.isValid) {\n        return 'Please enter a valid timeout (Example: 5s, 5m, 5h)';\n      } else if (!timeout.custom) {\n        return 'Min 1s, max 48h (Example: 5s, 5m, 5h)'\n      }\n    },\n    localCheckStatus: {\n      get() {\n        return this.checkStatus;\n      },\n      set(value) {\n        this.$emit('update:checkStatus', value);\n      }\n    },\n    timeoutLocal: {\n      get() {\n        if (!this.localCheckStatus) this.$emit('update:timeout', '`24h`')\n\n        return this.timeout;\n      },\n      set(value) {\n        this.$emit('update:timeout', value);\n      }\n    }\n  },\n  data() {\n    return {\n      localExits: _.clone(this.exits) || [],\n      localId: 'undelivered' || uuid.v4()\n    }\n  }\n}",
                      "componentTemplate": "<div class=\"check-status\">\n  <or-switch\n    v-model=\"localCheckStatus\"\n\n    :disabled=\"readonly\"\n    label=\"Wait for delivery confirmation\"\n  ></or-switch>\n\n  <div class=\"check-status__timeout\">\n    <or-text-expression\n      v-model=\"timeoutLocal\"\n      v-show=\"localCheckStatus\"\n\n      :error=\"errors\"\n      :invalid=\"v.schema.timeout.$invalid\"\n      :merge-fields=\"mergeFields\"\n      :readonly=\"readonly\"\n      :step-id=\"stepId\"\n      :steps=\"steps\"\n      help-text=\"Min 1s, max 48h (Example: 5s, 5m, 5h)\"\n      label=\"Waiting timeout\"\n      name=\"Timeout\"\n      placeholder=\"24h\"\n    ></or-text-expression>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "26e2507c-947b-4565-b847-c803d8aba776",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "The output data of the step will be stored under this name and can be reused further in the flow",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "sentMessageDetails",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "renderCondition": "",
                "disabledCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"botNumber\": \"+17205555555\",\n  \"endUserNumber\": \"+17205555551\",\n  \"transcriptId\": \"\",\n  \"lastTranscriptId\": \"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "medias": [],
                "dataOut": "sentMessageDetails",
                "message": "``",
                "botNumber": "``",
                "endUserNumber": "``"
              },
              "rawMode": false,
              "version": "50c1bd77-bf71-426e-af69-0c8de0b899ab",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "d064065f-8c57-4d70-ac03-5e3083e1acd3",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "compiled": {
                      "exits": [
                        {
                          "id": "next",
                          "label": "next"
                        }
                      ]
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.timeout = \"`24h`\";\nstep.data.checkStatus = false",
            "version": "1.2.9"
          },
          {
            "sample": null,
            "script": "step.data.options = [];",
            "version": "1.2.10"
          },
          {
            "sample": null,
            "script": "step.data.continueConversation = false;\n\nstep.dataOutLabelConnected = false;\nstep.data['dataOut'] = {\n  name: step.data['dataOut'],\n  type: 'session',\n  ttl: 86400000,\n  meta: {}\n};",
            "version": "1.2.11"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useFiles'])) step.data['useFiles'] = false;\n",
            "version": "1.3.2"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate);\n",
            "version": "1.4.1"
          },
          {
            "sample": null,
            "script": "if (!step.data.continueConversation) {\n  delete step.outputExample._conversationStarter;\n  delete step.outputExample._conversationType;\n\n  step.data.dataOut.meta = {\n    conversationStarter : true,\n    conversationType    : 'sms'\n  };\n}",
            "version": "1.4.3"
          },
          {
            "sample": null,
            "script": "step.data['conversationMeta'] = _.get(step.data['conversationMeta'], 'name', '');\n",
            "version": "1.5.0"
          },
          {
            "sample": null,
            "script": "if (step.data.checkStatus) {\n  step.data.processError = true;\n  const undeliveredExitIndex = _.findIndex(step.data.exits, {id : 'undelivered'});\n  const undeliveredExitStepId = _.get(step.data.exits, [undeliveredExitIndex, 'stepId']);\n  const errorLegId =  _.findIndex(step.data.exits, {id : '__error__'});\n  \n  if (errorLegId < 0) {\n    step.data.exits.splice(undeliveredExitIndex, 1, {\n      condition : 'processError',\n      id        : '__error__',\n      label     : 'error',\n      stepId    : undeliveredExitStepId\n    });\n  } else {\n    _.set(step.data.exits, [errorLegId, 'stepId'], undeliveredExitStepId);\n  }\n}",
            "version": "1.6.0"
          },
          {
            "sample": null,
            "script": "step.data['activeTabId'] = \"single\";\nstep.data['singleMessage'] = {\"message\":step.data.message,\"medias\":step.data.medias,\"useFiles\":step.data.useFiles};\nstep.data['randomGroups'] = [{\"medias\":[],\"message\":\"``\",\"weight\":\"`1`\",\"weightLabel\":\"Weight\"}];\nstep.data['isSingleExit'] = true;\nstep.data['conditionRuleHasDataOut'] = false;\nstep.data['hasNoConditionDataOut'] = false;\nstep.data['conditionGroups'] = [{\"dataOut\":\"``\",\"description\":\"``\",\"isEditableHeader\":false,\"isNotCollapsed\":true,\"label\":\"`New condition 1`\",\"rules\":[{\"codeValue\":\"``\",\"firstValue\":\"``\",\"isDisabledSecondValue\":false,\"ruleType\":\"function (firstValue, secondValue) {\\nreturn _.includes(firstValue, secondValue);\\n}\",\"secondValue\":\"``\",\"valueType\":\"string\",\"vforkey\":\"f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18\"}],\"trueValue\":\"any\",\"medias\":[],\"message\":\"``\",\"weight\":\"`1`\",\"useFiles\":false}];\nstep.data['noConditionMessage'] = \"``\";\nstep.data['noConditionMedias'] = [];\n\ndelete step.data.message;\ndelete step.data.medias;\ndelete step.data.useFiles;",
            "version": "1.7.0"
          },
          {
            "sample": null,
            "script": "",
            "version": "1.7.5"
          }
        ],
        "dateModified": 1610962978487
      },
      {
        "id": "05686b75-9048-4162-808e-e1153fe76b79",
        "version": "3.2.10",
        "cacheVersion": "91408dc5-a4ff-4347-8eaf-400bbf1e5bbf",
        "originalSource": "9adf3a1c-3ecf-4090-b57e-08dbf76969a8",
        "label": "Trigger Another Flow and Wait for Result",
        "icon": "flow",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-right",
        "description": "Starts another flow and waits for its result before proceeding with the current flow's execution.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Trigger"
        ],
        "recommended": [],
        "tags": [],
        "template": "const short = require('short-uuid');\nconst translator = short();\nconst ts = require('timestring');\nconst TimeoutError = require('@onereach/flow-sdk/errors/timeout');\n\nflowId = isUseCustomSubflow ? customSubFlowName.toLowerCase() : flowIdToTrigger;\nlet timeout = isAsync ? timeoutAsync : timeoutSync;\ntimeout = ts(timeout.input, timeout.outputMode);\n\nif ((isAsync && (timeout < 60 * 1000 || timeout > 72 * 60 * 60 * 1000)) || (!isAsync && (timeout < 1000 || timeout > 24 * 60 * 60 * 1000))) {\n  throw new Error(`Invalid timeout: ${timeout}`);\n}\n\nif (isUseCustomSubflow && paramsProcessType === 'manually') {\n  flowParameters = customFlowParameters\n}\n\nconst params = {\n  flowId,\n  isSync: !isAsync\n};\n\n// check assigment\n\n_.assign(params, flowParameters);\n\nconst target = isUseCustomSubflow ? customTriggerTargetAccountId.toLowerCase() : targetAccountId\n\nconst event = {\n  name: `try/${flowId}`,\n  params,\n  ...(target && { target })\n};\n\nif (isAsync) {\n  let eventId = thisStep.get(this, ['eventId'], false);\n  \n  // eventId will be truthy if this execution is for result/error/timeout\n  if (!eventId) {\n    eventId = translator.new();\n    thisStep.set(this, ['eventId'], eventId);\n  }\n\n  return this.triggers\n    .once(`result/${eventId}`, (event) => {\n      // const exitName = event.params.selectedExit || 'result';\n      const exitName = event.params.selectedExit;\n      if (exitName == 'error') throw new Error(JSON.stringify(event.params.error));\n      return this.exitStep(exitName, event.params.data);\n    })\n    .timeout(timeout, () => {\n      if (processTimeout) {\n        throw new TimeoutError('timeout');\n      }\n      throw new Error('Timeout appear');\n    })\n    .otherwise(async () => {\n      await this.triggers.flush()\n      event.params.eventId = eventId;\n      const result = await this.emitAsync(event);\n      \n      if (_.isNil(result)) {\n        const errorText = 'Unable to find the flow you\\'ve tried to trigger. Re-check your subflow name.';\n        await this.setDataOut({\n          errorText,\n          event\n        });\n        throw new Error(errorText);\n      }\n\n      return this.exitFlow();\n    })\n} else {\n  return this.emitSync(event, null, timeout)\n    .then(result => {\n      const responseResult = _.get(result, 'result', {});\n      // this.log.warn('SYNC RUN RESULT', responseResult)\n\n      if (_.isEmpty(responseResult) || responseResult.error) {\n        throw new Error(JSON.stringify(_.get(responseResult, 'error', 'Unknow error')));\n      } else if (responseResult === 'Invalid timeout') {\n        throw new Error('Invalid timeout in subflow');\n      }\n\n      // const exitName = responseResult.selectedExit || 'result';\n      const exitName = responseResult.selectedExit;\n      return this.exitStep(exitName, responseResult.data);\n    }).catch(error => {\n      if (processTimeout && error.message.indexOf('timeout') >= 0) {\n        throw new TimeoutError('timeout');\n      }\n      throw new Error(error.message);\n    });\n}",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "__timeout__",
              "label": "timeout",
              "condition": "processTimeout"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "flowId": "",
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "isAsync": true,
          "resultExits": [],
          "timeoutSync": {
            "input": "`30 sec`",
            "outputMode": "ms"
          },
          "processError": true,
          "timeoutAsync": {
            "input": "`1 h`",
            "outputMode": "ms"
          },
          "flowParameters": [],
          "processTimeout": true,
          "flowIdToTrigger": "",
          "targetAccountId": "",
          "timeoutDuration": "`30 sec`",
          "customResultExits": [
            {
              "name": "result",
              "vforkey": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17"
            }
          ],
          "customSubFlowName": "``",
          "paramsProcessType": "manually",
          "isUseCustomSubflow": false,
          "flowToGetParamsFrom": "",
          "customFlowParameters": [],
          "cachedFlowListOptions": [],
          "dynamicExitsArrayStart": 0,
          "customTriggerTargetAccountId": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Starts another flow and waits for its result before proceeding with the current flow's execution.\n\n**How can I use this Step?**\n\nYou can use this step to start another flow (Subflow) and wait for its result before proceeding with current flow's (Main Flow) execution. Step works together with *Wait for Trigger from Another Flow*, *Return Result to Another Flow* and *Return Error to Another Flow* steps. \n\nTo execute this step properly, please follow these instructions:\n1. Build and activate a Subflow using the *Wait for Trigger from Another Flow* step and either one or both *Return Result to Another Flow* and *Return Error to Another Flow* steps.\n2. Build a separate, Main Flow, using a *Trigger Another Flow and Wait for Result* step. Connect both the Main Flow and the Subflow by choosing the **flow to trigger** from the dropdown or using a **custom trigger name**.\n3. Activate the Main Flow. When the connected *Trigger Another Flow and Wait for Result* step is reached in the Main Flow, the Subflow is triggered.  The Main Flow will proceed down one of its exits depending on the result of the Subflow execution:\n    - If the result of the Subflow's execution is received from the *Return Result to Another Flow* step, the Main Flow will proceed down the exit selected in that step.\n    - If the result of Subflow's execution is received from the *Return Error to Another Flow* step, the Main Flow proceeds down the **error** exit.\n\n## <a name=\"content\"></a>Help content:\n\n- [Flow to trigger](#flow-to-trigger)\n- [Parameters and exits](#parameters-exits)\n- [Advanced settings](#advanced-settings)\n- [Cross account settings](#cross-account-settings)\n- [Merge field settings](#merge-field-settings)\n- [Reporting](#reporting)\n- [Services dependencies](#services-dependencies)\n- [Release notes](#release-notes)\n\n## <a name=\"flow-to-trigger\"></a>Flow to trigger\n\nIn this section you define the Subflow that will be triggered. There are three options available:\n\n- Create a [new Subflow](#new-subflow);\n- Select an [existing Subflow](#existing-subflows) from the list;\n- Provide a [custom trigger name](#custom-trigger-name) identical to the one used in a Subflow.\n\n### <a name=\"new-subflow\"></a>Create a new subflow\n\nTo create a new Subflow, follow these steps:\n1. Click **+** above the **Flow to trigger** dropdown. The **New subflow settings** modal window will pop up.\n2. Select the **Bot** from the list of existing bots within your OneReach.ai account that will host the new Subflow.\n3. Provide a **Flow name** for the new Subflow.\n4. Optionally, provide **additional settings**. This section matches the settings of a *Wait for Trigger from Another Flow* step template, such as options to set a **custom trigger name** or to add **parameters** and **exits** expected from the triggering flow. The description of its limits can be found in the help text of the *Wait for Trigger from Another Flow* step. \n5. Click **Create flow**. After the Subflow is created, options to immediately activate and select it as the **flow to trigger**, or to open the Subflow in a new tab are provided. The created Subflow includes the *Wait for Trigger from Another Flow*, *Return Result to Another Flow* and *Return Error to Another Flow* step templates.\n\n### <a name=\"existing-subflows\"></a>Existing subflows\n\nTo trigger an existing Subflow, select one from the **flow to trigger** dropdown. It lists the name of the bot and each activated Subflow within that bot that contains a *Wait for Trigger from Another Flow*, as well as the Subflows shared with your account by other OneReach.ai accounts.\n\n### <a name=\"custom-trigger-name\"></a>Custom trigger name\n\nTo trigger a Subflow using a **custom trigger name**, turn on the respective toggle, then specify the name manually or choose it from the list of **existing custom triggers**. The **custom trigger name** value is case insensitive.\n\n> **Note:** The **use custom trigger name** toggle must also be turned on in the *Wait for Trigger from Another Flow* step of the Subflow, and the provided **custom trigger names** must be identical in both flows.\n\nTo trigger a custom Subflow in another OneReach.ai account, provide its **Account ID** in the **[Cross account settings](#cross-account-settings)** section.\n\n[Back to content](#content)\n\n## <a name=\"parameters-exits\"></a>Parameters and exits\n\nEach Subflow may have one or several predefined **parameters**, the values of which can be passed on from the Main Flow, as well as **exits**, down which the Main Flow could proceed. These parameters and exits are listed in this section after a **flow to trigger** is selected.\n\nIf the **custom trigger name** option is used, additional parameters and exits can be either specified manually or inherited from an existing subflow. Each parameter name and value are interpreted as a JSON object key and value, respectively.\n\n> **Note:** If parameters and exits are defined manually, the **parameter name** and **exit name** values must exactly match the respective values defined in the *Wait for Trigger from Another Flow* step with the selected **custom trigger name**.\n\n[Back to content](#content)\n\n## <a name=\"advanced-settings\"></a>Advanced settings\n\n**Shut down the flow while waiting** option stops the Main Flow execution until the results from the Subflow are received. The option is on by default with **timeout** set at 1h, its limits are between 1m to 72h. Examples of acceptable time formats: `26h 33m` or `126min`.\n\nIf you need your Main Flow to stay awake while waiting for the result, turn the option off. In this case the **timeout** value can be between 1s and 5m but should not be longer than the flow's **execution time timeout** defined in the **General** tab under the **Deployment settings**.\n\n[Back to content](#content)\n\n## <a name=\"cross-account-settings\"></a>Cross account settings\n\nTo access a Subflow with a custom trigger name owned by another OneReach.ai account do the following:\n\n1. Make sure that the Sublow owned by another OneReach.ai account is shared with your account. This can be done in that account, in the **Subflow sharing settings** of the *Wait for Trigger from Another Flow* step of the Subflow.\n2. Provide the exact same **custom trigger name** in the Main Flow and the Subflow.\n3. Provide the **Account ID** of the owner of the Subflow.\n\n> **Note:** If the **custom trigger name** value is selected from the list of existing custom triggers, the Step adds the **Account ID** value automatically.\n\n[Back to content](#content)\n\n## <a name=\"merge-field-settings\"></a>Merge field settings\n\nThe output data of the step will be stored under the name provided in the **merge field name**. It contains the data defined in the respective *Return Result to Another Flow* or *Return Error to Another Flow* step of the Subflow.\n\n[Back to content](#content)\n\n## <a name=\"error-handling\"></a>Error handling\n\n**Handle error** is on by default and adds an **error** exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. the Subflow wasn't found).\n\n**Handle timeout separately from error**, if on, adds a **timeout** exit to the step; the flow will proceed down this exit if the result of subflow's execution is not received in set period of time.\n\n[Back to content](#content)\n\n## <a name=\"reporting\"></a>Reporting\n\n**Step** event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n[Back to content](#content)\n\n##  <a name=\"services-dependencies\"></a>Services dependencies\n\n-   flow builder v2.25.3\n-   event-manager v2.0.1\n-   deployer 2.7.1\n-   library content 2.25.6\n\n[Back to content](#content)\n\n## <a name=\"release-notes\"></a>Release notes\n\n\n**v3.2.10**\n\n- Add option to allow subflow sharing with another account\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.2.10\n-   Trigger Another Flow and Wait for Result v3.2.10\n-   Wait for Trigger from Another Flow v3.2.10\n-   Fetch Result from Another Flow v3.2.10\n-   Return Result to Another Flow v3.2.10\n-   Return Error to Another Flow v3.2.10\n\n**v3.0.0**\n\n-   Custom subflow name option was renamed to _custom trigger name_ and moved to a separate toggle\n-   Option to add multiple custom exits in the main flow when _custom trigger name_ is implemented.\n-   All subflows are available throughout the account.\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.0.0\n-   Trigger Another Flow and Wait for Result v3.0.0\n-   Wait for Trigger from Another Flow v3.0.0\n-   Fetch Result from Another Flow v3.0.0\n-   Return Result to Another Flow v3.0.0\n-   Return Error to Another Flow v3.0.0\n\n**v2.0.0**\n\n-   Custom trigger name works with merge field\n-   UI validation\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v2.0.0\n-   Trigger Another Flow and Wait for Result v2.0.0\n-   Wait for Trigger from Another Flow v2.0.0\n-   Fetch Result from Another Flow v2.0.0\n-   Return Result to Another Flow v2.0.0\n-   Return Error to Another Flow v2.0.0\n\n[Back to content](#content)",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        stepId : String,\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [
            {
              "id": "6cf2af04-f52e-43be-b38f-9fd92e185158",
              "data": {
                "index": 0
              },
              "component": "exitDynamic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "2273c814-c40d-4c17-9ca3-6091916fd2c8",
              "data": {
                "stepName": "TAFAWFR"
              },
              "meta": {
                "name": "ui-triggers-steps-component",
                "type": "onereach-studio-form-input"
              },
              "label": "Trigger step UI",
              "compiled": {},
              "component": [
                "ui-triggers-steps-component",
                "https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.1.0/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.1.0/index.js\"][\"ui-triggers-steps-component\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.1.0/index.js\"][\"ui-triggers-steps-component\"]"
              ]
            },
            {
              "id": "9fada076-3d49-46ae-8636-743a98246168",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "1eb6ca32-af7e-4edb-8fbf-9d650307dddc",
                    "data": {
                      "label": "Shut down the flow while waiting",
                      "helpText": "",
                      "variable": "isAsync",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch"
                  },
                  {
                    "id": "e647b006-cb87-49fe-b2ab-b0190e4ac9c1",
                    "data": {
                      "label": "Timeout",
                      "helpText": "Min 1 sec, max 5 min.",
                      "variable": "timeoutSync",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`30 sec`",
                      "errorMessage": "Must be a valid duration using timestring ('30 seconds', '1d 12h', etc.) format.",
                      "variableName": "timeout",
                      "maxTimeoutValue": "`5 min`",
                      "minTimeoutValue": "`1 sec`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0c4ce580-97f8-4d63-b9d7-b72e1ad8250b",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": true,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Must be a valid duration using timestring ('30 seconds', '1d 12h', etc.) format.",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0c4ce580-97f8-4d63-b9d7-b72e1ad8250b",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "validated_timestring"
                  },
                  {
                    "id": "d74ce850-d427-431b-9f30-d4578d350d9c",
                    "data": {
                      "label": "Timeout",
                      "helpText": "Min 1 min, max 72 h.",
                      "variable": "timeoutAsync",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`1 h`",
                      "errorMessage": "Value must be great than 1 min",
                      "variableName": "timeout",
                      "maxTimeoutValue": "`72 h`",
                      "minTimeoutValue": "`1 min`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b33189f-d443-4494-83a4-53225d1d7ad2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": true,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Value must be great than 1 min",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b33189f-d443-4494-83a4-53225d1d7ad2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "validated_timestring"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "1b00de5f-66cf-40c4-8e83-7e65b78ac7e8",
              "data": {
                "open": false,
                "header": "Cross-account settings",
                "inputs": [
                  {
                    "id": "825826fb-a467-4705-8a54-b32e66868a05",
                    "data": {
                      "label": "Flow to Trigger Account Id",
                      "helpText": "",
                      "variable": "customTriggerTargetAccountId",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "0ba9514b-60c5-4b3b-9d1a-653fbd67f734",
                      "ruleType": {
                        "func": "{ return firstValue === true }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is true",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.isUseCustomSubflow",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "0ba9514b-60c5-4b3b-9d1a-653fbd67f734",
                      "ruleType": {
                        "func": "{ return firstValue === true }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is true",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.isUseCustomSubflow",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "8a5c82b5-5ce3-442d-8151-9a32e97c1040",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "d6bd10ef-c8a0-4837-bb85-18f5f336a3ab",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  },
                  {
                    "id": "f8036b7e-afeb-4436-990a-3e938fd61a8e",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :output-example.sync=\"step.outputExample\"\n  :schema-output-example.sync=\"schema.schemaOutputExample\"\n  >\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-nezjikolyhagsqrvwbupcxtdfm",
                      "componentLogic": "{ \n  data(){\n    return {\n      invalidJSON: false\n    }\n  },\n    computed : {\n      outputExampleLocal:{\n        get(){\n          return this.outputExample ? JSON.stringify(this.outputExample, null, 2) : '{}'\n        },\n        set(val){\n          try{\n            this.$emit('update:outputExample', JSON.parse(val));\n          }\n          catch(e){}\n          this.invalidJSON = !this.validJsExp(val);\n        }\n      },\n    },\n    methods: {\n     validJsExp(exp) {\n        let res;\n        try {\n          res = !!JSON.parse(exp);\n        } catch(e) {\n          res = false;\n        }\n        return res;\n      },\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        outputExample: Object\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code\n  label=\"Output example\" \n  mode=\"json\"\n  v-model=\"outputExampleLocal\"\n  :readonly=\"readonly\"\n  error=\"Invalid JSON\"\n  :invalid=\"invalidJSON\"\n/>\n\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "",
          "defaultTimeout": "`30 sec`",
          "hasProcessError": true,
          "hasChangeTimeout": "hidden",
          "hasProcessTimeout": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "e84b2bb5-0281-49dd-b562-19ab9c4c7042",
                    "label": "result"
                  },
                  {
                    "id": "e1bed11d-a6d9-4a72-9b89-2bc6b5bc7d67",
                    "label": "error"
                  }
                ],
                "flowId": "",
                "dataOut": "flowResult",
                "isAsync": true,
                "timeout": "`1h`",
                "isProceed": true,
                "isTimeout": false,
                "flowParameters": [],
                "customSubFlowName": "``",
                "flowToGetParamsFrom": "",
                "customflowParameters": [],
                "dynamicExitsArrayStart": 2
              },
              "rawMode": false,
              "version": "154fb8dd-a1ac-4e82-8ba0-f162f8d22ca2",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "bff34f9a-fa2c-47ea-a1fd-503ef0bd14ad",
                    "data": {
                      "id": "e84b2bb5-0281-49dd-b562-19ab9c4c7042",
                      "label": "result"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "34021f8a-dd41-4503-a46b-841a228173c4",
                    "data": {
                      "id": "e1bed11d-a6d9-4a72-9b89-2bc6b5bc7d67",
                      "label": "error"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "6cf2af04-f52e-43be-b38f-9fd92e185158",
                    "data": {
                      "index": 2
                    },
                    "component": "exitDynamic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.waitForResultForFecthResultStep = true;",
            "version": "1.1.8"
          },
          {
            "sample": null,
            "script": "step.data.flowIdToTrigger = ''",
            "version": "2.5.1"
          },
          {
            "sample": null,
            "script": "step.data.isUseCustomSubflow =  false\n\nif(typeof step.data.processError === 'undefined') step.data.processError = true\n\nif (step.data.flowId === 'customSubFlowName') {\n  step.data.isUseCustomSubflow =  true\n} else {\n  step.data.flowIdToTrigger = step.data.flowId\n}\n\nif (typeof step.data.timeout === 'string') {\n  const timeout = {\n    input: step.data.timeout,\n    outputMode: \"'ms'\"\n  }\n  \n  step.data.timeout = timeout\n}\n\nif (step.data.flowToGetParamsFrom === 'paramsListManualy') {\n  step.data.paramsProcessType = 'manually'\n} else {\n  step.data.paramsProcessType = 'inherit'\n}\n\n// migrate exits\n\nconst timeOutExit = _.find(step.data.exits, {id: 'timeout'})\nif(timeOutExit) {\n  delete timeOutExit.dynamic;\n  timeOutExit.condition = 'schema.isTimeout'\n}\n\n\nconst errorExit = _.find(step.data.exits, {label: 'error'})\nif (errorExit) errorExit.condition = 'processError'\n",
            "version": "2.6.0"
          },
          {
            "sample": null,
            "script": "const isAsync = step.data.isAsync\nconst oldTimeOut = _.get(step.data.timeout, 'input')\n\nif(_.isUndefined(step.data.timeoutAsync)) {\n  step.data.timeoutAsync = {\n    input: isAsync ? oldTimeOut : '`1 h`',\n    outputMode: 'ms'\n  }\n}\n\nif(_.isUndefined(step.data.timeoutSync)) {\n  step.data.timeoutSync = {\n    input: !isAsync ? oldTimeOut : '`30 sec`',\n    outputMode: 'ms'\n  }\n}\n\nif(_.isUndefined(step.data.customFlowParameters))\n  step.data.customFlowParameters = []\n",
            "version": "2.6.7"
          },
          {
            "sample": null,
            "script": "const errorExit = _.find(step.data.exits, {label: 'error'})\nif (errorExit) {\n  errorExit.id = '__error__';\n}\n\nconst timeOutExit = _.find(step.data.exits, {label: 'timeout'})\nif (timeOutExit) {\n  if (timeOutExit.id === 'timeout') {\n    timeOutExit.id = 'cf35bd61-9914-4443-b958-35c1ac8c5a9c';\n  }\n}\n",
            "version": "2.6.8"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processTimeout'])) step.data['processTimeout'] = step.data.isTimeout;\nif(_.isUndefined(step.data['timeoutDuration'])) step.data['timeoutDuration'] = \"`1 hour`\";\n\nstep.data['dynamicExitsArrayStart'] = 0;\n\nconst timeout = _.find(step.data.exits, (exit) => {\n  return exit.label === 'timeout' && exit.id !== '__timeout__'\n})\n\nif (!_.isEmpty(timeout)) {\n  timeout.id = '__timeout__'\n  timeout.condition = 'processTimeout'\n}\n\nconst resultExit = _.find(step.data.exits, (exit) => {\n  return exit.label === 'result' && !exit.dynamic\n})\n\nif (!_.isEmpty(resultExit)) {\n  resultExit.id = 'result'\n  resultExit.dynamic = true\n  delete resultExit.condition\n}\n\n\nconst isUseCustomSubflow = _.get(step, 'data.isUseCustomSubflow');\nconst paramsProcessType = _.get(step, 'data.paramsProcessType');\n\nif (isUseCustomSubflow && paramsProcessType === 'manually') {\n  const customResultExits = _.get(step, 'data.customResultExits', []);\n  const resultExist = _.find(customResultExits, { name: 'result' })\n  if (_.isEmpty(resultExist)) {\n    const exitId = uuid.v4()\n    customResultExits.unshift({\n      vforkey: exitId,\n      name: 'result'\n    })\n    \n    resultExit.id = exitId;\n  }\n}\n\n\ndelete step.data.isTimeout\n",
            "version": "2.6.10"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['targetAccountId'])) step.data['targetAccountId'] = ''\n",
            "version": "3.1.0"
          },
          {
            "script": "if (_.isUndefined(step.data.customTriggerTargetAccountId)) {\n  step.data.customTriggerTargetAccountId = step.data.isUseCustomTrigger ? `\\`${step.data.targetAccountId}\\`` : '``'\n}",
            "version": "3.2.1"
          },
          {
            "script": "if(_.isUndefined(step.data['customResultExits'])) step.data['customResultExits'] = [{\"name\":\"result\",\"vforkey\":\"2908bc29-1377-4a7c-97d2-30a426b682d1\"}];\n",
            "version": "3.2.10"
          }
        ],
        "modules": [
          {
            "name": "short-uuid",
            "version": "",
            "vforkey": "bb68a060-cba0-4a9f-8007-d1b76a2ee9a1"
          },
          {
            "name": "timestring",
            "version": "",
            "vforkey": "d8ef24a5-17ce-4dc3-b1b2-d2e203740555"
          }
        ],
        "dateModified": 1662039795151
      },
      {
        "id": "14d1ca2c-9bdd-40c1-be51-5a65c59b3525",
        "version": "1.1.24",
        "cacheVersion": "0208120e-ef38-4c8a-8e89-8d02db801899",
        "label": "Check Condition",
        "icon": "condition",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "Use this step to take the flow down different paths according to conditions in the flow logic.",
        "isGatewayStep": false,
        "publishedBy": "OneReach.ai",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "let makeCompare = (rule) => {\n  let firstValue = rule.valueType === 'string' ? rule.firstValue.trim() : rule.firstValue;\n  let secondValue = rule.valueType === 'string' ? rule.secondValue.trim() : rule.secondValue;\n  \n  if (!isCaseSensitive && rule.valueType === 'string') {\n    firstValue = firstValue.toLowerCase();\n    secondValue = secondValue.toLowerCase();\n  }\n    \n  if (rule.valueType === 'number') {\n    firstValue = isNaN(rule.firstValue) ? NaN : parseFloat(rule.firstValue);\n    secondValue = isNaN(rule.secondValue) ? NaN : parseFloat(rule.secondValue);\n  }\n\n  if (rule.valueType === 'advanced') {\n    const flowContext = this;\n    return new Function('_', `let codeValue = arguments[0]; return codeValue`).bind(flowContext)(rule.codeValue, _)\n  } else {\n    let compareMethod = rule.compareMethod;\n    return compareMethod(firstValue, secondValue) \n  }\n}\n\nlet exitId;\nlet isCondition = false;\n_.forEach(conditionExits, exit => {\n  let isRule = (exit.trueValue === 'any') ? _.some(exit.rules, rule => makeCompare(rule)) : _.every(exit.rules, rule => makeCompare(rule))\n\n  if (isRule) {\n    isCondition = true;\n    exitId = exit.id;\n    return false\n  }\n})\n\ntry {\n  return isCondition ? this.exitStep(exitId) : this.exitStep('else');\n} catch(error) {\n  throw error\n}\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "else",
              "label": "else",
              "condition": ""
            }
          ],
          "elseExitName": "else",
          "isSingleExit": false,
          "conditionExits": [],
          "isCaseSensitive": false,
          "hasNoConditionDataOut": true,
          "dynamicExitsArrayStart": 0,
          "conditionRuleHasDataOut": true,
          "noConditionDataOutValue": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "When the step is reached in the flow, each _condition exit_ will be evaluated in order from top to bottom (or left to right in the flow tree, respectively). The flow proceeds down the first exit for which the associated rules are met. There is no limit on the number of exits, but the step will choose only one during an execution. If none of the rules were met, the step will exit through the *else* leg.\n\n### Condition exits\nEvery condition exit is defined by the _condition rules_ that must be met for the flow to proceed down that exit, and at least one exit must be defined. \nTo add a new condition exit, click *Add new exit* button. \nYou can change the order of your exits using the drag handle; the order of the legs on the flow tree will be updated accordingly. To delete a condition exit click X, but note that all the steps added to that leg in the flow tree will be also deleted.\nEach condition rule is validated for the details to be set properly. The condition exit edge will be highlighted in red if any data requires correction.\n\nThe *name* of an exit is set by default, and it is shown above the corresponding leg on the flow tree and can be manually changed in the *step details pane*. The *description* is empty by default and can be manually added; it is not required and will not affect the flow execution.\n\n### Condition rules\nEach rule is created using a *data type*, *input values* and a *logical operator* that is predefined in a dropdown and varies depending on the chosen *data type* (i.e. *\"contains\"*, *\"starts with\"*, *\">=\"*, *\"is empty\"*, *\"is exactly same as\"*, etc.). At least one rule for every condition exit must be defined but you can have as many rules as you need. To add a new rule click *Add rule* button.\n\nYou can compare different data types, like *string*, *number*, *object or array* (see example below). Both input fields can be filled in manually or with a merge field value by clicking on the `{x}` icon. Make sure that the value stored in the merge field matches with the chosen data type. *String* data is case-insensitive by default but you can change this parameter in **_Advanced settings_**.\n\nIf you need to apply more complex logic for data validation, choose *advanced* data type and describe the query in JS/JSON format. Please note that once you switch to *advanced* or *object or array* and make any changes to the data, the data will be lost if you select another *data type*.\n\nExample of *object or array* data type:\nInput value\n`this.get('myObject')` \nis exactly same as:\n``` json\n{\n  \"OneReach\": {\n    \"chatBots\": [\"sms\", \"slack\",\"facebook\",\"e-mail\",\"telegram\"],\n    \"voice\": \"telephony\",\n    \"http\": \"http flow\"\n  },\n  \"Apple\": \"hardware\",\n  \"MS\": \"software\"\n}\n```\nExample of advanced data type:\n`(this.get(‘myString’)).length > 3`\n\n### Match type\nBy default, all rules in one condition exit are set with *any* match type meaning the flow will go through this exit if at least one rule is met. Choose *all* if you want exact match with every condition rule.\n\n### Advanced settings\nThe toggle *Ignore text case* allows you to control case sensitivity for the data set in input fields. Please note that the option doesn't work in code mode.\nThe label for *Else* exit leg can be changed in this section.\n\n### Reporting events\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.",
        "formBuilder": {
          "formCode": "return {\n    props : ['schema']\n};",
          "stepExits": [
            {
              "id": "3cc12b35-2706-4c0d-899f-78c5407bfe33",
              "data": {
                "index": 0
              },
              "component": "exitDynamic"
            },
            {
              "id": "0534ef79-02d1-48f5-b709-41bd4a893d21",
              "data": {
                "id": "else",
                "label": "else",
                "condition": ""
              },
              "compiled": {
                "exits": [
                  {
                    "id": "else",
                    "label": "else"
                  }
                ]
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "afda3f10-41ef-4d40-8596-4dfc86100435",
              "data": {
                "open": true,
                "header": "Condition exits",
                "inputs": [
                  {
                    "id": "d4b351ab-622a-4059-9c8c-9be0d2bf8670",
                    "data": {
                      "inputs": [],
                      "isSingleExit": false,
                      "addButtonText": "",
                      "conditionExits": [],
                      "conditionTitle": "",
                      "conditionGroups": [
                        {
                          "label": "`New Group 1`",
                          "rules": [
                            {
                              "vforkey": "5d0eb7ad-650e-4195-8865-116da8a7b21e",
                              "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                              "codeValue": "``",
                              "valueType": "string",
                              "firstValue": "``",
                              "secondValue": "``",
                              "isDisabledSecondValue": false
                            }
                          ],
                          "dataOut": "``",
                          "trueValue": "any",
                          "description": "``",
                          "isNotCollapsed": true,
                          "isEditableHeader": false
                        }
                      ],
                      "renderCondition": "",
                      "usePredefinedValue": false,
                      "isNegativeLeftMargin": true,
                      "hasNoConditionDataOut": true,
                      "conditionRuleHasDataOut": true,
                      "noConditionDataOutValue": "``"
                    },
                    "meta": {
                      "name": "condition-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "0.9.0"
                    },
                    "label": "Conditon builder v0.9.0",
                    "compiled": {},
                    "component": [
                      "condition-builder-component",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                    ]
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "aca909ad-073f-42c8-8057-2969891f6b82",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "377bd0c9-10ef-4818-b5a7-05eb1d23edf5",
                    "data": {
                      "data": "{\n  \"elseExitName\": \"else\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "elseExitName: {\n  custom(value) {\n    return !_.isEmpty(value.trim())\n  }\n},",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :else-exit-name.sync=\"schema.elseExitName\" \n  :v=\"$v\" \n  :readonly=\"readonly\" \n  :steps=\"steps\" \n  :step-id=\"stepId\"\n></wildcard>",
                      "componentName": "or-wildcard-ptuiywojmknzvdeglhfsacxrbq",
                      "componentLogic": "{\n  computed : {\n    elseExitNameLocal : {\n      get () { \n        return this.elseExitName\n      },\n      set (value) { \n        //this.validateElseExitName(value);\n        this.changeElseLegName(value);\n        this.$emit('update:elseExitName', value);\n      }\n    },\n    \n    // _elseExitName : {\n    //   get () { \n    //     return this.elseExitName\n    //   },\n    //   set (value) { \n    //     this.$emit('update:elseExitName', value);\n    //   }\n    // },\n  },\n  \n  // data () {\n  //   return {\n  //     elseExitNameLocal: \"\"\n  //   }\n  // },\n  \n  props : {\n    elseExitName : {\n      type : String,\n      default : ''\n    },\n    // elseExitNameFinal : {\n    //   type : String,\n    //   default : ''\n    // },\n    steps : '',\n    stepId : '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema: {}};\n      }\n    },\n  },\n  \n  methods: {\n    changeElseLegName (value) {\n      _.map(this.$parent.schema.exits, exit => {\n        if (exit.id === 'else') {\n          //this._elseExitName = value.length > 10 ? value.slice(0,10) + '...' : value\n          // this.$nextTick(() => {\n          //   exit.label = this._elseExitName || 'No Name';\n          // })\n          exit.label = value.length > 10 ? value.slice(0,10) + '...' : value || 'No Name';\n        }\n\n        return exit;\n     })\n    }\n  },\n  \n  // watch: {\n  //   elseExitNameLocal (value) {\n  //     this.changeElseLegName(value);\n  //   }\n  // }\n}",
                      "componentTemplate": "<or-textbox \n  label=\"Else exit leg name\"\n  v-model=\"elseExitNameLocal\"\n  :readonly=\"readonly\"\n  error=\"The field is required.\"\n  :invalid=\"v.schema.elseExitName.$error\"\n  @input=\"v.schema.elseExitName.$touch()\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  class=\"else-leg-name\"\n  required\n></or-textbox>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".switch {\n  &__header {\n    display: flex;\n    flex-direction: row;\n    min-height: 36px;\n    \n    .label {\n      display: flex;\n      align-items: center;\n      flex-grow: 1;\n      font-size: 12px;\n      line-height: 1.3;\n      color: #91969d;\n      transition: color .1s ease;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "b70da44b-5a78-4af2-81bd-fdb455d0df31",
                    "data": {
                      "label": "Case sensitive",
                      "variable": "isCaseSensitive",
                      "labelLeft": false,
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "formSwitch"
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "ruleType": "",
                      "codeValue": "qa.content@onereach.com",
                      "valueType": "advanced",
                      "firstValue": "``",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "hasProcessError": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "else",
                    "label": "else"
                  }
                ],
                "elseExitName": "`else`",
                "isSingleExit": false,
                "stepVariable": "defaultValue",
                "toIgnoreCase": true,
                "conditionExits": [],
                "conditionGroups": [],
                "dynamicExitsArrayStart": 0,
                "conditionRuleHasDataOut": true
              },
              "rawMode": false,
              "version": "71eebe4f-eb12-41e7-9c54-88770f96cf4d",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "3cc12b35-2706-4c0d-899f-78c5407bfe33",
                    "data": {
                      "index": 0
                    },
                    "component": "exitDynamic"
                  },
                  {
                    "id": "0534ef79-02d1-48f5-b709-41bd4a893d21",
                    "data": {
                      "id": "else",
                      "label": "else"
                    },
                    "compiled": {
                      "exits": [
                        {
                          "id": "else",
                          "label": "else"
                        }
                      ]
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "const data = step.data;\nconst conditionExits = [];\nconst ruleTypesVocabulary = {\n  \"includes\": {\n    \"valueType\" : \"string\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.includes(firstValue, secondValue); }`\n  },\n  \"!includes\" : {\n    \"valueType\" : \"string\",\n    \"rule\" : `function (firstValue, secondValue) { return !_.includes(firstValue, secondValue); }`\n  },\n  \"startsWith\" : {\n    \"valueType\" : \"string\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.startsWith(firstValue, secondValue); }`\n  },\n  \"endsWith\" : {\n    \"valueType\" : \"string\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.endsWith(firstValue, secondValue); }`\n  },\n  \"==\" : {\n    \"valueType\" : \"advanced\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.isEqual(firstValue, secondValue); }`\n  },\n  \"!=\" : {\n    \"valueType\" : \"advanced\",\n    \"rule\"  : ``\n  }\n};\n\n_.forEach(data.conditions, (condition, index) => {\n  data.exits[index].id = condition.vforkey;\n  data.exits[index].label = condition.label.length > 10 ? condition.label.slice(0,10) + '...' : condition.label;\n\n  conditionExits.push({\n    label            : \"`\" + condition.label + \"`\",\n    description      : \"`\" + (condition.description || '').replace(/`/g, \"\\\\`\") + \"`\",\n    trueValue        : condition.rulesType,\n    isEditableHeader : false, \n    isNotCollapsed   : true,\n    rules            : [],\n    vforkey          : condition.vforkey,\n    mountedFlag      : false,\n  });\n  \n  _.forEach(condition.rules, rule => {\n    const valueType = ruleTypesVocabulary[rule.condition].valueType;\n    const ruleValue = ruleTypesVocabulary[rule.condition].rule;\n    const isUiMode = rule.ui;\n    const isUiAndNoAdvanced = isUiMode && valueType !== 'advanced';\n   \n    conditionExits[index].rules.push({\n      firstValue            : isUiAndNoAdvanced ? \"`${this.get(\\'\" + rule.left + \"\\')}`\" : \"``\",\n      secondValue           : isUiAndNoAdvanced ? rule.right : \"``\",\n      ruleType              : isUiAndNoAdvanced ? ruleValue : ruleTypesVocabulary[\"includes\"].rule,\n      valueType             : isUiMode || valueType === 'advanced' ? valueType : !isUiMode ? \"advanced\" : \"string\",\n      codeValue             : isUiAndNoAdvanced ? \"``\" : rule.code,\n      isDisabledSecondValue : false,\n      isValid               : true,\n      mountedFlag           : false,\n      calculatedFlag        : false\n    })\n  });\n})\n\ndata.conditionExits = conditionExits\ndata.elseExitName = \"else\";\ndata.conditionRuleHasDataOut = false;\ndata.hasNoConditionDataOut = false;\ndelete data.conditions;",
            "version": "1.0.8"
          },
          {
            "sample": null,
            "script": "const data = step.data;\n\ndata.isSingleExit = false;\ndata.hasNoConditionDataOut = false;\n\nif (!_.has(data, 'isCaseSensitive'))\n  data.isCaseSensitive = false\n\n_.forEach(data.conditionExits, condition => {\n  delete condition.mountedFlag;\n  \n  condition.rules = _.map(condition.rules, rule => _.omit(rule, ['mountedFlag', 'calculatedFlag', 'isValid']))\n})\n\ndelete data.mountedFlag;",
            "version": "1.1.20"
          },
          {
            "sample": null,
            "script": "_.forEach(step.data.conditionExits, exit => {\n  _.forEach(exit.rules, rule => {\n    if (rule.valueType !== 'advanced')\n      rule.codeValue = '``';\n  });\n});",
            "version": "1.1.23"
          },
          {
            "sample": null,
            "script": "",
            "version": "1.1.24"
          }
        ],
        "dateModified": 1591200107336
      },
      {
        "id": "2e743d60-345a-4c9b-997e-ed691724bfa2",
        "version": "1.1.4",
        "cacheVersion": "709632bf-31ac-44ae-b507-1ddc1a7220af",
        "label": "Route Based on Time ",
        "icon": "clock",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "Routes the flow along different paths according to a set of schedules.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Time",
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "const moment = require('moment-timezone');\nconst dateFormat = 'YYYY-MM-DD HH:mm';\nconst dateFormatWithoutHour = 'YYYY-MM-DD';\nconst timeZoneValue = _.trim(timeZone.value, '`') || '';\n\nif (_.isNil(moment.tz.zone(timeZoneValue))) {\n  this.log.error(`Invalid timezone: ${timeZoneValue}`);\n  return processError ? this.exitStep('error', { invalidTimezone: timeZoneValue }) : this.exitFlow();\n}\n\nconst nowMoment = moment(new Date()).tz(timeZoneValue);\nconst nowDate = nowMoment.format(dateFormat);\nconst nowDateInMS = nowMoment.format('x');\nconst nowDateWithoutHours = nowMoment.format(dateFormatWithoutHour);\nconst nowWeekDayNumber = String(nowMoment.day());\nconst nowTime = moment(nowDate).format('HH:mm');\nconst specificDatesDimensions = [];\nconst weeklyDimensions = [];\nlet periodOfTime = [];\nlet weeklyPeriodOfTime = [];\n_.map(routingLegsList, routingItem => {\n  \n  _.map(routingItem.specificDatesList, item => {\n    \n  _.map(item.periodOfTime, period => { \n      periodOfTime.push({\n        from:  _.get(period, 'from') || '00:00',\n        to: _.get(period, 'to') || '23:59'\n      });\n    });\n    \n    specificDatesDimensions.push({\n      exitId: routingItem.vforkey,\n      periodOfDays: {\n        from: item.periodOfDays.from,\n        to: item.periodOfDays.to\n      },\n      periodOfTime: _.clone(periodOfTime)\n    });\n    \n    periodOfTime.length = 0;\n  });\n  \n  _.map(routingItem.weeklyList, item => {\n    \n    _.map(item.periodOfTime, period => {\n      weeklyPeriodOfTime.push({\n        from: _.get(period, 'from') || '00:00',\n        to: _.get(period, 'to') || '23:59'\n      });\n    });\n    \n    weeklyDimensions.push({\n      exitId: routingItem.vforkey,\n      weekDays: _.map(item.weekDays, day => day.value),\n      periodOfTime: _.clone(weeklyPeriodOfTime)\n    });\n\n    weeklyPeriodOfTime.length = 0;\n  });\n}); \n\nconst checkTimePeriod = (periodOfTimeArr, nowTime) => {\n  let flag = false;\n  _.forEach(periodOfTimeArr, period => {\n    const fromSplited = period.from.split(':');\n    const fromHours = fromSplited[0];\n    const fromMinutes = fromSplited[1];\n    const formatedTimeFrom = moment(new Date(null, null, null, fromHours, fromMinutes)).format('HH:mm');\n    const toSplited = period.to.split(':');\n    const toHours = toSplited[0];\n    const toMinutes = toSplited[1];\n    const formatedTimeTo = moment(new Date(null, null, null, toHours, toMinutes)).format('HH:mm');\n    \n    if (nowTime >= formatedTimeFrom && nowTime <= formatedTimeTo) {\n      flag = true;\n      return false;\n    }\n  })\n  \n  return flag;\n}\n\n/* Checking Specific Dates Dimensions*/\nfor (let i = 0; i <= specificDatesDimensions.length - 1; i++) {\n  const dayFrom = specificDatesDimensions[i].periodOfDays.from;\n  const dayTo = specificDatesDimensions[i].periodOfDays.to;\n  const periodOfTime = specificDatesDimensions[i].periodOfTime;\n  const exitId = specificDatesDimensions[i].exitId;\n  \n  if (moment(nowDateWithoutHours).isSameOrAfter(dayFrom) \n      && moment(nowDateWithoutHours).isSameOrBefore(dayTo) \n      && checkTimePeriod(periodOfTime, nowTime)) {\n    return this.exitStep(exitId, { nowDate, nowDateInMS });\n  }\n}\n\n/* Checking Weekly Dimensions*/\n\nfor (let i = 0; i <= weeklyDimensions.length - 1; i++) {\n  const periodOfTime = weeklyDimensions[i].periodOfTime;\n  const weekDays = weeklyDimensions[i].weekDays;\n  const exitId = weeklyDimensions[i].exitId;\n  \n  if (_.indexOf(weekDays, nowWeekDayNumber) !== -1 && checkTimePeriod(periodOfTime, nowTime)) {\n    return this.exitStep(exitId, { nowDate, nowDateInMS });\n  }\n}\n\nreturn this.exitStep('else', { nowDate, nowDateInMS });\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "2c51f1d3-f35c-4ec0-ab30-d88c4db770b3",
              "label": "else"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "name": "",
            "type": "session"
          },
          "timeZone": {},
          "processError": true,
          "routingLegsList": [],
          "dynamicExitsArrayStart": 0
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "nowDate": "2018-01-04 09:38",
          "nowDateInMS": 1515051480000
        },
        "help": "This step allows you to execute different flow logic depending on scheduled time periods. The step will exit down the corresponding leg if it is executed during one of the defined scheduled periods, otherwise it will exit down the else leg. \n\nFlow composer can select any timezone from the list of existing or set it dynamically via merge field, in other way local timezone settings are applied.\n\nTime based settings can be provided in two ways: in terms of days of the week (Weekly option) and in terms of specific dates (Time Period option). A mix of the two approaches to define a schedule exit can also be used. \nThis step must have at least one schedule exit but flow composer can add as many exits as needed to create specific time-based routing behavior. \n\nAs many of these elements as needed can be added to define a specific schedule. \"Add new exit\" button allows to add one more exit for the step. Already created exits can be deleted or reordered by drag and drop in a sidebar that also reorders exits on the tree. \n\n**Advanced settings**\nYou may keep the default merge field name or enter your own.\nOutput merge field consists of two values: \n```timeRoutingResult.nowDate``` - provides current time in YY-MM-DD:HH-MM format;\n```timeRoutingResult.nowDateInMS``` - provides execution time in milliseconds.\n\n**Reporting events**\nStep event is reported after the flow exits the step.\n\n\n",
        "formBuilder": {
          "stepExits": [
            {
              "id": "52893417-905b-4699-90ae-0f31da08b4ba",
              "data": {
                "index": 0
              },
              "component": "exitDynamic"
            },
            {
              "id": "3c6a5ecb-473f-4a90-ad91-91b73ba80e62",
              "data": {
                "id": "2c51f1d3-f35c-4ec0-ab30-d88c4db770b3",
                "label": "else"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "39903911-fe71-4ab9-ad54-2ea1d7ee52d2",
              "data": {
                "data": "{\r\n  \"routingLegsList\": [],\r\n  \"timeZone\": {}\r\n}",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "{}",
                "applyToJson": false,
                "formTemplate": "<or-wildcard-jdkbtmsghuyeqpra v-model=\"schema.routingLegsList\"\n  :timeZone.sync=\"schema.timeZone\"\n  :exits.sync=\"schema.exits\"\n  :readonly=\"readonly\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :merge-fields=\"mergeFields\"\n>\n</or-wildcard-jdkbtmsghuyeqpra>",
                "componentName": "or-wildcard-jdkbtmsghuyeqpra",
                "componentLogic": "{\r\n  components: {\r\n    routingLeg: {\r\n      components: {\r\n        weeklyItem: {\r\n          props: {\r\n            weekly: {\r\n              type: Object,\r\n              default () {\r\n                return {};\r\n              }\r\n            },\r\n            readonly: {\r\n              type: Boolean,\r\n              default: false\r\n            }\r\n          },\r\n        \r\n          data () {\r\n            return {\r\n              weeklyLocal: this.weekly,\r\n              periodOfTime: _.get(this.weekly, 'periodOfTime') || [],\r\n              timePeriodType: ['All Day (24 Hours)', 'Specific Time']\r\n            };\r\n          },\r\n          \r\n          computed : {\r\n            weeklyTimePeriodTypeOfDay: {\r\n              get () {\r\n                return this.weeklyLocal.weeklyTimePeriodTypeOfDay;\r\n              },\r\n              \r\n              set (newValue) {\r\n                if (newValue === 'All Day (24 Hours)') {\r\n                  this.periodOfTime = [{\r\n                    from: '',\r\n                    to: ''\r\n                  }];\r\n                }\r\n                _.set(this.weeklyLocal, 'weeklyTimePeriodTypeOfDay', newValue);\r\n              }\r\n            },\r\n            \r\n            getWeekDays () {\r\n              return [\r\n                {label: 'Mon', value: '1'}, {label: 'Tue', value: '2'}, {label: 'Wed', value: '3'},\r\n                {label: 'Thu', value: '4'}, {label: 'Fri', value: '5'}, {label: 'Sat', value: '6'},\r\n                {label: 'Sun', value: '7'}\r\n              ]\r\n            }\r\n          },\r\n          \r\n          watch: {\r\n            weeklyLocal: {\r\n              handler (newValue) {\r\n                this.$emit('update:weekly', newValue);\r\n              },\r\n              deep: true\r\n            },\r\n            \r\n            periodOfTime: {\r\n              handler (newValue) {\r\n                _.set(this.weeklyLocal, 'periodOfTime', newValue);\r\n              },\r\n              deep: true\r\n            }\r\n          },\r\n      \r\n          methods: {\r\n            addPeriodOfTime () {\r\n              this.periodOfTime.push({\r\n                from: '',\r\n                to: ''\r\n              })\r\n            },\r\n            \r\n            deletePeriodOfTime (index) {\r\n              this.periodOfTime.splice(index, 1);\r\n            },\r\n            \r\n            toggleWeeklyDays (day) {\r\n              const index = _.findIndex(this.weeklyLocal.weekDays, weekDay => {\r\n                return weekDay.value === day.value;\r\n              });\r\n              \r\n        \r\n              if (index !== -1) {\r\n                this.weeklyLocal.weekDays.splice(index, 1);\r\n              } else {\r\n                // initialize if undefined\r\n                if (!this.weeklyLocal.weekDays) {\r\n                  this.weeklyLocal.weekDays = [];\r\n                }\r\n        \r\n                this.weeklyLocal.weekDays.push(day);\r\n                \r\n              }\r\n            },\r\n        \r\n            isWeekBtnActive (day) {\r\n              return _.find(this.weekly.weekDays, weekDay => {\r\n                return weekDay.value === day.value;\r\n              })\r\n            }\r\n          },\r\n    \r\n          template: `<%= weeklyItem %>`\r\n        },\r\n        \r\n        specificDatesItem: {\r\n          props: {\r\n            specificDates: {\r\n              type: Object,\r\n              default () {\r\n                return {};\r\n              }\r\n            },\r\n            readonly: {\r\n              type: Boolean,\r\n              default: false\r\n            }\r\n          },\r\n        \r\n          data () {\r\n            return {\r\n              specificDatesLocal: this.specificDates,\r\n              periodOfTime: _.get(this.specificDates, 'periodOfTime') || [],\r\n              timePeriodType: ['All Day (24 Hours)', 'Specific Time']\r\n            };\r\n          },\r\n          \r\n          computed : {\r\n            timePeriodTypeOfDay: {\r\n              get () {\r\n                return this.specificDatesLocal.timePeriodTypeOfDay;\r\n              },\r\n              \r\n              set (newValue) {\r\n                if (newValue === 'All Day (24 Hours)') {\r\n                  this.periodOfTime = [{\r\n                    from: '',\r\n                    to: ''\r\n                  }];\r\n                }\r\n                _.set(this.specificDatesLocal, 'timePeriodTypeOfDay', newValue);\r\n              }\r\n            },\r\n            \r\n            startDate: {\r\n              get () {\r\n                const date = _.get(this.specificDatesLocal, 'periodOfDays.from');\r\n                return date ? new Date(`${date} 00:00:00`) : null;\r\n              }, \r\n              \r\n              set (newValue) {\r\n                const timeZone = libs.moment.tz.guess();\r\n                const date = libs.moment(newValue).tz(timeZone).format('YYYY-MM-DD');\r\n                _.set(this.specificDatesLocal, 'periodOfDays.from', date);\r\n              }\r\n            },\r\n            \r\n            endDate: {\r\n              get () {\r\n                const date = _.get(this.specificDatesLocal, 'periodOfDays.to');\r\n                return date ? new Date(`${date} 00:00:00`) : null;\r\n              }, \r\n              \r\n              set (newValue) {\r\n                const timeZone = libs.moment.tz.guess();\r\n                const date = libs.moment(newValue).tz(timeZone).format('YYYY-MM-DD')\r\n                _.set(this.specificDatesLocal, 'periodOfDays.to', date);\r\n              }\r\n            }\r\n          },\r\n          \r\n          watch: {\r\n            specificDatesLocal: {\r\n              handler (newValue) {\r\n                this.$emit('update:specificDates', newValue);\r\n              },\r\n              deep: true\r\n            },\r\n            \r\n            periodOfTime: {\r\n              handler (newValue) {\r\n                _.set(this.specificDatesLocal, 'periodOfTime', newValue);\r\n              },\r\n              deep: true\r\n            }\r\n          },\r\n      \r\n          methods: {\r\n            addPeriodOfTime () {\r\n              this.periodOfTime.push({\r\n                from: '',\r\n                to: ''\r\n              })\r\n            },\r\n            \r\n            deletePeriodOfTime (index) {\r\n              this.periodOfTime.splice(index, 1);\r\n            },\r\n            \r\n            formatDate (date) {\r\n              const timeZone = libs.moment.tz.guess();\r\n              return libs.moment(date).tz(timeZone).format('YYYY-MM-DD');\r\n            }\r\n          },\r\n    \r\n          template: `<%= specificDatesItem %>`\r\n        }\r\n      },\r\n\r\n      props: {\r\n        weeklyList : {\r\n          type: Array,\r\n          default() {\r\n            return [];\r\n          }\r\n        },\r\n        specificDatesList : {\r\n          type: Array,\r\n          default() {\r\n            return [];\r\n          }\r\n        },\r\n        routingLegLabel: {\r\n          type: String,\r\n          default: ''\r\n        },\r\n        readonly: {\r\n          type: Boolean,\r\n          default: false\r\n        }\r\n      },\r\n      \r\n      computed: {\r\n        routingLegLabelLocal: {\r\n          get () {\r\n            return this.routingLegLabel;\r\n          },\r\n          \r\n          set (newValue) {\r\n            this.$emit('update:routingLegLabel', newValue);\r\n          }\r\n        },\r\n        \r\n        collapsibleItemLabel() {\r\n          return this.routingLegLabelLocal || 'No name';\r\n        },\r\n      },\r\n          \r\n      data () {\r\n        return {\r\n          weeklyListLocal: this.weeklyList,\r\n          specificDatesListLocal: this.specificDatesList,\r\n          newWeeklyListItem () {\r\n            return {\r\n              weekDays: [],\r\n              periodOfTime: [\r\n                {\r\n                  from: '',\r\n                  to: ''\r\n                }\r\n              ],\r\n              weeklyTimePeriodTypeOfDay: 'All Day (24 Hours)'\r\n            };\r\n          },\r\n          newSpecificDatesListItem () {\r\n            return {\r\n              periodOfDays: {\r\n                from: '',\r\n                to: ''\r\n              },\r\n              periodOfTime: [\r\n                {\r\n                  from: '',\r\n                  to: ''\r\n                }\r\n              ],\r\n              timePeriodTypeOfDay: 'All Day (24 Hours)'\r\n            };\r\n          }\r\n        };\r\n      },\r\n      \r\n      watch: {\r\n        weeklyListLocal: {\r\n          handler (newValue) {\r\n            this.$emit('update:weeklyList', newValue);\r\n          },\r\n          deep: true\r\n        },\r\n        \r\n        specificDatesListLocal: {\r\n          handler (newValue) {\r\n            this.$emit('update:specificDatesList', newValue);\r\n          },\r\n          deep: true\r\n        }\r\n      },\r\n\r\n      template: `<%= routingLegItem %>`\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    displayTimeZone: {\r\n      get () {\r\n        const timeZone = libs.moment.tz.guess();\r\n        return _.isEmpty(this.timeZone) \r\n          ? `\\`${timeZone}\\``\r\n          : _.get(this.timeZone, 'value');\r\n      }, \r\n      set (newValue) {\r\n        this.$emit('update:timeZone', {value: newValue});\r\n      }\r\n    }\r\n  },\r\n  \r\n  methods: {\r\n    calculateExitLabel (item) {\r\n      if(_.isEmpty(item.routingLegLabel)) return 'No name';\r\n      \r\n      const label = item.routingLegLabel;\r\n      return `${label.length > 8 ? label.slice(0,8)+'...' : label}`;\r\n    },\r\n    \r\n    updateExits (params) {\r\n      if (_.isEmpty(this.stepId)) return false;\r\n      if (_.isEmpty(params.oldItems) && _.isEmpty(params.newItems)) {\r\n          // Items reordered\r\n          const newDynamicExits = _.map(params.allItems, item => {\r\n              const exit = _.find(this.exitsLocal, {id : item.vforkey});\r\n              return {\r\n                  id : item.vforkey,\r\n                  label : this.calculateExitLabel(item),\r\n                  stepId : exit ? exit.stepId : ''\r\n              };\r\n          });\r\n          try {\r\n           _.forEach(newDynamicExits, (item, index) => {\r\n              const exitIndex = index;\r\n              this.exitsLocal[exitIndex].id = item.id;\r\n              this.exitsLocal[exitIndex].label = item.label;\r\n              this.exitsLocal[exitIndex].stepId = item.stepId;\r\n          }); \r\n          } catch(e) {\r\n          }\r\n      } else if (_.isEmpty(params.oldItems) && !_.isEmpty(params.newItems)) {\r\n          // Item added\r\n          const newItem = params.newItems[0];\r\n          const lastDynamicExitIndex = _.findLastIndex(this.exitsLocal, {dynamic : true});\r\n          const index = lastDynamicExitIndex === -1 ? 0 : lastDynamicExitIndex + 1;\r\n          this.exitsLocal.splice(index, 0, {\r\n              label    : this.calculateExitLabel(newItem),\r\n              id       : newItem.vforkey,\r\n              stepId   : '',\r\n              dynamic  : true\r\n          });\r\n      } else if (!_.isEmpty(params.oldItems) && _.isEmpty(params.newItems)) {\r\n          // Item removed\r\n          const removedItem = params.oldItems[0];\r\n          this.exitsLocal.splice(_.findIndex(this.exitsLocal, {id : removedItem.vforkey}), 1);\r\n      } else if (!_.isEmpty(params.oldItems) && !_.isEmpty(params.newItems)) {\r\n          // Item updated\r\n          const oldItemValue = params.oldItems[0];\r\n          const newItemValue = params.newItems[0];\r\n          const changedItemIndex = _.findIndex(this.exitsLocal, {id : oldItemValue.vforkey});\r\n          this.exitsLocal[changedItemIndex].id = newItemValue.vforkey;\r\n          this.exitsLocal[changedItemIndex].label = this.calculateExitLabel(newItemValue);\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted () {\r\n    if (_.isEmpty(this.timeZone)) {\r\n      const timeZone = libs.moment.tz.guess();\r\n      this.$emit('update:timeZone', {value: `\\`${timeZone}\\``, label: timeZone});\r\n    }\r\n    \r\n    if (_.isEmpty(this.routingLegsList)) {\r\n      \r\n      this.$refs['routingLegsList'].addItem();\r\n      \r\n      // This line \r\n      // this.$refs['routingLegsList'].value[0].routingLegLabel = '';\r\n      // throw error: TypeError: Cannot set property 'routingLegLabel' of undefined\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    routingLegsList: {\r\n      handler (newValue) {\r\n        this.$emit('input', newValue);\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    exitsLocal: {\r\n      handler (newValue) {\r\n        this.$emit('update:exits', newValue);\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n\r\n  data () {\r\n    // TODO: get better option to get regions.\r\n    // One of posible option is get contry and its regions\r\n    // https://github.com/moment/moment-timezone/issues/227\r\n    // return only canonical zones\r\n    const timeZones = libs.moment.tz._zones;\r\n    const regions = _.chain(timeZones)\r\n      .keys()\r\n      .map(key => {\r\n        // due to mutation in moment we need check if it's object\r\n        // mutation is caused when invoke moment.tz()\r\n        const zone = timeZones[key];\r\n        return _.isObject(zone) ? zone.name : zone.split('|')[0]\r\n      })\r\n      .filter(zone => zone.indexOf('/') >= 0)\r\n      .sort()\r\n      .map(value => ({ label: value, value: `\\`${value}\\`` }))\r\n      .value();\r\n    return {\r\n      regions,\r\n      routingLegsList: this.value,\r\n      exitsLocal: this.exits,\r\n      newRoutingLeg () {\r\n        return {\r\n          stepId: this.stepId,\r\n          routingLegLabel: '',\r\n          weeklyList: [ \r\n            {\r\n              weekDays: [],\r\n              periodOfTime: [\r\n                {\r\n                  from: '',\r\n                  to: ''\r\n                }\r\n              ],\r\n              weeklyTimePeriodTypeOfDay: \"All Day (24 Hours)\"\r\n            }\r\n          ],\r\n          specificDatesList: [\r\n            {\r\n              periodOfDays: {\r\n                from: \"\",\r\n                to: \"\"\r\n              },\r\n              periodOfTime: [\r\n                {\r\n                  from: '',\r\n                  to: ''\r\n                }\r\n              ],\r\n              timePeriodTypeOfDay: \"All Day (24 Hours)\"\r\n            }\r\n          ]\r\n        };\r\n      }\r\n    };\r\n  },\r\n  \r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default() {\r\n        return [\r\n          {\r\n            stepId: '',\r\n            routingLegLabel: 'New Exit',\r\n            weeklyList: [ \r\n              {\r\n                weekDays: [],\r\n                periodOfTime: [\r\n                  {\r\n                    from: '',\r\n                    to: ''\r\n                  }\r\n                ],\r\n                weeklyTimePeriodTypeOfDay: \"All Day (24 Hours)\"\r\n              }\r\n            ],\r\n            specificDatesList: [\r\n              {\r\n                periodOfDays: {\r\n                  from: '',\r\n                  to: ''\r\n                },\r\n                periodOfTime: [\r\n                  {\r\n                    from: '',\r\n                    to: ''\r\n                  }\r\n                ],\r\n                timePeriodTypeOfDay: \"All Day (24 Hours)\"\r\n              }\r\n            ]\r\n          }\r\n        ];\r\n      }\r\n    },\r\n    timeZone: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    exits: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    steps: '',\r\n    stepId: ''\r\n  }\r\n}",
                "componentTemplate": "<div class=\"rounting-step\">\n  <or-select-expression\n    :disabled=\"readonly\"\n    label=\"Select timezone\"\n    placeholder=\"Select a time zone\"\n    class=\"config-line__select\"\n    has-search\n    onlyMergeField\n    extendable-options\n    :options.sync=\"regions\"\n    v-model=\"displayTimeZone\"\n    :steps=\"steps\"\n    :merge-fields=\"mergeFields\"\n    :step-id=\"stepId\"\n  ></or-select-expression>\n  <or-list v-model=\"routingLegsList\"\n    :readonly=\"readonly\"\n    :new-item-method=\"newRoutingLeg\"\n    :add-button-label=\"'Add new exit'\"\n    :can-remove-last-item=\"false\"\n    @data-change=\"updateExits\"\n    class=\"routing-items-list\"\n    ref=\"routingLegsList\"\n  >\n    <template scope=\"item\">\n      <routing-leg :weekly-list.sync=\"item.item.weeklyList\"\n        :specific-dates-list.sync=\"item.item.specificDatesList\"\n        :routing-leg-label.sync=\"item.item.routingLegLabel\"\n        :readonly=\"item.readonly\"></routing-leg>\n    </template>\n    <div slot=\"footer\" class=\"routing-items-list-footer\">\n      <div class=\"help-text\">\n        You can add dynamic exits for creating more flexible solutions and schedules.\n      </div>\n      <or-button :disabled=\"readonly\"\n        class=\"add-routing-item\"\n        color=\"primary\"\n        @click.stop.prevent=\"$refs.routingLegsList.addItem\"\n      >\n        <or-icon>trending_flat</or-icon>\n        Add new exit \n      </or-button>\n    </div>\n  </or-list>\n</div>",
                "wildcardTemplates": [
                  {
                    "id": "e5551df1-177e-410b-ad20-29dbcf352ab4",
                    "mode": "html",
                    "title": "weeklyItem",
                    "template": "<div class=\"date-settings\">\r\n  <div class=\"date-settings__content\">\r\n    <or-radio-group v-model=\"weeklyTimePeriodTypeOfDay\"\r\n      name=\"weeklyTimePeriodTypeOfDay\"\r\n      :options=\"timePeriodType\"\r\n      :disabled=\"readonly\"\r\n    ></or-radio-group>\r\n    <div class=\"weekly-day-group\">\r\n      <button :class=\"['btn-group', {'is-active': isWeekBtnActive(day)}, {'is-disabled': readonly}]\" v-for=\"day in getWeekDays\"\r\n        :disabled=\"readonly\"\r\n        @click=\"toggleWeeklyDays(day)\">\r\n        {{day.label}}\r\n      </button>\r\n    </div>\r\n    <div v-if=\"weeklyTimePeriodTypeOfDay === 'Specific Time'\" class=\"time-selector-group\">\r\n      <div class=\"time-selector\" v-for=\"(item, index) in periodOfTime\" :key=\"index\">\r\n        <or-textbox v-model=\"item.from\"\r\n          placeholder=\"00:00\" \r\n          :readonly=\"readonly\"\r\n        ></or-textbox>\r\n        <or-textbox v-model=\"item.to\"\r\n          placeholder=\"00:00\" \r\n          :readonly=\"readonly\"\r\n        ></or-textbox>\r\n        <button v-if=\"periodOfTime.length > 1 && !readonly\" class=\"button-link button-delete\" @click=\"deletePeriodOfTime(index)\" :disabled=\"readonly\"><or-icon>clear</or-icon></button>\r\n      </div>\r\n      <button v-if=\"!readonly\" class=\"button-link\" @click=\"addPeriodOfTime\" :disabled=\"readonly\">+ set time</button>\r\n    </div>  \r\n  </div>\r\n</div>",
                    "variable": "weeklyItem"
                  },
                  {
                    "id": "0be19974-8725-4a0c-b775-0a47f97e47e8",
                    "mode": "html",
                    "title": "specificDatesItem",
                    "template": "<div class=\"date-settings\">\r\n  <div class=\"date-settings__content\">\r\n    <or-radio-group v-model=\"timePeriodTypeOfDay\"\r\n      name=\"timePeriodTypeOfDay\"\r\n      :options=\"timePeriodType\"\r\n      :disabled=\"readonly\"\r\n    ></or-radio-group>\r\n    <div class=\"calendar-section\">\r\n      <or-datepicker v-model=\"startDate\"\r\n        label=\"From\"\r\n        :disabled=\"readonly\"\r\n        icon=\"events\"\r\n        class=\"calendar-picker\"\r\n        iconPosition=\"right\"\r\n        placeholder=\"Select date\"\r\n        :custom-formatter=\"formatDate\"\r\n        ref=\"startDate\"\r\n      ></or-datepicker>\r\n      <or-datepicker v-model=\"endDate\"\r\n        label=\"To\"\r\n        :disabled=\"readonly\"\r\n        class=\"calendar-picker\"\r\n        icon=\"events\"\r\n        iconPosition=\"right\"\r\n        placeholder=\"Select date\"\r\n        :custom-formatter=\"formatDate\"\r\n      ></or-datepicker>\r\n    </div>\r\n    <div v-if=\"timePeriodTypeOfDay === 'Specific Time'\" class=\"time-selector-group\">\r\n      <div class=\"time-selector\" v-for=\"(item, index) in periodOfTime\" :key=\"index\">\r\n        <or-textbox v-model=\"item.from\"\r\n          placeholder=\"00:00\" \r\n          :readonly=\"readonly\"\r\n        ></or-textbox>\r\n        <or-textbox v-model=\"item.to\"\r\n          placeholder=\"00:00\" \r\n          :readonly=\"readonly\"\r\n        ></or-textbox>\r\n        <button v-if=\"periodOfTime.length > 1 && !readonly\" class=\"button-link button-delete\" @click=\"deletePeriodOfTime(index)\" :disabled=\"readonly\"><or-icon>clear</or-icon></button>\r\n      </div>\r\n      <button v-if=\"!readonly\" class=\"button-link\" @click=\"addPeriodOfTime\" :disabled=\"readonly\">+ set time</button>\r\n    </div>  \r\n  </div>\r\n</div>",
                    "variable": "specificDatesItem"
                  },
                  {
                    "id": "b6a45649-ea8c-41e7-ba33-bfa93ee5a3bc",
                    "mode": "html",
                    "title": "routingLegItem",
                    "template": "<or-collapsible :title=\"collapsibleItemLabel\" open>\r\n<div class=\"rounting-item\">\r\n  <or-textbox v-model=\"routingLegLabelLocal\" \r\n    label=\"Exit name\"\r\n    placeholder=\"Enter a name of a scheduled time frame\"\r\n    class=\"routing-leg-label\"\r\n    :readonly=\"readonly\"\r\n  ></or-textbox>\r\n  <div class=\"rounting-item__date-settings\">\r\n    <h4 class=\"date-setting__label\" v-if=\"weeklyListLocal.length\">Weekly:</h4>\r\n    <or-list v-model=\"weeklyListLocal\" \r\n      :readonly=\"readonly\"\r\n      :new-item-method=\"newWeeklyListItem\"\r\n      :add-button-label=\"'Add weekly dimension'\"\r\n      class=\"date-settings-list\"\r\n    >\r\n      <template scope=\"item\">\r\n        <weekly-item :weekly.sync=\"item.item\"\r\n          :readonly=\"item.readonly\"\r\n        ></weekly-item>\r\n      </template>\r\n    </or-list>\r\n    <h4 class=\"date-setting__label\" v-if=\"specificDatesListLocal.length\">Time Period:</h4>\r\n    <or-list v-model=\"specificDatesListLocal\"\r\n      :readonly=\"readonly\"\r\n      :new-item-method=\"newSpecificDatesListItem\"\r\n      :add-button-label=\"'Add specific date'\"\r\n      class=\"date-settings-list\"\r\n      ref=\"specDatesList\"\r\n    >\r\n      <template scope=\"item\">\r\n        <specific-dates-item :specific-dates.sync=\"item.item\"\r\n          :readonly=\"item.readonly\"\r\n        ></specific-dates-item>\r\n      </template>\r\n    </or-list>\r\n  </div>\r\n</div>\r\n</or-collapsible>",
                    "variable": "routingLegItem"
                  }
                ],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".extands-class__input-text {\n  font-size: 14px;\n  text-align: left;\n  color: #0f232e;\n}\n\n.extands-class__checkbox-before {\n  background-color: #f7f7f7;\n  border: 1px solid #c7c7c7;\n}\n\n.extands-class__checkbox-after {\n  border-right-color: #132530;\n  border-bottom-color: #132530;\n}\n\n.or-collapsible {\n  min-width: 100%;\n  \n  & > .body-wrapper> .body {\n    padding: 0;\n  }\n}\n\n.button-link {\n  display: flex;\n  align-items: center;\n  height: 24px;\n  border: 0;\n  background: transparent;\n  padding: 0;\n  cursor: pointer;\n  font-size: 14px;\n  color: #64b2da;\n  \n  &:hover {\n    color: #4B99C1;\n  }\n  \n  .ui-icon {\n    font-size: 20px;\n  }\n}\n\n.rounting-step {\n  margin-bottom: 50px;\n}\n\n.routing-items-list {\n  \n  > .or-list-items {\n    width: 100%;\n    \n    > .list-item {\n      position: relative;\n      padding: 0 36px;\n      \n      > .drag_handle,\n      > .remove-button { \n        position: absolute;\n        top: 0;\n        z-index: 59;\n      }\n      \n      > .drag_handle {\n        width: 36px;\n        height: 36px;\n        left: 0;\n        line-height: 36px;\n        text-align: center;\n      }\n      \n      > .remove-button {\n        right: 0;\n      }\n    }\n  }\n  \n  &.single-item {\n    \n    .routing-items-list-footer,\n    > .or-list-items > .list-item {\n      padding: 0; \n    }\n  }\n  \n  .add-routing-item {\n  \theight: 30px;\n  \twidth: 164px;\n  \tmargin: 0 auto;\n  \t\n  \t.ui-icon {\n  \t  font-size: 20px;\n      transform: rotateZ(90deg);\n  \t}\n  }\n}\n\n.rounting-item {\n  width: 100%;\n  \n  &__date-settings {\n    padding: 15px 0 0 10px;\n    border: 1px dashed #DFDFDF;\n    border-top: 0;\n    border-right: 0;\n    \n    .list-item {\n      margin-bottom: 15px;\n      padding-left: 0;\n    }\n  }\n}\n\n.date-settings-list {\n  margin-bottom: 20px;\n}\n\n.date-settings {\n  position: relative;\n  padding-left: 10px;\n  \n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n  \twidth: 3px;\n  \tborder-radius: 1.5px;\n  \tbackground-color: #D8D8D8;\n  }\n}\n\n.weekly-day-group {\n  margin: 20px 0 0 0;\n  \n  .btn-group {\n    position: relative;\n    font-size: 14px;\n    color: #0f232e;\n    width: 45px;\n    height: 25px;\n    border: solid 1px #e7e7e7;\n    background-color: #fbfbfb;\n    padding: 0;\n    text-transform: uppercase;\n    cursor: pointer;\n    z-index: 1;\n    \n    &:not(:first-child) {\n      margin-left: -1px;\n    }\n    \n    &:first-child {\n      border-radius: 3px 0 0 3px;\n    }\n    \n    &:last-child {\n      border-radius: 0 3px 3px 0;\n    }\n    \n    &:hover {\n      color: #59a9d5;\n      border-color: #59a9d5;\n      background-color: #fbfbfb;\n      z-index: 10;\n    }\n    \n    &.is-active {\n      background-color: #59a9d5;\n      border-color: #59a9d5;\n      color: #ffffff;\n      z-index: 10;\n    }\n    \n    &.is-disabled {\n      \n      &:hover {\n        cursor: default;\n        color: #0f232e;\n        border: solid 1px #e7e7e7;\n        background-color: #fbfbfb;\n      }\n    }\n  }\n}\n\n.ui-radio-group__radios {\n  min-height: 0;\n  align-items: flex-start;\n}\n\n.time-selector-group {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-end;\n}\n\n.time-selector {\n  display: flex;\n  position: relative;\n  margin: 15px 25px 0 0;\n  \n  &:before {\n    content: '';\n    position: absolute;\n  \theight: 1px;\n  \twidth: 11px;\n  \tleft: 50%;\n    top: 50%;\n  \tbackground-color: #D8D8D8;\n  \ttransform: translateY(-50%) translateX(-50%);\n  }\n  \n  .button-delete {\n    position: absolute;\n    right: -20px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  \n  .ui-textbox {\n    width: 55px;\n    margin-bottom: 0;\n    \n    &:first-child {\n      margin-right: 24px;\n    }\n    \n    .ui-textbox__content {\n      input {\n        border-radius: 3px;\n        background-color: #fbfbfb;\n        border: solid 1px #e7e7e7;\n        padding: 0 6px;\n        height: 24px;\n        min-height: auto;\n        text-align: center;\n        @extend .extands-class__input-text; \n      } \n    }\n  }\n}\n\n.calendar-section {\n  display: flex;\n  \n  .ui-datepicker {\n    width: 50%;\n    margin: 0;\n    \n    & + .ui-datepicker {\n      \n      .ui-datepicker__icon-wrapper {\n        right: 8px;\n      }\n    }\n    \n    &:first-child {\n      padding-right: 8px;\n    }\n    \n    &:last-child {\n      padding-left: 8px;\n    }\n    \n    .ui-datepicker__display {\n      padding-right: 35px;\n    }\n    \n    .ui-datepicker__icon-wrapper {\n      position: absolute;\n      z-index: 2;\n      bottom: 5px;\n      right: 15px;\n      pointer-events: none;\n    }\n    \n    .ui-datepicker__dropdown-button {\n      display: none;\n    }\n  }\n}\n\n.routing-items-list-footer {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 20px;\n  padding: 0 36px;\n}\n\n.help-text {\n  margin-bottom: 20px;\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "60a27a89-7840-40ee-86d7-453ede28d835",
              "data": {
                "label": "Merge field name",
                "helpText": "Specify the name of the merge field where the step's result will be stored and can be reused later in the flow.",
                "defaultTTL": 86400000,
                "defaultName": "timeRoutingResult",
                "defaultType": "session",
                "placeholder": "Merge field name",
                "defaultValue": "",
                "renderCondition": "",
                "validateRequired": true
              },
              "label": "Merge field",
              "compiled": {},
              "component": "formDataOut"
            }
          ],
          "outputExample": "{\n  nowDate: \"2018-01-04 09:38\",\n  nowDateInMS: 1515051480000\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "2c51f1d3-f35c-4ec0-ab30-d88c4db770b3",
                    "label": "else"
                  }
                ],
                "dataOut": "timeRoutingResult",
                "timeZone": {},
                "routingLegsList": []
              },
              "rawMode": false,
              "version": "9b4e1beb-f57e-4ddf-b683-3fb99b9b38f3",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "52893417-905b-4699-90ae-0f31da08b4ba",
                    "data": {
                      "index": 0
                    },
                    "component": "exitDynamic"
                  },
                  {
                    "id": "3c6a5ecb-473f-4a90-ad91-91b73ba80e62",
                    "data": {
                      "id": "2c51f1d3-f35c-4ec0-ab30-d88c4db770b3",
                      "label": "else"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "const data = step.data;\r\n\r\nconst newData = {\r\n  \"routingLegsList\": [],\r\n  \"timeZone\": {}\r\n};\r\n\r\nnewData.routingLegsList = data.routingLegsList;\r\n\r\nif (data.timeZone.value) {\r\n  newData.timeZone.value = `\\`${data.timeZone.value}\\``;\r\n}\r\n\r\nif (data.timeZone.label) {\r\n  newData.timeZone.label = data.timeZone.label;\r\n}\r\n\r\n\r\n\r\nObject.assign(data, newData);\r\ndelete data;\r\n\r\nconsole.log('migration 0.0.1 -> 1.0.0', step);",
            "version": "1.1.1"
          },
          {
            "sample": null,
            "script": null,
            "version": "1.1.3"
          }
        ],
        "dateModified": 1567692983915
      },
      {
        "id": "d6145e55-1d9d-4321-9830-cecf06189dfa",
        "version": "1.4.7",
        "cacheVersion": "477abc29-3a00-46c0-9556-eb741025f8aa",
        "originalSource": "f0757fd6-b2f0-4fa6-a20a-1b481a95b85a",
        "label": "Change Merge Field Data",
        "icon": "change_data",
        "iconType": "default",
        "iconUrl": "",
        "shape": "square",
        "description": "Step allows to assign a different value and/or change data type of an existing variable stored in a merge field object.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "function getDataout(varName, varType, steps){\n  for(const [key, value] of Object.entries(steps)){\n    if(_.isObject(value.dataOut)){\n      if(_.isEqual(value.dataOut.name, varName.split('.')[0]) && _.isEqual(value.dataOut.type, varType)){\n        return {...value.dataOut, name : varName};\n      }\n    }else{\n      if(_.isEqual(value.dataOut, varName.split('.')[0])){\n        return {name : value.dataOut, type : 'session'};\n      }\n    }\n  }\n  if(!_.find(Object.values(steps), step => step.dataOut && _.isEqual(step.dataOut.name, varName))){\n    return {name : varName, type : varType};\n  }\n}\n\nlet vars = _.map(variables, variable => {\n  if (!variable.variableName.label || variable.variableName.label === '' || variable.variableName.label === ``) throw new Error(\"Property name can't be empty.\");\n\n  return {...getDataout(variable.variableName.label, variable.variableName.type,  this.steps), valueType: variable.valueType, variableValue: variable.variableValue}\n})\n\nawait Promise.each(vars, async item => {\n  const name = item.name.split(/[.||[]+/)[0];\n  const path = item.name.replace(name, \"\").replace(/^\\./, '');\n\n  if (item.valueType === 'string') {\n    await this.mergeFields[name].set(String(item.variableValue), path);\n    \n    \n  } else if (item.valueType === 'number') {\n    if (_.isEmpty(item.variableValue) || _.isEmpty(item.variableValue.trim())) throw new Error(\"Value can't be empty.\");\n    \n    if(!_.isFinite(_.toNumber(item.variableValue))){\n      throw new Error(`Incorrect data type was used for ${item.name}`);\n    }\n    await this.mergeFields[name].set(Number(item.variableValue), path);\n  } else if (item.valueType === 'boolean') {\n    \n    if(!_.isBoolean(item.variableValue)){\n      throw new Error(`Incorrect data type was used for ${item.name}`);\n    }\n    await this.mergeFields[name].set(item.variableValue, path);\n  } else if (item.valueType === 'null') {\n    await this.mergeFields[name].set(null, path);\n  } else {\n    await this.mergeFields[name].set(item.variableValue, path);\n  }\n});\nreturn this.exitStep('next');",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "variables": [],
          "mountedFlag": false,
          "processError": true,
          "changeDataStepErrors": [],
          "additionalMergeFields": [],
          "isInvalidChangeDataStep": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "\nStep allows to assign a different value and/or change data type of an existing variable stored in a merge field object. Multiple variables can change their value via *Add merge field property* button, but at least one must be defined.\n\n### Change merge field data\n\nThe variable is chosen from the dropdown and represents the merge field name of the step or its property name. Any variable can change its value only once during the step execution.\n\nThe new *value* can be defined manually, with *merge field values* or left empty. *String*, *number*, *boolean* and *null* data types are available in the dropdown, as well as an option to declare more advanced types, like objects and arrays, in code mode. The *value* input will be validated in accordance with to the chosen data type.\n\nNote that changing **shared** merge field data is possible via chained flows (e.g. between flows that use Trigger steps), where each flow in the chain has a common `beginningSessionId`. The **global** merge field data can be changed only for steps within the current bot.\n\n### Error handling\n\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. the *value* does not match the selected *data type*).\n\n### Reporting events\n\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n## Release notes\n\nv1.4.7\n- UI validation for non-existent merge fields was added\n- Added opportunity to re-add step back to the working tree without losing previously selected session's merge fields.\n\nv1.0.0\n- Initial release",
        "formBuilder": {
          "stepExits": [
            {
              "id": "8882860d-7c83-4d78-b77d-47d67fdb7b01",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "c3eaf15d-c4c4-4f82-b2c6-a58dcbe5b55d",
              "data": {
                "open": true,
                "header": "Change merge field data",
                "inputs": [
                  {
                    "id": "e468d1ed-daf2-4f68-9ede-5dd1d8a7f2fb",
                    "data": {
                      "data": "{\n  \"variables\": [],\n  \"isInvalidChangeDataStep\": false,\n  \"changeDataStepErrors\": [],\n  \"mountedFlag\": false,\n  \"additionalMergeFields\":[]\n}",
                      "toJson": " function toJson(data, key) { \r\n if (_.isArray(data)) { \r\n    return `[${_.map(data, toJson).join(',')}]`;\r\n    }\r\n    if (_.isObject(data)) {\r\n        return `{${_.map(data, (value, key) => `${_.isEmpty(key) ? `\"\"`: key}: ${toJson(value, key)}`).join(',')}}`;\r\n    }\r\n      if(_.isEqual(key,'variableValue')){\r\n      return data;\r\n    }\r\n    return JSON.stringify(data);\r\n}\r\n \r\nreturn _.mapValues(data, toJson);",
                      "validators": "variables : {\n  $each: {\n    variableName: {\n      custom (value, ctx) {\n        return _.chain(mergeFields).reduce((acc, item) => acc.concat(item.variables), []).some(['variableName', value.label]).value();\n      }\n    }\n  },\n  custom (value, ctx) {\n    let steps = _.filter(this.steps, step => !_.isEqual(step.type, \"empty\"));\n    \n    let dataOuts = _.map(steps, step => _.isObject(step.data.dataOut) ?  step.data.dataOut : {name:step.data.dataOut, type : 'session'});\n    \n    if(_.get(ctx, 'additionalMergeFields[0].variables') && _.get(ctx, 'additionalMergeFields[1].variables')){\n      dataOuts = [...dataOuts, ...(_.get(ctx, 'additionalMergeFields[0].variables')), ...(_.get(ctx, 'additionalMergeFields[1].variables'))]\n    }\n    \n    let res = true;\n    \n    for (let i = 0; i <= value.length - 1; i++) {\n      if (_.isEmpty(_.trim(value[i].variableName.label))) {\n        this.schema.isInvalidChangeDataStep = true;\n        res = false;\n      } else {\n        for (let j = i + 1; j <= value.length - 1; j++) {\n          if (value[i].variableName.label === value[j].variableName.label && value[i].variableName.type === value[j].variableName.type) {\n            this.schema.isInvalidChangeDataStep = true;\n             res = false;\n          }\n        }\n      }\n      \n      let containsMergeField = _.isString(value[i].variableValue) && validators.validateExpression(value[i].variableValue);\n      \n      if(\n        (value[i].valueType === 'number' && !value[i].variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/) || \n        value[i].valueType === 'number' && !(value[i].variableValue.slice(1,-1) && !_.isEmpty(value[i].variableValue.slice(1,-1)) && (containsMergeField || _.isFinite(_.toNumber(value[i].variableValue.slice(1,-1))))) ||\n        value[i].valueType === 'code' && !validators.jsExpression(value[i].variableValue)) && !/await|this/.test(value[i].variableValue)\n      ){\n        this.schema.isInvalidChangeDataStep = true;\n        res = false;\n      }\n    }\n    \n    this.schema.isInvalidChangeDataStep = false;\n    \n    return res;\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard v-model=\"schema.variables\"  :additionalMergeFields.sync=\"schema.additionalMergeFields\" :mounted-flag.sync=\"schema.mountedFlag\"   :schema=\"schema\"     :is-invalid-change-data-step.sync=\"schema.isInvalidChangeDataStep\" :change-data-step-errors.sync=\"schema.changeDataStepErrors\" :steps.sync=\"steps\" :isNew=\"isNew\"   :stepId=\"stepId\" :merge-fields=\"mergeFields\"   :v=\"$v\"   :readonly=\"readonly\" ></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xyzoafgblsvcirwjnqekpmthud",
                      "componentLogic": "{\n  components: {\n    variableItem: {\n      props: {\n        variableName: {\n          type: String,\n          default: ''\n        },\n        variableValue: {\n          default: ''\n        },\n        valueType: {\n          type: String,\n          default: 'string'\n        },\n        variables: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        isNew:{\n          type: Boolean,\n          default: false\n        },\n        steps: '',\n        stepId: '',\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        readonly: {\n          type: Boolean,\n          default: false\n        }\n      },\n      \n      computed: {\n        invalidValue(){\n          const invalid = (this.valueTypeLocal === 'number' && !this.isValidNumber) || \n            (this.valueTypeLocal === 'code' && !validators.jsExpression(this.variableValueLocal)) ||\n            (this.valueTypeLocal === 'code' && this.variableValueLocal === '')\n            \n          if (invalid) {\n            this.valueErrorText = this.valueTypeLocal === 'number' \n              ? 'Invalid number.' \n              : 'Please enter a valid JS expression.';\n          }\n          \n          if (this.valueTypeLocal === 'number') {\n            this.checkNumber()\n          }\n          \n          return invalid\n        },\n        \n        isValidNumber(){\n          const checked =  this.checkNumber();\n          \n          let containsMergeField = validators.validateExpression(this.variableValue);\n          \n          return checked || _.isFunction(this.variableValue.slice) && \n            (this.variableValue.slice(1,-1) && !_.isEmpty(this.variableValue.slice(1,-1)) && (_.isFinite(_.toNumber(this.variableValue.slice(1,-1))) || containsMergeField) && \n            this.variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/));\n        },\n        \n        isNull () {\n          return this.valueTypeLocal === 'null';\n        },\n        \n        variableNameLocal: {\n          get() {\n            return this.variableName || ''\n          },\n          \n          set(newValue) {\n            this.$emit('update:variableName', newValue);\n            if (this.$parent.$parent.mountedFlag) {\n              this.validateVariableName(newValue || '');\n            }\n          }\n        },\n        \n        variableValueLocal: {\n          get() {\n            return this.variableValue || '';\n          },\n          set(newValue) {\n            this.$emit('update:variableValue', newValue);\n            this.$nextTick(() => this.validateVariableValue(newValue));\n          }\n        },\n        \n        valueTypeLocal: {\n          get() {\n            return this.valueType;\n          },\n          \n          set(newValue) {\n            if (newValue === 'string' || newValue === 'number') {\n              this.variableValueLocal = '``'\n            } else if (newValue === 'boolean') {\n              this.variableValueLocal =  _.isBoolean(this.variableValueLocal) ? this.variableValueLocal : true;\n            } else if (newValue === 'null') {\n              this.variableValueLocal = '`null`';\n            } else if (newValue === 'code') {\n              this.variableValueLocal = ''\n            }\n            \n            this.$emit('update:valueType', newValue);\n            \n            this.$nextTick(() => this.validateVariableValue(this.variableValueLocal, newValue));\n          }\n        }\n      },\n  \n      data () {\n        return {\n          variableTypeOptions: ['string', 'number', 'boolean', 'null', 'code'],\n          isInvalidVariableName: false,\n          isInvalidVariableValue: false,\n          errorText: 'Property name is required.',\n          valueErrorText: 'Value is required.',\n          isTextInput: true,\n          variableSelectOptions: []\n        }\n      },\n      \n      watch: {\n        variables(v) {\n          this.$root.$emit('validateVariable');\n        }\n      },\n      \n      methods: {\n        checkNumber () {\n          if (/await|this/.test(this.variableValue)) return true\n          \n          this.valueErrorText =  _.isFunction(this.variableValue.slice) && this.variableValue.slice(1,-1).trim() === '' ? 'Value is required.' : 'Invalid number'\n          \n          if (_.isFunction(this.variableValue.slice) && /^\\s+$/.test(this.variableValue.slice(1,-1))) {\n            this.valueErrorText = 'Value is required.'\n          }\n          \n          return false\n        },\n        \n        afterHandleTypeChange (type) {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              const showText = _.get(this, '$refs.variableValueInput.showText')\n              if (type === 'code' || (type !== 'code' && !showText)) {\n                this.toggleInputMode()\n              }\n              resolve()\n            }, 100) \n          })\n        },\n        \n        async handleTypeChange (type) {\n          this.valueTypeLocal = type\n          \n          if (type === 'number') this.checkNumber()\n          \n          await this.afterHandleTypeChange()\n        },\n        \n        validateVariableName (varName, isFromEmit = false) {\n          this.isInvalidVariableName = false;\n          \n          if (_.isEmpty(_.trim(varName.label))) {\n            this.errorText = 'Property name is required.';\n            this.isInvalidVariableName = true;\n          } else {\n            let variables = _.clone(this.variables);\n            let duplicates = _.filter(variables, elem => _.isEqual(elem.variableName.type, varName.type)).map(item => item.variableName.label)\n                                    .filter((item, index, arr) => arr.lastIndexOf(item) == index && arr.indexOf(item)!= index);\n\n            if (duplicates.indexOf(varName.label) > -1) {\n              this.errorText = 'Choose another property name.';\n              this.isInvalidVariableName = true;\n            }\n          }\n          \n          if (!_.isEmpty(_.trim(varName.label)) && ! _.chain(this.mergeFields).reduce((acc, item) => acc.concat(item.variables), []).some(['variableName', varName.label]).value()) {\n              this.errorText = `Selected value isn't available.`;\n              this.isInvalidVariableName = true;\n            }\n          \n          if(!isFromEmit) this.$root.$emit('validateVariable', this._uid);\n        },\n        \n        populateSelect() {\n          const findType = (variables, label) => {\n            const item = variables.find(item => item.stepLabel === label && item.type)\n            \n            return _.get(item, 'type', null)\n          }\n          \n          this.variableSelectOptions = this.mergeFields.reduce((acc, fields) => {\n            \n            const variables = fields.variables\n            \n            if (variables.length > 0) {\n              acc.push({\n                groupLabel: _.get(fields, 'variables[0].type'),\n                items: variables.reduce((acc2, variable) => {\n                  if (variable && !/.+\\.$/.test(variable.variableName)) {\n                    acc2.push({\n                      label: variable.variableName,\n                      value: {\n                        label: variable.variableName, \n                        type: variable.type || findType(variables, variable.stepLabel),\n                      }\n                    })\n                  }\n                  return acc2;\n                }, [])\n              })\n            }\n            return acc\n          }, [])\n        },\n        \n        validateVariableValue (value, valueType) {\n          if (this.isInvalidVariableValue) this.isInvalidVariableValue = false;\n          let type = valueType ? valueType : this.valueType;\n          \n          if (type === 'number' && !this.$refs.variableValueInput.mergeFieldInUse) {\n            const isNumber =_.isFinite(_.toNumber(value.slice(1,-1)));\n            if (!_.trim(value.slice(1,-1)).length) {\n              this.valueErrorText = 'Value is required.';\n              this.isInvalidVariableValue = true;\n              return false;\n            } else if (!isNumber) {\n              this.valueErrorText = 'Invalid number';\n              this.isInvalidVariableValue = true;\n              return false;\n            }\n          }\n          \n          if (!validators.jsExpression(value)) {\n            this.valueErrorText = 'Please enter a valid JavaScript expression.'\n            this.isInvalidVariableValue = true;\n            return false;\n          }\n\n          return true;\n        },\n        toggleInputMode () {\n          if(_.get(this, '$refs.variableValueInput.toggleMode')) this.$refs.variableValueInput.toggleMode()\n        }\n      },\n      \n      created () {\n        this.$emit(\"update:additionalMergeFields\", this.mergeFields);\n      },\n      \n      mounted () {\n        this.populateSelect();\n        \n        if(!this.isNew && _.isEmpty(this.variableName)){\n          this.valueErrorText = 'Value is required.';\n          this.isInvalidVariableName = true;\n        }\n        \n        \n        if (this.valueType === 'code') {\n          this.toggleInputMode()\n        }\n        \n        if (this.valueType === 'string' && this.variableValueLocal === '') {\n          this.variableValueLocal = '``'\n        }\n        \n        if (this.valueType === 'number') {\n          this.checkNumber()\n        }\n        \n        this.$root.$on('validateVariable', itemId => {\n          if (itemId !== this._uid) this.validateVariableName(this.variableName, true);\n        });\n        \n        if (this.$refs.variableValueInput) this.isTextInput = this.$refs.variableValueInput.displayTextInput;\n        \n        if (this.$parent.$parent.mountedFlag) {\n          this.validateVariableName(this.variableName || '');\n        } else {\n          this.$parent.$parent.$emit('update:mountedFlag', true);\n        }\n      },\n      \n      template: `<%= variableItem %>`\n    }\n  },\n  \n  watch: {\n    variables: {\n      handler (newValue) {\n        const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n        \n        if(currentIndexStep !== -1) {\n          const outputExample = {};\n          _.forEach(newValue, item => {\n            _.set(outputExample, `${item.variableName.name}`, item.variableValue);\n          });\n          this.steps[currentIndexStep]['outputExample'] = outputExample;\n        }\n        this.$emit('input', newValue);\n        \n        this.isSharedOrGlobal()\n      },\n      deep: true\n    }\n  },\n    \n  created () {\n    this.populateSelect()\n\n    this.isSharedOrGlobal()\n  },\n  \n  async mounted () {\n    await this.$nextTick();\n    if (!_.isArray(this.value) || this.value.length === 0) this.$refs.variablesOrList.addItem();\n  },\n  \n  updated () {\n\t  this.isSharedOrGlobal()\n\t},\n \n  data () {\n    return {\n      variables: this.value,\n      newVariable () {\n        return {\n          variableName: '',\n          variableValue: '',\n          valueType: 'string'\n        };\n      },\n      isSharedOrGlobalMergeFieldSelected: false\n    }  \n  },\n  \n  methods: {\n    isSharedOrGlobal () {\n      const arrOfVariableSelectOptions = this.variableSelectOptions.reduce((acc, item) => [...acc, ...item.items], [])\n      \n      this.isSharedOrGlobalMergeFieldSelected = this.variables.some(item =>\n  \t   // _.get(item, 'variableName.type') === 'shared' || \n  \t   // _.get(item, 'variableName.type') === 'global' ||\n  \t    _.get(_.find(arrOfVariableSelectOptions, ['label', _.get(item, 'variableName.label')]), 'value.type') === 'shared' ||\n  \t    _.get(_.find(arrOfVariableSelectOptions, ['label', _.get(item, 'variableName.label')]), 'value.type') === 'global' \n  \t  )\n    },\n    \n    populateSelect() {\n      const findType = (variables, label) => {\n      const item = variables.find(item => item.stepLabel === label && item.type)\n        return _.get(item, 'type', null)\n      }\n      \n      this.variableSelectOptions = this.mergeFields.reduce((acc, fields, i) => {\n        const variables = fields.variables;\n        \n        if (variables.length > 0) {\n          acc.push({\n            groupLabel: _.get(fields, 'variables[0].type'),\n            items: variables.reduce((acc2, variable) => {\n              if (variable && !/.+\\.$/.test(variable.variableName)) {\n                acc2.push({\n                  label: variable.variableName,\n                  value: {\n                    label: variable.variableName,\n                    type: variable.type || findType(variables, variable.stepLabel),\n                  }\n                })\n              }\n              return acc2;\n            }, [])\n          });\n        }\n      \n        return acc;\n      }, []);\n      \n      // this.checkSettedMergeFieldExistance()\n    },\n    \n    // checkSettedMergeFieldExistance () {\n    //   const items = _.get(this, 'variables')\n    //   let varsOptions = _.get(this, 'variableSelectOptions')\n    //   varsOptions = varsOptions.reduce((acc, item) => [...acc, ...item.items], [])\n      \n    //   if (items && varsOptions) {\n    //     const _variables = items.reduce((acc, item) => {\n    //       if (\n    //           varsOptions.find(field => {\n    //             return (\n    //               _.get(field, 'label') ===\n    //               _.get(item, 'variableName.label', '')\n    //             )\n    //           })\n    //       ) {\n    //           acc.push(item);\n    //       } else {\n    //         const _item = _.cloneDeep(item)\n    //         // _item.variableName = ''\n    //         acc.push(_item);\n    //       }\n    //       return acc;\n    //   }, []);\n      \n    //   this.variables = _variables;\n    //   }\n    // }\n  },\n  \n  props: {\n    value: {\n      type: Array\n    },\n    additionalMergeFields:{\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    schema: ()=>{},\n    mountedFlag: {\n      type: Boolean,\n      default: false\n    },\n    v: {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            variables: [],\n            additionalMergeFields:[]\n          }\n        }\n      }\n    },\n    isInvalidChangeDataStep: {\n      type: Boolean,\n      default: false\n    },\n    changeDataStepErrors: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    steps: '',\n    stepId: '',\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    isNew:{\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  \n  computed: {\n    changeDataStepErrorsLocal: {\n      get() {\n        return this.changeDataStepErrors;\n      },\n      set(newValue) {\n        this.$emit('update:changeDataStepErrors', newValue);\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-alert \n  :dismissible=\"false\"\n  type=\"warning\" \n  v-show=\"isSharedOrGlobalMergeFieldSelected\"\n>\n  How to work with shared or global merge field data is described in the step help.\n</or-alert>\n<div v-if=\"!variables.length\" class=\"empty-list\">Your variables list is empty.</div>\n<or-list\n  v-model=\"variables\" \n  ref=\"variablesOrList\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\"\n  :new-item-method=\"newVariable\"\n  :add-button-label=\"'Add merge field property'\"\n  :can-remove-last-item=\"false\"\n  class=\"variables-list\"\n>\n  <template scope=\"item\">\n    <variable-item \n      :variable-name.sync=\"item.item.variableName\"\n      :variable-value.sync=\"item.item.variableValue\"\n      :value-type.sync=\"item.item.valueType\"\n      :variables=\"variables\"\n      :isNew=\"isNew\"\n      :steps=\"item.steps\" \n      :step-id=\"item.stepId\"\n      :merge-fields=\"mergeFields\"\n      :readonly=\"item.readonly\"\n    ></variable-item>\n  </template>\n</or-list>",
                      "wildcardTemplates": [
                        {
                          "id": "263b21ef-fe09-4dd3-bf91-a2bfa7d8000d",
                          "mode": "html",
                          "title": "Variable Item",
                          "template": "  <div class=\"variable\">\n  <div class=\"variable__name\">\n    <or-select \n      style=\"color: red\"\n      has-search\n      label=\"Property name\"\n      placeholder=\"Choose name\"\n      :disabled=\"readonly\"\n      v-model=\"variableNameLocal\"\n      :multiple =\"false\"\n      :options =\"variableSelectOptions\"\n      :error=\"errorText\"\n      :invalid=\"isInvalidVariableName\"\n      :steps=\"steps\" \n      :step-id=\"stepId\"\n      :has-groups=\"true\"\n      :merge-fields=\"mergeFields\"\n    ></or-select>\n  </div>\n  <div class=\"variable__value\">\n    <div class=\"select-wrapper\">\n      <div class=\"select-label\">Value</div>\n        <or-select\n        ref=\"valueTypeSelect\"\n        label=\"\"\n        :disabled=\"readonly\"\n        :class=\"[{ valueTypeSelect : valueTypeLocal === 'code' }]\"\n        :options=\"variableTypeOptions\"\n        v-model=\"valueTypeLocal\"\n        @change=\"handleTypeChange\"\n      ></or-select>\n    </div>\n    <or-text-expression v-if=\"valueTypeLocal !== 'boolean'\"\n      v-model=\"variableValueLocal\"\n      ref=\"variableValueInput\"\n      :readonly=\"readonly || isNull\"\n      label=\"\"\n      :error=\"valueErrorText\"\n      :invalid=\"invalidValue\"\n      placeholder=\"Enter value\"\n      :steps=\"steps\" \n      :step-id=\"stepId\"\n      :merge-fields=\"mergeFields\"\n    ></or-text-expression>\n    <or-radio-group v-else\n      name=\"Value bool radio\"\n      :disabled=\"readonly\"\n      :options=\"[true, false]\"\n      v-model=\"variableValueLocal\"\n    >\n    </or-radio-group>\n    <span \n      class=\"value-type-helper\"\n      v-if=\"this.valueType === 'number'\"\n    >Value should match the selected data type.\n    </span>\n  </div>\n</div>",
                          "variable": "variableItem"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.ui-button {\n  margin-left: 10px;\n}\n\n.variables-list {\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  \n  .or-list-items {\n    width: 100%;\n    margin-bottom: 15px;\n  }\n  \n  > button.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  \theight: 30px;\n  \tmargin: 30px auto 0;\n  \tborder-radius: 6px;\n  \tbackground-color: #64B2DA;\n  \tcolor: #FFFFFF;\n  \tfont-size: 14px;\n  \tline-height: 14px;\n  }  \n  \n  &.or-list {\n    \n    .list-item {\n      position: relative;\n      margin-right: -25px;\n      padding: 0 25px 0 0;\n      //padding: 0 36px 0 0;\n      \n      > .remove-button {\n      \tposition: absolute;\n        right: 0;\n        top: 36px;\n        width: 1.5rem;\n      }\n      \n      .handle,\n      .sortable-handle {\n        // display: none;\n        margin-top: 42px;\n        align-self: flex-start;\n      }\n    }\n    \n    &.single-item {\n      \n      .list-item {\n        padding-left: 0;\n      }\n    }\n  }\n}\n\n// .variable__name .ui-select__content .ui-select__display-value {\n//   overflow: hidden;\n//   text-overflow: ellipsis;\n//   white-space: nowrap;\n//   width: 1px;\n// }\n\n.variables-list .variable {\n  width: 100%;\n  display: flex;\n  \n  &__name {\n    width: 50%;\n    padding-right: 21px;\n\n    .ui-select {\n      &__dropdown {\n        top: 100%;\n        left: 0;\n        width: 100%;\n        min-width: auto;\n      }\n      \n      &__content {\n        width: 100%;\n        \n        .ui-select__label .ui-select{ \n          &__display {\n            display: flex;\n            justify-content: space-between;\n            padding: 2px 0px 2px 10px;\n            \n            &-value {\n              overflow: hidden;\n              text-overflow: ellipsis;\n              white-space: nowrap;\n              width: 1px;\n            }\n          }\n          \n          &__dropdown-button {\n            right: 0;\n          }\n        }\n      }\n \n      &.is-invalid .ui-select__feedback {\n        &-text {\n          visibility: visible;\n        }\n      }\n    }\n  }\n  \n  &__value {\n      width: 50%;\n    \n    .input-wrapper {\n      position: relative;\n      display: flex;\n      \n      &:after {\n        content: '=';\n        position: absolute;\n        top: 18px;\n        left: -15px;\n        color: #0F232E;\n        font-size: 14px;\n        transform: translateY(-50%);\n      }\n      \n      .or-editable-wrapper {\n        display: flex;\n        width: 1px;\n        flex-grow: 1;\n        \n        .placeholder {\n          position: absolute;\n          margin-top: 0;\n        }\n        \n        .merge-tag input {\n          // text-overflow: ellipsis;\n        }\n      }\n      \n      .or-code {\n        width: 100%;\n      }\n    }\n    \n    .error-text {\n      margin-top: 4px;\n    }\n    \n    .ui-select {\n      &__dropdown {\n        top: 100%;\n        right: 0;\n        width: auto;\n        min-width: auto;\n      }\n      \n      &__options {\n        min-width: auto;\n      }\n    }\n    \n    .ui-select,\n    .or-text-expression {\n      margin-bottom: 0;  \n    }\n    \n    .or-text-expression.invalid .or-code .ace-wrapper {\n      border-color: #f95d5d;\n    }\n    \n    .ui-select__label {\n    \tdisplay: flex;\n    \tjustify-content: space-between;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n    }\n    \n    .ui-select__display-value {\n      flex-grow: 0;\n    }\n\n    .ui-select .ui-select__content .ui-select__label .ui-select__label-text {\n      white-space: nowrap;\n      font-size: 14px;\n    }\n    \n    .ui-select.has-label .ui-select__dropdown-button {\n      top: 0px;\n      font-size: 20px;\n      margin-top: 2px;\n    }\n    \n    .ui-radio-group {\n      &__label-text {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        font-size: 12px;\n        line-height: 36px;\n        color: rgb(145, 150, 157);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      \n      &__radio {\n        &:not(:first-child) {\n          margin-left: 10px;\n        }\n      }\n      \n      &__radios {\n        position: relative;\n        \n        &:after {\n          content: '=';\n          position: absolute;\n          top: 18px;\n          left: -15px;\n          color: #0F232E;\n          font-size: 14px;\n          transform: translateY(-50%);\n        }\n      }\n      \n      &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n      &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n        color: #91969d;\n      }\n    }\n    \n    .ui-radio .ui-radio__label-text {\n      font-size: 14px;\n      line-height: 24px;\n    }\n    \n    .ui-radio-group__radios {\n      display: flex;\n      justify-content: left;\n      height: 36px;\n      font-size: 14px;\n      border-radius: 3px;\n      padding: 7px 10px;\n      background: #f6f6f6;\n    }\n  }\n}\n\n.value-type-helper {\n  display: block;\n  color: rgba(0,0,0,.38);\n  line-height: 1.2;\n  font-size: 12px;\n}\n\n.or-text-expression {\n  position: relative;\n  flex-grow: 1;\n  min-width: 50%;\n  .ui-icon-button.ui-icon-button--type-secondary.ui-icon-button--color-default.ui-icon-button--size-normal.flat.js-mode-btn.active{\n    top:2px;\n    right:26px;\n  }\n  \n  .or-editable-wrapper .placeholder {\n    margin-top:0px;\n    position:absolute;\n  }\n  .or-code{\n    display: flex;\n    flex-grow: 1;\n    width: 0px;\n  }\n  \n  & >.header {\n    position: absolute;\n    height: 36px;\n    width: 100%;\n    min-height: 0;\n    top: -36px;\n    & >button.ui-icon-button.flat.add-variable {\n      visibility: visible;\n      position: absolute;\n      top: 38px;\n      right: 0;\n      z-index: 2;\n    }\n  }\n  \n  .input-wrapper {\n    width: 100%;\n  }\n\n  .js-mode-btn {\n    visibility: hidden;\n    position: absolute;\n    top: -2px;\n    right: 75px;\n    z-index: 2;\n  }\n\n \n\n  .editable {\n      width: calc(100% - 36px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n  .ace_scroller {\n      width: calc(100% - 77px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n}\n\n.select-label {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    min-width: 16px;\n    color: rgba(0, 0, 0, 0.54);\n    font-size: 12px;\n    line-height: 36px;\n    transform-origin: left;\n    transition: color .1s ease,transform .2s ease;\n}\n.select-wrapper {\n  display: flex;\n  justify-content: space-between;\n  .ui-select.ui-select--type-basic.ui-select--icon-position-left{\n    margin-left: 28px;\n  }\n  .ui-select__display-value, .ui-select__dropdown-button{\n      color: #64b2da !important;\n  }\n  .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n      z-index:3;\n    }\n}\n\n.valueTypeSelect {\n  margin-right: 30px;\n}\n\n.js-mode-btn {\n  display: none;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            }
          ],
          "outputExample": null,
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "variables": [],
                "mountedFlag": false,
                "changeDataStepErrors": [],
                "isInvalidChangeDataStep": false
              },
              "rawMode": false,
              "version": "aae945b3-dca9-4711-8464-7da9e44b06cc",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "8882860d-7c83-4d78-b77d-47d67fdb7b01",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "script": "",
            "version": "1.4.7"
          }
        ],
        "dateModified": 1658924261381
      },
      {
        "id": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
        "version": "1.0.2",
        "cacheVersion": "30bf2826-8a33-4a64-92fc-a34bb755abaf",
        "label": "Create Log Entry",
        "icon": "log",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "This step allows to add info, warning or error messages to the logs.",
        "isGatewayStep": false,
        "publishedBy": "OneReach",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "const message = logMessage || '';\nconst data = logData || ``;\n\nif(message || data) {\n  if(data){\n    this.log[logType.value](message, data);\n  } else {\n    this.log[logType.value](message);\n  }\n}\n\nreturn this.exitStep('next');\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next"
            }
          ],
          "logData": "{}",
          "logType": {
            "label": "Info (plain)",
            "value": "info"
          },
          "logMessage": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "This step allows to add info, warning or error messages to the logs, which can be helpful in debugging and troubleshooting.\n\nSpecific type of message can be chosen from drop down menu.\n\nMessage and Data fields are optional and can be filled in with any text, including information collected via the merge fields.\nAt least one of the optional fields should be specified in order to create a new log message.\n\n**Reporting Events**\nDefault reporting events for the step is Step. Once step executed, each event collects specific data, which can be used in reports. Flow composer is able to specify tags for each event. Tag acts as a marker for the event it’s specified for. Those markers allow to build more extended reports.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "47d0d7d2-be10-4a6e-a1a5-243369c78c9b",
              "data": {
                "id": "next",
                "label": "next"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "cfe8b394-da37-4306-9a6e-8166779fdae0",
              "data": {
                "data": "{\n  \"logType\": {\"value\": \"info\", \"label\": \"Info (plain)\" }\n}",
                "toJson": "//function that describe how to serialize wildcard data\n function toJson(data) {\n if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<or-wildcard-oiuvmhsxnpzwarbt    :readonly=\"readonly\"   :steps=\"steps\"   v-model=\"schema.logType\"   :step-id=\"stepId\"   :v=\"$v\" ></or-wildcard-oiuvmhsxnpzwarbt>",
                "componentName": "or-wildcard-oiuvmhsxnpzwarbt",
                "componentLogic": "{\n  data() {\n    return {\n      logTypeList: [\n        {\"value\": \"info\", \"label\": \"Info (plain)\", \"class\": \"info\"},\n        {\"value\": \"warn\", \"label\": \"Warning\", \"class\": \"warn\"},\n        {\"value\": \"error\", \"label\": \"Error\", \"class\": \"error\"}\n      ],\n      logType: this.value\n    }\n  },\n\n watch: {\n   logType (newValue) {\n     this.$emit('input', newValue);\n   }\n },\n\n  components : {\n    'logsList' : Vue.component('ui-select').extend({\n      render : Vue.compile(`<div class=\"ui-select\" :class=\"classes\">\n              <input\n                  class=\"ui-select__hidden-input\"\n                  type=\"hidden\"\n\n                  :name=\"name\"\n                  :value=\"submittedValue\"\n\n                  v-if=\"name\"\n              >\n\n              <div class=\"ui-select__icon-wrapper\" v-if=\"icon || $slots.icon\">\n                  <slot name=\"icon\">\n                      <ui-icon :icon=\"icon\"></ui-icon>\n                  </slot>\n              </div>\n\n              <div class=\"ui-select__content\">\n                  <div\n                      class=\"ui-select__label\"\n                      ref=\"label\"\n\n                      :tabindex=\"disabled ? null : '0'\"\n\n                      @click=\"toggleDropdown\"\n                      @focus=\"onFocus\"\n                      @keydown.enter.prevent=\"openDropdown\"\n                      @keydown.space.prevent=\"openDropdown\"\n                      @keydown.tab=\"onBlur\"\n                  >\n                      <div\n                          class=\"ui-select__label-text\"\n                          :class=\"labelClasses\"\n                          v-if=\"label || $slots.default\"\n                      >\n                          <slot>{{ label }}</slot>\n                      </div>\n\n                      <div class=\"ui-select__display\">\n                          <div\n                              class=\"ui-select__display-value\"\n                              :class=\"{ 'is-placeholder': !hasDisplayText }\"\n                          >\n                              {{ hasDisplayText ? displayText : (hasFloatingLabel && isLabelInline) ? null : placeholder }}\n                          </div>\n\n                          <ui-icon class=\"ui-select__dropdown-button\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6.984 9.984h10.03L12 15z\"/></svg>\n                          </ui-icon>\n                      </div>\n\n                      <transition name=\"ui-select--transition-fade\">\n                          <div\n                              class=\"ui-select__dropdown\"\n                              ref=\"dropdown\"\n                              tabindex=\"-1\"\n\n                              @keydown.down.prevent=\"highlightOption(highlightedIndex + 1)\"\n                              @keydown.enter.prevent.stop=\"selectHighlighted(highlightedIndex, $event)\"\n                              @keydown.esc.prevent=\"closeDropdown()\"\n                              @keydown.tab=\"onBlur\"\n                              @keydown.up.prevent=\"highlightOption(highlightedIndex - 1)\"\n\n                              v-show=\"showDropdown\"\n                          >\n                              <div\n                                  class=\"ui-select__search\"\n\n                                  @click.stop\n                                  @keydown.space.stop\n\n                                  v-show=\"hasSearch && options.length\"\n                              >\n                                  <input\n                                      autocomplete=\"off\"\n                                      class=\"ui-select__search-input\"\n                                      ref=\"searchInput\"\n                                      type=\"text\"\n\n                                      :placeholder=\"searchPlaceholder\"\n\n                                      v-model=\"query\"\n                                  >\n\n                                  <ui-icon class=\"ui-select__search-icon\">\n                                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                                          <path d=\"M9.516 14.016c2.484 0 4.5-2.016 4.5-4.5s-2.016-4.5-4.5-4.5-4.5 2.016-4.5 4.5 2.016 4.5 4.5 4.5zm6 0l4.97 4.97-1.5 1.5-4.97-4.97v-.797l-.28-.282c-1.126.984-2.626 1.547-4.22 1.547-3.61 0-6.516-2.86-6.516-6.47S5.906 3 9.516 3s6.47 2.906 6.47 6.516c0 1.594-.564 3.094-1.548 4.22l.28.28h.798z\"/>\n                                      </svg>\n                                  </ui-icon>\n                                  <ui-icon slot=\"icon\" v-if=\"query\" class=\"clearSearch\" icon=\"clear\" @click.native=\"clearSearch\"></ui-icon>\n                                  <ui-progress-circular\n                                      class=\"ui-select__search-progress\"\n                                      :size=\"20\"\n                                      :stroke=\"4\"\n                                      v-show=\"loading\"\n                                  ></ui-progress-circular>\n                              </div>\n\n                              <ul class=\"ui-select__options\" ref=\"optionsList\">\n\n                                    <ui-select-option\n                                      ref=\"options\"\n                                      :highlighted=\"highlightedIndex === index\"\n                                      :keys=\"keys\"\n                                      :multiple=\"multiple\"\n                                      :option=\"option ? option.label : option\"\n                                      :selected=\"isOptionSelected(option)\"\n                                      :type=\"type\"\n                                      :title=\"option.label\"\n                                      :class=\"'selected-logtype__' + option.class\"\n                                      @click.native.stop=\"selectOption(option, index)\"\n                                      @mouseover.native.stop=\"highlightOption(index, { autoScroll: false })\"\n                                      v-for=\"(option, index) in filteredOptions\"\n                                    >\n                                      <slot\n                                          name=\"option\"\n                                          :title=\"option.label ? option.label : option\"\n                                          :highlighted=\"highlightedIndex === index\"\n                                          :index=\"index\"\n                                          :option=\"option\"\n                                          :selected=\"isOptionSelected(option)\"\n                                      >\n                                      </slot>\n                                  </ui-select-option>\n\n                                  <div class=\"ui-select__no-results\" v-show=\"hasNoResults\">\n                                      <slot name=\"no-results\">No results found</slot>\n                                  </div>\n                              </ul>\n                          </div>\n                      </transition>\n                  </div>\n\n                  <div class=\"ui-select__feedback\" v-if=\"hasFeedback\">\n                      <div class=\"ui-select__feedback-text\" v-if=\"showError\">\n                          <slot name=\"error\">{{ error }}</slot>\n                      </div>\n\n                      <div class=\"ui-select__feedback-text\" v-else-if=\"showHelp\">\n                          <slot name=\"help\">{{ help }}</slot>\n                      </div>\n                  </div>\n              </div>\n      </div>`).render\n    })\n  },\n\n  props : {\n    value: {\n      type: Object,\n      default () {\n        return {};\n      }\n    },\n    steps: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  }\n}",
                "componentTemplate": "<logs-list\n  ref=\"select\"\n  class=\"logtype-select\"\n  label=\"Type\"\n  name=\"Log type input\"\n  placeholder=\"Log type\"\n  v-model=\"logType\"\n  :options=\"logTypeList\"\n  :disabled=\"readonly\"\n>\n</logs-list>",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".logtype-select {\n  .ui-select-option {\n    &__basic {\n      position: relative;\n      padding-left: 10px;\n      overflow: visible;\n\n      &:before {\n        content: '';\n        position: absolute;\n        height: .5rem;\n        width: .5rem;\n        border-radius: 10px;\n        left: -5px;\n        top: 50%;\n        transform: translateY(-50%);\n      }\n    }\n\n    &.selected-logtype {\n      &__info .ui-select-option__basic:before{\n        background-color: #00ff00;\n      }\n    }\n\n    &.selected-logtype {\n      &__warn .ui-select-option__basic:before{\n        background-color: #ffff00;\n      }\n    }\n\n    &.selected-logtype {\n      &__error .ui-select-option__basic:before{\n        background-color: #ff0000;\n      }\n    }\n  }\n}"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "a2f714e5-85fc-4a79-a26d-73b2ad4fd363",
              "data": {
                "label": "Message",
                "helpText": "",
                "variable": "logMessage",
                "multiline": false,
                "placeholder": "Text",
                "defaultValue": "``",
                "renderCondition": "",
                "trimWhitespaces": false,
                "validateRequired": false
              },
              "label": "Text box",
              "compiled": {},
              "component": "formTextBox"
            },
            {
              "id": "f8b56318-6b01-44b1-b7b7-cd4951c51c2b",
              "data": {
                "mode": "javascript",
                "jsEnv": "ecma6",
                "label": "Data",
                "helpText": "",
                "variable": "logData",
                "warnings": false,
                "autocomplete": true,
                "defaultValue": "{}",
                "validateCode": false,
                "renderCondition": "",
                "validateRequired": false,
                "disabledCondition": "",
                "validateExpression": true,
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "label": "Code",
              "compiled": {},
              "component": "formCode"
            }
          ],
          "outputExample": null,
          "hasProcessError": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "logData": "",
                "logType": {
                  "label": "Info (plain)",
                  "value": "`info`"
                },
                "logMessage": "``"
              },
              "rawMode": false,
              "version": "4dfd2970-d58f-4de1-b0c2-59d15985f216",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "47d0d7d2-be10-4a6e-a1a5-243369c78c9b",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.2"
          }
        ],
        "dateModified": 1585252658721
      },
      {
        "id": "7e0f2b5c-e827-4a00-b18b-6850ec0bff63",
        "version": "4.4.20",
        "cacheVersion": "7bc6700d-8653-43ef-bbbc-f6c460f016cb",
        "originalSource": "f05413ee-3949-4da0-b088-fa99e84cb775",
        "label": "Wait for Chat (RWC)",
        "icon": "rwc",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-down",
        "description": "Starts a Rich Web Chat conversation after the chat URL or chat app is opened.",
        "isGatewayStep": true,
        "publishedBy": "",
        "categories": [
          "Rich Web Chat",
          "Gateway"
        ],
        "recommended": [],
        "tags": [],
        "template": "const HOURS = 24;\nconst MINUTES = 60;\nconst SECONDS = 60;\nconst MILISECONDS = 1000;\nconst CHAT_MAX_LENGTH = 100;\nconst RANDOM_BYTES_KEY = 32;\nconst RANDOM_BYTES_IV = 16;\nconst CHAT_PREFIX = '__rwc';\nconst START_SESSION = 'startSession'\nconst MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\nconst ALL_MESSAGES_RECEIVED = 'ALL_MESSAGES_RECEIVED'\nconst UPDATE_CALLBACK = 'UPDATE_CALLBACK'\nconst SEND_DELAY = 100\nconst defaultTimeout = HOURS * MINUTES * SECONDS * MILISECONDS; // 24 hours\n// eslint-disable-next-line\nconst uuid = require('uuid');\nlet chat = (chatId || '').toLowerCase().replace(/\\?.*/gi, '');\n// eslint-disable-next-line\nconst crypto = require('crypto');\nconst axios = require('axios');\nconst Promise = require('bluebird');\n\nif (isAppsProviderAvailable && !_.trim(appName, '`')) {\n  throw new Error(`App name is required`);\n}\n\n// eslint-disable-next-line\nif (!chat.length || /[\\\\, \\:, \\^, \\~, \\?, \\\", \\<, \\>, \\|, \\., \\/, \\&, \\%, \\', \\#, \\[, \\], \\+, \\=, \\„, \\“, \\{, \\\\, \\s]/.test(chat)) {\n  throw new Error(`Chat name is required and should not contain symbols: \\:^~?<>|&%.'#[]+=„“{} and the space characters`);\n}\n\nif (chat.length > CHAT_MAX_LENGTH){\n  throw new Error(`Chat name must be less than ${CHAT_MAX_LENGTH} symbols`);\n}\n\n// http get start chat\nthis.triggers.on({\n  name: `http/get/${CHAT_PREFIX}/${chat}`,\n  params: {\n    method: 'get',\n    path: chat\n  }\n}, async event => {\n  const headers = event.params.request.headers\n  await this.eventManager.callbackResolve(\n    this.takeCallback(), {\n      result: {\n        code: 200,\n        body: {\n          headers,\n          chatConfig: {\n            typingIndicatorTime: lookAndFeelBotAnswerDelay.input,\n            appId\n          },\n          chatStyle: {\n            theme: lookAndFeelTheme,\n            title: _.trim(lookAndFeelTitle, '`'),\n            description: _.trim(lookAndFeelDescription, '`'),\n            allowRestoreSession: lookAndFeelAllowRestoreSession,\n            allowToViewHistory: lookAndFeelAllowToViewHistory,\n            allowStartNewSession: lookAndFeelAllowStartNewSession,\n            headerImage: lookAndFeelHeaderImage,\n            botIcon: lookAndFeelBotIcon,\n            useCustomCss: lookAndFeelUseCustomCss,\n            customStyles: lookAndFeelCustomStyles,\n            typingIndicatorTime: lookAndFeelBotAnswerDelay.input,\n            isCustomMessageTimeFormat: lookAndFeelIsCustomMessageTimeFormat,\n            messageTimeFormat: lookAndFeelCustomTimeFormat,\n            useGlobalCommands,\n            globalCommandsCustom: _.map(globalCommandsCustom, el => {\n              const element = el\n              element.code = element.code ? element.code.toString() : undefined\n              return element\n            }),\n            closeEventType,\n            closeEventCode: closeEventCode ? closeEventCode.toString() : null,\n            closeEventCommand,\n            globalCommandsList,\n            customizeHeader,\n            headerHtml,\n            headerCss,\n            headerJs: headerJs ? headerJs.toString() : null,\n            useFooter,\n            footerHtml,\n            footerCss,\n            footerJs: footerJs ? footerJs.toString() : null,\n            showFooterAt,\n            customizeBrowserTab,\n            defaultTabTitle,\n            faviconSourceImage,\n            changeTabTitle,\n            tabTitle,\n            tabTitleInterval,\n            extendHead,\n            extendHeadHtml,\n            addMfHeadVars,\n            additionalContent: {\n              type: additionalContentType,\n              additionalContentCardPosition,\n              additionalHeroVideoPosition\n            },\n            headVariables: _.map(headVariables, el => ({\n              varName: el.varName,\n              varCode: el.varCode ? el.varCode.toString() : null\n            }))\n          }\n        }\n      }\n    })\n  return this.exitFlow()\n});\n\n// on some message received on client\nthis.triggers.on({\n  name: `ws/chat/${MESSAGE_RECEIVED}/${chat}`,\n}, async ({params}) => {\n  // remove from queue\n  await this.emitAsync({\n    name : 'rwc/queue_provider', // event name String\n    target: this.helpers.providersAccountId,\n    params : {                   // params Object\n      // sessionId: 'test',\n      sessionId: params.sessionId,\n      type: 'async',\n      method: 'delete',\n      message: {\n        id: params.message.id\n      }\n    }\n  })\n  \n  await new Promise(resolve => setTimeout(resolve, SEND_DELAY))\n  \n  // if changeMessage -> modify in history\n  await this.emitAsync({\n    name : 'rwc/history_provider', // event name String\n    target: this.helpers.providersAccountId,\n    params : {                     // params Object\n      // sessionId: 'test',\n      sessionId: params.sessionId,\n      type: 'async',\n      method: 'put',\n      message: {\n        ...params.message\n      }\n    }\n  })\n  \n});\n\n// clear queue\nthis.triggers.on({\n  name: `ws/chat/${ALL_MESSAGES_RECEIVED}/${chat}`,\n}, ({params}) => {\n  \n  return this.emitAsync({\n    name : 'rwc/queue_provider', // event name String\n    target: this.helpers.providersAccountId,\n    params : {                   // params Object\n      sessionId: params.sessionId,\n      type: 'async',\n      method: 'delete_all'\n    }\n  })\n})\n\non: /^before\\/[^\\/]+\\/end/;\nasync () => {\n  // conversation is under user manual control, don't send event automatically\n  if (manualConversation) return;\n  \n  if (this.id !== 'main' && !this.id.includes('chatHookEvent')) return;\n  \n  const dataOut = await this.get(thisStep.dataOut);\n  \n  if (!dataOut) return\n  if (dataOut.rwc_conversation.isFlowEndedSent) return\n  \n  const callback = dataOut.rwc_conversation.callback;\n  \n  if (dataOut.rwc_conversation.preventSendSessionEnd) return;\n  \n  // if session ended not in main thread need to remove subscription to UPDATE_CALLBACK\n  this.triggers.off({\n    name: `ws/chat/UPDATE_CALLBACK/${dataOut.rwc_conversation.sessionId}`\n  })\n  \n  if (callback ) {\n    delete callback.used;\n    dataOut.rwc_conversation.isFlowEndedSent = true\n    await this.set(thisStep.dataOut, dataOut)\n    await this.eventManager.callbackResolve(callback, {\n      type: 'flow_ended'\n    })\n  } else {\n    // this.log.error('Before session end hook error: can`t find conversation')\n  }\n}\n\nthis.triggers.on({\n  name: `ws/chat/close-session/${chat}`,\n}, async ({params}) => {\n  const {sessionId} = params\n  \n  await this.session.start({\n    key: sessionId\n  });\n  this.end()\n})\n\nthis.triggers.on({\n    name: `ws/chat/${START_SESSION}/${chat}`\n  }, async event => {\n  const { beginningSessionId, previousSessionId, deviceId, browserFingerprint, queryParams, headers, rwcUrl, pageData, userHeaders, userTimezone, context, customVariables } = event.params;\n  await this.session.start({\n    timeout: defaultTimeout,\n    reporting: {\n      settingsKey: 'session',\n      startedBy: 'Visitor',\n      sessionType: 'RWCv2',\n      ...beginningSessionId && { beginningSessionId },\n      ...previousSessionId && { previousSessionId }\n    }\n  });\n  \n  const sessionHash = uuid.v4();\n  \n  const sessionId = slugid.nice()\n  const realSessionId = this.session.key\n  \n  await this.eventManager.callbackResolve(this.takeCallback(), {sessionId, realSessionId});\n\n  const callback = event.params;\n  \n  const outputData = {\n    rwc_conversation: {\n      callback,\n      sessionId,\n      chatName: chat,\n      userId: browserFingerprint, // TODO replace with browserFingerprint\n      realSessionId,\n      deviceId,\n      appId,\n      accountId: this.config.accountId,\n    },\n    sessionId: realSessionId,\n    accountId: this.config.accountId,\n    rwcUrl,\n    answerDelay: lookAndFeelBotAnswerDelay.input,\n    browserFingerprint: browserFingerprint,\n    chatConfig: stepVariable,\n    chatStyle: {\n      theme: lookAndFeelTheme,\n      title: _.trim(lookAndFeelTitle, '`'),\n      description: _.trim(lookAndFeelDescription, '`'),\n      allowRestoreSession: lookAndFeelAllowRestoreSession,\n      allowStartNewSession: lookAndFeelAllowStartNewSession,\n      headerImage: lookAndFeelHeaderImage,\n      useCustomCss: lookAndFeelUseCustomCss,\n      customStyles: lookAndFeelCustomStyles,\n      typingIndicatorTime: lookAndFeelBotAnswerDelay.input\n    },\n    queryParams,\n    headers,\n    userHeaders,\n    deviceId,\n    appId,\n    pageData,\n    userTimezone,\n    context,\n    customVariables\n  };\n  \n  rwcContext.set('last', { \n    value: { name: thisStep.dataOut.name },\n    name: thisStep.dataOut.name,\n    type: thisStep.dataOut.type,\n    flowId: this.config.flowId,\n    botId: this.config.botId,\n  });\n  \n  await rwcContext.save();\n  \n  return this.exitStep('next', outputData);\n});\n\n\n\nreturn this.triggers.otherwise(() => {\n  return this.exitFlow()\n});",
        "form": {
          "component": null
        },
        "data": {
          "appId": null,
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            }
          ],
          "appUrl": "``",
          "chatId": "``",
          "appName": "``",
          "chatUrl": "``",
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "appColor": "#409fec",
          "footerJs": "",
          "headerJs": "",
          "tabTitle": "``",
          "embedLogo": [],
          "footerCss": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
          "headerCss": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
          "useFooter": false,
          "extendHead": false,
          "footerHtml": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
          "headerHtml": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
          "rwcContext": {
            "store": {},
            "output": {
              "selectStyle": true
            },
            "contextKey": "__rwc_context"
          },
          "embedInvite": "``",
          "isAppActive": false,
          "widgetColor": "#409fec",
          "isAppCreated": false,
          "isAppUpdated": false,
          "isFlowActive": false,
          "savedAppName": null,
          "savedChatUrl": "``",
          "showFooterAt": [
            "`desktop`",
            "`mobile`",
            "`embed`"
          ],
          "stepVariable": "defaultValue",
          "addMfHeadVars": false,
          "embedPosition": "bottom-right",
          "headVariables": [],
          "savedAppColor": "#409fec",
          "changeTabTitle": false,
          "closeEventCode": "",
          "closeEventType": "`command`",
          "embedAnimation": "pulse",
          "extendHeadHtml": "<script>console.log('Hello from head script!')</script>",
          "hideChatLoader": false,
          "previousChatId": null,
          "autoExpandDelay": 15000,
          "customizeHeader": false,
          "defaultTabTitle": "`OneReach.ai Chat`",
          "embedInviteImage": {},
          "lookAndFeelTheme": "Auto-detect",
          "lookAndFeelTitle": "``",
          "tabTitleInterval": {
            "input": "`0s`",
            "outputMode": "ms"
          },
          "closeEventCommand": "``",
          "embedInviteButton": "``",
          "useGlobalCommands": false,
          "autoExpandDelayStr": "`15 seconds`",
          "embedInviteTimeout": 5000,
          "embedUseInvitation": false,
          "emdedShowCloseIcon": false,
          "faviconSourceImage": {},
          "globalCommandsList": [],
          "lookAndFeelBotIcon": {},
          "manualConversation": false,
          "customizeBrowserTab": false,
          "embedPreviewPageUrl": "``",
          "globalCommandsCustom": [],
          "additionalContentType": "`empty`",
          "embedInviteTimeoutStr": "`5 seconds`",
          "lookAndFeelDescription": "``",
          "lookAndFeelHeaderImage": {},
          "isAppsProviderAvailable": true,
          "lookAndFeelCustomStyles": [],
          "lookAndFeelUseCustomCss": false,
          "embedAllowDragChatWindow": true,
          "lookAndFeelBotAnswerDelay": {
            "input": "`2 seconds`",
            "outputMode": "ms"
          },
          "embedAllowChangeWindowSize": false,
          "isRequestForRegisterSended": false,
          "additionalHeroVideoPosition": "Floating",
          "lookAndFeelCustomTimeFormat": "``",
          "additionalContentCardPosition": "Fixed left",
          "lookAndFeelAllowToViewHistory": false,
          "lookAndFeelAllowRestoreSession": true,
          "lookAndFeelAllowStartNewSession": true,
          "embedAppearanceBlurredBackground": false,
          "lookAndFeelIsCustomMessageTimeFormat": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "session": {
            "tags": [],
            "type": "session",
            "label": "Session",
            "enabled": true,
            "canDisable": false
          }
        },
        "outputExample": {
          "appId": "String",
          "rwcUrl": "string",
          "context": "Object",
          "headers": "Object",
          "deviceId": "String",
          "pageData": "Object",
          "sessionId": "String",
          "answerDelay": "String",
          "queryParams": "object",
          "userTimezone": {
            "name": "String",
            "offset": "Number"
          },
          "customVariables": "Object",
          "browserFingerprint": "String"
        },
        "help": "Use this step to start a Rich Web Chat conversation. You set up the chat ID and activate the flow. When the chat URL is opened, the flow proceeds down the *next* exit.\n\n### Rich Web Chat settings\n\n*App name* is a name of the chat in OneReach.ai App. The value is required at the moment of chat setup, but after flow activation the chat can be launched in any view: in app or browser. App name doesn't require to be unique and can contain any symbols within a limit of 100 characters. App color can be selected from palette and will be shown in OneReach.ai App for your chat. Note, that flow saving and activation will be failed if App name is empty. \n\n*Chat ID* is part of the RWC URL that must be unique throughout your OneReach.ai account. This value is generated by default, is limited to 100 characters and cannot include `spaces` or any special characters except `\\* @ ! _ -`\n\nOptions to copy the *full RWC URL* or open the chat in a new window become available after the flow is activated.\n\nNote that Chat ID should be unique throughout your account, otherwise the flow activation will be failed.\n\nApp name and App color could be changed after a flow saving or activation. When flow is active, App URL and QR code (that also contains App URL) will be generated and lead to OneReach.ai App landing page, so end-user could proceed with chat to desktop view or app view.\n\n### Look and feel\nYou can customize the UI of your chat with settings in the collapsible.\n\nBy default, chat theme will is set to auto-detect, which will automatically apply an end-user browser theme.\n\nBoth *title* and *description* can be set manually or left empty. If either value is too long, it will be truncated. The length depends on the device the visitor used to start the conversation, so make sure it is below the suggested user-friendly character limits:\n- mobile (vertical): *title* 35 ch, *description* 300 ch.\n- desktop (horizontal): *title* 100 ch, *description* 700 ch.\n\nThe chat header image can be chosen from `Files` or set as an URL.\n\nBot icon is an image that will appear next to the bot message. Image can be chosen from Files or set as an URL. Bot icon will be applied to all messages in history, even if messages were received without bot icon or with another bot icon image.<br>\nWhen using Card Carousel or Text and Files if it doesn't have text message or attached file bot icon will not be visible.<br>\nWhen using Custom template component bot icon can be hidden if switch 'Enable to show bot icon for the message' in OFF in the step.\n\nThe *bot answer delay duration* is the time that the step waits before proceeding down the *next* exit. The end user will see a typing indicator during this period. The value is set at 2 seconds by default and its limits are between 0s and 2min. Examples of acceptable time formats: `1m 12s` or `72s`.\n\nTo provide the user with an option to view chat history, turn on the respective toggle `Allow user to view conversation history`. The history is stored in the cache of the browser from the first chat URL loading, independently on toggle state. When toggle is turned on and end-user initiates the chat, a button to 'View chat history' will be present with all conversations divided into days.<br>\nAlong with history, day indicator is present in chat and shows the day messages were received. Day indicator is shown only when toggle to view conversation history is turned on and chat session is stretched to a next day.<br>\n\nIf end-user did not finish the previous conversation (due to browser page reload, etc.), he will be able to continue it or start a new one if toggle `Allow to continue interrupted conversation or start a new one` is turned ON. The predefined message will be shown after chat loading. If conversation was finished due to flow end or timeout, the message will not appear.\n\nWhen toggle `Allow starting a new conversation when the flow is ended` is ON, it allows to start a new conversation when flow was ended due to flow configuration or timeout. If toggle is OFF, the label will appear at the end of chat conversation Your conversation ended.\n\nBrowser tab can be customized with respective option. It provides the ability to change the name of a browser tab when it's in focus and out of focus. It creates visual screen changes, that grab end-user's attention. New value replaces default name of chat browser tab. If empty, default name 'OneReach.ai Chat' will appear. Custom favicon allows to change default favicon icon (opens new window)in browser tab. Preferable images with _*.ico_ extension, but not required.<br>\nThe toggle `Changed name, when tab is out of focus` allows to set different browser tab name and customize it, when the tab is out of focus. Changed tab name will be shown when user lost focus from chat tab. Change interval defines interval after which browser tab changes its name to Changed tab name text. Set 0s to show only changed tab name. Examples of acceptable time formats: `1m 12s` or `72s`.\n\n### Embedded chat customization\n\nAdd an embedded chat window to your website so end-users can quickly get answers to their questions by chatting with a bot while browsing your site. The chat window sits unobtrusively on your web page. When customers want to chat, they just click the button to launch the chat.<br>\nEnd-user can start chatting while viewing your web page and minimize/maximize the chat window or change it's position, so it’s not in their way.\n\nBy default, the widget has an icon and color, that can be changed in step. Select a custom icon and change widget color with the palette.\n\nChat widget on a website can be selected between the options: _bottom right corner_ and _bottom left corner_. Depends on selected option, the chat window will expand properly to the left or right side. Chat widget has fixed position on the screen and can't be dragged manually (unlike chat window).\n\nWith `Auto-open chat delay duration` timeout can be set, after which chat will be automatically opened. Timeout can be set from 0 up to 10 minutes. Setting up 0 seconds will make chat window wait until user clicks on widget icon. \nExamples of acceptable time formats: `1m 12s` or `72s`.\n\nWith turned on toggle `Allow to change chat window size` embedded chat height and width resize will be allowed.\nWith turned on toggle `Allow to drag chat window` the chat window position could be changed within browser window area.\n\nChat window background can be blurred with a respective toggle. The effect is the same to Light and Dark themes.  On chat window resize or screen position change, background blur will be saved. \n\nYou can set invitation message near widget button with some additional information about chat. The message may contain text, image and button. The Invitation message delay duration is the time that the popup waits showing itself and the value can be set up to 10 minutes. Examples of acceptable time formats: `1m 12s` or `72s`.<br>\nEnd-user may close invitation message bubble if appearance of close icon is selected.<br>\n\nTo check how widget will look on your website, add a website URL to the input and click to Preview embedded chat button in the step.<br>\n\n### Global commands menu setup \nIn order to include global commands to your chat, turn on the toggle `Enable and setup global commands`. To toggle will enable to select predefined options or create custom. \n\nOption `Add button to restart conversation` doesn't have additional setup. On client it's shown as icon with label and on manual click the conversation will be restarted, without showing a dialogue message to 'Start new/Continue' conversation.\n\nWhen the option `Process chat close event` is selected,  user can choose how the event be processed - by a command (and routed fo `Process Global Commands (RWC)` step leg) or by JavaScript code (code is executed on chat client). Chat close event is sent on browser page close, browser page refresh, app close.\n\nOption `Add custom button` allows to create custom buttons in chat menu and handle it with `Process Global Commands (RWC)` step leg or with redirect to other source, or with execution JavaScript code on client. Any amount of custom buttons with unique Command name might be added. For correct command processing, command name in `Wait for Chat (RWC)` step should match command leg name in `Process Global Commands (RWC)` step. Icon can be selected from material icons resource and set as icon name (e.g. question_answer). Label will be shown on client as name to a command.<br> \nCustom command can also be set as a Button, that doesn't require `Process Global Commands (RWC)` step setup. If Button option is selected, icon and label inputs are present as well and button type might be selected: a link or a JavaScript code.<br>\nButton icon uses Materials icons that can be found by click on help of input 'icon'. <br>\n\n### Advanced settings\n\nAn option to apply custom CSS is available. Turn on the respective toggle and choose the file(s) with css for your chat via `Files` or provide it as a link using `http://` or `https://`. Note that in order to use a CSS file stored in an external cloud service you need to indicate the link for downloading that file.\n\nTurn on toggle `Use custom message time format` to replaces message day indicator with custom format. For example  `dddd, MMMM Do YYYY, h:mm:ss a` -> `Monday, May 17th 2021, 1:11:51 pm`\n\nOptions `Customize header` and `Customize footer` allows to add custom styles and scripts for header and footer or completely change their appearance. By default predefined CSS and HTML set when each option is enabled. \n\nEnabling the option `Extend page <head> by custom template` allows to inject custom scripts or meta tags into the `<head>` tag of the chat page. For example, the code below will append script with `console.log` and meta tag to `<head>`:\n\n```HTML\n<meta name=\"keywords\" content=\"OneReach, RWC, Chat\">\n<script>\n  console.log('Hello from head script!');\n</script>\n```\nThe option `Add merge field variable from client` allows to specify list of custom variables which will be added to _customVariables_ step merge field data. The expression in input _Value from script execution_ will be evaluated in the client browser and value will be passed into the flow. As a result,`Wait for Chat (RWC)` merge field will have defined value in `<mergefield name>.customVariables.yourVariableName`.\n\nWhen the toggle `Control conversation manually` is turned on, the event of conversation end won't be sent to chat client, so the chat session will be active till flow session timeout or till event is sent manually with a step '' \n\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in the *merge field name*. The following properties are returned: the chat URL, the ID of the current session, the bot answer delay duration and the information about visitor's device and browser, as well as additional query parameters and headers of the request. See below the structure of the merge field object:\n```\n{\n   \"answerDelay\":\"String\",\n   \"appId\":\"String\",\n   \"browserFingerprint\":\"String\",\n   \"context\":\"Object\",\n   \"customVariables\":\"Object\",\n   \"deviceId\":\"String\",\n   \"headers\":\"Object\",\n   \"pageData\":\"Object\",\n   \"queryParams\":\"Object\",\n   \"rwcUrl\":\"String\",\n   \"sessionId\":\"String\",\n   \"userTimezone\":{\n            \"offset\":\"Number\",\n            \"name\":\"String\" \n }\n```\n\n### Reporting events\n*Step* and *Session* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services dependencies:\n- flow builder - v2.4.0\n- event-manager - v2.0.1\n- deployer - v2.0.0\n\n### Release Notes\nv.4.0.0\n- New UI/UX implementation of a gateway step that starts Rich Web Chat conversation.\n- Chat ID can be customized to make it more informative for end-users.\n- Option to show a typing indicator before the bot response to make the chat behaviour more human-like.\n- Options to add chat title and description, select a theme and add chat logo.\n- Option to use custom css for chat client and step preview.\n- Option to show chat history with the user that is traced by Browser Fingerprint and stored in browser cache.\n- Option to continue an unfinished conversation in case the chat was closed or reloaded before it was finished.\n\nv.4.4.0\n- Added chat integration with OneReach.ai Apps\n- Added options to customize chat view with header image, bot icon, custom header, custom footer, custom message date and time format.\n- Added option to customize browser tab by setting tab name and favicon.\n- Added functionality set up embedded chat and customize it's view.\n- Added functionality to set up global commands buttons. \n- Added additional default merge field variables to step output data and ability to create and pass custom variables.\n- Added option to control conversation end manually. \n- Added web socket anonymization.\n- Added ability to inherit RWC conversation from the step.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "bf0aed82-5c9d-4cdb-90f1-b012bfae5069",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "080ec057-2ddc-4309-b9b2-60f7b7825f65",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "7c427ba2-9701-41ae-90f3-b50a1f6bd994",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "a3134e23-ee59-4ebd-b2da-1d3df3af5239",
                    "stepLabel": "Request Response (RWC) 4.4.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "b2ff8acf-f455-411c-94de-61b1fc0fd6bd",
                    "stepLabel": "Request Response (RWC) 4.1.x",
                    "allowUpdate": false
                  },
                  {
                    "id": "7147f2aa-1555-4e8c-9129-87787fa27105",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "11e36d37-7142-4a39-90aa-432ac397387e",
                    "stepLabel": "Request Web Form Response (RWC) 4.4.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "f66f814a-18e3-40b3-890c-49644113913b",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "37894b91-a00d-48ae-9c33-f8f80a61fa5e",
                    "stepLabel": "Send Message (RWC) 4.4.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "bf6679d3-6a08-49b1-b99f-83541b3353f0",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "a5d6bcc6-3182-4a91-88f4-bd1be2a650fb",
                    "stepLabel": "Send Message (RWC) 4.2.x",
                    "allowUpdate": false
                  },
                  {
                    "id": "22a45c2c-38e9-488c-b637-f8ba84bb839c",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "f6f62a32-c9b9-47de-921b-1573f7b1f17f",
                    "stepLabel": "Send Multi-Page Web Form (RWC) 4.2.x",
                    "allowUpdate": false
                  },
                  {
                    "id": "e9a1150b-98ba-4205-8d4d-3f45a1b5042e",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "3b97aede-830d-475f-aba8-9b1b368f68bb",
                    "stepLabel": "Process Global Command (RWC) 4.4.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "668fc3f0-2698-4fbc-9b3b-84e067a55318",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "6b4b3070-fe46-4014-864a-4cbf12f41f2f",
                    "stepLabel": "Return to Main Thread (RWC) 4.4.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "3e6b19a0-3082-40d0-ad88-ceb2ae0ec0fb",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "bec806db-84f7-41fa-b27e-1b9061c5fdb1",
                    "stepLabel": "Change or Delete Message (RWC) 4.2.x",
                    "allowUpdate": false
                  },
                  {
                    "id": "f53bca22-379c-4eee-9e4c-cf9b1b72def7",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "a9600008-0f97-4ccb-b759-f1d638ae0574",
                    "stepLabel": "Change or Delete Message (RWC) 4.4.x",
                    "allowUpdate": true
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "19af3089-598a-4efc-b343-84597edb7ad0",
              "data": {
                "open": true,
                "header": "Rich Web Chat settings",
                "inputs": [
                  {
                    "id": "20d94963-0975-4451-969a-90dce3a0f0e5",
                    "data": {
                      "data": "{\n  \"appName\": \"``\",\n  \"savedAppName\": null,\n  \"appColor\": \"#409fec\",\n  \"appId\": null,\n  \"savedAppColor\": \"#409fec\",\n  \"savedChatUrl\": \"``\",\n  \"isAppCreated\": false,\n  \"isAppActive\": false,\n  \"isAppUpdated\": false,\n  \"isRequestForRegisterSended\": false,\n  \"isAppsProviderAvailable\": true\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  appName: {\n    exceedLimit (value) {\n      if (!this.schema.isAppsProviderAvailable) return true\n      if (_.trim(value, '`')) {\n        return _.trim(value, '`').length <= 100;\n      } \n      return true\n    },\n    notEmpty(value) {\n      if (!this.schema.isAppsProviderAvailable) return true\n      return _.trim((value || '').replace(/ /gi, ''), '`');\n    }\n  }\n}",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.appName\" \n  :isAppCreated.sync=\"schema.isAppCreated\"\n  :isAppUpdated.sync=\"schema.isAppUpdated\"\n  :savedAppName.sync=\"schema.savedAppName\"\n  :savedAppColor.sync=\"schema.savedAppColor\"\n  :savedChatUrl.sync=\"schema.savedChatUrl\"\n  :isAppsProviderAvailable.sync=\"schema.isAppsProviderAvailable\"\n  :isRequestForRegisterSended.sync=\"schema.isRequestForRegisterSended\"\n  :isFlowActive=\"schema.isFlowActive\"\n  :chatUrl=\"schema.chatUrl\"\n  :appId.sync=\"schema.appId\"\n  :appUrl.sync=\"schema.appUrl\"\n  :appColor.sync=\"schema.appColor\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :schema=\"schema\"\n  :step-id=\"stepId\" \n  :flow=\"$flow\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-jnxqgyirapkfwscomzuvdhlbet",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { \n              // if (_.trim(value, '`') !== this.savedAppName) {\n              //   this.$emit('update:isAppUpdated', true)\n              // } else {\n              //   this.$emit('update:isAppUpdated', false)\n              // }\n              this.$emit('input', value); \n            }\n        },\n        getAppName () {\n          return _.trim(_.trim(this.computedValue, '`')) || null\n        },\n        getErrorTranslation () {\n          if (!this.getValue(`schema.appName.exceedLimit`, this.v)) {\n            return 'The limit is 100 characters.'\n          }\n          if (!this.getValue(`schema.appName.notEmpty`, this.v)) {\n            return 'App name is required.'\n          }\n        }\n    },\n    components: {\n      'color-picker': libs.vueColor.Swatches\n    },\n    data () {\n      return {\n        colors: { r: 255, g: 0, b: 0 },\n        isLoading: false,\n        defaultColor: '#409fec',\n        showAlert: true\n      }\n    },\n    async mounted () {\n      // if (this.flow.appsUiUrl) {\n      //   this.$emit('update:isAppsProviderAvailable', true)\n      // } else {\n      await this.checkProvider()\n      // }\n      this.colors = {hex: this.appColor || this.defaultColor}\n      // if (this.isRequestForRegisterSended) {\n      //   this.registerApp()\n      //   return\n      // }\n      // if (this.getAppName && _.trim(this.getAppName) && this.isAppCreated) {\n      //   this.registerApp()\n      // }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        isFlowActive: Boolean,\n        flow: Object,\n        chatUrl: String,\n        appUrl: String,\n        isAppCreated: Boolean,\n        savedAppName: String,\n        isAppsProviderAvailable: Boolean,\n        savedChatUrl: String,\n        isRequestForRegisterSended: Boolean,\n        savedAppColor: {\n          type: String,\n          default: this.defaultColor\n        },\n        schema: Object,\n        isAppUpdated: Boolean,\n        appId: String,\n        appColor: {\n          type: String,\n          default: this.defaultColor\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    watch: {\n      colors: {\n        handler (nv) {\n          if (this.savedAppColor === _.get(nv, 'hex')) return\n          this.$emit('update:appColor', _.get(nv, 'hex') || this.defaultColor)\n          if ((_.get(nv, 'hex') || this.defaultColor) !== this.savedAppColor) {\n            this.$emit('update:isAppUpdated', true)\n          } else {\n           this.$emit('update:isAppUpdated', false)\n          }\n        },\n        deep: true\n      },\n      chatUrl: {\n        handler (nv, ov) {\n          if (!_.trim(this.savedAppName, '`')) return\n          if (this.savedChatUrl === nv) return \n          // this.registerApp()\n        },\n        immediate: true\n      }\n    },\n    methods: {\n      async checkProvider () {\n        try {\n          const url = this.flow.gatewayUrl('2042/app', this.flow.providersAccountId())\n          const response = await this.$http['head'](url, {}, {})\n          this.$emit('update:isAppsProviderAvailable', true)\n        } catch(e) {\n          if (e.status === 404) {\n            this.$emit('update:isAppsProviderAvailable', false)\n          } else {\n            this.$emit('update:isAppsProviderAvailable', true)\n          }\n        }\n      },\n      cancelChanges () {\n        this.colors = {hex: this.savedAppColor}\n        this.computedValue = '`' + _.trim(this.savedAppName, '`') + '`'\n        this.$emit('update:appColor', this.savedAppColor)\n      },\n      getValue (key, el) {\n        return _.get(el || this.value, key, null);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-app\">\n  <!--container-->\n  <or-alert @dismiss=\"showAlert = false\" type=\"warning\" v-show=\"(!isFlowActive || !savedAppName) && showAlert\">\n    After the flow activation <b>Chat ID</b> could not be changed\n  </or-alert>\n  <div v-if=\"isAppsProviderAvailable\" class=\"rwc-app__container\">\n    <or-text-expression \n      label=\"App name\"\n      disableVariables\n      disableCodeMode\n      placeholder=\"Enter App name\"\n      :mergeFields=\"mergeFields\"\n      :readonly=\"readonly || isLoading\"\n      :invalid=\"getValue(`schema.appName.$invalid`, v)\"\n      :error=\"getErrorTranslation\"\n      v-model=\"computedValue\"\n      class=\"app_name_input\"\n    />\n    \n    <div class=\"rwc-app__color\">\n      <or-icon-button \n        ref=\"colorPicker\" \n        :icon=\"null\" \n        :size=\"16\" \n        tooltip=\"App color\" \n        :style=\"`background-color: ${appColor}`\"\n        tooltip-position=\"top center\" \n        class=\"rwc-app__color-picker\"\n        :disabled=\"readonly || isLoading\"\n      ></or-icon-button>\n      \n      <or-popover class=\"custom-popover\" trigger=\"colorPicker\">\n        <color-picker v-model=\"colors\"></color-picker>\n      </or-popover>\n    </div>\n    <!--:class=\"{'max-width-cut': getAppName && (((getAppName && !isAppCreated) && !isLoading || isAppUpdated) && !(getValue(`schema.appName.$invalid`, v)))}\"-->\n    <!--<transition name=\"fade\" mode=\"out-in\">-->\n    <!--  <div v-if=\"getAppName && ((getAppName && !isAppCreated) && !isLoading || isAppUpdated) && !(getValue(`schema.appName.$invalid`, v))\" class=\"rwc-app__icons\">-->\n    <!--    <div class=\"rwc-app__icon\">-->\n    <!--      <or-icon-button -->\n    <!--        icon=\"close\"-->\n    <!--        size=\"small\"-->\n    <!--        :disabled=\"readonly || isLoading\"-->\n    <!--        tooltip=\"Cancel changes\" -->\n    <!--        tooltip-position=\"top center\" -->\n    <!--        @click=\"cancelChanges\"-->\n    <!--      ></or-icon-button>-->\n    <!--    </div>-->\n    <!--    <div class=\"rwc-app__icon rwc-app__icon-green\">-->\n    <!--      <or-icon-button -->\n    <!--        icon=\"done\"-->\n    <!--        size=\"small\"-->\n    <!--        tooltip=\"Submit changes for app\" -->\n    <!--        tooltip-position=\"top right\" -->\n    <!--        :disabled=\"readonly || isLoading\"-->\n    <!--        @click=\"registerApp\"-->\n    <!--      ></or-icon-button>-->\n    <!--    </div>-->\n    <!--  </div>-->\n    <!--</transition>-->\n  </div>\n  <!--container-->\n  \n  <!--loader-->\n  <div v-if=\"isLoading\" class=\"rwc-app__loader\">\n    <div class=\"rwc-app__loader-inner\"></div>\n  </div>\n  <!--loader-->\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-app {\n  .app_name_input {\n    max-width: calc(100% - 32px) !important;\n  }\n  .rwc-not-active-warning {\n    padding: 10px;\n    border-radius: 4px;\n    background-color: rgba(#409fec, 0.1);\n    font-size: 14px;\n  }\n\n  &__container {\n    display: flex;\n    align-items: flex-start;\n  }\n  \n  &__color {\n    &-picker {\n      width: 16px;\n      height: 16px;\n      margin-left: 16px;\n      margin-top: 48px;\n    }\n  }\n  \n  .fade-enter-active, .fade-leave-active {\n    transition: opacity .3s, width 0.3s;\n    width: 76px;\n  }\n  .fade-enter, .fade-leave-to /* .fade-leave-active до версии 2.1.8 */ {\n    opacity: 0;\n    width: 0;\n  }\n  \n  &__icons {\n    display: flex;\n    margin-top: 39px;\n  }\n  \n  &__icon {\n    &:hover {\n      opacity: 0.6;\n    }\n    .ui-icon-button--type-primary.ui-icon-button--color-default .ui-icon-button__icon {\n      height: 24px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: #c6c6c6;\n    }\n    \n    .ui-icon-button--type-primary.ui-icon-button--color-default {\n      background-color: transparent;\n    }\n    \n    &-green {\n      .ui-icon-button--type-primary.ui-icon-button--color-default .ui-icon-button__icon {\n        color: #4bcd03;\n      }\n    }\n  }\n  \n  @keyframes loader {\n    0% {\n      left: 0;\n      transform: translateX(-100%);\n    }\n    100% {\n      left: 100%;\n      transform: translateX(100%);\n    }\n  }\n  \n  &__loader {\n    position: relative;\n    width: 100%;\n    height: 4px;\n    background-color: #eee;\n    border-radius: 4px;\n    overflow: hidden;\n    \n    &-inner {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 124px;\n      height: 100%;\n      background-color: #64B2DA;\n      animation: loader 2s ease infinite;\n      border-radius: 2px;\n      will-change: left;\n    }\n  }\n  \n  \n  .or-text-expression {\n    width: 100%;\n    max-width: calc(100% - 20px);\n    \n    &.max-width-cut {\n      max-width: calc(100% - 108px);\n    }\n  }\n  \n  .rwc-app__icon {\n    flex-shrink: 0;\n    margin-bottom: 15px;\n    margin-left: 6px;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "d8f5f83a-b4f3-4f2f-ab2e-5c8fc7bef3f4",
                    "data": {
                      "data": "{\n  \"chatId\": \"``\",\n  \"isFlowActive\": false,\n  \"previousChatId\": null\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction toJson(data, property = '') {\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data\n    if(['chatId'].includes(property)) return data\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  chatId: {\n    custom(value){\n       if (!value) return true\n        const localValue = \n            value[0] === '`' && value[value.length - 1] === '`' \n            ? value.slice(1, -1)\n            : value;\n      \n        const valueWithoutMergeFields = localValue.replace(/\\${(?:[^{}]+|{(?:[^{}]+|{(?:[^{}]+|{(?:[^{}]+|{[^}]*})*})*})*})+}/gm, '');\n        return localValue.length > 0 && (!(/[\\\\\\:\\^\\~\\/\\$\\(\\)\\\"\\<\\>\\|\\%\\.\\,\\#\\[\\]\\+\\„\\“\\\\`\\'\\s\\{\\}]/i.test(valueWithoutMergeFields)) || _.isEmpty(valueWithoutMergeFields));\n    },\n    required (value) {\n      return _.trim(value, '` \"\\'')\n    },\n    hasUppercaseLetters(value) {\n      const uppercaseLetters = _.filter(_.split(value, ''), letter => { \n        return letter === _.toUpper(letter) && _.toLower(letter) !== _.toUpper(letter)\n      });\n      \n      return !Boolean(_.size(uppercaseLetters));\n    },\n    moreThanLimit (value) {\n      if (!value) return true\n       const localValue = \n            value[0] === '`' && value[value.length - 1] === '`' \n            ? value.slice(1, -1)\n            : value;\n      return localValue.length <= 100\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.chatId\" \n  :previousChatId.sync=\"schema.previousChatId\"\n  :isFlowActive.sync=\"schema.isFlowActive\"\n  :isAppCreated=\"schema.isAppCreated\"\n  :isAppUpdated=\"schema.isAppUpdated\"\n  :isAppsProviderAvailable=\"schema.isAppsProviderAvailable\"\n  :savedAppName=\"schema.savedAppName\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :flow=\"$flow\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-pkjuagdtzovbnhqswifcxylmre",
                      "componentLogic": "{\n    data () {\n      return {\n        isNameCustom: false\n      }\n    },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) {\n              this.$emit('input', value); \n            }\n        },\n        getChatErrorMessage () {\n          if(!this.getValue('schema.chatId.required', this.v)) {\n            return `Chat ID is required.`;\n          }\n          \n          if(!this.getValue('schema.chatId.hasUppercaseLetters', this.v)) {\n            return 'Only lowercase is allowed. Uppercase will be transformed to lowercase.';\n          }\n          \n          if (!this.getValue('schema.chatId.moreThanLimit', this.v)) {\n            return `The limit is 100 characters.`\n          } else {\n            return `Chat ID should not contain symbols: :^~?<>|&%.'#[]+=„\"{} and the space characters.`\n          }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        isFlowActive: Boolean,\n        isAppUpdated: Boolean,\n        isAppCreated: Boolean,\n        previousChatId: String,\n        savedAppName: String,\n        isAppsProviderAvailable: Boolean,\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v: Object,\n        flow: Object,\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    watch: {\n      'flow.store.state.flow.lastActionTime': {\n        handler (nv) {\n          this.checkIsFlowActive();\n        },\n        immediate: true\n      }\n    },\n    beforeMount () {\n      // this.checkIsFlowActive(true)\n      this.generatedChatName = this.generateUID();\n      if (!_.trim(this.value, '`') && !this.getValue('isNameCustom')) {\n        this.computedValue = '`' + this.generatedChatName.toLowerCase() + '`'\n      }\n    },\n    methods: {\n      async checkIsFlowActive (immediate) {\n        if (!this.flow.id) {\n          this.$emit('update:isFlowActive', false)\n          return;\n        };\n        const deployments = await this.flow.api.deployments.getActiveDeploymentsByFlowId(this.flow.id)\n        if (deployments.length !== 0) {\n          this.$emit('update:previousChatId', this.value)\n        }\n        if (this.isFlowActive === (deployments.length !== 0)) return\n        this.$emit('update:isFlowActive', deployments.length !== 0)\n      },\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      generateUID () {\n        var firstPart = (Math.random() * 46656) | 0;\n        var secondPart = (Math.random() * 46656) | 0;\n        firstPart = (\"000\" + firstPart.toString(36)).slice(-4);\n        secondPart = (\"000\" + secondPart.toString(36)).slice(-3);\n        return firstPart + secondPart;\n      },\n      generateNewId () {\n        this.computedValue = '`' + this.generateUID().toLowerCase() + '`'\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-chat-id\">\n  <div class=\"flex-align-start\" :class=\"[{'icon-shown': !(isFlowActive && savedAppName)}]\">\n    <or-text-expression \n      :class=\"['text-input', { 'full': (isFlowActive && savedAppName) }]\"\n      label=\"Chat ID\"\n      description=\"Will be a part of your Rich Web Chat path\"\n      help-text=\"Your Chat ID should be unique across all accounts or you won't be able to activate your flow\"\n      :error=\"getChatErrorMessage\"\n      disableVariables\n      placeholder=\"Enter Chat ID\"\n      disableCodeMode\n      :invalid=\"getValue('schema.chatId.$invalid', v)\"\n      :readonly=\"readonly || (isFlowActive && savedAppName)\"\n      v-model.lazy=\"computedValue\"\n    />\n    <or-icon-button \n      v-if=\"!(isFlowActive && savedAppName)\"\n      icon=\"autorenew\"\n      size=\"small\"\n      tooltip=\"Generate Chat ID\"\n      tooltip-position=\"top center\"\n      @click=\"generateNewId\"\n      :disabled=\"readonly\"\n    ></or-icon-button>\n  </div>\n  \n  <div v-if=\"!isFlowActive\" class=\"rwc-not-active-warning\">\n    Activate your flow below to generate links\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-not-active-warning {\n  padding: 10px;\n  border-radius: 4px;\n  background-color: rgba(#409fec, 0.1);\n  font-size: 14px;\n}\n\n.fade-enter-active, .fade-leave-active {\n  transition: opacity .3s;\n}\n.fade-enter, .fade-leave-to /* .fade-leave-active до версии 2.1.8 */ {\n  opacity: 0;\n}\n.flex-align-start {\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  \n  .text-input {\n    width: calc(100% - (36px + 8px));\n  }\n  \n  .text-input.full {\n    width: 100%;\n  }\n}\n\n.ui-icon-button--type-primary.ui-icon-button--color-default {\n    position: relative;\n    top: 38px;\n    margin-left: 8px;\n    flex-shrink: 0;\n}\n\n.ui-icon-button--type-primary.ui-icon-button--color-default .ui-icon-button__icon {\n  height: 28px;\n}\n\n.or-text-expression {\n  max-width: 100%;\n}\n\n.icon-shown .or-text-expression {\n  max-width: calc(100% - 42px);\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "a1f4409d-474f-4a08-a80f-cc9df7fce920",
                    "data": {
                      "data": "{\n  \"appUrl\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.appUrl\"\n  :isFlowActive=\"schema.isFlowActive\"\n  :isAppCreated=\"schema.isAppCreated\"\n  :isAppUpdated=\"schema.isAppUpdated\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :flow=\"$flow\"\n  :steps=\"steps\"\n  :isAppsProviderAvailable=\"schema.isAppsProviderAvailable\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-haktsuqeovnjcbiplmydrwzgxf",
                      "componentLogic": "{\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    chatId: String,\n    flow: Object,\n    isNew : Boolean,\n    isFlowActive: Boolean,\n    isAppUpdated: Boolean,\n    isAppCreated: Boolean,\n    isAppsProviderAvailable: Boolean,\n    readonly: {\n      type : Boolean \n    },\n    mergeFields: {\n      type: Array\n    },\n    steps: {\n      type: Array,\n      default: () => {\n          return []\n      }\n    },\n    stepId: {\n      type : String,\n      default : ''\n    }\n  },\n  computed: {\n    getAppUrl () {\n      return `https://${this.toUnicode((this.value || '').replace('https://', ''))}`\n    }\n  },\n  methods: {\n    open(){\n      const win = window.open(this.value, '_blank');\n      win.focus();\n    },\n    copy(){\n      document.querySelector('#copy-url-app input').select()\n      document.execCommand(\"copy\");\n    },\n    decodePunycodeString (input) {\n        const base = 36;\n        const tMin = 1;\n        const tMax = 26;\n        const skew = 38;\n        const damp = 700;\n        const initialN = 128;\n        const initialBias = 72;\n        const delimiter = '-';\n      \tconst output = [];\n      \tconst baseMinusTMin = base - tMin;\n        const floor = Math.floor;\n        const stringFromCharCode = String.fromCharCode;\n      \tconst inputLength = input.length;\n      \tconst maxInt = 2147483647;\n      \tlet i = 0;\n      \tlet n = initialN;\n      \tlet bias = initialBias;\n      \tlet basic = input.lastIndexOf(delimiter);\n      \tconst basicToDigit = function(codePoint) {\n        \tif (codePoint - 0x30 < 0x0A) {\n        \t\treturn codePoint - 0x16;\n        \t}\n        \tif (codePoint - 0x41 < 0x1A) {\n        \t\treturn codePoint - 0x41;\n        \t}\n        \tif (codePoint - 0x61 < 0x1A) {\n        \t\treturn codePoint - 0x61;\n        \t}\n        \treturn base;\n        };\n        const adapt = function(delta, numPoints, firstTime) {\n        \tlet k = 0;\n        \tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n        \tdelta += floor(delta / numPoints);\n        \tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n        \t\tdelta = floor(delta / baseMinusTMin);\n        \t}\n        \treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n        };\n      \tif (basic < 0) {\n      \t\tbasic = 0;\n      \t}\n      \tfor (let j = 0; j < basic; ++j) {\n      \t\tif (input.charCodeAt(j) >= 0x80) {\n      \t\t\terror('not-basic');\n      \t\t}\n      \t\toutput.push(input.charCodeAt(j));\n      \t}\n      \tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n      \t\tlet oldi = i;\n      \t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n      \t\t\tif (index >= inputLength) {\n      \t\t\t\terror('invalid-input');\n      \t\t\t}\n      \t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n      \t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n      \t\t\t\terror('overflow');\n      \t\t\t}\n      \t\t\ti += digit * w;\n      \t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n      \t\t\tif (digit < t) {\n      \t\t\t\tbreak;\n      \t\t\t}\n      \t\t\tconst baseMinusT = base - t;\n      \t\t\tif (w > floor(maxInt / baseMinusT)) {\n      \t\t\t\terror('overflow');\n      \t\t\t}\n      \t\t\tw *= baseMinusT;\n      \t\t}\n      \t\tconst out = output.length + 1;\n      \t\tbias = adapt(i - oldi, out, oldi == 0);\n      \t\tif (floor(i / out) > maxInt - n) {\n      \t\t\terror('overflow');\n      \t\t}\n      \t\tn += floor(i / out);\n      \t\ti %= out;\n      \t\toutput.splice(i++, 0, n);\n      \t}\n      \treturn String.fromCodePoint(...output);\n      },\n      toUnicode (input) {\n        const regexPunycode = /^xn--/;\n      \treturn this.mapDomain(input, (string) => {\n      \t\treturn regexPunycode.test(string)\n      \t\t\t? this.decodePunycodeString(string.slice(4).toLowerCase())\n      \t\t\t: string;\n      \t});\n      },\n      mapDomain(string, fn) {\n      \tconst parts = string.split('@');\n      \tconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\n        const regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n        function map(array, fn) {\n        \tconst result = [];\n        \tlet length = array.length;\n        \twhile (length--) {\n        \t\tresult[length] = fn(array[length]);\n        \t}\n        \treturn result;\n        }\n      \tlet result = '';\n      \tif (parts.length > 1) {\n      \t\tresult = parts[0] + '@';\n      \t\tstring = parts[1];\n      \t}\n      \tstring = string.replace(regexSeparators, '\\x2E');\n      \tconst labels = string.split('.');\n      \tconst encoded = map(labels, fn).join('.');\n      \treturn result + encoded;\n      }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <div v-show=\"isAppCreated && isFlowActive && isAppsProviderAvailable\" class=\"rwc-url\">\n    <or-textbox label=\"App URL\" id=\"copy-url-app\" readonly :value=\"getAppUrl\" /> \n    <or-icon-button \n      tooltip=\"Copy link\" \n      tooltip-position=\"top center\"\n      icon=\"filter_none\" \n      class=\"rwc-url__icon-copy\"\n      :disabled=\"!isFlowActive\"\n      @click=\"copy\" \n    />\n    <or-icon-button \n      tooltip=\"Open chat\"\n      tooltip-position=\"top center\"\n      icon=\"open_in_new\"\n      :disabled=\"!isFlowActive\"\n      @click=\"open\"\n    />\n  </div>\n</div>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-url {\n    display: flex;\n    align-items: flex-end;\n    \n    .ui-textbox {\n      width: 100%;\n      margin-bottom: 0;\n      margin-right: 8px;\n      \n      &.is-disabled .ui-textbox__input, \n      &.is-disabled .ui-textbox__textarea {\n        background-color: rgba(#409fec, 0.1);\n        color: #334356;\n      }\n    }\n    \n    .ui-icon-button {\n      flex-shrink: 0;\n      background-color: transparent;\n      \n      .ui-icon {\n        font-size: 16px;\n        color: #c6c6c6;\n      }\n      \n      &:not([disabled]):hover {\n        .ui-icon {\n          color: #64b2da;\n        }\n      }\n    }\n    &__icon-copy {\n      .ui-icon {\n        transform: scaleY(-1);\n      }\n    }\n  }"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "a4a3d938-4714-4e83-9028-3579d9c6b3ae",
                    "data": {
                      "data": "{\n  \"chatUrl\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.chatUrl\"\n  :lookAndFeelTheme=\"schema.lookAndFeelTheme\"\n  :hideChatLoader=\"schema.hideChatLoader\"\n  :isFlowActive=\"schema.isFlowActive\"\n  :isAppCreated=\"schema.isAppCreated\"\n  :isAppUpdated=\"schema.isAppUpdated\"\n  :savedChatUrl=\"schema.savedChatUrl\"\n  :isAppsProviderAvailable=\"schema.isAppsProviderAvailable\"\n  :chatId=\"schema.chatId\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :flow=\"$flow\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-pigzylaevwbkmfhtcjxsnrdquo",
                      "componentLogic": "{\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    lookAndFeelTheme: {\n      type: String,\n      default: 'light'\n    },\n    hideChatLoader: {\n      type: Boolean,\n      default: false\n    },\n    chatId: String,\n    flow: Object,\n    isNew : Boolean,\n    isFlowActive: Boolean,\n    isAppUpdated: Boolean,\n    isAppCreated: Boolean,\n    savedChatUrl: String,\n    isAppsProviderAvailable: Boolean,\n    readonly: {\n      type : Boolean \n    },\n    mergeFields: {\n      type: Array\n    },\n    steps: {\n      type: Array,\n      default: () => {\n          return []\n      }\n    },\n    stepId: {\n      type : String,\n      default : ''\n    }\n  },\n  watch: {\n    chatId: {\n      handler (nv, ov) {\n        this.updateRWCURL(nv);\n      },\n      immediate: true\n    },\n    lookAndFeelTheme (nv, ov) {\n      if (nv === ov) return;\n      this.updateRWCURL(this.chatId);\n    },\n    hideChatLoader(nv, ov) {\n      if (nv === ov) return;\n      this.updateRWCURL(this.chatId);\n    }\n  },\n  computed: {\n    getLoaderTheme() {\n      if(this.hideChatLoader) return `?loader=hidden`;\n      if(_.trim(this.lookAndFeelTheme, '`') === `Auto-detect`) return ``;\n      return '?loader=' + _.toLower(_.trim(this.lookAndFeelTheme, '`'));\n    }\n  },\n  methods: {\n    \n    updateRWCURL(nv) {\n      const accountSlugId = this.encodeUuid(this.flow.accountId);\n        let chatValue = (nv || '``').toLowerCase()\n        chatValue = _.trim(chatValue, '`');\n        if (this.savedChatUrl === `${this.flow.chatUiUrl}/${accountSlugId}/${chatValue}${this.getLoaderTheme}`) return\n        this.$emit('input', `${this.flow.chatUiUrl}/${accountSlugId}/${chatValue}${this.getLoaderTheme}`);\n    },\n    \n    encodeUuid (uuid_) {\n      const bytes   = this.parseUuid(uuid_);\n      const base64 = this._arrayBufferToBase64(bytes)\n      const slug = base64.replace(/\\+/g, '-').replace(/\\//g, '_').substring(0, 22);\n      return slug;\n    },\n    _arrayBufferToBase64( buffer ) {\n      let binary = '';\n      const bytes = new Uint8Array( buffer );\n      const len = bytes.byteLength;\n      for (let i = 0; i < len; i++) {\n          binary += String.fromCharCode( bytes[ i ] );\n      }\n      return window.btoa( binary );\n    },\n    parseUuid(s, buf, offset) {\n      var _byteToHex = [];\n      var _hexToByte = {};\n      for (var i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n      }\n      var i = (buf && offset) || 0;\n      var ii = 0;\n    \n      buf = buf || [];\n      s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n        if (ii < 16) { // Don't overflow!\n          buf[i + ii++] = _hexToByte[oct];\n        }\n      });\n    \n      // Zero out remaining bytes if string was short\n      while (ii < 16) {\n        buf[i + ii++] = 0;\n      }\n    \n      return buf;\n    },\n    open(){\n      const win = window.open(this.value, '_blank');\n      win.focus();\n    },\n    copy(){\n      document.querySelector('#copy-url input').select()\n      document.execCommand(\"copy\");\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <div v-show=\"(isAppCreated && isFlowActive) || !isAppsProviderAvailable\" class=\"rwc-url\">\n    <or-textbox label=\"RWC URL\" id=\"copy-url\" readonly :value=\"value\" /> \n    <or-icon-button \n      tooltip=\"Copy link\" \n      tooltip-position=\"top center\"\n      icon=\"filter_none\" \n      class=\"rwc-url__icon-copy\"\n      :disabled=\"!isFlowActive\"\n      @click=\"copy\" \n    />\n    <or-icon-button \n      tooltip=\"Open chat\"\n      tooltip-position=\"top center\"\n      icon=\"open_in_new\"\n      :disabled=\"!isFlowActive\"\n      @click=\"open\"\n    />\n  </div>\n</div>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-url {\n    display: flex;\n    align-items: flex-end;\n    \n    .ui-textbox {\n      width: 100%;\n      margin-bottom: 0;\n      margin-right: 8px;\n      \n      &.is-disabled .ui-textbox__input, \n      &.is-disabled .ui-textbox__textarea {\n        background-color: rgba(#409fec, 0.1);\n        color: #334356;\n      }\n    }\n    \n    .ui-icon-button {\n      flex-shrink: 0;\n      background-color: transparent;\n      \n      .ui-icon {\n        font-size: 16px;\n        color: #c6c6c6;\n      }\n      \n      &:not([disabled]):hover {\n        .ui-icon {\n          color: #64b2da;\n        }\n      }\n    }\n    &__icon-copy {\n      .ui-icon {\n        transform: scaleY(-1);\n      }\n    }\n  }"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "f739a20e-ccdb-4521-88d0-7124c039a81f",
                    "data": {
                      "data": "",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :isAppCreated=\"schema.isAppCreated\"\n  :isAppUpdated=\"schema.isAppUpdated\"\n  :isFlowActive=\"schema.isFlowActive\"\n  :isAppsProviderAvailable=\"schema.isAppsProviderAvailable\"\n  :appId=\"schema.appId\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :flow=\"$flow\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-hfweypqzdxlnsuakigmbvtrojc",
                      "componentLogic": "{\n  data () {\n    return {\n      codeData: null\n    }\n  },\n    computed : {\n        getQrLink () {\n          if (!this.appId) return ''\n          const params = {\n            id: this.appId,\n            lightColor: 'f6f6f6ff',\n            darkColor: '000000ff',\n            download: true\n          }\n          const queryString = Object.entries(params).map(([key, val]) => `${key}=${val}`).join('&');\n          const url = this.flow.gatewayUrl('2042/app/qr', this.flow.providersAccountId()) + '?' + queryString\n          return url\n        }\n    },\n    watch: {\n      appId: {\n        handler (nv) {\n          if (nv) {\n            this.fetchCode()\n          }\n        },\n        immediate: true\n      }\n    },\n    props : {\n        isAppUpdated: Boolean,\n        isAppCreated: Boolean,\n        isFlowActive: Boolean,\n        isAppsProviderAvailable: Boolean,\n        appId: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        flow: Object,\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      async fetchCode () {\n        const params = {\n          id: this.appId,\n          lightColor: 'f6f6f6ff',\n          darkColor: '000000ff'\n        }\n        const queryString = Object.entries(params).map(([key, val]) => `${key}=${val}`).join('&');\n        const url = this.flow.gatewayUrl('2042/app/qr', this.flow.providersAccountId()) + '?' + queryString\n        const response = await this.$http.get(url)\n        if (response.ok) {\n          this.codeData = response.data\n        }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"isAppCreated && isFlowActive && isAppsProviderAvailable && codeData\">\n  <div class=\"rwc-qr\">\n    <div class=\"rwc-qr__code\" v-html=\"codeData\"/>\n    <a class=\"rwc-qr__link\" target=\"_blank\" :href=\"getQrLink\">Download QR code</a>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-qr {\n  margin: 16px auto 0;\n  max-width: 400px;\n  \n  &__code {\n    border-radius: 4px;\n    border: 1px solid rgb(223, 223, 223);\n    overflow: hidden;\n    \n    svg {\n      margin: 0;\n      line-height: 0;\n      padding: 0;\n      font-size: 0;\n      outline: none;\n      border: none;\n      display: block;\n    }\n  }\n  \n  &__link {\n    font-size: 14px;\n    font-weight: 600;\n    color: #64b2da;\n    margin-top: 16px;\n    display: inline-block;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Set up your RWC client",
                "allowCodeMode": false,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "c98ea773-f622-4bcd-8701-12b8a739da48",
              "data": {
                "open": false,
                "header": "Look and feel",
                "inputs": [
                  {
                    "id": "eb23ca6c-b31d-4140-92ae-49ffb471b566",
                    "data": {
                      "data": "{\n  \"lookAndFeelTheme\": \"Auto-detect\",\n  \"hideChatLoader\": false\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.lookAndFeelTheme\"\n  :hideChatLoader.sync=\"schema.hideChatLoader\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :flow=\"$flow\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-xkainylqhdouspzmgjbwecfvtr",
                      "componentLogic": "{\n  \n  data() {\n    return {\n      showAlert: false\n    }\n  },\n  \n  watch: {\n    value() {\n      this.showAlert = true;\n    },\n    hideChatLoader() {\n      this.showAlert = true;\n    }\n  },\n  \n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        localHideChatLoader: {\n          get() { return this.hideChatLoader; },\n          set(value) { this.$emit('update:hideChatLoader', value); }\n        },\n        getChatUrl () {\n          return this.flow.chatUiUrl;\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        hideChatLoader: {\n          type: Boolean,\n          default: false\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        flow: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-alert @dismiss=\"showAlert = false\" v-show=\"showAlert\">\n  Change of chat Theme or loader appearance updates RWC URL with additional query parameter. \n</or-alert>\n\n<or-radio-group \n  name=\"group8\" \n  :options=\"['Auto-detect', 'Dark', 'Light']\"\n  :disabled=\"readonly\"\n  v-model=\"computedValue\"\n>\n  <span class=\"rwc-look-feel__label\">Theme</span>\n  <div :key=\"slotName\" v-for=\"(slotName, index) in ['/auto_mode.png', '/dark_mode.png', '/light_mode.png']\" :slot=\"'sub-item-' + index\">\n    <span>\n      <img :src=\"`${getChatUrl}${slotName}`\">\n    </span>\n  </div>\n</or-radio-group>\n\n<or-switch :disabled=\"readonly\" v-model=\"localHideChatLoader\">Enable to hide chat loader</or-switch>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-radio-group__radios {\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 16px;\n  }\n  .ui-radio .ui-radio__label-text {\n    font-size: 12px;\n  }\n  .ui-radio-group__label-text {\n    margin-bottom: 4px;\n    font-size: 12px;\n  }\n  .ui-radio.ui-radio-group__radio{\n    position: relative;\n    width: calc(100% / 3);\n    margin-left: 0;\n    padding-top: 75px;\n    display: flex;\n    justify-content: center;\n    \n    &:nth-of-type(1) {\n      margin-left: 0;\n    }\n  }\n  .ui-radio-group__slot-sub-item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: calc(100% / 3);\n    max-width: 100%;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    \n    span {\n      display: block;\n      border-radius: 4px;\n      overflow: hidden;\n    }\n    \n    img {\n      width: 90px;\n      max-width: 100%;\n    }\n    \n    &:nth-of-type(2) {\n      left: calc(100% / 3);\n    }\n    \n    &:nth-of-type(3) {\n      left: auto;\n      right: 0;\n    }\n  }"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "dd105e46-eb87-4db3-97c4-6a5b014e62d9",
                    "data": {
                      "label": "Chat title",
                      "helpText": "",
                      "variable": "lookAndFeelTitle",
                      "multiline": false,
                      "placeholder": "Enter chat title",
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "8b22403b-2b12-4513-ae8a-0072a90990b9",
                    "data": {
                      "label": "Chat description",
                      "helpText": "",
                      "variable": "lookAndFeelDescription",
                      "multiline": false,
                      "placeholder": "Enter chat description",
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "3e43788d-fb1f-415c-aff6-46989bf535f6",
                    "data": {
                      "data": "{\n  \"lookAndFeelHeaderImage\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  lookAndFeelHeaderImage: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.lookAndFeelHeaderImage\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-ymgpucxqrzlhaftenkwbivjdos",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span><b>Header image:</b> {{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      disableVariables\n      disableCodeMode\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Header image URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.lookAndFeelHeaderImage.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add header image from \n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "0fd2b9ac-f864-4907-b8ed-49e3d3caebf6",
                    "data": {
                      "data": "{\n  \"lookAndFeelBotIcon\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  lookAndFeelBotIcon: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.lookAndFeelBotIcon\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-gtdljbsmxqueaznohckivfrwyp",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span><b>Bot icon:</b> {{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      disableVariables\n      disableCodeMode\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Bot icon URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.lookAndFeelBotIcon.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add chat bot icon from \n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "0d3db84e-349b-48dc-acdd-d7b222f38f58",
                    "data": {
                      "label": "Bot answer delay duration",
                      "helpText": "Min 0 sec, max 2 min (Example 2s, 2min)",
                      "variable": "lookAndFeelBotAnswerDelay",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "Enter answer delay duration",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`2 seconds`",
                      "errorMessage": "Must be a valid duration using timestring ('30 seconds', '1 min') format",
                      "maxTimeoutValue": "`2 min`",
                      "minTimeoutValue": "`0s`",
                      "renderCondition": "",
                      "validateRequired": true,
                      "allowDynamicValues": false,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Must be a valid duration using timestring ('30 seconds', '1 min') format",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "validated_timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.1"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": "validated_timestring",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"validated_timestring\"]"
                    ]
                  },
                  {
                    "id": "4e7bd30f-ebbb-44b9-87c5-20aaf1e5e4f2",
                    "data": {
                      "label": "Allow user to view conversation history",
                      "helpText": "",
                      "variable": "lookAndFeelAllowToViewHistory",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "e1c62f5e-0204-43dc-b7b5-a9ce6f2d5240",
                    "data": {
                      "label": "Allow to continue interrupted conversation or start a new one",
                      "helpText": "",
                      "variable": "lookAndFeelAllowRestoreSession",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "9b71c5e7-f622-4f99-b378-fb256c0047bd",
                    "data": {
                      "label": "Allow starting a new conversation when the flow is ended",
                      "helpText": "",
                      "variable": "lookAndFeelAllowStartNewSession",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "d1f428e3-4a56-4de4-8fca-843b3843e364",
                    "data": {
                      "label": "Customize browser tab",
                      "helpText": "",
                      "variable": "customizeBrowserTab",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "ef2f387c-1f01-4120-ac01-0615c8407a04",
                    "data": {
                      "help": "Suggested length is up to 25 chars.",
                      "label": "Default tab name",
                      "variable": "defaultTabTitle",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Enter default tab name",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`OneReach.ai Chat`",
                      "allowCodeMode": false,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "25",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9daffe1d-7c9c-40f7-921a-56a3730d7f25",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9daffe1d-7c9c-40f7-921a-56a3730d7f25",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "4e8cc015-ed1b-400a-bcd6-9307e29b3aa6",
                    "data": {
                      "data": "{\n  \"faviconSourceImage\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  faviconSourceImage: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.faviconSourceImage\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-enowspzkljfmcytvuirghaqxdb",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['ico', 'jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF', 'gif', 'GIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        isGenerating: false,\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        },\n        isIconsGenerated () {\n          return false\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      },\n      async generateIcons () {\n        this.isGenerating = true\n        const API_KEY = '58f1c8e6822102454e4208eb510f92a7ca360462'\n        const master_picture = (this.value.location || _.trim(this.value.linkUrl, '`'))\n        try {\n          const response = await fetch('https://sdkapi.staging.api.onereach.ai/http/5d2035e4-6da3-4280-8b19-8337492d7210/generate-favicon-pack', {\n            method: 'POST',\n            body: {\n              master_picture\n            }\n          })\n          console.log('RESPONSE -> ', response)\n        } catch (e) {\n          console.warn(e)\n        }\n        \n        console.log('master_picture', master_picture)\n        const realfaviconConfig = {\n        \t\"favicon_generation\": {\n        \t\t\"api_key\": API_KEY,\n        \t\t\"master_picture\": {\n        \t\t\t\"type\": \"url\",\n        \t\t\t\"url\": master_picture\n        \t\t},\n        \t\t\"files_location\": {\n        \t\t\t\"type\": \"path\",\n        \t\t\t\"path\": \"/path/to/icons\"\n        \t\t},\n        \t\t\"favicon_design\": {\n        \t\t\t\"desktop_browser\": {},\n        \t\t\t\"ios\": {\n        \t\t\t\t\"picture_aspect\": \"background_and_margin\",\n        \t\t\t\t\"margin\": \"4\",\n        \t\t\t\t\"background_color\": \"#123456\",\n        \t\t\t\t\"startup_image\": {\n        \t\t\t\t\t\"master_picture\": {\n        \t\t\t\t\t\t\"type\": \"url\",\n        \t\t\t\t\t\t\"url\": \"http://example.com/pic_for_ios_startup.png\"\n        \t\t\t\t\t},\n        \t\t\t\t\t\"background_color\": \"#654321\"\n        \t\t\t\t},\n        \t\t\t\t\"assets\": {\n        \t\t\t\t\t\"ios6_and_prior_icons\": false,\n        \t\t\t\t\t\"ios7_and_later_icons\": true,\n        \t\t\t\t\t\"precomposed_icons\": false,\n        \t\t\t\t\t\"declare_only_default_icon\": true\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"windows\": {\n        \t\t\t\t\"picture_aspect\": \"white_silhouette\",\n        \t\t\t\t\"background_color\": \"#654321\",\n        \t\t\t\t\"assets\": {\n        \t\t\t\t\t\"windows_80_ie_10_tile\": true,\n        \t\t\t\t\t\"windows_10_ie_11_edge_tiles\": {\n        \t\t\t\t\t\t\"small\": false,\n        \t\t\t\t\t\t\"medium\": true,\n        \t\t\t\t\t\t\"big\": true,\n        \t\t\t\t\t\t\"rectangle\": false\n        \t\t\t\t\t}\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"firefox_app\": {\n        \t\t\t\t\"picture_aspect\": \"circle\",\n        \t\t\t\t\"keep_picture_in_circle\": \"true\",\n        \t\t\t\t\"circle_inner_margin\": \"5\",\n        \t\t\t\t\"background_color\": \"#456789\",\n        \t\t\t\t\"manifest\": {\n        \t\t\t\t\t\"app_name\": \"My sample app\",\n        \t\t\t\t\t\"app_description\": \"Yet another sample application\",\n        \t\t\t\t\t\"developer_name\": \"Philippe Bernard\",\n        \t\t\t\t\t\"developer_url\": \"http://stackoverflow.com/users/499917/philippe-b\"\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"android_chrome\": {\n        \t\t\t\t\"picture_aspect\": \"shadow\",\n        \t\t\t\t\"manifest\": {\n        \t\t\t\t\t\"name\": \"My sample app\",\n        \t\t\t\t\t\"display\": \"standalone\",\n        \t\t\t\t\t\"orientation\": \"portrait\",\n        \t\t\t\t\t\"start_url\": \"/homepage.html\",\n        \t\t\t\t\t\"existing_manifest\": \"{\\\"name\\\": \\\"Yet another app\\\"}\"\n        \t\t\t\t},\n        \t\t\t\t\"assets\": {\n        \t\t\t\t\t\"legacy_icon\": true,\n        \t\t\t\t\t\"low_resolution_icons\": false\n        \t\t\t\t},\n        \t\t\t\t\"theme_color\": \"#4972ab\"\n        \t\t\t},\n        \t\t\t\"safari_pinned_tab\": {\n        \t\t\t\t\"picture_aspect\": \"black_and_white\",\n        \t\t\t\t\"threshold\": 60,\n        \t\t\t\t\"theme_color\": \"#136497\"\n        \t\t\t},\n        \t\t\t\"coast\": {\n        \t\t\t\t\"picture_aspect\": \"background_and_margin\",\n        \t\t\t\t\"background_color\": \"#136497\",\n        \t\t\t\t\"margin\": \"12%\"\n        \t\t\t},\n        \t\t\t\"open_graph\": {\n        \t\t\t\t\"picture_aspect\": \"background_and_margin\",\n        \t\t\t\t\"background_color\": \"#136497\",\n        \t\t\t\t\"margin\": \"12%\",\n        \t\t\t\t\"ratio\": \"1.91:1\"\n        \t\t\t},\n        \t\t\t\"yandex_browser\": {\n        \t\t\t\t\"background_color\": \"background_color\",\n        \t\t\t\t\"manifest\": {\n        \t\t\t\t\t\"show_title\": true,\n        \t\t\t\t\t\"version\": \"1.0\"\n        \t\t\t\t}\n        \t\t\t}\n        \t\t},\n        \t\t\"settings\": {\n        \t\t\t\"compression\": \"3\",\n        \t\t\t\"scaling_algorithm\": \"Mitchell\",\n        \t\t\t\"error_on_image_too_small\": true,\n        \t\t\t\"readme_file\": true,\n        \t\t\t\"html_code_file\": false,\n        \t\t\t\"use_path_as_is\": false\n        \t\t},\n        \t\t\"versioning\": {\n        \t\t\t\"param_name\": \"ver\",\n        \t\t\t\"param_value\": \"15Zd8\"\n        \t\t}\n        \t}\n        }\n        \n        try {\n          const response = await fetch('https://realfavicongenerator.net/api/favicon', {\n            method: 'POST',\n            mode: 'cors',\n            headers: { \"Content-Type\": \"text/plain\" },\n            body: JSON.stringify(realfaviconConfig)\n          })\n          console.log('RESPONSE => ', response)\n        } catch (e) {\n          console.error(e)\n        }\n        this.isGenerating = false\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2f0781ee-3050-478a-b732-5669c3acc1c7",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2f0781ee-3050-478a-b732-5669c3acc1c7",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span><b>Favicon:</b> {{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl || isGenerating\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      disableVariables\n      disableCodeMode\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Favicon URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.faviconSourceImage.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add custom favicon from \n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2f0781ee-3050-478a-b732-5669c3acc1c7",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n.generate-btn {\n  margin-bottom: 8px;\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    margin-bottom: 8px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "05a61c06-634d-4db3-bd28-af0c28909f64",
                    "data": {
                      "label": "Changed name, when tab is out of focus",
                      "helpText": "",
                      "variable": "changeTabTitle",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2b500f6e-b8c9-4b1b-85a6-74ab00ba2447",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2b500f6e-b8c9-4b1b-85a6-74ab00ba2447",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "da345fa4-33fe-4805-8f00-9623b488372a",
                    "data": {
                      "help": "Suggested length is up to 25 chars",
                      "label": "Changed tab name",
                      "variable": "tabTitle",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. New message for you",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "25",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "210361e9-27b6-47ac-8433-daa5dd5db49c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "a566a78d-6209-48fa-a2df-e7304a80a1ab",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.changeTabTitle",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "fcfdb8b6-8a62-43e6-83d1-2e74457e645e",
                          "errorMessage": "Changed tab name is required",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a2d6acaf-a642-4d1e-b66d-235e5dad8383",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.tabTitle, '`')",
                                "valueType": "advanced",
                                "firstValue": "schema.tabTitle",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "210361e9-27b6-47ac-8433-daa5dd5db49c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "a566a78d-6209-48fa-a2df-e7304a80a1ab",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.changeTabTitle",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "0c3cf1c6-abf6-4222-829a-aa2753a63b64",
                    "data": {
                      "label": "Change interval",
                      "helpText": "Example: 2s, 2 min",
                      "variable": "tabTitleInterval",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "E.g. 1 minute",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "Interval between default name and changed name switch. Set 0s to show only changed tab name.",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`0s`",
                      "errorMessage": "Value must be less or equal than 72h",
                      "maxTimeoutValue": "`72h`",
                      "minTimeoutValue": "`0s`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c8626d44-0a83-4969-97e6-bfe9e1698ca8",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "1673c049-8bbc-40cc-beba-21d22c041c94",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.changeTabTitle",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": false,
                      "iconHelpTextOption": "modal",
                      "savedUserErrorMessage": "Value must be less or equal than 72h",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c8626d44-0a83-4969-97e6-bfe9e1698ca8",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeBrowserTab",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "1673c049-8bbc-40cc-beba-21d22c041c94",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.changeTabTitle",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "validated_timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.1"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": "validated_timestring",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"validated_timestring\"]"
                    ]
                  }
                ],
                "description": "How your client will look to visitors",
                "allowCodeMode": false,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": false,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "c7bf894a-b114-48d4-a0e4-e58a6b6f64f7",
              "data": {
                "open": false,
                "header": "Embedded chat customization",
                "inputs": [
                  {
                    "id": "6e05eef6-8370-4913-88f3-8777b39faaff",
                    "data": {
                      "data": "{\n  \"embedLogo\": [],\n  \"widgetColor\": \"#409fec\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/embedLogo/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  embedLogo: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.embedLogo\" \n  :widgetColor.sync=\"schema.widgetColor\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-wabtnrqdoxhgyeuvifzsjpcmlk",
                      "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        colors: { r: 255, g: 0, b: 0 },\n        allowFileUpdate: false\n      };\n    },\n    components: {\n      'color-picker': libs.vueColor.Swatches\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        embedLogo : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    mounted () {\n      this.colors = {hex: this.widgetColor || '#42c3f8'}\n    },\n    watch: {\n      colors: {\n        handler (nv) {\n          if (this.widgetColor === _.get(nv, 'hex')) return\n          this.$emit('update:widgetColor', _.get(nv, 'hex') || '#42c3f8')\n        },\n        deep: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        widgetColor: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        if(!this.allowFileUpdate) return;\n        \n        const medias = _.cloneDeep(this.embedLogo);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.embedLogo = medias;\n        \n        if(this.embedLogo[0].location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.embedLogo = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.embedLogo = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <div class=\"rwc__media-media\">\n    <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n      <or-asset-manager\n        v-if=\"!usedUrlInputs\"\n        use-files\n        :auth-token=\"authToken\"\n        :multi-select=\"false\"\n        :max-files=\"maxFiles\"\n        :allowed-file-types=\"allowedFileTypes\"\n        :files-api-url=\"$flow.filesApiUrl\"\n        :allowFilesAndData=\"false\"\n        v-model=\"embedLogo\"\n      />\n    </or-modal>\n    <or-list\n      ref=\"mediaList\"\n      :value=\"value\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :new-item-method=\"addNewUrl\"\n      :readonly=\"readonly\"\n      class=\"rwc-media__list\"\n    >\n      <template slot-scope=\"item\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n            <span>{{ item.item.name }}</span>\n            <div class=\"file-controls\">\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n            </div>\n        </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item input\">\n            <or-text-expression\n              disableVariables\n              disableCodeMode\n              v-model=\"item.item.linkUrl\"\n              :mergeFields=\"mergeFields\"\n              :steps=\"steps\"\n              :step-id=\"stepId\"\n              :readonly=\"readonly\"\n              disableVariables\n              disableCodeMode\n              label=\"Widget icon URL\"\n              placeholder=\"Enter URL to the file\"\n              :invalid=\"getValue(`schema.embedLogo.$each[${item.index}].$invalid`, v)\"\n              error=\"Add URL or delete input\"\n              @input=\"val => updateMedias(item.item, val)\"\n            />\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n        </div>\n      </template>\n      <!--add extra file start-->\n      <div slot=\"footer\">\n      </div>\n      <!--add extra file end-->\n    </or-list>\n    <!--media items end-->\n    <div v-if=\"!(value && value.length)\"  class=\"rwc-media__buttons\">\n      + Add widget icon from\n      <or-button\n        @click=\"openModal('select-media')\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__button', { disabled : readonly }]\"\n        disableRipple\n      >\n        Files\n      </or-button>\n      or use\n      <or-button\n        @click=\"changeMediaToUrl\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__button', { disabled : readonly }]\"\n        disableRipple\n      >\n        URL\n      </or-button>\n    </div>\n  </div>\n  <div :class=\"['rwc__media-color', { 'margin-top': value[0] && value[0].hasOwnProperty('linkUrl')  }]\">\n    <div class=\"rwc__media__color\">\n      <or-icon-button \n        ref=\"widgetPicker\" \n        :icon=\"null\" \n        :size=\"16\" \n        tooltip=\"Widget color\" \n        tooltipPosition=\"top right\"\n        :style=\"`background-color: ${widgetColor}`\"\n        tooltip-position=\"top center\" \n        class=\"rwc__media__color-picker\"\n        :disabled=\"readonly\"\n      ></or-icon-button>\n      \n      <or-popover class=\"custom-popover\" trigger=\"widgetPicker\">\n        <color-picker v-model=\"colors\"></color-picker>\n      </or-popover>\n    </div>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc__media {\n  margin-top: 10px;\n  display: flex;\n  margin-bottom: 10px;\n  width: 100%;\n  align-items: flex-start;\n  line-height: 2;\n  margin-top: -4px;\n  \n  &-media {\n    flex-grow: 1;\n    max-width: calc(100% - 32px);\n  }\n  \n  &-color {\n    margin-top: 8px;\n    margin-right: 8px;\n  }\n  \n  &-color.margin-top {\n    margin-top: 45px;\n  }\n  \n  &__color {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex-shrink: 0;\n    height: 100%;\n    \n    &-picker {\n      width: 16px;\n      height: 16px;\n      margin-left: 16px;\n    }\n  }\n}\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    margin-top: 4px;\n    font-size: 14px;\n    font-weight: bold;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n    \n    .list-item {\n      padding: 0 !important;\n    }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    .or-text-expression {\n      max-width: calc(100% - 22px);\n      min-width: 100%;\n    }\n    .rwc-media__item {\n      \n      &.input {\n        width: calc(100% - 22px);\n        max-width: calc(100% - 22px);\n      }\n      \n    }\n      \n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 22px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 22px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    padding: 0;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      line-height: 2;\n    }\n    \n    &.input {\n      margin-top: 4px;\n      .rwc-media__delete {\n        margin-top: 40px;\n      }\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    padding: 0;\n    margin-left: 4px;\n    height: 18px;\n    \n    &.margin-top {\n      margin-top: 42px;\n    }\n    \n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "719327f9-772f-4ecf-a7d5-412ab2010204",
                    "data": {
                      "label": "Widget location on the website",
                      "options": [
                        {
                          "label": "Bottom right corner",
                          "value": "bottom-right",
                          "vforkey": "91fdd38a-22f5-4050-8055-c2d9989f73ba"
                        },
                        {
                          "label": "Bottom left corner",
                          "value": "bottom-left",
                          "vforkey": "00c0bd88-336b-4b25-8101-13ef9b044eb7"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "embedPosition",
                      "placeholder": "Select Field",
                      "defaultValue": "bottom-right",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formSelect",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (simple)",
                    "compiled": {},
                    "component": "formSelect",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelect\"]"
                    ]
                  },
                  {
                    "id": "3efa242e-4582-4b0c-97a4-44c2816931bf",
                    "data": {
                      "label": "Widget icon animation",
                      "options": [
                        {
                          "label": "Pulse",
                          "value": "pulse",
                          "vforkey": "ca389bb5-d56c-43fa-b5fc-80a99265edb4"
                        },
                        {
                          "label": "Ring",
                          "value": "ring",
                          "vforkey": "c7733ab4-64ec-434c-99a5-8730467f8cfc"
                        },
                        {
                          "label": "Zoom",
                          "value": "zoom",
                          "vforkey": "15c67236-ee5f-4abb-9a43-dbc4a05cc49e"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "embedAnimation",
                      "placeholder": "Select Field",
                      "defaultValue": "pulse",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formSelect",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (simple)",
                    "compiled": {},
                    "component": "formSelect",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelect\"]"
                    ]
                  },
                  {
                    "id": "7a263b86-e986-4b33-b16c-53b86adfd346",
                    "data": {
                      "label": "Auto-open chat delay duration",
                      "helpText": "Min 0 sec, max 10 min",
                      "variable": "autoExpandDelay",
                      "outputType": "ms",
                      "computeType": "ui",
                      "placeholder": "E.g. 10 seconds",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "Which will be shown from the moment, the user has loaded the website. Set 0s to wait until user clicks.",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`15 seconds`",
                      "errorMessage": "Enter a valid value (Example: 10 s, 10 min)",
                      "variableName": "autoExpandDelay",
                      "maxTimeoutValue": "`10 minutes`",
                      "minTimeoutValue": "`0s`",
                      "renderCondition": "",
                      "validateRequired": false,
                      "allowDynamicValues": false,
                      "iconHelpTextOption": "modal",
                      "savedUserErrorMessage": "Enter a valid value (Example: 10 s, 10 min)",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "validated_timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.1"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": "validated_timestring",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"validated_timestring\"]"
                    ]
                  },
                  {
                    "id": "c4a639e3-4be1-44e3-b203-646aaad7162c",
                    "data": {
                      "label": "Allow to change chat window size",
                      "helpText": "",
                      "variable": "embedAllowChangeWindowSize",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "40d67c0b-72bc-4010-8133-d1977a4ec79d",
                    "data": {
                      "label": "Allow to drag chat window",
                      "helpText": "",
                      "variable": "embedAllowDragChatWindow",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://release.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://release.components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "4393d60c-61bb-4e6f-b522-5762bed8673a",
                    "data": {
                      "label": "Blurred background",
                      "helpText": "",
                      "variable": "embedAppearanceBlurredBackground",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "e5ab920e-cb11-4a64-ba89-5a06eb5d41d3",
                    "data": {
                      "label": "Invitation message setup",
                      "helpText": "",
                      "variable": "embedUseInvitation",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "cecc3608-6c38-421a-abb2-3f77606ec70e",
                    "data": {
                      "help": "Suggested length is up to 160 chars",
                      "label": "Text",
                      "variable": "embedInvite",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": 160,
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1c3b265b-db61-4111-998c-2695ca1aa477",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "67da2d5f-f509-4632-9d90-97504d67e559",
                          "errorMessage": "Invitation message text is required",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "5e85e029-f37d-4d54-ade1-29772c94d4d5",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "    !_.trim(_.get(schema.embedInviteImage, '[0].location') || _.get(schema.embedInviteImage, '[0].linkUrl') || _.get(schema.embedInviteImage, 'location') || _.get(schema.embedInviteImage, 'linkUrl') || ``, ' \"`\\'') &&\n    !_.trim(schema.embedInviteButton, ' \"`\\'') &&\n    !_.trim(schema.embedInvite, ' \"`\\'')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1c3b265b-db61-4111-998c-2695ca1aa477",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "43cdfc8d-0b99-450c-bf63-37b474141a02",
                    "data": {
                      "data": "{\n  \"embedInviteImage\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  embedInviteImage: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.embedInviteImage\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :embedInvite=\"schema.embedInvite\"\n  :embedInviteButton=\"schema.embedInviteButton\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-gjywaplsqdumhntebkzviorxfc",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'gif', 'GIF', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        },\n        normalizedEmbedInvite () {\n          return _.trim(this.embedInvite, ' \"`\\'');\n        },\n        normalizedEmbedInviteImage () {\n          const url = _.get(this.medias, '[0].location') || _.get(this.medias, '[0].linkUrl') || _.get(this.medias, 'location') || _.get(this.medias, 'linkUrl') || ``;\n          return _.trim(url, ' \"`\\'');\n        },\n        normalizedEmbedInviteButton () {\n          return _.trim(this.embedInviteButton, ' \"`\\'');\n        },\n        hasError () {\n          return !this.normalizedEmbedInvite && !this.normalizedEmbedInviteImage && !this.normalizedEmbedInviteButton;\n        },\n    },\n    props : {\n        value : { type : String, default : '' },\n        embedInvite: { type: String, default: `` },\n        embedInviteButton: { type: String, default: `` },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6e36cc59-0660-4f38-99e6-0b5533137cbf",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6e36cc59-0660-4f38-99e6-0b5533137cbf",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      disableVariables\n      disableCodeMode\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Image URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.embedInviteImage.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add image from \n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': !isNew && hasError }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': !isNew && hasError  }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6e36cc59-0660-4f38-99e6-0b5533137cbf",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "23846773-79ed-4059-a43f-658dc4c302f6",
                    "data": {
                      "help": "Suggested length is up to 20 chars",
                      "label": "Button",
                      "variable": "embedInviteButton",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "20",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6656c7ae-5d9f-4323-a150-ad55db5370c0",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "8275a851-4e39-45f0-8231-e3270b4e712f",
                          "errorMessage": "Button label is required",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "37d50ed4-6ff3-4573-9b3a-6fb1de737dfe",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "    !_.trim(_.get(schema.embedInviteImage, '[0].location') || _.get(schema.embedInviteImage, '[0].linkUrl') || _.get(schema.embedInviteImage, 'location') || _.get(schema.embedInviteImage, 'linkUrl') || ``, ' \"`\\'') &&\n    !_.trim(schema.embedInviteButton, ' \"`\\'') &&\n    !_.trim(schema.embedInvite, ' \"`\\'')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6656c7ae-5d9f-4323-a150-ad55db5370c0",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "5c53e542-c971-48e9-a8ac-01b2a44d0fc4",
                    "data": {
                      "label": "Invitation message delay duration",
                      "helpText": "Min 0 sec, max 10 min",
                      "variable": "embedInviteTimeout",
                      "outputType": "ms",
                      "computeType": "ui",
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "Delay duration of invitation message appearance, once the chat widget was loaded on the web page",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`5 seconds`",
                      "errorMessage": "Enter a valid value (Example: 10 s, 10 min)",
                      "variableName": "embedInviteTimeout",
                      "maxTimeoutValue": "`10 min`",
                      "minTimeoutValue": "`0s`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9255dddb-5a4d-47eb-aa8a-4ebac7debf73",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": false,
                      "iconHelpTextOption": "modal",
                      "savedUserErrorMessage": "Enter a valid value (Example: 10 s, 10 min)",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9255dddb-5a4d-47eb-aa8a-4ebac7debf73",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "validated_timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.1"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": "validated_timestring",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"validated_timestring\"]"
                    ]
                  },
                  {
                    "id": "f37e4a4d-6ab9-4b6b-afd3-00560355f922",
                    "data": {
                      "label": "Icon \"Close invitation message\"",
                      "helpText": "",
                      "variable": "emdedShowCloseIcon",
                      "trueValue": "",
                      "falseValue": "",
                      "helpTextURL": "",
                      "isHtmlLabel": false,
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "helpTextOption": "none",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f92ecd9c-e9bb-4b6b-88ae-1bef1b30bc4a",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "iconHelpTextOption": "none",
                      "forceCheckCondition": {
                        "label": "`Force check`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "forceUncheckCondition": {
                        "label": "`Force uncheck`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f92ecd9c-e9bb-4b6b-88ae-1bef1b30bc4a",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.embedUseInvitation",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCheckBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Checkbox",
                    "compiled": {},
                    "component": "formCheckBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCheckBox\"]"
                    ]
                  },
                  {
                    "id": "cc427c42-800e-4df3-8a51-a0bc91edf6dd",
                    "data": {
                      "label": "Preview webpage URL",
                      "helpText": "",
                      "variable": "embedPreviewPageUrl",
                      "multiline": false,
                      "placeholder": "Add URL here",
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "a4776640-a5ed-4327-9897-0678796e3bb3",
                          "errorMessage": "URL should start with http:// or https://",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a7eae757-c53d-49c1-82f8-407578ab489e",
                                "ruleType": {
                                  "func": "{ return !_.startsWith(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "string",
                                    "string"
                                  ],
                                  "label": "doesn't start with",
                                  "modes": [
                                    "stringNums",
                                    "ignoreCase",
                                    "trim",
                                    "trimQuotes"
                                  ],
                                  "category": "string"
                                },
                                "codeValue": "_.trim(schema.embedPreviewPageUrl, ' `\"\\'').length && !_.startsWith(_.trim(schema.embedPreviewPageUrl, ' `'), `http://`)",
                                "valueType": "advanced",
                                "firstValue": "schema.embedPreviewPageUrl",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "df09d235-afb0-4e4b-88c6-6a388baf6e8e",
                                "ruleType": {
                                  "func": "{ return !_.startsWith(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "string",
                                    "string"
                                  ],
                                  "label": "doesn't start with",
                                  "modes": [
                                    "stringNums",
                                    "ignoreCase",
                                    "trim",
                                    "trimQuotes"
                                  ],
                                  "category": "string"
                                },
                                "codeValue": "_.trim(schema.embedPreviewPageUrl, ' `\"\\'').length && !_.startsWith(_.trim(schema.embedPreviewPageUrl, ' `'), `https://`)",
                                "valueType": "advanced",
                                "firstValue": "schema.embedPreviewPageUrl",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "b2c462b0-61e2-4dba-a265-54cc2ab0768b",
                          "errorMessage": "Invalid URL",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "b0f9da11-96c4-46aa-af65-fcf1d0e1eb78",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.embedPreviewPageUrl, ' `\"\\'').length && !new RegExp('^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$','i').test(_.trim(schema.embedPreviewPageUrl, ' `\"\\''))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "b53624ff-236f-42cf-9980-4ee7f786ef89",
                    "data": {
                      "data": "{\"stepVariable\": \"defaultValue\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :isAppCreated=\"schema.isAppCreated\"\n  :isAppUpdated=\"schema.isAppUpdated\"\n  :lookAndFeelTheme=\"schema.lookAndFeelTheme\"\n  :lookAndFeelTitle=\"schema.lookAndFeelTitle\"\n  :lookAndFeelDescription=\"schema.lookAndFeelDescription\"\n  :lookAndFeelHeaderImage=\"schema.lookAndFeelHeaderImage\"\n  :lookAndFeelBotAnswerDelay=\"schema.lookAndFeelBotAnswerDelay\"\n  :lookAndFeelIsCustomMessageTimeFormat=\"schema.lookAndFeelIsCustomMessageTimeFormat\"\n  :lookAndFeelCustomTimeFormat=\"schema.lookAndFeelCustomTimeFormat\"\n  :autoExpandDelay=\"schema.autoExpandDelay\"\n  :isAppsProviderAvailable=\"schema.isAppsProviderAvailable\"\n  :embedPosition=\"schema.embedPosition\"\n  :useGlobalCommands=\"schema.useGlobalCommands\"\n  :globalCommandsList=\"schema.globalCommandsList\"\n  :embedAnimation=\"schema.embedAnimation\"\n  :embedLogo=\"schema.embedLogo\"\n  :embedInvite.sync=\"schema.embedInvite\"\n  :embedAllowChangeWindowSize.sync=\"schema.embedAllowChangeWindowSize\"\n  :embedAllowDragChatWindow.sync=\"schema.embedAllowDragChatWindow\"\n  :botIcon.sync=\"schema.lookAndFeelBotIcon\"\n  :embedAppearanceBlurredBackground.sync=\"schema.embedAppearanceBlurredBackground\"\n  :embedUseInvitation=\"schema.embedUseInvitation\"\n  :embedInviteTimeout=\"schema.embedInviteTimeout\"\n  :embedAllowStartNewConversation=\"schema.lookAndFeelAllowStartNewSession\"\n  :embedInviteImage.sync=\"schema.embedInviteImage\"\n  :widgetColor=\"schema.widgetColor\"\n  :embedPreviewPageUrl=\"schema.embedPreviewPageUrl\"\n  :embedInviteButton.sync=\"schema.embedInviteButton\"\n  :showCloseIcon=\"schema.emdedShowCloseIcon\"\n  :isAppCreated=\"schema.isAppCreated\"\n  :isFlowActive=\"schema.isFlowActive\"\n  :customizeHeader=\"schema.customizeHeader\"\n  :headerHtml=\"schema.headerHtml\"\n  :headerCss=\"schema.headerCss\"\n  :headerJs=\"schema.headerJs\"\n  :useFooter=\"schema.useFooter\"\n  :footerHtml=\"schema.footerHtml\"\n  :footerCss=\"schema.footerCss\"\n  :footerJs=\"schema.footerJs\"\n  :showFooterAt=\"schema.showFooterAt\"\n  :chatUrl=\"schema.chatUrl\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :flow=\"$flow\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-mtfuigezqxdckyrnljwsbovpha",
                      "componentLogic": "{\n    computed : {\n        isDisabled() {\n          return (!this.isAppCreated && this.isAppsProviderAvailable) || !this.isFlowActive;\n        },\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getThumb () {\n          return _.trim(_.get(this, 'embedLogo[0].location'), '`') || _.trim(_.get(this, 'embedLogo[0].linkUrl'), '`')\n        },\n        getImage () {\n          return _.trim(_.get(this, 'embedInviteImage.location'), '`') || _.trim(_.get(this, 'embedInviteImage.linkUrl'), '`')\n        },\n        code () {\n          return `<!-- In <head> add scripts and styles to your html page -->\n<script src=\"${this.flow.chatUiUrl}/lib/richWebChat.umd.min.js\"></script>\n<link rel=\"stylesheet\" href=\"${this.flow.chatUiUrl}/lib/richWebChat.css\"/>\n\n<!-- insert code below into <body> -->\n<div id=\"rwc\"></div>\n<script>\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var RWC = richWebChat.default\n    var app = new RWC({\n      container: '#rwc', // DOM element selector where chat will be inserted\n      chatUrl: '${this.chatUrl}', // url of your chat. required\n      autoExpandDelay: ${this.autoExpandDelay},\n      position: '${this.embedPosition}',\n      inviteMessage: \"${_.trim(this.embedInvite, '\\`').replace(/\"/gi, '\\\\\"')}\",\n      inviteButton: \"${_.trim(this.embedInviteButton, '\\`').replace(/\"/gi, '\\\\\"')}\",\n      inviteImage: ${this.getImage ? '\\'' + this.getImage + '\\'' : undefined},\n      showCloseIcon: ${this.showCloseIcon},\n      inviteTimeout: ${this.embedInviteTimeout},\n      allowChangeChatWindowSize: ${this.embedAllowChangeWindowSize},\n      allowDrag: ${this.embedAllowDragChatWindow},\n      widgetColor: '${this.widgetColor}',\n      allowStartNewConversation: ${this.embedAllowStartNewConversation},\n      thumbLogo: ${this.getThumb ? '\\'' + this.getThumb + '\\'' : undefined},\n      animation: '${this.embedAnimation}', // 'pulse', 'ring', 'zoom',\n      appearance: {\n        blurredBackground: ${this.embedAppearanceBlurredBackground}\n      },\n      pageData: {\n        fname: 'foo'\n      }\n    })\n  });\n</script>\n          `\n        }\n    },\n    props : {\n        isAppCreated: Boolean,\n        isAppUpdated: Boolean,\n        isNew : Boolean,\n        lookAndFeelTheme: String,\n        lookAndFeelTitle: String, \n        lookAndFeelDescription: String,\n        lookAndFeelHeaderImage: Object,\n        lookAndFeelBotAnswerDelay: Object,\n        lookAndFeelIsCustomMessageTimeFormat: Boolean,\n        lookAndFeelCustomTimeFormat: String,\n        embedAppearanceBlurredBackground: Boolean,\n        autoExpandDelay: String,\n        embedInviteButton: String,\n        useGlobalCommands: Boolean,\n        globalCommandsList: Array,\n        customizeHeader: Boolean,\n        headerHtml: String,\n        headerCss: String,\n        headerJs: String,\n        useFooter: Boolean,\n        footerHtml: String,\n        footerCss: String,\n        footerJs: String,\n        showFooterAt: Array,\n        embedPosition: String,\n        embedAllowChangeWindowSize: Boolean,\n        embedAllowDragChatWindow: Boolean,\n        botIcon: [Array, Object],\n        embedAnimation: String,\n        embedInviteTimeout: Number,\n        embedAllowStartNewConversation: Boolean,\n        embedInviteImage: Object,\n        embedUseInvitation: Boolean,\n        isAppsProviderAvailable: Boolean,\n        showCloseIcon: Boolean,\n        widgetColor: String,\n        chatUrl: String,\n        embedLogo: Array,\n        embedInvite: String,\n        isAppCreated: Boolean,\n        isFlowActive: Boolean,\n        embedPreviewPageUrl: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        flow: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    beforeDestroy () {\n      window.removeEventListener('message', this.previewLoadedHandler, false)\n    },\n    mounted () {\n      window.addEventListener('message', this.previewLoadedHandler, false)\n    },\n    watch: {\n      lookAndFeelTheme () {this.sendMessageToPreview()},\n      lookAndFeelTitle () {this.sendMessageToPreview()},\n      lookAndFeelDescription () {this.sendMessageToPreview()},\n      lookAndFeelHeaderImage: {\n        handler() {this.sendMessageToPreview()},\n        deep: true\n      },\n      embedUseInvitation() {\n        // this.$emit('update:embedInvite', \"``\")\n        // this.$emit('update:embedInviteButton', \"``\")\n        // this.$emit('update:embedInviteImage', {})\n      },\n      embedInviteImage: {\n        handler() {this.sendMessageToPreview()},\n        deep: true\n      },\n      lookAndFeelBotAnswerDelay: {\n        handler() {this.sendMessageToPreview()},\n        deep: true\n      },\n      embedPosition () {this.sendMessageToPreview()},\n      embedAnimation () {this.sendMessageToPreview()},\n      embedInvite () {this.sendMessageToPreview()},\n      embedInviteButton () {this.sendMessageToPreview()},\n      autoExpandDelay () {this.sendMessageToPreview()},\n      embedInviteTimeout () {this.sendMessageToPreview()},\n      showCloseIcon () {this.sendMessageToPreview()},\n      botIcon: {\n        handler() {this.sendMessageToPreview()},\n        deep: true\n      },\n      widgetColor () {this.sendMessageToPreview()},\n      embedPreviewPageUrl () {this.sendMessageToPreview()},\n      embedLogo: {\n        handler() {this.sendMessageToPreview()},\n        deep: true\n      },\n      embedAllowChangeWindowSize() { this.sendMessageToPreview() },\n      embedAllowDragChatWindow() { this.sendMessageToPreview() },\n      embedAllowDragChatWindow() { this.sendMessageToPreview() },\n      useGlobalCommands () {this.sendMessageToPreview()},\n      globalCommandsList () {this.sendMessageToPreview()},\n      customizeHeader () {this.sendMessageToPreview()},\n      headerHtml () {this.sendMessageToPreview()},\n      headerCss () {this.sendMessageToPreview()},\n      headerJs () {this.sendMessageToPreview()},\n      useFooter () {this.sendMessageToPreview()},\n      footerHtml () {this.sendMessageToPreview()},\n      footerJs () {this.sendMessageToPreview()},\n      showFooterAt () {this.sendMessageToPreview()},\n      lookAndFeelIsCustomMessageTimeFormat () {this.sendMessageToPreview()},\n      lookAndFeelCustomTimeFormat () {this.sendMessageToPreview()}\n    },\n    methods: {\n      copyToClipboard (str) {\n        const el = document.createElement('textarea');\n        el.value = str;\n        document.body.appendChild(el);\n        el.select();\n        document.execCommand('copy');\n        document.body.removeChild(el);\n      },\n      openModal(name) {\n        this.$refs[name].open()\n      },\n      copy () {\n        this.copyToClipboard(this.code)\n      },\n      openPreviewWindow () {\n        const url = `${this.$flow.chatUiUrl}/preview-embed`\n        // const url = `http://localhost:8090/preview-embed`\n        try {\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        } catch (e) {\n          console.warn(e);\n          this.previewWindow.close();\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        }\n      },\n      previewLoadedHandler (e) {\n        if (e.data === 'PREVIEW_LOADED' && this.previewWindow) {\n          this.sendMessageToPreview();\n        }\n      },\n      async sendMessageToPreview () {\n        if (!this.previewWindow) return;\n        // send lookAndFeel config\n        this.previewWindow.postMessage({\n          type: 'chatConfig',\n          config: {\n            theme: this.lookAndFeelTheme,\n            title: _.trim(this.lookAndFeelTitle, '`'),\n            description: _.trim(this.lookAndFeelDescription, '`'),\n            headerImage: this.lookAndFeelHeaderImage,\n            typingIndicatorTime: _.get(this.lookAndFeelBotAnswerDelay, 'input', ''),\n            botIcon: this.botIcon,\n            isCustomMessageTimeFormat: this.lookAndFeelIsCustomMessageTimeFormat,\n            messageTimeFormat: this.lookAndFeelCustomTimeFormat,\n            useGlobalCommands: this.useGlobalCommands,\n            globalCommandsList: _.map(this.globalCommandsList, command => _.trim(command, ' `\"\\'')),\n            customizeHeader: this.customizeHeader,\n            headerHtml: this.headerHtml,\n            headerCss: this.headerCss,\n            headerJs: this.headerJs,\n            useFooter: this.useFooter,\n            footerHtml: this.footerHtml,\n            footerCss: this.footerCss,\n            footerJs: this.footerJs,\n            showFooterAt: _.map(this.showFooterAt, item => _.trim(item, '` \"\\'')),\n          }\n        }, '*');\n        \n        // send embed config\n        this.previewWindow.postMessage({\n          type: 'embedPreviewConfig',\n          config: {\n            autoExpandDelay: this.autoExpandDelay,\n            embedPosition: this.embedPosition,\n            embedAnimation: this.embedAnimation,\n            embedLogo: this.embedLogo,\n            embedInvite: this.embedInvite,\n            embedInviteButton: this.embedInviteButton,\n            embedInviteImage: this.getImage,\n            embedAllowChangeChatWindowSize: this.embedAllowChangeWindowSize,\n            allowDrag: this.embedAllowDragChatWindow,\n            inviteTimeout: this.embedInviteTimeout,\n            showCloseIcon: this.showCloseIcon,\n            widgetColor: this.widgetColor,\n            embedPreviewPageUrl: this.embedPreviewPageUrl\n          }\n        }, '*');\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-modal ref=\"embedModal\" title=\"Embed code\" size=\"large\">\n    <p>If you are wanting to embed the Rich Web Chat client on your own site, copy the snippet below and paste it into any page on your site that will use Rich Web Chat.</p>\n    <or-code :fullScreen=\"false\" readonly :value=\"code\" ref=\"code\"></or-code>\n  </or-modal>\n\n  <div class=\"rwc-embed\" :key=\"'rwc-embed' + isDisabled\">\n    <p>\n      <div ref=\"showButton\" class=\"inline\">\n        <or-button  @click=\"openModal('embedModal')\" :disabled=\"isDisabled\">\n          Show\n        </or-button>\n        <or-tooltip \n          v-if=\"isDisabled\"\n          trigger=\"showButton\" \n          position=\"top center\"\n        >\n          Activate your flow below to show embed snippet\n        </or-tooltip>\n      </div>\n      /\n      <div ref=\"copyButton\" class=\"inline\">\n        <or-button @click=\"copy\" :disabled=\"isDisabled\">\n          copy\n        </or-button>\n        <template v-if=\"!isDisabled\">\n         <or-tooltip \n            trigger=\"copyButton\" \n            position=\"top center\"\n            open-on=\"click\"\n          >\n            Copied\n          </or-tooltip>\n        </template>\n        <template v-if=\"isDisabled\">\n          <or-tooltip \n            trigger=\"copyButton\" \n            position=\"top center\"\n          >\n            Activate your flow below to copy embed snippet\n          </or-tooltip>\n        </template>\n      </div>\n       code snippet to embed chat\n    </p>\n  </div>\n  \n  <div class=\"rwc__preview\">\n    <div ref=\"previewButton\">\n      <or-button\n        color=\"primary\"\n        type=\"secondary\"\n        :disabled=\"isDisabled\"\n        @click=\"openPreviewWindow\"\n      >\n        Preview embedded chat\n      </or-button>\n      <template v-if=\"isDisabled\">\n        <or-tooltip \n          trigger=\"previewButton\" \n          position=\"top center\"\n        >\n          Activate your flow below to preview embedded chat\n        </or-tooltip>\n      </template>\n    </div>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-embed {\n  margin-top: 16px;\n  p {\n    font-size: 12px;\n  }\n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    padding: 0;\n    margin: 0;\n    background-color: transparent;\n    color: #64b2da;\n    min-width: 0;\n    font-size: 12px;\n  }\n}\n\n.inline {\n  display: inline-block;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Set up an embedded chat widget, that can be added to your website",
                "allowCodeMode": false,
                "rememberState": true,
                "disableBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "all",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": false,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "all",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "96c9557e-ef5b-4dcd-a2dc-0805a0f45570",
              "data": {
                "open": false,
                "header": "Global commands menu setup",
                "inputs": [
                  {
                    "id": "9d1dda9e-8326-4e0d-9d32-e84ce3ecd503",
                    "data": {
                      "label": "Enable and setup global commands in chat",
                      "helpText": "",
                      "variable": "useGlobalCommands",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "abf7398b-394c-4bce-b8bc-e59935fd0336",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Add button to restart conversation",
                          "value": "`restart`",
                          "checked": false,
                          "vforkey": "a610fa53-9a52-437d-9478-df1051c07099",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Process chat close event (browser page close and page refresh)",
                          "value": "`close`",
                          "checked": false,
                          "vforkey": "dbd27b59-6c25-4451-9903-88ea2f781523",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Add custom button",
                          "value": "`custom`",
                          "checked": false,
                          "vforkey": "354f6571-feec-47c5-8351-16e45ad34cd3",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "globalCommandsList",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<i>Chat close event</i> is sent and processed for browser page close and page refresh.",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [],
                      "allowCodeMode": false,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "041876fa-7328-4d3b-95dc-69541b9e81e2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useGlobalCommands",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "041876fa-7328-4d3b-95dc-69541b9e81e2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useGlobalCommands",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "49f3d166-85b9-465c-a343-d62b8b2127f7",
                    "data": {
                      "icon": "",
                      "label": "Close event type",
                      "options": [
                        {
                          "label": "Command",
                          "value": "`command`",
                          "vforkey": "bda28991-c8f5-47f9-8fb9-aa06826b24e6"
                        },
                        {
                          "label": "JavaScript code",
                          "value": "`code`",
                          "vforkey": "8c22219e-b287-4f3e-b9f7-3c074b13e4ac"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "closeEventType",
                      "hasSearch": false,
                      "optionsMode": "default",
                      "placeholder": "Select event type",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "",
                          "content": "<i>Chat close event</i> is sent and processed for browser page close and page refresh.",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`command`",
                      "dropdownType": "basic",
                      "iconPosition": true,
                      "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                      "allowCodeMode": false,
                      "dynamicOptions": "",
                      "optionsDefault": [],
                      "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [];\nfor (let i = 0; i < 10; i++) {\n    myArr.push({ label: `Number ${i}`, value: i });\n}\nreturn myArr;",
                      "hideOptionTitle": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e6470520-eb5f-4a35-b8d9-6e77db386bd1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.globalCommandsList.indexOf(\"`close`\") !== -1 && schema.useGlobalCommands",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "mergeFieldsTypes": [
                        "session",
                        "shared",
                        "global"
                      ],
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": "",
                      "extendableOptions": false,
                      "optionsKeysCustom": false,
                      "iconHelpTextOption": "none",
                      "mergeFieldsIsGroup": true,
                      "allowUseMergeFields": false,
                      "allowOnlyMergeFields": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e6470520-eb5f-4a35-b8d9-6e77db386bd1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.globalCommandsList.indexOf(\"`close`\") !== -1 && schema.useGlobalCommands",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSelectExpression",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (advanced)",
                    "compiled": {},
                    "component": "formSelectExpression",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelectExpression\"]"
                    ]
                  },
                  {
                    "id": "5f9b6a19-ed51-4438-bc55-20cbfa78e620",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Close event code",
                      "helpText": "",
                      "variable": "closeEventCode",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "54b8fab8-8b33-4d46-ab5d-75dee5546ba7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.globalCommandsList.indexOf(\"`close`\") !== -1",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "bf0b72ee-752b-4301-802e-c500a8f94b0a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.closeEventType, '`'), 'code')",
                            "valueType": "advanced",
                            "firstValue": "schema.closeEventType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b2fbd06d-19e7-4ded-b0d0-72988973d47c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useGlobalCommands",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": true,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "54b8fab8-8b33-4d46-ab5d-75dee5546ba7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.globalCommandsList.indexOf(\"`close`\") !== -1",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "bf0b72ee-752b-4301-802e-c500a8f94b0a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.closeEventType, '`'), 'code')",
                            "valueType": "advanced",
                            "firstValue": "schema.closeEventType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b2fbd06d-19e7-4ded-b0d0-72988973d47c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useGlobalCommands",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "3e408fa7-42f4-4b6c-b7a4-794646ba510b",
                    "data": {
                      "label": "Close event command name",
                      "helpText": "",
                      "variable": "closeEventCommand",
                      "multiline": false,
                      "placeholder": "Enter command name",
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "24be3482-adec-4775-bf6c-a0643cc84dc5",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.globalCommandsList.indexOf('`close`') !== -1 && _.isEqual(_.trim(schema.closeEventType, '`'), 'command') && schema.useGlobalCommands",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "e5880501-6db2-404b-8722-45564ad3d4d8",
                          "errorMessage": "Close event command name is required",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e12fee1c-c9a3-426e-b5ad-8187d656d433",
                                "ruleType": {
                                  "func": "{ return _.isNil(firstValue) || _.isEmpty(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "mixed"
                                  ],
                                  "label": "doesn't have a value",
                                  "modes": [
                                    "trimQuotes"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "``",
                                "valueType": "general",
                                "firstValue": "schema.closeEventCommand",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "c13c7820-89fa-4111-833e-8df6a2d41a00",
                          "errorMessage": "Name must contain only letters and digits",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a2da900d-5e17-4b75-81a6-eb97d8e79308",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.closeEventCommand, '`').match(/^[a-zA-Z0-9]*$/)",
                                "valueType": "advanced",
                                "firstValue": "schema.closeEventCommand",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "5f69743c-c7fd-44d1-a914-134062931517",
                          "errorMessage": "Command name must be unique.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "38910853-1c65-470d-a794-f8c02506e9f6",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.filter(schema.globalCommandsCustom, item => {\n  const itemCommandName = _.trim(item.commandName, '`');\n  return itemCommandName === _.trim(schema.closeEventCommand, '`') && item.type === 'command'; \n}).length >= 1",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "24be3482-adec-4775-bf6c-a0643cc84dc5",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.globalCommandsList.indexOf('`close`') !== -1 && _.isEqual(_.trim(schema.closeEventType, '`'), 'command') && schema.useGlobalCommands",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "4edd9dc8-f393-4b61-bc25-dd1d323d3f47",
                    "data": {
                      "data": "{\n  \"globalCommandsCustom\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  globalCommandsCustom: {\n    $each: {\n      emptyLabel (obj) {\n        return _.trim(obj.label, '`')\n      },\n      emptyName (obj) {\n        if (obj.type === 'command') {\n          return _.trim(obj.commandName, '`')\n        } else {\n          return true\n        }\n      },\n      validName (obj) {\n        if (obj.type === 'command') {\n          const name = _.trim(obj.commandName, '`');\n          return Boolean(name.match(/^[a-zA-Z0-9]*$/));\n        } else {\n          return true\n        }\n      },\n      uniqName(obj, items, context) {\n        if (obj.type !== 'command') return true;\n        \n        const closeEventCommandName = _.trim(this.schema.closeEventCommand, '`')\n        \n        const name = _.trim(obj.commandName, '`');\n        \n        if(closeEventCommandName === name) return false;\n        \n        return _.filter(items, item => {\n          const itemCommandName = _.trim(item.commandName, '`');\n          return itemCommandName === name && item.type === 'command';\n        }).length < 2;\n      },\n      emptyIcon (obj) {\n        return _.trim(obj.icon, '`')\n      },\n      emptyLink (obj) {\n        if (obj.type === 'button' && obj.buttonType === 'link') {\n          return _.trim(obj.link, '`')\n        } else {\n          return true\n        }\n      },\n      invalidLink(obj) {\n        if (obj.type === 'button' && obj.buttonType === 'link') {\n          return _.startsWith(_.trim(obj.link, '`'), 'http')\n        } else {\n          return true\n        }\n      },\n      emptyCode (obj) {\n        if (obj.type === 'button' && obj.buttonType === 'code') {\n          return _.trim(obj.code, '`')\n        } else {\n          return true\n        }\n      }\n    }\n  }\n}",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.globalCommandsCustom\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-bqyecxkihsmvjdzranlougpwft",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getTypeOptions () {\n          return [\n            {\n              label: \"Command\",\n              value: 'command'\n            },\n            {\n              label: \"Button\",\n              value: 'button'\n            }\n          ]\n        },\n        getIcons () {\n          return []\n        },\n        getButtonTypes() {\n          return [\n            {\n              label: 'Link',\n              value: 'link'\n            },\n            {\n              label: 'JavaScript code',\n              value: 'code'\n            }\n          ]\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: {\n          type: Object, \n          default: () => ({})\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(prop, obj) {\n        return _.get(obj || this, prop)\n      },\n      listNewItemMethod () {\n        return {\n          label: \"``\",\n          commandName: \"``\",\n          type: \"command\",\n          buttonType: \"link\",\n          icon: \"``\",\n          link: \"``\",\n          code: \"\"\n        }\n      },\n      getErrorMessage(index) {\n        if(!_.get(this.v, `schema.globalCommandsCustom.$each[${index}].emptyName`)) {\n          return 'Command name is required.'\n        }\n        if(!_.get(this.v, `schema.globalCommandsCustom.$each[${index}].validName`)) {\n          return 'Command name must contain only letters and digits.'\n        }\n        \n        if(!_.get(this.v, `schema.globalCommandsCustom.$each[${index}].uniqName`)) {\n          return 'Command name must be unique.'\n        }\n        \n        return ''\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "52a644a1-aab2-452f-9b62-f5470aff16a1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!!schema.useGlobalCommands  && schema.globalCommandsList.indexOf('`custom`') !== -1",
                            "valueType": "advanced",
                            "firstValue": "schema.globalCommandsList",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "52a644a1-aab2-452f-9b62-f5470aff16a1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!!schema.useGlobalCommands  && schema.globalCommandsList.indexOf('`custom`') !== -1",
                            "valueType": "advanced",
                            "firstValue": "schema.globalCommandsList",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-list \n    label=\"Custom global commands\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"listNewItemMethod\"\n    addButtonLabel=\"Add command\"\n    :readonly=\"readonly\"\n  >\n  <template slot-scope=\"item\">\n    <div class=\"global-command-config\">\n      <div class=\"row\">\n      <or-select :disabled=\"readonly\" label=\"Command type\" placeholder=\"Select command type\" :options=\"getTypeOptions\" v-model=\"item.item.type\"></or-select>\n    </div>\n    \n    <div v-if=\"item.item.type === 'command'\" class=\"group\">\n      <div class=\"row\">\n        <or-text-expression \n          :readonly=\"readonly\"\n          disableVariables\n          disableCodeMode\n          :steps=\"steps\"\n          :merge-fields=\"mergeFields\"\n          :step-id=\"stepId\"\n          label=\"Command name\"\n          help-text=\"Suggested length is up to 20 chars\"\n          placeholder=\"Enter command name\"\n          v-model=\"item.item.commandName\"\n          :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyName`, v) || !getValue(`schema.globalCommandsCustom.$each[${item.index}].validName`, v) || !getValue(`schema.globalCommandsCustom.$each[${item.index}].uniqName`, v)\"\n          :error=\"getErrorMessage(item.index)\"\n        ></or-text-expression>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <a href=\"https://fonts.google.com/icons?selected=Material+Icons\" target=\"_blank\" class=\"info-link\">\n            <or-icon>info</or-icon>\n          </a>\n          <or-text-expression \n            :readonly=\"readonly\"\n            disableVariables\n            disableCodeMode\n            :steps=\"steps\"\n            :merge-fields=\"mergeFields\"\n            :step-id=\"stepId\" \n            label=\"Icon\" \n            help-text=\"Icon name from Material Icons\" \n            placeholder=\"Enter icon name\" \n            v-model=\"item.item.icon\"\n            :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyIcon`, v)\"\n            error=\"Icon name is required.\"\n          ></or-text-expression>\n          <!--<or-select label=\"Command icon\" placeholder=\"Select icon\" :options=\"getIcons\" v-model=\"item.item.icon\"></or-select>-->\n        </div>\n        <div class=\"col\">\n          <or-text-expression \n            :readonly=\"readonly\"\n            disableVariables\n            disableCodeMode\n            :steps=\"steps\" \n            :merge-fields=\"mergeFields\" \n            :step-id=\"stepId\" \n            label=\"Label\" \n            placeholder=\"Enter command label\" \n            help-text=\"Suggested length is up to 25 chars\"\n            v-model=\"item.item.label\"\n            :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyLabel`, v)\"\n            error=\"Label is required.\"\n          ></or-text-expression>\n        </div>\n      </div>\n    </div>\n    \n    <div v-if=\"item.item.type === 'button'\" class=\"group\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <a href=\"https://fonts.google.com/icons?selected=Material+Icons\" target=\"_blank\" class=\"info-link\">\n            <or-icon>info</or-icon>\n          </a>\n          <!--<or-select label=\"Button icon\" placeholder=\"Select icon\" :options=\"getIcons\" v-model=\"item.item.icon\"></or-select>-->\n          <or-text-expression \n            :readonly=\"readonly\"\n            disableVariables\n            disableCodeMode\n            :steps=\"steps\"\n            :merge-fields=\"mergeFields\"\n            :step-id=\"stepId\"\n            label=\"Icon\"\n            help-text=\"Icon name from Material Icons\" \n            placeholder=\"Enter icon name\"\n            v-model=\"item.item.icon\"\n            :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyIcon`, v)\"\n            error=\"Icon name is required.\"\n          ></or-text-expression>\n        </div>\n        <div class=\"col\">\n          <or-text-expression \n            :readonly=\"readonly\"\n            disableVariables\n            disableCodeMode\n            :steps=\"steps\" \n            :merge-fields=\"mergeFields\" \n            :step-id=\"stepId\"\n            label=\"Label\"\n            placeholder=\"Enter button label\"\n            help-text=\"Suggested length is up to 25 chars\"\n            v-model=\"item.item.label\"\n            :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyLabel`, v)\"\n            error=\"Label is required.\"\n          ></or-text-expression>\n        </div>\n      </div>\n      <div class=\"row\">\n        <or-select :disabled=\"readonly\" label=\"Button type\" placeholder=\"Select button type\" :options=\"getButtonTypes\" v-model=\"item.item.buttonType\"></or-select>\n      </div>\n      <div v-if=\"item.item.buttonType === 'link'\" class=\"row\">\n        <or-text-expression \n          :readonly=\"readonly\"\n          disableVariables\n          disableCodeMode\n          :steps=\"steps\"\n          :merge-fields=\"mergeFields\" \n          :step-id=\"stepId\"\n          label=\"Link URL\" \n          placeholder=\"Enter link url\" \n          v-model=\"item.item.link\"\n          :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyLink`, v) || !getValue(`schema.globalCommandsCustom.$each[${item.index}].invalidLink`, v)\"\n          :error=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyLink`, v) ? 'Link URL is required.' : 'URL should start with http:// or https://'\"\n        ></or-text-expression>\n      </div>\n      <div v-if=\"item.item.buttonType === 'code'\" class=\"row\">\n        <or-code \n          :readonly=\"readonly\"\n          disableVariables\n          disableCodeMode\n          :steps=\"steps\" \n          :merge-fields=\"mergeFields\" \n          :step-id=\"stepId\" \n          label=\"Code\" \n          placeholder=\"Enter code\"\n          v-model=\"item.item.code\" \n          js-env=\"step_logic\"\n          :invalid=\"!getValue(`schema.globalCommandsCustom.$each[${item.index}].emptyCode`, v)\"\n          error=\"Code is required.\"\n        ></or-code>\n      </div>\n    </div>\n    </div>\n    \n  </template>\n</or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "52a644a1-aab2-452f-9b62-f5470aff16a1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!!schema.useGlobalCommands  && schema.globalCommandsList.indexOf('`custom`') !== -1",
                            "valueType": "advanced",
                            "firstValue": "schema.globalCommandsList",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".row {\n  width: 100%;\n  display: flex;\n}\n\n.col {\n  position: relative;\n}\n\n.info-link {\n  width: 16px;\n  height: 16px;\n  font-size: 16px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  color: #d1d1d1;\n  \n  .ui-icon {\n    font-size: 16px;\n    color: #d1d1d1;\n  }\n}\n\n\n.ui-select {\n  width: 100%;\n}\n\n.group {\n  width: 100%;\n}\n.or-text-expression {\n  width: 100%;\n}\n\n.global-command-config {\n  display: flex;\n  flex-wrap: wrap;\n  max-width: calc(100% - 60px);\n  width: calc(100% - 60px);\n}\n\n.or-list.single-item .global-command-config {\n  max-width: calc(100% - 36px);\n  width: calc(100% - 36px);\n}\n.or-list .list-item {\n  // flex-wrap: wrap;\n}\n\n.or-code {\n  width: 100%;\n}\n\n.col {\n  width: calc(50% - 4px);\n  \n  &:nth-child(1) {\n    margin-right: 8px;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Select predefined commands or setup new to proceed with Process Global Command (RWC) step",
                "allowCodeMode": false,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": false,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "34529d74-9286-46e9-88ad-daa84a94c939",
              "data": {
                "open": false,
                "header": "Additional content",
                "inputs": [
                  {
                    "id": "b79882c6-8eb7-48ad-8501-d9c58b9fa468",
                    "data": {
                      "icon": "",
                      "label": "Content type",
                      "options": [
                        {
                          "label": "No additional content",
                          "value": "`empty`",
                          "vforkey": "d40d9acb-514e-4404-aa71-e7e1b8694854"
                        },
                        {
                          "label": "Hero video",
                          "value": "`video`",
                          "vforkey": "c71df49c-f737-4372-b2a9-817136348c41"
                        },
                        {
                          "label": "Content card",
                          "value": "`card`",
                          "vforkey": "3877fe15-7800-4ecd-a6a2-8f9c3d85cfa1"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "additionalContentType",
                      "hasSearch": false,
                      "optionsMode": "default",
                      "placeholder": "Select Field",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p><strong>Content card</strong></p>\n<p>Allows you to put your content into the card by using custom HTML. On the desktop, the content card is shown on the left or right side of the container. Its width might be changed manually.</p>\n<p>On mobile devices Content Card is always shown on the top of the screen with ability for user to collapse/expand it.</p>\n<p><strong>Hero video</strong></p>\n<p>Upload any video and the bot will make the it appear like the video is playing dynamically and ding to the user input. </p>\n<p>If <strong>Fixed position</strong> is selected for desktop, on mobile devices Hero video will be fixed and shown at the top of a screen.</p>\n<p>If <strong>Floating position</strong> is selected, video will be placed at default position of the screen with ability for end-user to change it with drag&drop gesture.</p>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`empty`",
                      "dropdownType": "basic",
                      "iconPosition": true,
                      "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                      "allowCodeMode": false,
                      "dynamicOptions": "",
                      "optionsDefault": [],
                      "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [];\nfor (let i = 0; i < 10; i++) {\n    myArr.push({ label: `Number ${i}`, value: i });\n}\nreturn myArr;",
                      "hideOptionTitle": false,
                      "renderCondition": "",
                      "mergeFieldsTypes": [
                        "session",
                        "shared",
                        "global"
                      ],
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": "",
                      "extendableOptions": false,
                      "optionsKeysCustom": false,
                      "iconHelpTextOption": "modal",
                      "mergeFieldsIsGroup": true,
                      "allowUseMergeFields": false,
                      "allowOnlyMergeFields": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSelectExpression",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (advanced)",
                    "compiled": {},
                    "component": "formSelectExpression",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelectExpression\"]"
                    ]
                  },
                  {
                    "id": "0978d278-b0b3-48ee-b71f-4d9c23da448a",
                    "data": {
                      "data": "{\n  \"additionalContentCardPosition\": \"Fixed left\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.additionalContentCardPosition\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :flow=\"$flow\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-evfkbdaipgxzmyjchqtrwluosn",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getChatUrl () {\n          return this.flow.chatUiUrl;\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        flow: {\n          type: Object,\n          default: () => ({})\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8863239c-eaa7-48f2-81ac-c96377c9adf8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.additionalContentType, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.additionalContentType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8863239c-eaa7-48f2-81ac-c96377c9adf8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.additionalContentType, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.additionalContentType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-radio-group \n  name=\"group8\" \n  :options=\"['Fixed left', 'Fixed right']\"\n  :disabled=\"readonly\"\n  v-model=\"computedValue\"\n>\n  <span class=\"rwc-look-feel__label\">Select Content card positioning for Desktop:</span>\n  <div :key=\"slotName\" v-for=\"(slotName, index) in ['/content_left.png', '/content_right.png']\" :slot=\"'sub-item-' + index\">\n    <span>\n      <img :src=\"`${getChatUrl}${slotName}`\">\n    </span>\n  </div>\n</or-radio-group>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8863239c-eaa7-48f2-81ac-c96377c9adf8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.additionalContentType, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.additionalContentType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-radio-group__radios {\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 16px;\n  }\n  .ui-radio .ui-radio__label-text {\n    font-size: 12px;\n  }\n  .ui-radio-group__label-text {\n    margin-bottom: 4px;\n    font-size: 12px;\n  }\n  .ui-radio.ui-radio-group__radio{\n    position: relative;\n    width: calc(100% / 2);\n    margin-left: 0;\n    padding-top: 75px;\n    display: flex;\n    justify-content: center;\n    \n    &:nth-of-type(1) {\n      margin-left: 0;\n    }\n  }\n  .ui-radio-group__slot-sub-item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: calc(100% / 2);\n    max-width: 100%;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    \n    span {\n      display: block;\n      border-radius: 4px;\n      overflow: hidden;\n    }\n    \n    img {\n      width: 90px;\n      max-width: 100%;\n    }\n    \n    &:nth-of-type(2) {\n      left: calc(100% / 2);\n    }\n  }"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "aafcb22c-4390-419a-9d54-eab1c363f397",
                    "data": {
                      "data": "{\n  \"additionalHeroVideoPosition\": \"Floating\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard\n  v-model=\"schema.additionalHeroVideoPosition\" \n  :is-new=\"isNew\" \n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :flow=\"$flow\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-pmirjfsbkchnxoezwgytvaldqu",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getChatUrl () {\n          return this.flow.chatUiUrl;\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        flow: {\n          type: Object,\n          default: () => ({})\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e28c10d4-9ac2-4d49-ac18-e07f700e1eaa",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.additionalContentType, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e28c10d4-9ac2-4d49-ac18-e07f700e1eaa",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.additionalContentType, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-radio-group \n    name=\"group8\" \n    :options=\"['Floating', 'Fixed left', 'Fixed right']\"\n    :disabled=\"readonly\"\n    v-model=\"computedValue\"\n  >\n    <span class=\"rwc-look-feel__label\">Select Hero video positioning for Desktop:</span>\n    <div :key=\"slotName\" v-for=\"(slotName, index) in ['/floating.png', '/video_fixed_left.png', '/video_fixed_right.png']\" :slot=\"'sub-item-' + index\">\n      <span>\n        <img :src=\"`${getChatUrl}${slotName}`\">\n      </span>\n    </div>\n  </or-radio-group>  \n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e28c10d4-9ac2-4d49-ac18-e07f700e1eaa",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.additionalContentType, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-radio-group__radios {\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 16px;\n  }\n  .ui-radio .ui-radio__label-text {\n    font-size: 12px;\n  }\n  .ui-radio-group__label-text {\n    margin-bottom: 4px;\n    font-size: 12px;\n  }\n  .ui-radio.ui-radio-group__radio{\n    position: relative;\n    width: calc(100% / 3);\n    margin-left: 0;\n    padding-top: 75px;\n    display: flex;\n    justify-content: center;\n    \n    &:nth-of-type(1) {\n      margin-left: 0;\n    }\n  }\n  .ui-radio-group__slot-sub-item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: calc(100% / 3);\n    max-width: 100%;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    \n    span {\n      display: block;\n      border-radius: 4px;\n      overflow: hidden;\n    }\n    \n    img {\n      width: 90px;\n      max-width: 100%;\n    }\n    \n    &:nth-of-type(2) {\n      left: calc(100% / 3);\n    }\n    \n    &:nth-of-type(3) {\n      left: auto;\n      right: 0;\n    }\n  }"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://release.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://release.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Enable the ability to add and manage additional content in chat",
                "allowCodeMode": false,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": false,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "4dfb9548-d0a4-404e-b651-4c7433f6f46d",
                      "ruleType": {
                        "func": "{ return firstValue === false }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is false",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.appColor",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "74e0c89c-90d5-453f-8404-fe09c305e036",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "1622e97e-0b29-43d5-a284-5b51fc3fd2f6",
                    "data": {
                      "label": "Use custom css",
                      "helpText": "",
                      "variable": "lookAndFeelUseCustomCss",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "bc50812d-420a-404e-a98d-f5821529b163",
                    "data": {
                      "data": "{\n  \"lookAndFeelCustomStyles\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/lookAndFeelCustomStyles/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  lookAndFeelCustomStyles: {\n    custom (value) {\n      const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{2,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g\n      const isFilesNotEmpty = (value || []).length && (value || []).some(el => el.key || (el.linkUrl.slice(1, -1) && (el.linkUrl.match(urlRegex) || el.linkUrl.match(/\\$\\{/)) ))\n      return Boolean(isFilesNotEmpty)\n    },\n    empty (obj) {\n      return !_.isEmpty(obj)\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.lookAndFeelCustomStyles\" \n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :useCustomCss=\"schema.lookAndFeelUseCustomCss\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-lkfqxvtiueznyhcpbwsdrgmajo",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['css', 'CSS'],\n        maxFiles: 10,\n        urlRegex: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{2,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g,\n        mergeFieldRegex: /\\$\\{/gi,\n        allowFileUpdate: false\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty)\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        useCustomCss: Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      isLinkUrlInvalid (url) {\n        const exactText = (url || '').slice(1, -1)\n        if (/\\$\\{/.test(exactText)) return false\n        return exactText && !exactText.match(this.urlRegex)\n      },\n      getErrorText (url) {\n        const exactText = (url || '').slice(1, -1)\n        if (!exactText) return 'The URL is required'\n        if (!exactText.match(this.urlRegex)) return 'The URL has invalid format'\n      },\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "26c1da9b-5cf4-4183-851d-f2ccdf282900",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.lookAndFeelUseCustomCss",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "26c1da9b-5cf4-4183-851d-f2ccdf282900",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.lookAndFeelUseCustomCss",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div :class=\"['rwc__media', {'has-error': getValue(`schema.lookAndFeelCustomStyles.$invalid`, v)}]\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n        <span>{{ item.item.name }}</span>\n        <div class=\"file-controls\">\n          <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n        </div>\n      </div>\n      <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n          <or-text-expression\n            disableVariables\n            disableCodeMode\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"Custom CSS URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"isLinkUrlInvalid(item.item.linkUrl)\"\n            :error=\"getErrorText(item.item.linkUrl)\"\n            @input=\"val => updateMedias(item.item, val)\"\n          />\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add file</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add custom CSS from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': getValue(`schema.lookAndFeelCustomStyles.$invalid`, v) }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': getValue(`schema.lookAndFeelCustomStyles.$invalid`, v) }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n  <div v-if=\"getValue(`schema.lookAndFeelCustomStyles.$invalid`, v)\" class=\"rwc__error-message\">\n    File with custom CSS is required\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "26c1da9b-5cf4-4183-851d-f2ccdf282900",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.lookAndFeelUseCustomCss",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5cb2fedd-9709-4efe-a898-b6ca1479a035",
                    "data": {
                      "label": "Use custom message time format",
                      "helpText": "",
                      "variable": "lookAndFeelIsCustomMessageTimeFormat",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://resize-embed.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://resize-embed.components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "1e16e434-4fc2-4808-a6f5-062d4dcaac44",
                    "data": {
                      "data": "{\"lookAndFeelCustomTimeFormat\": \"``\"}",
                      "toJson": "return data;",
                      "validators": "{\n  lookAndFeelCustomTimeFormat: {\n    isEmpty(val) {\n      return _.trim(val, ' `\"\\'')\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard v-model=\"schema.lookAndFeelCustomTimeFormat\" :v=\"$v\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-pefhjirmtnxyglwcsuvdqkozba",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: {\n            type: Object,\n            default: {}\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5b9961c-b8fb-4a74-8de6-7d9b36c13cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.lookAndFeelIsCustomMessageTimeFormat",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5b9961c-b8fb-4a74-8de6-7d9b36c13cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.lookAndFeelIsCustomMessageTimeFormat",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-text-expression \r\n  :steps=\"steps\" \r\n  :step-id=\"stepId\"\r\n  :merge-fields=\"mergeFields\"\r\n  label=\"Message time format\"\r\n  v-model=\"localValue\"\r\n  :readonly=\"readonly\"\r\n  placeholder=\"Example: hh:mm A\"\r\n  :invalid=\"v.schema.$invalid\"\r\n  error=\"Message time format is required.\"\r\n  @input=\"v.schema.$touch()\"\r\n  disableCodeMode\r\n  disableVariables\r\n></or-text-expression>\r\n\r\n<div class=\"help-text\">\r\n  For additional information, please visit <a href=\"https://momentjs.com/docs/#/displaying/format/\" target=\"_blank\">Moment JS Date Format documentation</a>\r\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5b9961c-b8fb-4a74-8de6-7d9b36c13cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.lookAndFeelIsCustomMessageTimeFormat",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".help-text {\n  margin-bottom: 1rem;\n  \n  font-size: 14px;\n  a {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://resize-embed.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://resize-embed.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "f9f6aa0c-6c91-4aa3-b2c7-52ad831d0d3c",
                    "data": {
                      "label": "Customize header",
                      "helpText": "",
                      "variable": "customizeHeader",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "2bf550ef-71f7-4242-ac20-c92d1bbdcebc",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "HTML",
                      "helpText": "",
                      "variable": "headerHtml",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e834d49b-def2-4d74-bd27-075097c86d00",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeHeader",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e834d49b-def2-4d74-bd27-075097c86d00",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeHeader",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "07b2eb47-f381-416f-9f5d-201800b5a9f4",
                    "data": {
                      "mode": "scss",
                      "jsEnv": "ecma6",
                      "label": "CSS",
                      "helpText": "",
                      "variable": "headerCss",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fea2357b-459f-4369-abda-456003ec41e2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeHeader",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fea2357b-459f-4369-abda-456003ec41e2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeHeader",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "76b8d107-9733-4cd1-a67f-38af5b583ae7",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "JavaScript",
                      "helpText": "",
                      "variable": "headerJs",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5eed7da1-c470-43f6-a0d1-e64001b42dbf",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeHeader",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5eed7da1-c470-43f6-a0d1-e64001b42dbf",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.customizeHeader",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "a75d4745-1992-4f23-a14c-fcaf26e2e17e",
                    "data": {
                      "label": "Customize footer",
                      "helpText": "",
                      "variable": "useFooter",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "fcb8b6c3-73ec-4193-a267-de6e00737ec9",
                    "data": {
                      "mode": "html",
                      "jsEnv": "browser",
                      "label": "HTML",
                      "helpText": "",
                      "variable": "footerHtml",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0d65df85-cb0c-4a86-ba31-3df6e93bc136",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0d65df85-cb0c-4a86-ba31-3df6e93bc136",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "b843380c-80f6-4636-bf0a-adfeca95650e",
                    "data": {
                      "mode": "scss",
                      "jsEnv": "ecma6",
                      "label": "CSS",
                      "helpText": "",
                      "variable": "footerCss",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1dc6c810-c3cd-4cae-b302-1689ce91b27c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1dc6c810-c3cd-4cae-b302-1689ce91b27c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "8e20e9e3-80e2-48f4-aaa1-26797ed2ed5a",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "JavaScript",
                      "helpText": "",
                      "variable": "footerJs",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "cbc59b52-1c98-46d6-a3bf-b642ed7cb7b0",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "cbc59b52-1c98-46d6-a3bf-b642ed7cb7b0",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "1861d675-7f4c-4e85-83a0-d6729d0e1d87",
                    "data": {
                      "label": "Show footer in chat views:",
                      "options": [
                        {
                          "label": "Desktop",
                          "value": "`desktop`",
                          "checked": true,
                          "vforkey": "37f982b5-dc4a-4291-b5be-25193834507d",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Mobile and OneReach.ai Apps",
                          "value": "`mobile`",
                          "checked": true,
                          "vforkey": "b689e1fd-bfa3-4089-b3d7-62d5977a4842",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Embedded",
                          "value": "`embed`",
                          "checked": true,
                          "vforkey": "4fd03757-f655-4031-acdf-2df1478405a6",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "showFooterAt",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [
                        "`desktop`",
                        "`mobile`",
                        "`embed`"
                      ],
                      "allowCodeMode": false,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f46766a0-ac79-4fa1-9a05-3f07ea5ddc0b",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f46766a0-ac79-4fa1-9a05-3f07ea5ddc0b",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useFooter",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "b972ef52-ef31-4dff-ad74-261ce94eed7f",
                    "data": {
                      "label": "Extend page <head> by custom template",
                      "helpText": "",
                      "variable": "extendHead",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "7cbc91e5-abe8-4981-98ff-047d3ff5a61d",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "HTML template",
                      "helpText": "",
                      "variable": "extendHeadHtml",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<script>console.log('Hello from head script!')</script>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0b01c4d9-0597-4386-bfaf-2447b1679826",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.extendHead",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": true,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0b01c4d9-0597-4386-bfaf-2447b1679826",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.extendHead",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "9aa3117e-3c81-41f3-860c-65442515e87b",
                    "data": {
                      "label": "Add merge field variable from client",
                      "helpText": "",
                      "variable": "addMfHeadVars",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p>Variables will be added to `customVariables` mergeField data</p>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6b86bdeb-a852-4ca8-9c30-798c886b8861",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.extendHead",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "modal",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6b86bdeb-a852-4ca8-9c30-798c886b8861",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.extendHead",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "0b45d242-3e75-44bc-b6ea-fed5e0f2c4d1",
                    "data": {
                      "label": "",
                      "inputs": [
                        {
                          "id": "9ae0c10e-60c0-4931-9c78-f48abb4e29d6",
                          "data": {
                            "help": "",
                            "label": "Variable name",
                            "variable": "varName",
                            "isHtmlHelp": false,
                            "isHtmlLabel": false,
                            "placeholder": "Enter name here",
                            "advancedHelp": {
                              "link": {
                                "url": "",
                                "icon": "help",
                                "iconHelp": "",
                                "tooltipPosition": "top center"
                              },
                              "modal": {
                                "icon": "help",
                                "title": "",
                                "content": "",
                                "iconHelp": "",
                                "tooltipPosition": "top center"
                              },
                              "tooltip": {
                                "icon": "help",
                                "content": "",
                                "openTooltipOn": "hover",
                                "tooltipPosition": "top center"
                              }
                            },
                            "defaultValue": "``",
                            "allowCodeMode": false,
                            "counterString": "%currentCharCount% / %maxCharLength% char",
                            "maxCharLength": 160,
                            "disablePopover": true,
                            "isMessageBubble": false,
                            "renderCondition": "",
                            "allowMergeFields": false,
                            "validateRequired": false,
                            "disabledCondition": "",
                            "helpDisplayOption": "focus",
                            "displayCharCounter": false,
                            "iconHelpTextOption": "none",
                            "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                            "validationConditions": [
                              {
                                "vforkey": "26fc12c7-bef4-4d07-941d-0d1f14c3c8b3",
                                "errorMessage": "Variable name is required.",
                                "validationCondition": {
                                  "label": "`Validation condition`",
                                  "rules": [
                                    {
                                      "modes": [],
                                      "vforkey": "89085bdd-9ff7-4ccf-8118-6c64b1489f2f",
                                      "ruleType": {
                                        "func": "{ return _.isEqual(firstValue, secondValue) }",
                                        "type": "double",
                                        "input": [
                                          "mixed",
                                          "mixed"
                                        ],
                                        "label": "exactly matches",
                                        "modes": [
                                          "strict"
                                        ],
                                        "category": "general"
                                      },
                                      "codeValue": "!_.trim(schema.varName, '`')",
                                      "valueType": "advanced",
                                      "firstValue": "``",
                                      "secondValue": "``",
                                      "caseInsensitive": true,
                                      "isDisabledSecondValue": false
                                    }
                                  ],
                                  "trueValue": "any",
                                  "description": "``",
                                  "defaultValue": false,
                                  "isNotCollapsed": true,
                                  "isEditableHeader": false
                                }
                              },
                              {
                                "vforkey": "50a6fe0e-12a7-443f-8a47-6c0e8a4e2684",
                                "errorMessage": "Variable name should be unique (case insensitive)",
                                "validationCondition": {
                                  "label": "`Validation condition`",
                                  "rules": [
                                    {
                                      "modes": [],
                                      "vforkey": "c25d5122-3842-4139-8664-e6dbd3cbfb3b",
                                      "ruleType": {
                                        "func": "{ return _.isEqual(firstValue, secondValue) }",
                                        "type": "double",
                                        "input": [
                                          "mixed",
                                          "mixed"
                                        ],
                                        "label": "exactly matches",
                                        "modes": [
                                          "strict"
                                        ],
                                        "category": "general"
                                      },
                                      "codeValue": "_.filter(\n  parentSchema.headVariables, \n  variable => {\n    return _.toLower(variable.varName) === _.toLower(schema.varName)\n  }\n).length > 1",
                                      "valueType": "advanced",
                                      "firstValue": "``",
                                      "secondValue": "``",
                                      "caseInsensitive": true,
                                      "isDisabledSecondValue": false
                                    }
                                  ],
                                  "trueValue": "any",
                                  "description": "``",
                                  "defaultValue": false,
                                  "isNotCollapsed": true,
                                  "isEditableHeader": false
                                }
                              }
                            ],
                            "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                            "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextMessage",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text Message",
                          "compiled": {},
                          "component": "formTextMessage",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                          ]
                        },
                        {
                          "id": "577426f6-3e0e-472a-8be0-c21a2bc3f1cf",
                          "data": {
                            "mode": "javascript",
                            "jsEnv": "ecma6",
                            "label": "Value from script execution",
                            "helpText": "",
                            "variable": "varCode",
                            "warnings": false,
                            "autocomplete": true,
                            "defaultValue": "",
                            "validateCode": false,
                            "renderCondition": "",
                            "disableVariables": true,
                            "validateRequired": true,
                            "disabledCondition": "",
                            "validateExpression": false,
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formCode",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Code",
                          "compiled": {},
                          "component": "formCode",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                          ]
                        }
                      ],
                      "variable": "headVariables",
                      "singleline": true,
                      "prettifyDrag": false,
                      "allowCodeMode": false,
                      "limitMaxItems": false,
                      "maxItemsCount": "10",
                      "addButtonLabel": "add variable",
                      "hasDefaultItem": false,
                      "dragHandleRight": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a8817f37-8ba6-480d-bc09-c96539d6af93",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.addMfHeadVars",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "ae91c63a-b23b-4eba-9b83-f672a9547a0c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.extendHead",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "canRemoveLastItem": true,
                      "disabledCondition": "",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a8817f37-8ba6-480d-bc09-c96539d6af93",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.addMfHeadVars",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "ae91c63a-b23b-4eba-9b83-f672a9547a0c",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.extendHead",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formList",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "List",
                    "compiled": {},
                    "component": "formList",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formList\"]"
                    ]
                  },
                  {
                    "id": "4379337a-718c-4c7d-aa39-43374a4d8c08",
                    "data": {
                      "label": "Allow to control conversation end manually",
                      "helpText": "",
                      "variable": "manualConversation",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": false,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": false,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "29a1176a-de49-40b2-90ab-13d872e8866e",
              "data": {
                "data": "",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<wildcard \n  :steps=\"steps\" \n  :step-id=\"stepId\" \n  :lookAndFeel=\"schema.lookAndFeel\"\n  :theme=\"schema.lookAndFeelTheme\"\n  :botIcon=\"schema.lookAndFeelBotIcon\"\n  :title=\"schema.lookAndFeelTitle\"\n  :description=\"schema.lookAndFeelDescription\"\n  :allowRestoreSession=\"schema.lookAndFeelAllowRestoreSession\"\n  :allowStartNewSession=\"schema.lookAndFeelAllowStartNewSession\"\n  :lookAndFeelIsCustomMessageTimeFormat=\"schema.lookAndFeelIsCustomMessageTimeFormat\"\n  :lookAndFeelCustomTimeFormat=\"schema.lookAndFeelCustomTimeFormat\"\n  :lookAndFeelBotAnswerDelay=\"schema.lookAndFeelBotAnswerDelay\"\n  :headerImage=\"schema.lookAndFeelHeaderImage\"\n  :useCustomCss=\"schema.lookAndFeelUseCustomCss\"\n  :customStyles=\"schema.lookAndFeelCustomStyles\"\n  :globalCommandsList=\"schema.globalCommandsList\"\n  :useGlobalCommands=\"schema.useGlobalCommands\"\n  :customizeHeader=\"schema.customizeHeader\"\n  :headerHtml=\"schema.headerHtml\"\n  :headerCss=\"schema.headerCss\"\n  :headerJs=\"schema.headerJs\"\n  :useFooter=\"schema.useFooter\"\n  :footerHtml=\"schema.footerHtml\"\n  :footerCss=\"schema.footerCss\"\n  :footerJs=\"schema.footerJs\"\n  :showFooterAt=\"schema.showFooterAt\"\n  :additionalContentType=\"schema.additionalContentType\"\n  :globalCommandsCustom=\"schema.globalCommandsCustom\"\n  :closeEventType=\"schema.closeEventType\"\n  :closeEventCommand=\"schema.closeEventCommand\"\n  dataOut.sync=\"schema.dataOut\"\n  :schema=\"schema\"\n></wildcard>",
                "allowCodeMode": false,
                "componentName": "or-wildcard-kvusoptnbyqizwfdxgharemclj",
                "componentLogic": "{\n  props : {\n    dataOut : {\n      type : Object,\n      default () {\n        return {};\n      }\n    },\n    theme: String,\n    title: String,\n    description: String,\n    botIcon: String,\n    customizeHeader: Boolean,\n    headerHtml: String,\n    headerCss: String,\n    headerJs: String,\n    useFooter: Boolean,\n    footerHtml: String,\n    footerCss: String,\n    closeEventType: String,\n    closeEventCommand: String,\n    footerJs: String,\n    showFooterAt: Array,\n    allowRestoreSession: Boolean,\n    allowStartNewSession: Boolean,\n    lookAndFeelBotAnswerDelay: Object,\n    lookAndFeelIsCustomMessageTimeFormat: Boolean,\n    lookAndFeelCustomTimeFormat: String,\n    additionalContentType: String,\n    useCustomCss: Boolean,\n    customStyles: Array,\n    headerImage: Object,\n    globalCommandsList: Array,\n    globalCommandsCustom: Array,\n    useGlobalCommands: Boolean,\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    schema: Object\n  },\n  watch: {\n    lookAndFeelIsCustomMessageTimeFormat() {\n      this.setStepMeta()\n    },\n    lookAndFeelCustomTimeFormat() {\n      this.setStepMeta()\n    },\n    additionalContentType () {\n      this.setStepMeta()\n    },\n    theme: {\n      handler() {this.setStepMeta()},\n      immediate: true\n    },\n    globalCommandsList: {\n      handler () {this.setStepMeta()},\n      deep: true,\n      immediate: true\n    },\n    closeEventType: {\n      handler() {this.setStepMeta()},\n      immediate: true,\n    },\n    closeEventCommand: {\n      handler() {this.setStepMeta()},\n      immediate: true,\n    },\n    globalCommandsCustom: {\n      handler() {this.setStepMeta()},\n      immediate: true,\n      deep: true\n    },\n    useGlobalCommands: {\n      handler () {this.setStepMeta()},\n      immediate: true\n    },\n    title () {this.setStepMeta()},\n    headerImage () {this.setStepMeta()},\n    description () {this.setStepMeta()},\n    customizeHeader () {this.setStepMeta()},\n    headerHtml () {this.setStepMeta()},\n    headerCss () {this.setStepMeta()},\n    headerJs () {this.setStepMeta()},\n    useFooter () {this.setStepMeta()},\n    footerHtml () {this.setStepMeta()},\n    footerCss () {this.setStepMeta()},\n    footerJs () {this.setStepMeta()},\n    showFooterAt () {this.setStepMeta()},\n    allowRestoreSession () {this.setStepMeta()},\n    allowStartNewSession () {this.setStepMeta()},\n    useCustomCss () {this.setStepMeta()},\n    customStyles () {this.setStepMeta()},\n    'schema.chatId' () { this.setStepMeta(); }\n  },\n  methods: {\n    setStepMeta () {\n      const step = _.find(this.steps, {id : this.stepId});\n      if (_.isObject(_.get(step, 'data.dataOut'))) {\n        _.set(step, 'data.dataOut.meta', {\n          type: 'rwc-init-chat',\n          conversationType: 'rwc-chat',\n          conversationStarter: true,\n          additionalContent: {\n            type: this.additionalContentType\n          },\n          lookAndFeel: {\n            theme: this.theme,\n            title: _.trim(this.title, '`'),\n            description: _.trim(this.description, '`'),\n            botIcon: this.botIcon,\n            allowStartNewSession: this.allowStartNewSession,\n            allowRestoreSession: this.allowRestoreSession,\n            headerImage: this.headerImage,\n            useCustomCss: this.useCustomCss,\n            isCustomMessageTimeFormat: this.lookAndFeelIsCustomMessageTimeFormat,\n            messageTimeFormat: this.lookAndFeelCustomTimeFormat,\n            customStyles: this.customStyles,\n            typingIndicatorTime: _.get(this.lookAndFeelBotAnswerDelay, 'input', ''),\n            botAnswerDelay: _.get(this.lookAndFeelBotAnswerDelay, 'input', ''),\n            useGlobalCommands: this.useGlobalCommands,\n            globalCommandsList: _.map(this.globalCommandsList, command => _.trim(command, ' `\"\\'')),\n            globalCommandsCustom: this.globalCommandsCustom,\n            customizeHeader: this.customizeHeader,\n            closeEventCommand: this.closeEventCommand,\n            closeEventType: this.closeEventType,\n            headerHtml: this.headerHtml,\n            headerCss: this.headerCss,\n            headerJs: this.headerJs,\n            useFooter: this.useFooter,\n            footerHtml: this.footerHtml,\n            footerCss: this.footerCss,\n            footerJs: this.footerJs,\n            showFooterAt: _.map(this.showFooterAt, device => _.trim(device, ' `\"\\''))\n          },\n          chat: _.get(this.schema, 'chatId')\n        });\n      }\n    }\n  }\n}",
                "renderCondition": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentTemplate": "",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "meta": {
                "name": "formWildcard",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
              ]
            },
            {
              "id": "cb7ea2f6-61c1-421f-abd7-897c6a21cf06",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "d4efc403-01dc-4944-be33-f63a4ba5c0b2",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": false,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": false,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "8b47cb0a-ed9e-4949-b328-019b9119d12a",
              "data": {
                "inputs": [],
                "inherit": {
                  "from": "last",
                  "isAdvanced": false
                },
                "isNested": false,
                "variable": "rwcContext",
                "contextKey": "__rwc_context",
                "showEditor": false,
                "exposeConfig": false,
                "allowCodeMode": false,
                "contextInputs": {
                  "step": [
                    {
                      "data": {},
                      "component": "stepChooser"
                    }
                  ],
                  "manual": [],
                  "dataOut": [
                    {
                      "data": {},
                      "component": "formSelectExpression"
                    }
                  ],
                  "inherited": []
                },
                "selectedTypes": [],
                "contextControl": {
                  "data": {
                    "id": "03d90a84-2d8d-400b-b367-e5085cbd239d",
                    "helpText": "",
                    "variable": "selectStyle",
                    "labelLeft": false,
                    "trueValue": true,
                    "falseLabel": "",
                    "falseValue": false,
                    "isHtmlLabel": false,
                    "switchColor": "primary",
                    "advancedHelp": {
                      "link": {
                        "url": "",
                        "icon": "help",
                        "iconHelp": "",
                        "tooltipPosition": "top center"
                      },
                      "modal": {
                        "icon": "help",
                        "title": "",
                        "content": "",
                        "iconHelp": "",
                        "tooltipPosition": "top center"
                      },
                      "tooltip": {
                        "icon": "help",
                        "content": "",
                        "openTooltipOn": "hover",
                        "tooltipPosition": "top center"
                      }
                    },
                    "defaultValue": true,
                    "allowCodeMode": true,
                    "isHtmlHelpText": false,
                    "switchPosition": "left",
                    "isHtmlTrueLabel": false,
                    "overwriteLabels": true,
                    "overwriteValues": true,
                    "renderCondition": "",
                    "isHtmlFalseLabel": false,
                    "disabledCondition": "",
                    "helpDisplayOption": "hover",
                    "iconHelpTextOption": "none",
                    "validationConditions": [],
                    "renderConditionBuilder": {
                      "label": "`Conditional visibility`",
                      "rules": [],
                      "trueValue": "any",
                      "description": "``",
                      "defaultValue": true,
                      "isNotCollapsed": false,
                      "isEditableHeader": false
                    },
                    "disableConditionBuilder": {
                      "label": "`Conditional disablement`",
                      "rules": [],
                      "trueValue": "any",
                      "description": "``",
                      "defaultValue": false,
                      "isNotCollapsed": false,
                      "isEditableHeader": false
                    }
                  },
                  "component": "formSwitch"
                },
                "initEmptyStore": true,
                "renderCondition": "",
                "allContextOptions": [
                  {
                    "label": "Inherited",
                    "value": "inherited"
                  },
                  {
                    "label": "Target step",
                    "value": "step"
                  },
                  {
                    "label": "Merge field",
                    "value": "dataOut"
                  },
                  {
                    "label": "Manual",
                    "value": "manual"
                  }
                ],
                "configurationName": "",
                "disabledCondition": "",
                "useCustomResolver": false,
                "bufferVariableName": "__contextTtlBuffer",
                "keyValueCollection": "",
                "initContextInstance": true,
                "validationConditions": [],
                "customResolveFunction": "function resolve(thread) {\n      switch (this.output.selectStyle) {\n        case 'inherited':\n          return _.get(this.store, this.output.value.from);\n        case 'step':\n          return _.get(this.store, `__steps.${this.output.value.targetStepId}`);\n        case 'dataOut':\n          return thread.mergeFields[this.output.value.dataOutName].get();\n        default:\n          return this.output.value;\n      }\n    }",
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": [
                "simple-context-manager",
                "https://content-assets.onereach.ai/component/simple-context-manager/0.0.8/index.js"
              ]
            }
          ],
          "outputExample": "{\n  rwcUrl: 'string',\n  sessionId: 'String',\n  answerDelay: 'String',\n  browserFingerprint: 'String',\n  queryParams: 'object',\n  headers: 'Object',\n  deviceId: 'String',\n  appId: 'String',\n  pageData: 'Object',\n  userTimezone: {\n    offset: 'Number',\n    name: 'String'\n  },\n  context: 'Object',\n  customVariables: 'Object'\n}",
          "hasProcessError": false,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "step.data.embedInviteTimeout = '`2 sec`'\nstep.data.showCloseIcon = true",
            "version": "4.1.14"
          },
          {
            "sample": null,
            "script": "step.data.autoExpandDelay = 10000\nstep.data.autoExpandDelayStr = \"`10 seconds`\"\nstep.data.embedPosition = \"bottom-right\"\nstep.data.embedAnimation = \"pulse\"\nstep.data.embedInvite = \"``\"\nstep.data.embedInviteTimeoutStr = \"`2 seconds`\"\nif (_.isUndefined(step.data.chatId)) {\n  step.data.chatId = \"``\"\n}\nif (_.isUndefined(step.data.appName)) {\n  step.data.appName = \"``\"\n}",
            "version": "4.1.18"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['embedAllowStartNewConversation'])) step.data['embedAllowStartNewConversation'] = true;\n",
            "version": "4.1.21"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['embedPreviewPageUrl'])) step.data['embedPreviewPageUrl'] = \"``\";\n",
            "version": "4.2.1"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.lookAndFeel.allowStartNewSession)) {\n  step.data.lookAndFeel.allowStartNewSession = true\n}",
            "version": "4.2.2"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['emdedShowCloseIcon'])) step.data['emdedShowCloseIcon'] = step.data.showCloseIcon;\nif(_.isUndefined(step.data['lookAndFeelTitle'])) step.data['lookAndFeelTitle'] = \"`\" + (step.data.lookAndFeel.title || \"\") + \"`\";\nif(_.isUndefined(step.data['lookAndFeelDescription'])) step.data['lookAndFeelDescription'] = \"`\" + (step.data.lookAndFeel.description || \"\") + \"`\";\nif(_.isUndefined(step.data['lookAndFeelAllowRestoreSession'])) step.data.lookAndFeel.allowRestoreSession || true;\nif(_.isUndefined(step.data['lookAndFeelAllowStartNewSession'])) step.data['lookAndFeelAllowStartNewSession'] = step.data.lookAndFeel.allowStartNewSession || true; step.data.lookAndFeelAllowToViewHistory = step.data.lookAndFeel.allowRestoreSession; \nif(_.isUndefined(step.data['lookAndFeelHeaderImage'])) step.data['lookAndFeelHeaderImage'] = step.data.lookAndFeel.headerImage ? step.data.lookAndFeel.headerImage[0] ? step.data.lookAndFeel.headerImage[0] : {} : {};",
            "version": "4.2.6"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data['lookAndFeelUseCustomCss'])) step.data['lookAndFeelUseCustomCss'] = step.data.lookAndFeel.useCustomCss || false\nif (_.isUndefined(step.data['lookAndFeelTheme'])) step.data['lookAndFeelTheme'] = step.data.lookAndFeel.theme || \"Auto-detect\"\nif (_.isUndefined(step.data['lookAndFeelCustomStyles'])) step.data['lookAndFeelCustomStyles'] = step.data.lookAndFeel.customStyles || []\nif (_.isUndefined(step.data['lookAndFeelBotAnswerDelay'])) step.data['lookAndFeelBotAnswerDelay'] = {\n  input: step.data.lookAndFeel.typingIndicatorTime || \"`2 seconds`\",\n  outputMode: \"ms\"\n}\nif (step.data.lookAndFeel) {\n  delete step.data.lookAndFeel\n}",
            "version": "4.2.7"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['embedUseInvitation'])) step.data['embedUseInvitation'] = (!!_.trim(step.data.embedInvite, \"`\") || false);\nif(_.isUndefined(step.data['embedInviteButton'])) step.data['embedInviteButton'] = \"``\";\nif(_.isUndefined(step.data['embedInviteImage'])) step.data['embedInviteImage'] = {};\n",
            "version": "4.2.8"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useHeroVideo'])) step.data['useHeroVideo'] = false;\nif(_.isUndefined(step.data['heroVideo'])) step.data['heroVideo'] = [];\nif(_.isUndefined(step.data['heroPoster'])) step.data['heroPoster'] = {};\n",
            "version": "4.2.12"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.outputExample['context'])) {\n  step.outputExample.context = 'Object';\n  step.outputExample.userTimezone = {offset: \"Number\", name: \"String\"}\n}",
            "version": "4.2.16"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(_.get(step.data, 'lookAndFeelAllowToViewHistory'))) {const prevValue = _.get(step.data, 'lookAndFeelAllowRestoreSession', false);\n\nstep.data.lookAndFeelAllowToViewHistory = prevValue;}\nstep.data.lookAndFeelAllowRestoreSession = true;",
            "version": "4.2.17"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['loaderTheme'])) step.data['loaderTheme'] = \"`light`\";\n",
            "version": "4.2.20"
          },
          {
            "sample": null,
            "script": "if(!_.isUndefined(step.data['loaderTheme'])) {\n  delete step.data.loaderTheme;\n}\n\nstep.data.hideChatLoader = false;",
            "version": "4.2.23"
          },
          {
            "sample": null,
            "script": "step.data.lookAndFeelBotIcon = [{ location: undefined, size: undefined }];",
            "version": "4.2.25"
          },
          {
            "sample": null,
            "script": "step.data.embedAllowChangeWindowSize = false;",
            "version": "4.2.26"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useGlobalCommands'])) step.data['useGlobalCommands'] = false;\n",
            "version": "4.2.28"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['globalCommandsList'])) step.data['globalCommandsList'] = [];\n",
            "version": "4.2.29"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['globalCommandsCustom'])) step.data['globalCommandsCustom'] = [];\n",
            "version": "4.2.30"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useFooter'])) step.data['useFooter'] = false;\nif(_.isUndefined(step.data['footerHtml'])) step.data['footerHtml'] = \"\";\n",
            "version": "4.2.31"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['showFooterAt'])) step.data['showFooterAt'] = [\"`desktop`\",\"`mobile`\",\"`embed`\"];\n",
            "version": "4.2.32"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['footerCss'])) step.data['footerCss'] = \"\";\nif(_.isUndefined(step.data['footerJs'])) step.data['footerJs'] = \"\";\n",
            "version": "4.2.33"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['closeEventType'])) step.data['closeEventType'] = \"\";\nif(_.isUndefined(step.data['closeEventCode'])) step.data['closeEventCode'] = \"\";\nif(_.isUndefined(step.data['closeEventCommand'])) step.data['closeEventCommand'] = \"``\";\n",
            "version": "4.2.34"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customizeHeader'])) step.data['customizeHeader'] = false;\nif(_.isUndefined(step.data['headerHtml'])) step.data['headerHtml'] = \"\";\nif(_.isUndefined(step.data['headerCss'])) step.data['headerCss'] = \"\";\nif(_.isUndefined(step.data['headerJs'])) step.data['headerJs'] = \"\";\n",
            "version": "4.2.35"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['lookAndFeelCustomTimeFormat'])) step.data['lookAndFeelCustomTimeFormat'] = \"``\";\nif(_.isUndefined(step.data['lookAndFeelIsCustomMessageTimeFormat'])) step.data['lookAndFeelIsCustomMessageTimeFormat'] = false;",
            "version": "4.2.36"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['headerHtml']) || !step.data['headerHtml']) step.data['headerHtml'] = \"<div class=\\\"custom-header\\\">\\n  <p>\\n    <a href=\\\"https://onereach.ai\\\">\\n      <img src=\\\"\\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\\\" width=\\\"88\\\" height=\\\"12\\\">\\n    Rich Web Chat\\n    </a>\\n  </p>\\n</div>\";\nif(_.isUndefined(step.data['headerCss']) || !step.data['headerCss']) step.data['headerCss'] = \".custom-header * {\\n  font-size: 12px;\\n  color: var(--textColor);\\n}\\n\\n.custom-header img {\\n  display: inline-block;\\n  margin-right: 8px;\\n}\\n\\n.header.header--active {\\n  padding-top: 0;\\n  padding-bottom: 0;\\n}\";\nif(_.isUndefined(step.data['footerHtml']) || !step.data['footerHtml']) step.data['footerHtml'] = \"<div class=\\\"custom-footer\\\">\\n  <p>\\n  Powered by\\n    <a href=\\\"https://onereach.ai\\\">\\n      <img src=\\\"\\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\\\" width=\\\"88\\\" height=\\\"12\\\">\\n    </a>\\n  </p>\\n</div>\";\nif(_.isUndefined(step.data['footerCss']) || !step.data['footerCss']) step.data['footerCss'] = \".custom-footer {\\n  text-align: center;\\n  font-size: 12px;\\n}\";\n",
            "version": "4.2.38"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customizeBrowserTab'])) step.data['customizeBrowserTab'] = false;\n",
            "version": "4.2.40"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['faviconSourceImage'])) step.data['faviconSourceImage'] = {};\nif(_.isUndefined(step.data['faviconImages'])) step.data['faviconImages'] = [];\nif(_.isUndefined(step.data['changeTabTitle'])) step.data['changeTabTitle'] = false;\nif(_.isUndefined(step.data['tabTitle'])) step.data['tabTitle'] = \"``\";\nif(_.isUndefined(step.data['tabTitleInterval'])) step.data['tabTitleInterval'] = {\"input\":\"`0s`\",\"outputMode\":\"ms\"};\n",
            "version": "4.2.41"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['defaultTabTitle'])) step.data['defaultTabTitle'] = \"``\";\n",
            "version": "4.2.42"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['defaultTabTitle'])) step.data['defaultTabTitle'] = \"`OneReach.ai Chat`\";\n",
            "version": "4.2.43"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['extendHead'])) step.data['extendHead'] = false;\nif(_.isUndefined(step.data['extendHeadHtml'])) step.data['extendHeadHtml'] = \"<script>console.log('Hello from head script!')</script>\";\n",
            "version": "4.2.47"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['addMfHeadVars'])) step.data['addMfHeadVars'] = false;\nif(_.isUndefined(step.data['headVariables'])) step.data['headVariables'] = [];\n",
            "version": "4.2.48"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['additionalContentType'])) step.data['additionalContentType'] = \"empty\";\n",
            "version": "4.2.62"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['additionalHeroVideoPosition'])) step.data['additionalHeroVideoPosition'] = \"Floating\";\n",
            "version": "4.2.63"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['embedAllowDragChatWindow'])) step.data['embedAllowDragChatWindow'] = true;",
            "version": "4.2.65"
          },
          {
            "sample": null,
            "script": "// console.log(stepTemplate);\n\n// const inputs = _.get(stepTemplate, 'formBuilder.stepInputs') || [];\n\n// inputs[5].data.inputs[12].data.allowCodeMode = false;\n// inputs[3].data.inputs[2].data.allowCodeMode = false;",
            "version": "4.2.70"
          },
          {
            "sample": null,
            "script": "const oldChatId = _.get(step.data, 'stepVariable.chat');\n\nif(oldChatId) {\n  step.data.chatId = oldChatId;\n  step.data.appName = oldChatId;\n\n  step.data.widgetColor = '#409fec';}",
            "version": "4.2.73"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['rwcContext'])) step.data['rwcContext'] = {\"contextKey\":\"__rwc_context\",\"store\":{},\"output\":{\"selectStyle\":true}};\n",
            "version": "4.3.0"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['embedAppearanceBlurredBackground'])) step.data['embedAppearanceBlurredBackground'] = false;\n",
            "version": "4.4.6"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['manualConversation'])) step.data['manualConversation'] = false;\n",
            "version": "4.4.8"
          },
          {
            "script": "",
            "version": "4.4.20"
          }
        ],
        "modules": [
          {
            "name": "slugid",
            "version": "2.0.0",
            "variable": "slugid"
          },
          {
            "name": "axios",
            "version": ""
          },
          {
            "name": "bluebird",
            "version": ""
          },
          {
            "name": "uuid",
            "version": ""
          }
        ],
        "dateCreated": 1571234402450,
        "dateModified": 1662539063871,
        "hooks": {
          "before-save-flow": "/*\n// $flow - flow helpers\n// _ - lodash library\n// axios - axios library\n// env - environment variables\n// sdk - onereach sdk\n// uuid - uuid library\n// \n// flowMeta - meta information of flow.data.meta\n// stepTemplate - step template\n// step - step on treeisAppsProviderAvailable\n*/\nlet chatId = (_.trim(step.data.chatId, '`') || '').toLowerCase().replace(/\\?.*/gi, '');\nconst appName = _.trim(step.data.appName, '`');\nif (step.data.isAppsProviderAvailable && !appName){\n  throw { errorType: 'CUSTOM', message: 'Saving failed: App name is required'};\n  return\n}\nif (!chatId) {\n  throw { errorType: 'CUSTOM', message: 'Saving failed: Chat ID is required'};\n}\nif (/[\\\\, \\:, \\^, \\~, \\?, \\\", \\<, \\>, \\|, \\., \\/, \\&, \\%, \\', \\#, \\[, \\], \\+, \\=, \\„, \\\", \\{, \\\\, \\s]/.test(chatId)) {\n  throw { errorType: 'CUSTOM', message: 'Saving failed: Chat ID should not contain symbols: \\:^~?<>|&%.\\'#[]+=„\"{} and the space characters'};\n}\nif (chatId.length > 100) {\n  throw { errorType: 'CUSTOM', message: 'Saving failed: Chat ID must be less than 100 symbols'};\n}\nif (\n  // comment this conditions due to issue on first save without changes while \n  // flow source was inserted from another account\n  // ((_.trim(step.data.appName, '`') !== _.trim(step.data.savedAppName, '`')) || \n  // (step.data.savedAppColor !== step.data.appColor) || \n  // (step.data.previousChatId !== step.data.chatId)) && \n  step.data.isAppsProviderAvailable\n  ) {\n  const headers = {\n    headers: {\n      Authorization: $flow.token,\n      'Content-Type' : 'application/json;charset=UTF-8'\n    }\n  }\n  const stripedName = _.trim(step.data.appName.replace(/(<([^>]+)>)/gi, \"\"));\n  const data = {\n    \"color\": step.data.appColor.replace('#', ''),\n    \"isActive\": true,\n    \"name\": _.trim(stripedName, '`'),\n    \"url\": step.data.chatUrl\n  }\n  if (step.data.appId) {\n    data.id = step.data.appId\n  }\n  // create an app\n  const url = $flow.gatewayUrl('2042/app', $flow.providersAccountId())\n  let method = step.data.isAppCreated ? 'patch' : 'post'\n  \n  if (step.data.savedFlowId !== $flow.id) {\n    delete data.id\n    step.data.isAppCreated = false\n    method = 'post'\n  }\n  \n  return axios[method](url, data, headers)\n    .then(response => {\n      const { shareUrl, shareShortUrl, name, color, id } = response.data\n      step.data.savedAppName = name\n      step.data.savedFlowId = $flow.id\n      step.data.appUrl = shareShortUrl\n      step.data.savedAppColor = `#${color}`\n      step.data.appId = id\n      step.data.isAppCreated = true\n    })\n    .catch(e => {\n      delete data.id\n      return axios['post'](url, data, headers)\n        .then(response => {\n          const { shareUrl, shareShortUrl, name, color, id } = response.data\n          step.data.savedAppName = name\n          step.data.appUrl = shareShortUrl\n          step.data.savedAppColor = `#${color}`\n          step.data.appId = id\n          step.data.isAppCreated = true\n        })\n        .catch(e => {\n          throw new Error(e)\n        })\n    })\n}",
          "step-added-to-canvas": "/*\n// _ - lodash library\n// axios - axios library\n// env - environment variables\n// sdk - onereach sdk\n// uuid - uuid library\n// \n// step - step on tree\n// stepTemplate - step template\n// flowMeta - meta information of flow.data.meta\n*/\nstep.data.previousChatId = flowMeta.previousChatId\nif (_.trim(step.data.chatId, '`') !== flowMeta.previousChatId) {\n  step.data.isFlowActive = false\n}\n\nstep.data.savedAppName = null\nstep.data.appUrl = null\nstep.data.appId = null\nstep.data.isAppCreated = false\n",
          "step-removed-from-canvas": "/*\n// _ - lodash library\n// axios - axios library\n// env - environment variables\n// sdk - onereach sdk\n// uuid - uuid library\n// \n// flowMeta - meta information of flow.data.tree\n// step - removed step\n// stepTemplate - step template\n*/\nif (step.data.isFlowActive) {\n  flowMeta.previousChatId = _.trim(step.data.chatId, '`')\n}"
        }
      },
      {
        "id": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
        "version": "4.4.29",
        "cacheVersion": "7ad607e7-6a94-4959-affd-7de5b5c49403",
        "originalSource": "88839d8b-bcdd-437c-ace0-88a30e210184",
        "label": "Request Response (RWC)",
        "icon": "rwc",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-right",
        "description": "Sends a message to an end user in a specified Rich Web Chat conversation and waits for a response.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Rich Web Chat"
        ],
        "recommended": [],
        "tags": [],
        "template": "const PROVIDER_VERSION = '2020'\nconst PUSH_REPLY_TYPE_TEXT = 'text'\nconst PUSH_RESULT_ERROR = 'error'\nconst STEP_EXIT_NEXT = 'next'\nconst NOTIFICATION_TITLE = 'Onereach.ai Chat'\nconst NOTIFICATION_CTX_TYPE = 'request_response'\n//---------------- report Transcript Event ----------------\nconst report = ({\n  message, \n  medias, \n  transcriptId, \n  previousTranscriptId, \n  botIdentifier, \n  endUserIdentifier,\n  fromType,\n  fromIdentifierType,\n  reportingSettingsKey,\n  fromId,\n  fromIdentifier,\n  toType,\n  toIdentifierType,\n  toIdentifier\n}) => {\n  const reportingObject = {\n    botIdentifier,\n    message,\n    previousTranscriptId,\n    eventId              : transcriptId,\n    channel              : 'RWC',\n    reportingSettingsKey,\n    media                : _.map(medias, fileObj => ({fileUrl: fileObj.location, fileType : 'File'})),\n    fromId               : this.config.flowId,\n    fromType,\n    fromIdentifierType,\n    toType,\n    toIdentifier,\n    toIdentifierType,\n    fromIdentifier\n  };\n\n  this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\nconst mapDataToClient = (inputComponent) => {\n  const componentName = _.trim(inputComponent, '`')\n  const isHasMessage = ['card', 'carousel'].indexOf(componentName) === -1\n  const isHasMedias = ['textFiles'].indexOf(componentName) !== -1\n  let showComponentInMessage = [\n    'schedule',\n    'checkbox', \n    'datepicker', \n    'dropdown', \n    'menu', \n    'radio', \n    'timepicker', \n    'attachments', \n    'geolocation',\n    'slider',\n    'signature',\n    'video'\n  ].indexOf(componentName) !== -1\n  \n  const componentMap = {\n    schedule: {\n      name: 'rwc-scheduler',\n      buttonLabel: scheduleButtonLabel,\n      options: scheduleOptionItems,\n      allowMultiselect: scheduleAllowMultiselect,\n      multiselectQuantity: scheduleMultiselectQuantity,\n      workingHours: workingHours,\n      disableByFunction: scheduleDisableByFunction,\n      disableByMf: scheduleDisableByMf,\n      disableByManually: scheduleDisableByManually,\n      disableFunction: scheduleDisableFunction ? scheduleDisableFunction.toString() : null,\n      disableMf: scheduleDisableMf,\n      disableManual: scheduleDisableManual\n    },\n    record: {\n      name: 'rwc-record',\n      allowedMediaTypes: recordMultimediaOptions\n    },\n    carousel: {\n      name: 'rwc-carousel',\n      options: _.map(carouselOptions, card => {\n        const hasModal = _.get(card, 'hasModal') || false;\n        \n        if(!hasModal)\n          return _.omit(card, ['modalType', 'childWindowType', 'additionalContentLink', 'html', 'showModalButtonInUserResponse'])\n\n        const modalType = _.get(card, 'modalType');\n        const childWindowType = _.get(card, 'childWindowType');\n\n        if(hasModal && modalType === 'child-window' && childWindowType === 'url')\n          return _.omit(card, ['html'])\n        \n        return card;\n      }),\n      hasOtherOption: carouselHasAlternative,\n      submitBtnLabel: carouselSubmitBtnLabel,\n      cancelBtnLabel: carouselCancelBtnLabel,\n      otherOptionData: carouselAlternative,\n      multiple: carouselMultiselect\n    },\n    checkbox: {\n      name: 'rwc-checkbox-group',\n      options: checkboxOptions,\n      defaultValue: checkboxDefault\n    },\n    credit: {\n      name: 'rwc-credit',\n      buttonLabel: creditBtnLabel,\n      cancelButtonLabel: creditCancelBtnLabel,\n      termsCheckboxLabel: creditTermsLabel,\n      termsCheckboxLink: creditTerms\n    },\n    datepicker: {\n      name: 'rwc-datepicker',\n      outFormat: datepickerFormat,\n      startDay: datepickerStartsFrom,\n      isBlockedDates: datepickerBlockDates,\n      isSuggestedDates: datepickerSuggestedDates,\n      blockedOptions: datepickerBlockedOptions,\n      suggestedOptions: datepickerSuggestedOptions,\n      blockedFunction: datepickerBlockedFunc ? datepickerBlockedFunc.toString() : undefined,\n      suggestedFunction: datepickerSuggestedFunc ? datepickerSuggestedFunc.toString() : undefined,\n      blockedMergefield: datepickerBlockedMergefield,\n      suggestedMergefield: datepickerSuggestedMergefield\n    },\n    dropdown: {\n      name: 'rwc-dropdown',\n      options: dropdownOptions,\n      multiple: dropdownMultiple,\n      dropdownPlaceholder: dropdownPlaceholder\n    },\n    video: {\n      name: 'rwc-video',\n      startTime: videoStartTime,\n      startTimeTimestring: videoStartTimeTimestring,\n      autoplay: videoAutoplay,\n      button: videoBtnLabel,\n      video: videoSrc,\n      showInThread: videoShowInThread,\n      poster: videoPoster\n    },\n    menu: {\n      name: 'rwc-menu',\n      options: optionListOptions\n    },\n    buttons: {\n      name: 'rwc-buttons-list',\n      options: optionsButtons\n    },\n    slider: {\n      name: 'rwc-slider',\n      min: sliderMin,\n      max: sliderMax,\n      step: sliderStep,\n      unit: sliderUnit,\n      unitPosition: sliderUnitPosition,\n      mode: sliderType,\n      useCustomLabels: sliderUseCustomLabels,\n      labelFunction: sliderCustomFunction ? sliderCustomFunction.toString() : undefined,\n      options: sliderCustomLabels,\n      defaultValue: sliderDefaultValue,\n      defaultValueStart: sliderDefaultStart,\n      defaultValueEnd: sliderDefaultEnd\n    },\n    signature: {\n      name: 'rwc-signature',\n      btnLabel: signatureBtn\n    },\n    radio: {\n      name: 'rwc-radio-group',\n      options: radioOptions,\n      defaultValue: radioDefault\n    },\n    rate: {\n      name: 'rwc-rate',\n      ratePlaceholder: ratePlaceholder,\n      showInput: rateInput,\n      ratingSubmitLabel,\n      ratingDiscardLabel\n    },\n    textFiles: {\n      name: 'or-textbox',\n      placeholder: textPlaceholder,\n      textInputType,\n      textInputCustomPattern\n    },\n    timepicker: {\n      name: 'rwc-timepicker',\n      timeFormat: timepickerFormat\n    },\n    attachments: {\n      name: 'rwc-attachment',\n      isMulti: attachmentsNumber,\n      filesValidation: attachmentsAllowChosen,\n      isPrivate: isPrivateFiles,\n      allowedFileTypes: attachmentsAllowedTypes\n    },\n    geolocation: {\n      name: 'rwc-location',\n      buttonLabel: geolocationBtn,\n      defaultLat: geolocationLat,\n      defaultLng: geolocationLng,\n      useDefault: geolocationSetDefault\n    },\n    custom: {\n      name: 'custom',\n      vars: customVariables,\n      templateType: customTemplateType,\n      hideAfterSubmit: hideCustomComponentAfterSubmit,\n      showBotIcon: showBotIcon,\n      autoSubmit: autoSubmitCustomTemplate,\n      css: customTemplateCompiledCSS,\n      cssWrapperClassName: customTemplateCSSWrapperClassName,\n      scripts: customTempalateScripts,\n      ...(_.trim(customTemplateType, '`') === `vue` && { \n        vueTemplate: customTemplateVueHtmlTemplate,\n        vueScript: customTemplateVueScript\n      }),\n      ...(_.trim(customTemplateType, '`') === `html` && {\n        html: customTemplateHtmlCode,\n        javascript: customTemplateJavaScriptCode,\n      }),\n    }\n  }\n  \n  const answerParams = _.mapValues(componentMap[componentName], (el) => { \n    return el\n  });\n  \n  const answerComponent = {\n    component: componentMap[componentName].name,\n    vBind: answerParams,\n    showComponentInMessage\n  }\n  return { answerComponent, isHasMessage, isHasMedias }\n}\n\nconst timestring = require('timestring');\nconst SEND_DELAY = 100;\nconst UPDATE_CALLBACK = 'UPDATE_CALLBACK';\nconst ALL_MESSAGES_RECEIVED = 'ALL_MESSAGES_RECEIVED';\nconst GET_MESSAGES_FROM_HISTORY = 'GET_MESSAGES_FROM_HISTORY';\nconst uuid = require('uuid');\n\nconst conversation = await rwcContext.resolve();\n\nconst conversationData = await this.mergeFieldsInstance.get({\n  botId: conversation.botId,\n  name: conversation.value.name,\n  type: conversation.type,\n  path: 'rwc_conversation'\n});\n\nif (!conversationData) throw new Error('The conversation is empty. Most possible that invalid conversation selected')\n\nconst {\n  sessionId,\n  callback,\n  chatName,\n  realSessionId,\n  userId,\n  appId,\n  deviceId,\n  accountId\n} = conversationData;\n\nif (accountId) {\n  this.triggers.config({\n    target: accountId\n  })\n}\n\nconst axios = require('axios');\nconst Promise = require('bluebird');\n\n// get last transcript id from MF\nconst lastTranscriptId = await this.mergeFieldsInstance.get({\n  botId: conversation.botId,\n  name: conversation.value.name,\n  type: conversation.type,\n  path: 'rwc_conversation.transcriptId'\n});\n\nconst transcriptRequestId = uuid.v4();\nconst transcriptResponseId = uuid.v4();\n\n// patching conversation transcriptId\nawait this.mergeFieldsInstance.set(\n  {\n    botId: conversation.botId,\n    name: conversation.value.name,\n    type: conversation.type,\n    path: 'rwc_conversation.transcriptId'\n  }, \n  transcriptRequestId\n);\n\nconst sendMessage = async (message) => {\n  if (_.get(message, 'answer.notSendMessage')) return;\n  message.time = Date.now();\n  if (!message.id) {\n    message.id = uuid.v4();\n  }\n  \n  await new Promise(resolve => setTimeout(resolve, SEND_DELAY));\n  await this.eventManager.callbackResolve(callback, message);\n  delete callback.used;\n  await new Promise(resolve => setTimeout(resolve, SEND_DELAY));\n}\n\nconst getUploadUrl = async (pathes) => {\n  const localPathes = pathes\n  const headers = {\n    headers: {\n      Authorization: this.config.authorization,\n      'Content-Type' : 'application/json;charset=UTF-8'\n    }\n  }\n  \n  const urls = []\n  \n  for (let i = 0; i < pathes.length; i += 1) {\n    try {\n      const fileAlreadyExist = await axios.get(`${this.helpers.filesApiUrl}/public/${this.config.accountId}/RWC/${chatName}/${realSessionId}/${localPathes[i].name}`)\n      if (fileAlreadyExist) {\n        localPathes[i].name = localPathes[i].name.replace(/\\.([0-9a-z]+)(?:[\\?#]|$)/i, function(match) {\n          return `__${Date.now()}${match}`\n        });\n      }\n    } catch (e) {}\n  }\n  \n  const isPublic = _.isUndefined(isPrivateFiles) ? true : !isPrivateFiles;\n  \n  \n  for (let i = 0; i < localPathes.length; i += 1) {\n    urls.push(\n      axios.post(`${this.helpers.filesApiUrl}/api/url?isPublic=${isPublic}&accountId=${this.config.accountId}`, {key: `RWC/${chatName}/${realSessionId}/${localPathes[i].name}`, contentType: pathes[i].type, maxFileSize: null}, headers)\n    )\n  }\n  \n  return Promise.all(urls);\n}\n\nconst rwcThreadId = `rwc__${this.session.key}`\n\nif (this.id === 'main') {\n  // .local means subscription relates only to this session\n  // and won't be overwritten by same subscription in the subflow\n  this.triggers.local({\n    name: `chat/return_to_thread/${sessionId}`,\n  }, async ({params}) => {\n    const { answerComponent, isHasMessage, isHasMedias } = mapDataToClient(inputComponent)\n    \n  if (_.trim(inputComponent, '`') === `custom`) {\n    if(_.trim(customTemplateType, '`') === `vue`) {\n      const result = await answerComponent.vBind.vueScript();\n      answerComponent.vBind.vueScript = JSON.stringify(result, function(key, value) {\n        if (typeof value === 'function') {\n          return _.toString(value)\n        } else {\n          return value;\n        }\n      });\n      \n      const showComponentInMessageLocal = _.get(result, 'showComponentInMessage');\n      \n      answerComponent.showComponentInMessage = _.isUndefined(showComponentInMessageLocal) ? showCustomComponentInMessage : showComponentInMessageLocal \n    } else {\n      answerComponent.showComponentInMessage = showCustomComponentInMessage;\n    }\n  }\n  \n  const event = {\n    stepId: savedStepId,\n    id: uuid.v4(),\n    message: isHasMessage ? textMessage : '',\n    medias: isHasMedias ? medias : [],\n    useCustomAnswer,\n    userAnswerFunction: userAnswerFunction ? userAnswerFunction.toString() : null,\n    userAnswerFunctionParams: dataOutput,\n    answerComponent,\n    additionalContent: {\n      additionalContentCardChangeType,\n      additionalHtml,\n      additionalCss,\n      additionalScript: additionalScript ? additionalScript.toString() : '',\n      additionalCardvariables,\n      videoSrc: additionalContentVideo\n    },\n    resended: true\n  }\n  \n  if (autoSuggestion.input) {\n    event.suggestions = _.isEmpty(autoSuggestion.options) ? autoSuggestionOptionsList : autoSuggestion.options\n    event.isSuggestionInput = autoSuggestion.input\n    event.placeholder = textPlaceholder\n    event.suggestionsType = autoSuggestionType\n    event.suggestionsFromMergeField = autoSuggestionOptionsMergeField\n  }\n  \n  // if (answerComponent.component !== 'or-textbox') {\n  //   answerComponent.vBind.allowMask = false\n  // }\n  \n  if (!_.isEmpty(event)) {\n    await sendMessage(event)\n  }\n})\n}\n\nif (this.id === rwcThreadId) {\n  \n  this.triggers.on({\n    name: `ws/chat/${UPDATE_CALLBACK}/${sessionId}`,\n    refresh: true\n  }, async ({params}) => {\n    \n    if (params.callback) {\n      if (this.config.botId === conversation.botId) {\n        await this.mergeFields[conversation.value.name].set(params.callback, 'rwc_conversation.callback')\n      } else {\n        await this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.callback'}, params.callback);\n      }\n      // await this.mergeFields[conversation.value.name].set(params.callback, 'rwc_conversation.callback');\n      return\n    }\n    \n    const resultQueue = await this.emitSync({\n      name : 'rwc/queue_provider',\n      target: this.helpers.providersAccountId,\n      params : {\n        sessionId: params.sessionId,\n        type: 'sync',\n        method: 'get'\n      }\n    })\n    \n    const resultHistory = await this.emitSync({\n      name : 'rwc/history_provider',\n      target: this.helpers.providersAccountId,\n      params : {\n        sessionId: params.sessionId,\n        type: 'sync',\n        method: 'get',\n        lastMessageId: params.lastMessageId\n      }\n    })\n    \n    await this.eventManager.callbackResolve(\n      this.takeCallback(), \n      {\n        status: 'OK', \n        messagesFromQueue: resultQueue,\n        messagesFromHistory: resultHistory\n      })\n  })\n  \n  return this.triggers.otherwise(() => this.exitFlow())\n}\n\nthis.process.newThread(rwcThreadId, thread => {\n  thread.currentStep = this.currentStep\n  thread.local.background = true\n  thread.activate()\n})\n\n  \n  this.triggers.once({\n    name: `ws/chat/response/${sessionId}`,\n    refresh: true\n  }, async ({params}) => {\n    \n    // if (params._eventName === 'rwc_continue_main_thread') {\n    //   return this.exitStep('next', {})\n    // }\n    \n    await sendMessage({\n      answer: params\n    });\n    \n    let medias = params.filePath ? typeof params.filePath === 'string' ? params.filePath : params.filePath.map(el => ({location: el})) : null\n    medias = medias ? medias : params.image ? [{location: params.image}] : []\n    \n    let message = params.message\n    if (params.location) {\n      const arr = [];\n      for (let key in params.location) {\n          if (params.location.hasOwnProperty(key)) {\n              arr.push(key + ':' + params.location[key]);\n          }\n      };\n      message = arr.join(', ');\n    }\n    \n    report({\n      ...params,\n      message,\n      medias,\n      transcriptId         : transcriptResponseId, \n      botIdentifier        : chatName,\n      previousTranscriptId : lastTranscriptId, \n      fromIdentifier       : userId, \n      toIdentifier         : chatName,\n      fromType             : 'Visitor',\n      fromIdentifierType   : 'BrowserFingerprint',\n      reportingSettingsKey : 'responseTranscript',\n      toType               : 'Bot',\n      toIdentifierType     : 'RWCChatId'\n    });\n    \n    // this.mergeFields[conversation.value.name].set(transcriptResponseId, 'rwc_conversation.transcriptId')\n    if (this.config.botId === conversation.botId) {\n      await this.mergeFields[conversation.value.name].set(transcriptResponseId, 'rwc_conversation.transcriptId')\n    } else {\n      await this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.transcriptId'}, transcriptResponseId);\n    }\n    \n    await this.eventManager.callbackResolve(\n      this.takeCallback(), {\n        received: true\n      })\n   \n      if (params.answerType === 'text-leg') {\n       return this.exitStep('manual response', {\n         userReply: params.message,\n         userText: params.message,\n         requestMessageId: transcriptRequestId,\n         responseMessageId: transcriptResponseId,\n       });\n      }\n      \n      delete params.answerComponent\n      delete params.callback\n      delete params.message\n      \n      rwcContext.set('last', conversation);\n      await rwcContext.save();\n      \n      if (params.leg) {\n        return this.exitStep(params.leg, {\n          ...params,\n          requestMessageId: transcriptRequestId,\n          responseMessageId: transcriptResponseId,\n        })\n      }\n      \n      return this.exitStep('next', {\n        ...params,\n        requestMessageId: transcriptRequestId,\n        responseMessageId: transcriptResponseId,\n      });\n  })\n// }\n\n// wait for request to sign urls\nthis.triggers.once({\n  name: `ws/chat/getSignedUrl/${sessionId}`,\n  refresh: true\n}, async ({params}) => {\n  let signedUrls;\n  try {\n    signedUrls = await getUploadUrl( params );\n    \n    await this.eventManager.callbackResolve(\n    this.takeCallback(), \n    {\n      signedUrls: signedUrls.map(el => el.data)\n    })\n  } catch (e) {\n    await this.eventManager.callbackResolve(\n    this.takeCallback(), \n    {\n      signedUrls: null,\n      status: 'File size is too large' // not really so, need fixes\n    })\n  }\n});\n\nconst errorHandler = async event => {\n  throw new Error(event.params.textMessage)\n};\nthis.triggers.once({\n  name: `ws/chat/response_error/${sessionId}`,\n  refresh: true\n}, errorHandler)\n\nconst sendNotification = async ({ id, message }) => {\n  const target = this.helpers.providersAccountId;\n  let body\n  if (message) {\n    body = message.length > 200 ? message.substring(0, 197) + '...' : message\n  } else {\n    body = ''\n  }\n  \n  this.emitSync({\n    name: `${PROVIDER_VERSION}/app/push/send`,\n    target,\n    params: {\n      appId: appId,\n      accountDeviceId: deviceId,\n      body: body || 'You have a new message',\n      context: {\n        type: NOTIFICATION_CTX_TYPE,\n        messageId: id\n      },\n      title: NOTIFICATION_TITLE,\n      type: PUSH_REPLY_TYPE_TEXT,\n    }\n  })\n  .then(({result}) => {\n    if (_.has(result, PUSH_RESULT_ERROR)) {\n      throw result.error\n    }\n    \n    return this.exitStep(STEP_EXIT_NEXT, {\n      notificationId: result.id\n    })\n  })\n  .catch(e => {\n    this.log.warn(e)\n  })\n}\n\nreturn this.triggers.otherwise(async () => {\n  const { answerComponent, isHasMessage, isHasMedias } = mapDataToClient(inputComponent)\n  \n  if (_.trim(inputComponent, '`') === `custom`) {\n    if(_.trim(customTemplateType, '`') === `vue`) {\n      const result = await answerComponent.vBind.vueScript();\n      answerComponent.vBind.vueScript = JSON.stringify(result, function(key, value) {\n        if (typeof value === 'function') {\n          return _.toString(value)\n        } else {\n          return value;\n        }\n      });\n      \n      const showComponentInMessageLocal = _.get(result, 'showComponentInMessage');\n      \n      answerComponent.showComponentInMessage = _.isUndefined(showComponentInMessageLocal) ? showCustomComponentInMessage : showComponentInMessageLocal \n    } else {\n      answerComponent.showComponentInMessage = showCustomComponentInMessage;\n    }\n  }\n  \n  const event = {\n    stepId: savedStepId,\n    id: uuid.v4(),\n    message: isHasMessage ? textMessage : '',\n    medias: isHasMedias ? medias : [],\n    useCustomAnswer,\n    userAnswerFunction: userAnswerFunction ? userAnswerFunction.toString() : null,\n    userAnswerFunctionParams: dataOutput,\n    answerComponent,\n    additionalContent: {\n      additionalContentCardChangeType,\n      additionalHtml,\n      additionalCss,\n      additionalScript: additionalScript ? additionalScript.toString() : '',\n      additionalCardvariables,\n      videoSrc: additionalContentVideo\n    }\n  }\n  \n  \n  if (autoSuggestion.input) {\n    event.suggestions = _.isEmpty(autoSuggestion.options) ? autoSuggestionOptionsList : autoSuggestion.options\n    event.isSuggestionInput = autoSuggestion.input\n    event.placeholder = textPlaceholder\n    event.suggestionsType = autoSuggestionType\n    event.suggestionsFromMergeField = autoSuggestionOptionsMergeField\n  }\n  \n  // if (answerComponent.component !== 'or-textbox') {\n  //   answerComponent.vBind.allowMask = false\n  // }\n  \n  \n  if (!_.isEmpty(event)) {\n    await sendMessage(event)\n    \n    if (deviceId) {\n      await sendNotification(event)\n    }\n    \n    // add message to queue\n    this.emitAsync({\n      name : 'rwc/queue_provider',\n      target: this.helpers.providersAccountId,\n      params : {\n        sessionId: sessionId,\n        type: 'async',\n        method: 'post',\n        message: {\n          message: textMessage || '',\n          answerComponent,\n          id: event.id,\n          stepId: event.stepId,\n          medias: medias,\n          isSuggestionInput: autoSuggestion.input,\n          placeholder: textPlaceholder,\n          suggestions: autoSuggestion.options,\n          time: Date.now()\n        }\n      }\n    })\n  }\n    \n  report({\n    ...event,\n    medias               : medias || videoSrc,\n    message              : event.message || '',\n    botIdentifier        : chatName,\n    transcriptId         : transcriptRequestId, \n    previousTranscriptId : lastTranscriptId, \n    fromIdentifier       : chatName, \n    toIdentifier         : userId,\n    fromType             : 'Bot',\n    fromIdentifierType   : 'RWCChatId',\n    reportingSettingsKey : 'requestTranscript',\n    toType               : 'Visitor',\n    toIdentifierType     : 'BrowserFingerprint'\n  });\n    \n  this.exitFlow()\n});",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "26a265e2-44a9-4452-ab91-0f6a7c35e88f",
              "label": "manual response",
              "condition": "autoSuggestion.isExtraLeg"
            },
            {
              "id": "55a0101f-854b-44f8-a88e-78c6c4c5f18d",
              "label": "cancel",
              "condition": "hasCancelExit"
            },
            {
              "id": "__timeout__",
              "label": "timeout",
              "condition": "processTimeout"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "medias": [],
          "dataOut": {
            "ttl": 86400000,
            "meta": {
              "type": "rwc-request-response"
            },
            "name": "",
            "type": "session"
          },
          "videoSrc": {},
          "rateInput": true,
          "sliderMax": "``",
          "sliderMin": "``",
          "dataOutput": null,
          "rwcContext": {
            "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
            "output": {
              "selectStyle": "inherited"
            },
            "contextKey": "__rwc_context"
          },
          "sliderStep": "``",
          "sliderType": "single",
          "sliderUnit": "``",
          "creditTerms": {},
          "savedStepId": "",
          "showBotIcon": false,
          "textMessage": "``",
          "videoPoster": {},
          "conversation": {},
          "processError": true,
          "radioDefault": "`No option`",
          "radioOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "signatureBtn": "``",
          "workingHours": {
            "to": null,
            "from": null,
            "timezone": {
              "id": "1",
              "zone": "GMT+00:00"
            },
            "timeFormat": "12"
          },
          "additionalCss": "",
          "textInputType": "text",
          "videoAutoplay": true,
          "videoBtnLabel": "``",
          "videoUsedLink": false,
          "additionalHtml": "",
          "autoSuggestion": {
            "input": true,
            "isExtraLeg": false
          },
          "creditBtnLabel": "``",
          "geolocationBtn": "``",
          "geolocationLat": "``",
          "geolocationLng": "``",
          "inputComponent": "`textFiles`",
          "isPrivateFiles": false,
          "optionsButtons": [
            {
              "label": "``",
              "value": "``",
              "buttonStyle": "default"
            }
          ],
          "processTimeout": true,
          "videoStartTime": "0",
          "carouselOptions": [
            {
              "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
              "image": {},
              "title": "``",
              "value": "``",
              "video": {},
              "hasModal": false,
              "modalType": "default-modal",
              "buttonLabel": "``",
              "buttonStyle": "default",
              "description": "``",
              "childWindowType": "html",
              "additionalContentLink": {},
              "showModalButtonInUserResponse": true
            }
          ],
          "checkboxDefault": [],
          "checkboxOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "customVariables": [],
          "dropdownOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "ratePlaceholder": "``",
          "textPlaceholder": "``",
          "timeoutDuration": "`1h`",
          "useCustomAnswer": false,
          "additionalScript": "",
          "creditTermsLabel": "``",
          "customTemplateId": null,
          "datepickerFormat": "`MM-DD-YYYY`",
          "dropdownMultiple": false,
          "sliderDefaultEnd": "``",
          "timepickerFormat": "`auto`",
          "attachmentsNumber": "`0`",
          "optionListOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "ratingSubmitLabel": "``",
          "scheduleDisableMf": "this.get('')",
          "videoShowInThread": true,
          "autoSuggestionType": "`emty`",
          "customTemplateType": "`vue`",
          "ratingDiscardLabel": "``",
          "sliderCustomLabels": [
            {
              "label": "``",
              "value": "``"
            },
            {
              "label": "``",
              "value": "``"
            }
          ],
          "sliderDefaultStart": "``",
          "sliderDefaultValue": "``",
          "sliderUnitPosition": "`start`",
          "userAnswerFunction": "return ''",
          "videoTotalDuration": 0,
          "carouselAlternative": {
            "value": "``",
            "buttonLabel": "``",
            "buttonStyle": "default",
            "description": "``"
          },
          "carouselMultiselect": false,
          "dropdownPlaceholder": "``",
          "scheduleButtonLabel": "``",
          "scheduleDisableByMf": false,
          "scheduleOptionItems": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "creditCancelBtnLabel": "``",
          "datepickerBlockDates": false,
          "datepickerStartsFrom": "`0`",
          "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
          "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
          "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
          "geolocationSetDefault": false,
          "scheduleDisableManual": [],
          "sliderUseCustomLabels": false,
          "additionalContentVideo": [],
          "attachmentsAllowChosen": false,
          "carouselCancelBtnLabel": "``",
          "carouselHasAlternative": false,
          "carouselSubmitBtnLabel": "``",
          "customTempalateScripts": [],
          "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
          "textInputCustomPattern": "``",
          "additionalCardvariables": [],
          "attachmentsAllowedTypes": [],
          "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
          "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
          "recordMultimediaOptions": [
            "`audio`",
            "`video`",
            "`screen`",
            "`file`"
          ],
          "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
          "autoSubmitCustomTemplate": true,
          "datepickerBlockedOptions": [],
          "datepickerSuggestedDates": false,
          "scheduleAllowMultiselect": false,
          "videoStartTimeTimestring": "``",
          "autoSuggestionOptionsList": [
            {
              "text": "``"
            }
          ],
          "customTemplateCompiledCSS": "",
          "scheduleDisableByFunction": false,
          "scheduleDisableByManually": false,
          "datepickerSuggestedOptions": [],
          "datepickerBlockedMergefield": "this.get('')",
          "scheduleMultiselectQuantity": "3",
          "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
          "showCustomComponentInMessage": true,
          "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
          "datepickerSuggestedMergefield": "this.get('')",
          "hideCustomComponentAfterSubmit": false,
          "additionalContentCardChangeType": "`append`",
          "autoSuggestionOptionsMergeField": "this.get('')",
          "customTemplateCSSWrapperClassName": ""
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "requestTranscript": {
            "tags": [],
            "type": "transcript",
            "label": "Request Transcript",
            "enabled": true
          },
          "responseTranscript": {
            "tags": [],
            "type": "transcript",
            "label": "Response Transcript",
            "enabled": true
          }
        },
        "outputExample": {
          "userReply": "string"
        },
        "help": "Use this step to send a message to an end user in a specified Rich Web Chat conversation and wait for a response. Step works together with the *Wait for Chat (RWC)* step template. When step is reached during flow execution, it sends the message to the chosen conversation and proceeds down the *next* exit after receiving user's reply.\n\n### Message content\nTo create the outgoing message, choose an input component and fill in necessary information. Each component's settings and limits are described in the input component field under the *Info* icon.\n\nThe *preview message* button allows you to see how the user will see the message in the chat.\n\n### Manual user response\nAn option to allow the user manually type their reply instead of choosing a predefined input component is available. Turning it on will add a new *manual response* exit to the tree, and the flow will proceed down that exit if the user chooses to reply with a text message.\n\nNote that for *Text* input component the user is expected to manually type their reply. In this case this option is on by default, and the flow will proceed down the *next* exit.\n\nOption to provide the user with suggestions for his reply is available via selecting type of *Suggested options creation method* and specifying a list of options. These suggestions will appear after the user focuses on the text input field of the chat.\n\n### Conversation\nBy default, the conversation will be inherited from the previous RWC step template on the flow tree. Turn off the respective option to select it manually. First, select the bot name from your OneReach.ai account, and then choose the *conversation* from the respective dropdown that lists the merge field names of available *Wait for Chat (RWC)* step templates in the selected bot. The message will be sent to the chosen conversation.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in *merge field name*. The content of the output depends on the choice of the input component, as well as on the type of user reply. The structure of the merge field object for each component, as well as for manual user response, is described in the input component field under the *Info* icon.\n\n### Error handling\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. if the chosen conversation no longer exists).\n\nBy default, the step will wait for 1 hour to receive a response from the user before proceeding down the *next* exit. The waiting time limits are between 15 seconds and 72 hours, and if no response is received after it ends, the flow will continue through the *timeout* exit. Examples of acceptable time formats: `3m 12s` or `126sec`.\n\n### Reporting events\n\n*Step*, *Request Transcript* and *Response Transcript* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services dependencies:\n- flow builder - v2.4.0\n- event-manager - v2.0.1\n- deployer - v2.0.0\n\n### Release notes\nv.4.0.0\n- Sends a message to a visitor and waits for an action or a reply. \n- Supports sending files and/or text messages that may contain simple text and/or an input component.\n- Added an option to allow the visitor to reply with a custom text input instead of the predefined component that is handled by the separate exit.\n- Added an option to provide auto-suggestions for the custom text input that can speed up typing for the visitor.\n- Added an option for the flow designer to check the created message content via Preview message button, that opens in a separate tab and reflects step changes in real-time.\n- Step can inherit conversation from gateway step of the current or shared flow.\n- In case of a response time-out, a default user friendly notification is shown in the chat. Alternatively, the flow execution may be continued through the *timeout* exit.\n\nv.4.4.0\n- List of input components was renamed and grouped.\n- Added new input components: Request Rating and feedback, Request Credit Card, Request Signature, Video playback. \n- Merged Card and Card Carousel components into 'Cards' component.\n- Added optional additional info for Select Cards component.\n- Added support of video playback and video poster for Cards.\n- Added option to select single or multiple Cards.\n- Added option to define end-user answer with a JavaScript function instead of predefined component's view.\n- Added option to select button style for Quick reply buttons and Cards.\n- Improved component to select range of values or single point with ability to set default values and custom labels.\n- Added option to store files, received from end-user as private.\n- Improved Request Date component with ability to set blocked and suggested dates.\n- Improved Request Geolocation component with option to set default pin location if in end-user browsers location services are blocked.\n- Improved Request Time component with auto-detected time format, so timepicker is shown according to end-user's browser time format. \n- Improved Custom template component with ability to choose template type and create it with simplified UX.\n- Added option to Custom template to override custom CSS of standard chat components real-time.\n- Added ability to set placeholder to manual user reply.\n- Added list of methods how to set suggested options. \n- Error handling component changed to improved.\n- Added step compatibility with triggering and processing global commands.\n- Added web socket anonymization.\n- Added ability to continue conversation, that is inherited from RWC gateway step.\n\nv.4.4.24\n- Added hotfix for step timeout issue.\n\nv.4.4.25\n- Added support for cross-account conversation\n\nv.4.4.28\n- Added multiselect for Dropdown option input component.\n\nv.4.4.29\n- Update info of Cards and Video player output structure ",
        "formBuilder": {
          "stepExits": [
            {
              "id": "e30ec863-9ee8-4aa4-ae77-5b9ce4819194",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "74432918-2455-47e5-9bee-865693e1d2cf",
              "data": {
                "id": "26a265e2-44a9-4452-ab91-0f6a7c35e88f",
                "label": "manual response",
                "condition": "autoSuggestion.isExtraLeg"
              },
              "component": "exitStatic"
            },
            {
              "id": "f8e4fcc5-7e57-4033-9f81-4f2672fec6c6",
              "data": {
                "id": "55a0101f-854b-44f8-a88e-78c6c4c5f18d",
                "label": "cancel",
                "condition": "hasCancelExit"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "1ba3f24d-2656-46fe-a00d-88d52a77c989",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "5eff8357-2db1-4aaa-92ce-8d672ce70dcd",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "3f3dc0e8-302c-447c-a3ae-60e104cd8614",
                    "stepLabel": "Wait for Chat (RWC) 4.2.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "7e0f2b5c-e827-4a00-b18b-6850ec0bff63",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "37b0e329-c470-4a6a-8f04-2e6398a8692e",
                    "stepLabel": "Wait for Chat (RWC) 4.1.x",
                    "allowUpdate": false
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "481de897-5c0f-4447-8034-45a3c89d7314",
              "data": {
                "open": true,
                "header": "Message content",
                "inputs": [
                  {
                    "id": "6968f7c1-1d16-4b40-8c2c-4345e19c0c06",
                    "data": {
                      "icon": "",
                      "label": "Input component",
                      "options": [],
                      "helpText": "",
                      "multiple": false,
                      "variable": "inputComponent",
                      "hasSearch": false,
                      "optionsMode": "dynamic",
                      "placeholder": "Select Field",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<h3>RWC input component settings</h3>\n<p><strong>General description</strong></p>\n<p>The outgoing message, as well as the output of the step, is defined by the selected input component. The character limit some fields are suggested for user-friendly purposes and, if exceeded, will not influence step's execution, unless that is specifically indicated. For some inputs character limit is set and input text might be truncated, so then validation message will be should in step. The way the user sees the message depends on user's device, therefore it is advisable to check it using the <strong>preview message</strong> button for desktop, tablet and mobile devices.</p>\n<p>Most components include a <strong>text message</strong> field. It's settings and limits are described in the respective <em> Info </em> icon of the selected component. </p>\n<p><strong>Input components </strong></p>\n<p>Use components from Select group to ask user to select one or multiple options. Components from Request group will ask for some specific data from end-user. With Other group specific action or data might be requested (with Custom template or Video playback components). Most components include a <strong>text message</strong> field. It's settings and limits are described in the respective <strong>Info </strong>icon of the selected component. </p>\n<p><strong>Select group: </strong></p>\n<p><strong>Cards </strong> </p>\n<p>Multiple cards can be defined via the <em> Add card </em> button. <em> Title </em> and <em> description </em> have the same properties as the <em>text message</em> input of other components, except for the character limit that is fixed and will be truncated if exceeded. <em>Button label </em>limit is also fixed. The <em> card ID </em> input must be unique for each card. Options are available to add video and video poster or only image file from OneReach.ai storage or via an external URL. Button style for each card might be selected,<em> default </em>is suggested by chat style guide.</p>\n<p>To provide the user with an alternative suggestion card, turn on the respective toggle and define <em>description</em>, <em>button label </em>and <em>card ID</em>, that follow the same rules as a regular card.</p>\n<p>For each card option to add additional content is available with respective toddle turn on. Added content might be displayed in modal or in a child window. For modal option, only HTML code can be added to be present as additional content. For child window HTML can be added as a code or added as file from OneReach.ai storage or via an external URL. Optionally, additional content can be shown in submitted end-user's message as well.</p>\n<p>To allow cards multiselect for end-user, turn on the respective toggle and define <em>Submit button label </em>and <em>Cancel button label.</em></p>\n<p>The output of the step will include the <em>chosen</em> by the user card with its title, description, label (all truncated if necessary), as well as card ID. If alternative card was chosen, the <em> title </em> property will be <code> undefined </code> . The structure of the output is:</p>\n<pre><code>{ \n  \"cards\": [{ \n    \"title\": \"\", \n    \"description\": \"\", \n    \"buttonLabel\": \"\",\n    \"additionalContentLink\":\"\" \n    \"cardId\": \"\",\n    \"image\": \"\",\n    \"video\": \"\",\n  }]\n}</code></pre>\n<p><strong> Checkboxes </strong> Multiple checkboxes can be defined via the <em> add checkbox </em> button. The <em> checkbox label </em> field is required and will not be truncated. The <em> checkbox value </em> input must be unique for each checkbox. Option to preselect one or multiple checkboxes is also available. Chosen by the user checkboxes are included in the output. The structure of the output is:</p>\n<pre><code>{ \n  \"checkbox\": [{ \n    \"label\": \"\", \n    \"value\": \"\", \n  }] \n}</code></pre>\n<p><strong> Dropdown option </strong> Multiple options can be defined via the <em> add option </em> button, but only one can be selected by the user. The <em> option label </em> field is required, its input will be truncated if exceeded, but will be added in full to the output. The <em> option value </em> input is also required, must be unique for each option and is included in the output. Option to indicate a placeholder is also available. The structure of the output is:</p>\n<pre><code>{ \n  \"label\": \"\", \n  \"value\": \"\" \n}</code></pre>\n<p><strong> Option from list </strong> Multiple options can be defined via the <em> add option </em> button, but only one can be selected by the user. The <em> option label </em> field is required, its input will be truncated if exceeded, but will be added in full to the output. The <em> option value </em> input must be unique for each option, and is also included in the output. The structure of the output is:</p>\n<pre><code>{\n  \"label\": \"\",\n  \"value\": \"\" \n}</code></pre>\n<p><strong> Quick reply buttons </strong> Multiple buttons can be defined via <em> add button </em> , but only one can be selected by the user. The <em> button label </em> field is required, its input will not be truncated if exceeded and will be added in full to the output. The <em> button value </em> input must be unique for each button, and is also included in the output. Button style for each option might be selected, <em> default </em> is suggested by chat style guide. The structure of the output is:</p>\n<pre><code>{ \n  \"label\": \"\", \n  \"value\": \"\"\n}</code></pre>\n<p><strong> Radio button option </strong> Multiple buttons can be defined via <em> add radio button </em> , but only one can be selected by the user. The <em> radio button label </em> field is required, its input will not be truncated if exceeded and will be added in full to the output. The <em> button value </em> input must be unique for each button, and is also included in the output. Option to preselect a button is also available. The structure of the output is:</p>\n<pre><code>{ \n  \"label\": \"\", \n  \"value\": \"\" \n}</code></pre>\n<p><strong> Range or single point </strong> The slider bar is defined by the <em> min </em> and <em> max </em> values that are expected as numbers with the smaller of the two set as the lower limit. These inputs will be truncated if exceeded, but will be added in full to the output. Depends on component setup <em> default value </em> is required for single point, <em>  <em> default value </em> start </em> and <em> default value end </em> are required for range. The <em> step </em> input defines the size of the slider's movement and is expected as a number with negative value interpreted as positive. The <em> unit </em> value can be added before or after the limit, or left empty. It will be truncated if exceeded, but added in full to the output. Custom labels allows to set text labels at specific value of slider. Advanced option is available shown specific text depends on selected range or point in a real-time. The structure of the output is:</p>\n<pre><code>{\n  \"range\": [0, 100], \n  \"units\": \"F\" \n}</code></pre>\n<h4><strong> Request group: </strong></h4>\n<p><strong> Attachments </strong> Option to allow one or multiple attachments is available.Received attachments are uploaded to your <code> Files </code> storage with public links. To store uploaded files with private links, turn on the respective toggle, so uploaded files won't be accessible to preview ar download in chat. To define specific file types for received attachments, turn the respective toggle on, then choose necessary file types from the dropdown or enter them manually. URLs of uploaded files are added to the output of the step:</p>\n<pre><code>{ \n  \"filePath\": [\"\",\"\"] \n}</code></pre>\n<p><strong> Credit card </strong> The <em> submit button label </em> and <em> cancel button label </em> are required, it's text will be truncated if exceeded. Additional info for Terms and Conditions can be added as simple test or as a hyperlink. Hyperlink text should be wrapped with symbol % and a file should be selected from Files storage or added via URL. For example: `Read %Terms and Conditions%`. When input is selected in step, additional leg is added, so when user cancelled the component submission, the step will proceed by <em> Cancel </em> exit. User's credit card data will be added to the output, it's structure will be:</p>\n<pre><code>{ \n \"cardNumber\":\"\", \n \"expirationDate\":\"\", \n \"cvv\":\"\", \n \"cardHolder\":\"\" \n \"leg\":\"\" \n}</code></pre>\n<p><strong> Date </strong> Options to choose the first day of the week and date format are available. The date chosen by the user is added to the output in selected format. Option to add blocked and suggested dates are available. The structure of the output is:</p>\n<pre><code>{ \n  \"date\": \"08-09-2020\", \n  \"dateText\":\"08 September 2020\", \n  \"dateISO\":\"2021-09-08T10:36:51+03:00\", \n  \"dateUnixMs\":1631086611059 \n}</code></pre>\n<p><strong> Geolocation </strong> The <em> button label </em> is required, its input will be truncated if exceeded. Option to set default location is available with a respective toggle, so end-user will see default location if his browser location services are blocked. User's location coordinates, as well as a screenshot of the map, will be added to the output, its structure will be:</p>\n<pre><code>{ \n  \"location\": { \n    \"lat\": , \n    \"lng\": \n  }, \n  \"image\": \"\" \n}</code></pre>\n<p><strong> Rating and feedback </strong> The <em> submit button label </em> and <em> cancel button label </em> are required, it's text will be truncated if exceeded. By default component will show for end-user input for feedback, that can be hidden by tuning off the respective toggle. User's submitted rating and feedback, will be added to the output, its structure will be:</p>\n<pre><code>{ \n  \"rating\": \"\",\n  \"feedback\": \"\"\n}</code></pre>\n<p><strong> Signature </strong> The <em> button label </em> is required, its input will be truncated if exceeded. Screenshot of user's submitted signature, will be added to the output, its structure will be:</p>\n<pre><code>{ \n  \"image\": \"\" \n}</code></pre>\n<p><strong> Text </strong> The <em> text message </em> settings and limits can be found in the <em> Info </em> icon. There is no limit on the amount or size of attachments. Each attachment will be added to the message in the order from top to bottom. Any file type can be added, and images and <code> .gif </code> files should show a preview.</p>\n<p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary attachments in the modal window of <code> Files </code> . Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To add files using links, click <em> URL </em> and specify it manually or declare it with a merge field.</p>\n<p>Multiple files or links can be chosen via <em> add file </em> button or removed by a click on the bucket icon next to it in the step details panel.</p>\n<p>An option to add a placeholder for user's reply is also available.</p>\n<p>Option to select <em> type of input </em> formatting is available, <em> simple text </em> is selected by default and might be changed. If <em> numeric </em> type of input is selected, end-user will be able to add only numbers. For <em> password </em> type, added text to input will be masked on chat thread, chat history and reporting data. For <em> email </em> type end-user will see At sign on mobile keyboard, but added data won't be not validated if not valid email format is specified. Custom pattern might be selected, it's description is in the <em> Info </em> icon at <em> Pattern </em> input.</p>\n<p>The output of the step will contain user's reply, its structure will be:</p>\n<pre><code>{ \n  \"userReply\": \"\"\n}</code></pre>\n<p><strong> Time </strong> Options to choose 12 or 24 hour format is available. By default aut-detect is selected, so for end-user timepicker will be shown in a format accorsing to browser settings. The output of the step will contain the chosen by the user time in selected format, its structure will be:</p>\n<pre><code>{ \n  \"time\": \"\"\n}</code></pre>\n<h4>Other components:</h4>\n<p><strong> Custom template </strong> Advanced users have an option to create a custom template in code mode using HTML, CSS and JavaScript.Enter the code in the respective box. Template can be saved to <em> Files </em> storage or uploaded. </p>\n<p><strong> Video player </strong> The <em> button label </em> is required, its input will be truncated if exceeded. Video file can be selected from Filed or added via URL, player poster is optional. Client supports HTML5, YouTube, Vimeo players. Video start time defines point, where playback will be started for end-user. Options to <em> autoplay </em> video once it received and to <em> show player </em> <em> in chat when user reply is submitted </em> are selected by default. Once the component submitted, playback won't start automatically in end-user's response.\nThe output of the step will contain video data in seconds, its structure will be: </p>\n<pre><code>{\n   \"playbackStartTime\": number,\n   \"playbackEndTime\": number,\n   \"totalVideoDuration\": number,\n   \"viewDuration\": number\n}</code></pre>\n<h3>Manual user response</h3>\n<p>For every component except T <em> ext, </em> if toggle <em> Allow manual user response </em> is turned on and the end-user types their response instead of selecting one of the provided choices, the flow will proceed down the <em> manual response </em> exit, and the structure of output will be:</p>\n<pre><code>{\n  \"userReply\": \"string\"\n}</code></pre>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`textFiles`",
                      "dropdownType": "basic",
                      "iconPosition": true,
                      "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                      "allowCodeMode": false,
                      "dynamicOptions": "",
                      "optionsDefault": [],
                      "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [\n  {\n    groupLabel: 'Simple select',\n    items: [\n      {\n        label: 'Cards',\n        icon: 'burst_mode',\n        value: '`carousel`'\n      },\n      {\n        label: 'Checkboxes',\n        icon: 'check_box',\n        value: '`checkbox`'\n      },\n      {\n        label: 'Dropdown option',\n        icon: 'line_weight',\n        value: '`dropdown`'\n      },\n      {\n        label: 'Option from list',\n        icon: 'format_list_bulleted',\n        value: '`menu`'\n      },\n      {\n        label: 'Quick reply button',\n        icon: 'view_stream',\n        value: '`buttons`'\n      },\n      {\n        label: 'Radio button option',\n        icon: 'radio_button_checked',\n        value: '`radio`'\n      },\n      {\n        label: 'Range or single point',\n        icon: 'linear_scale',\n        value: '`slider`'\n      }\n    ]\n  },\n  {\n    groupLabel: 'Request data',\n    items: [\n      {\n        label: 'Attachments',\n        icon: 'attachment',\n        value: '`attachments`'\n      },\n      {\n        label: 'Credit card',\n        icon: 'credit_card',\n        value: '`credit`'\n      },\n      {\n        label: 'Date',\n        icon: 'event',\n        value: '`datepicker`'\n      },\n      {\n        label: 'Geolocation',\n        icon: 'place',\n        value: '`geolocation`'\n      },\n      {\n        label: 'Rating and feedback',\n        icon: 'star',\n        value: '`rate`'\n      },\n      {\n        label: 'Signature',\n        icon: 'gesture',\n        value: '`signature`'\n      },\n      {\n        label: 'Text',\n        icon: 'insert_comment',\n        value: '`textFiles`'\n      },\n      {\n        label: 'Time',\n        icon: 'access_alarms',\n        value: '`timepicker`'\n      },\n    ]\n  },\n  {\n    groupLabel: 'Other',\n    items: [\n      {\n        label: 'Custom template',\n        icon: 'edit',\n        value: '`custom`'\n      },\n      {\n        label: 'Video playback',\n        icon: 'video_library',\n        value: '`video`'\n      }\n    ]\n  }\n];\nmyArr.forEach(el => {\n  el.items = el.items.map(item => {\n    item.label = `<span style=\"display: flex; align-items:center\"><span class=\"material-icons\" style=\"font-size: 20px; color: #91969d; margin-right: 5px;\">${item.icon}</span>${item.label}</span>`\n    return item\n  })\n})\n// for (let i = 0; i < 10; i++) {\n//     myArr.push({ label: `Number ${i}`, value: i });\n// }\nreturn myArr;",
                      "hideOptionTitle": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "mergeFieldsTypes": [
                        "session",
                        "shared",
                        "global"
                      ],
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": "",
                      "extendableOptions": false,
                      "optionsKeysCustom": false,
                      "iconHelpTextOption": "modal",
                      "mergeFieldsIsGroup": true,
                      "allowUseMergeFields": false,
                      "allowOnlyMergeFields": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSelectExpression",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (advanced)",
                    "compiled": {},
                    "component": "formSelectExpression",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelectExpression\"]"
                    ]
                  },
                  {
                    "id": "8e2560bc-11ad-4bfb-bc35-3839a38dc2b2",
                    "data": {
                      "help": "Suggested length is up to 320 chars",
                      "label": "Text message",
                      "variable": "textMessage",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p><strong>Text message</strong><br><br>A text message has no limit on the amount of characters and will not be truncated. However, for user-friendly purposes the suggested limit is 320 characters. The field can be defined manually and using merge fields (click on the <code>{x}</code> icon). Note that using <em>merge field values</em> makes the length of a message unknown.</p><p>You can format the text inserting HTML into the message, for example:</p><pre><code>Look it up on &lt;a href='https://onereach.ai/'&gt; OneReach.ai&lt;/a&gt;!</code></pre><p>will create a link for \"OneReach.ai\".</p><p>To insert an active URL in the text, use <code>http://</code> or <code>https://</code>.</p><p></p>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "320",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4a3145e7-ea43-4bd1-b839-35fb4dedcf14",
                            "ruleType": {
                              "func": "{ return !_.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "doesn't exactly match",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "11ba9646-d225-45c4-8880-d45adee59cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "77738125-4312-488c-9528-b6437bfeb5b3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "modal",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4a3145e7-ea43-4bd1-b839-35fb4dedcf14",
                            "ruleType": {
                              "func": "{ return !_.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "doesn't exactly match",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "11ba9646-d225-45c4-8880-d45adee59cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "77738125-4312-488c-9528-b6437bfeb5b3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "39887fdd-2db1-4427-b13b-e6e2e5832bbd",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Audio",
                          "value": "`audio`",
                          "checked": true,
                          "vforkey": "aa2bf886-c2f7-4118-9b8e-6349f6c5bc9f",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Live video",
                          "value": "`video`",
                          "checked": true,
                          "vforkey": "4f2bab72-f0b9-4307-b6ad-93d5a316e30c",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Screen record",
                          "value": "`screen`",
                          "checked": true,
                          "vforkey": "7b4f488f-d8c5-4682-b0a9-4d68da56e779",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Audio or video file upload",
                          "value": "`file`",
                          "checked": true,
                          "vforkey": "b643008c-7813-4c4b-bbeb-f19133b90ab1",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "recordMultimediaOptions",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [
                        "`audio`",
                        "`video`",
                        "`screen`",
                        "`file`"
                      ],
                      "allowCodeMode": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "57a0d0e2-a25e-4422-9222-835bd1ee9178",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [
                        {
                          "vforkey": "20a83903-6c8c-49f7-aba7-9f5fb095c3f7",
                          "errorMessage": "Multimedia options cannot be empty",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "2d4c4e01-1bc0-4297-b257-f6ad9c04c160",
                                "ruleType": {
                                  "func": "{ return firstValue.length < secondValue.length }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "is shorter than",
                                  "modes": [],
                                  "category": "array"
                                },
                                "codeValue": "``",
                                "valueType": "array",
                                "firstValue": "schema.recordMultimediaOptions",
                                "secondValue": "1",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "57a0d0e2-a25e-4422-9222-835bd1ee9178",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "546b1168-7680-47f5-9343-84f56eee79a9",
                    "data": {
                      "data": "{\n  \"checkboxOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  checkboxOptions: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`checkbox`') return true\n        return _.trim(obj.label, '`')\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n      notUniqValues (obj) {\n        // if (this.schema.inputComponent !== '`checkbox`') return true\n        return this.schema.checkboxOptions.filter(el => el.value === obj.value).length <= 1\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.checkboxOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bfsjklamrpwounydgcqzxtievh",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      onOptionsChange () {\n        console.log('change')\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.checkboxOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.checkboxOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fdb27d23-b811-4484-a6a8-c892fb32416a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fdb27d23-b811-4484-a6a8-c892fb32416a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n    @data-change=\"onOptionsChange\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Checkbox label ${item.index + 1}`\"\n          removeBubble\n          placeholder=\"E.g. confirm\"\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"400\"\n          help=\"Suggested length is up to 400 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.checkboxOptions.$each[${item.index}].emptyLabel`, v)\"\n          error=\"Checkbox label is required.\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Checkbox value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add checkbox</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fdb27d23-b811-4484-a6a8-c892fb32416a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "daf0ba74-fdfa-4fd4-9093-3f25eca4e479",
                    "data": {
                      "data": "{\n  \"checkboxDefault\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.checkboxDefault\"\n  :inputComponent=\"schema.inputComponent\"\n  :options=\"schema.checkboxOptions\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zswnekjyvlqrxafcdoumhbgpti",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    watch: {\n      options: {\n        handler(nv, ov) {\n          console.log('new val', nv)\n          console.log('old val', ov)\n          this.populateOptions()\n        },\n        deep: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        options: Array,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      async populateOptions () {\n        await this.$nextTick()\n        if (!this.$refs.selectExpression || !this.options) return\n        \n        // console.log('options', this.$refs.selectExpression.localOptions)\n        // console.log('value', this.$refs.selectExpression.value)\n        // this.$refs.selectExpression.value = this.$refs.selectExpression.value.filter(el => _.trim(el, '``'))\n        this.$refs.selectExpression.localOptions = [];\n        console.log('options', this.options)\n        console.log('value', this.$refs.selectExpression.value)\n        const optionLabels = this.options.map(el => _.trim(el.label, '`'))\n        console.log('optionLabels', optionLabels)\n        const isChosenOptionsNotChanged = this.$refs.selectExpression.value.every(el => {\n          return optionLabels.indexOf(el) !== -1\n        })\n        console.log(isChosenOptionsNotChanged)\n        if (!isChosenOptionsNotChanged) {\n          console.log(213)\n          this.$refs.selectExpression.value = []\n          this.computedValue = []\n        }\n        // if (this.$refs.selectExpression.value.every(el => {el.indexOf()}))\n        // if ()\n        // this.$refs.selectExpression.value = []\n        // if (!this.options) return;\n\n        this.options.map(el => {\n          if (!el || el.label === '``') return;\n          this.$refs.selectExpression.addOption(_.trim(el.label, '`'));\n        })\n        // console.log(this.$refs.selectExpression.localOptions)\n        // this.$refs.selectExpression.localOptions.forEach(el => el.custom = false)\n        // if (this.getValue('answerComponent.vBind.defaultValue') && (typeof this.getValue('answerComponent.vBind.defaultValue') === 'string')) {\n        //   this.$refs.selectExpression.addOption('`No option`');\n        // }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "7314f672-a4bc-43d9-99d9-34849387e4e8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "7314f672-a4bc-43d9-99d9-34849387e4e8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-default-options\">\n  <or-select-expression\n    ref=\"selectExpression\"\n    label=\"Preselected option(s)\"\n    multiple\n    :extendableOptions=\"false\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    placeholder=\"No option is preselected\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    v-model=\"computedValue\"\n    class=\"rwc-default\"\n    @hook:mounted=\"populateOptions\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "7314f672-a4bc-43d9-99d9-34849387e4e8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-default-options {\n  .or-select-expression .ui-select__display-selected {\n    background-color: #64b2da;\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-close-button {\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-value .merge-tag {\n    color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "9cf66bfe-5261-43cb-9cf4-20d944f967f9",
                    "data": {
                      "data": "{\n  \"carouselOptions\": [{\n    \"image\": {},\n    \"video\": {},\n    \"title\": \"``\",\n    \"description\": \"``\",\n    \"buttonLabel\": \"``\",\n    \"value\": \"``\",\n    \"hasModal\": false,\n    \"modalType\": \"default-modal\",\n    \"childWindowType\": \"html\",\n    \"additionalContentLink\": {},\n    \"buttonStyle\": \"default\",\n    \"html\": \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\n    \"showModalButtonInUserResponse\": true\n  }]\n}",
                      "toJson": "\n function toJson(data, key) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n\n    if (/\\$\\{.+?\\}/.test(data)) {\n\n      if(key !== 'html') return data;\n      \n      const regex = /\\$\\{(?:\\{??[^\\[]*?\\})/gm;\n      const str = data;\n      let m;\n      let mergeFields = [];\n      \n      while ((m = regex.exec(str)) !== null) {\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n        m.forEach((match, groupIndex) => {\n            mergeFields.push(match)\n        });\n      }\n      \n      const safeString = data.replaceAll(/\\$\\{(?:\\{??[^\\[]*?\\})/gm, '__$MERGE_FIELD_PLACEHOLDER$__');\n      \n      let replacedBackticks = safeString.replaceAll('`', '&#x60;');\n      \n      \n      _.forEach(mergeFields, mergeField => {\n        replacedBackticks = replacedBackticks.replace('__$MERGE_FIELD_PLACEHOLDER$__', mergeField);\n      })\n    \n      return `\\`${replacedBackticks}\\``;\n    }\n    \n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  carouselOptions: {\n    $each: {\n      longButton (obj) {\n        if (_.trim(obj.buttonLabel, '`').match(/\\$\\{.+?\\}/)) return true;\n        return _.trim(obj.buttonLabel, '`').length <= 24\n      },\n      notFilledHtml (obj) {\n        if(obj.modalType === \"child-window\" && obj.childWindowType === \"url\") \n          return true;\n          \n        return !(obj.hasModal && !_.trim(obj.html, '`'))\n      },\n      notUniqValues (obj) {\n        return this.schema.carouselOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emtyImageFileUrl (obj) {\n        if (obj.image.linkUrl) {\n          return _.trim(obj.image.linkUrl, '`')\n        } else {\n          return true\n        }\n      },\n      emtyVideoFileUrl (obj) {\n        if (obj.video.linkUrl) {\n          return _.trim(obj.video.linkUrl, '`')\n        } else {\n          return true\n        }\n      },\n      emtyAdditionalContentFileData (obj) {\n        if(obj.modalType !== \"child-window\" || obj.childWindowType !== \"url\") \n          return true;\n          \n        return Boolean(_.trim(obj.additionalContentLink.location, \" `'\\\"\") || _.trim(obj.additionalContentLink.linkUrl, \" `'\\\"\"));\n      },\n      emtyAdditionalContentFileUrl (obj) {\n        if(obj.modalType !== \"child-window\" || obj.childWindowType !== \"url\") \n          return true;\n          \n        if (obj.additionalContentLink.linkUrl) {\n          return _.trim(obj.additionalContentLink.linkUrl, '`')\n        } else {\n          return true\n        }\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.carouselOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-msnzxiaogvyphwefjuctqkbldr",
                      "componentLogic": "{\r\n    data () {\r\n      return {\r\n        allowedVideoTypes: ['mov', 'MOV', 'mp4', 'MP4'],\r\n        allowedImageTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\r\n        maxFiles: 1,\r\n        defaultModalContent: \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\"\r\n      }\r\n    },\r\n    computed : {\r\n      modalTypeOptions() {\r\n        return [\r\n          \r\n          { label: `in modal`, value: `default-modal` },\r\n          { label: `in child window`, value: `child-window` }\r\n        ];\r\n      },\r\n      childWindowOptions () {\r\n        return [\r\n          { label: `HTML`, value: `html` },\r\n          { label: `File or URL`, value: `url` }\r\n        ];\r\n      },\r\n      modalTypeAdvancedHelp() {\r\n        return {\r\n          modal: {\r\n            icon: 'info',\r\n            title: 'Help text',\r\n            content: 'If a chat was launched in Onereach.ai Apps, additional content will be viewed in modal window.'\r\n        },\r\n        }\r\n      },\r\n      getButtonsStyle() {\r\n        return [\r\n          {\r\n            label: 'Default',\r\n            value: 'default'\r\n          },\r\n          {\r\n            label: 'Filled',\r\n            value: 'filled'\r\n          },\r\n          {\r\n            label: 'Outlined',\r\n            value: 'outlined'\r\n          },\r\n          {\r\n            label: 'Custom',\r\n            value: 'grayed'\r\n          }]\r\n      },\r\n      authToken () { return this.$settings.token },\r\n      computedValue : {\r\n        get () { return this.value; },\r\n        set (value) { \r\n          this.$emit('input', value); \r\n        }\r\n      }\r\n    },\r\n    props : {\r\n        value : {\r\n            type : String,\r\n            default : ''\r\n        },\r\n        inputComponent: String,\r\n        isNew : Boolean,\r\n        readonly: {\r\n            type : Boolean \r\n        },\r\n        mergeFields: {\r\n            type: Array\r\n        },\r\n        v: Object,\r\n        steps: {\r\n            type: Array,\r\n            default: () => {\r\n                return []\r\n            }\r\n        },\r\n        stepId: {\r\n            type : String,\r\n            default : ''\r\n        }\r\n    },\r\n    methods: {\r\n      getMedia (index) {\r\n        return [this.computedValue[index].image]\r\n      },\r\n      getVideo (index) {\r\n        return [this.computedValue[index].video]\r\n      },\r\n      getAdditionalContentLink (index) {\r\n        return [this.computedValue[index].additionalContentLink]\r\n      },\r\n      setAdditionalContentLink (index, val) {\r\n        this.computedValue[index].additionalContentLink = val[0]\r\n      },\r\n      setMedia (index, val) {\r\n        this.computedValue[index].image = val[0]\r\n      },\r\n      setVideo (index, val) {\r\n        this.computedValue[index].video = val[0]\r\n      },\r\n      getValue (key, val) {\r\n        return _.get(val || this, key)\r\n      },\r\n      addNewItem () {\r\n        this.computedValue.push({\r\n          image: {},\r\n          video: {},\r\n          title: '``', \r\n          description: '``',\r\n          buttonLabel: '``',\r\n          value: '``',\r\n          hasModal: false,\r\n          modalType: `default-modal`,\r\n          childWindowType: `html`,\r\n          additionalContentLink: {},\r\n          buttonStyle: 'default',\r\n          html: this.defaultModalContent,\r\n          showModalButtonInUserResponse: true,\r\n          vforkey: uuid.v4()\r\n        }) \r\n      },\r\n      newItemMethod () {\r\n        return {\r\n          image: {},\r\n          video: {},\r\n          title: '``', \r\n          description: '``',\r\n          buttonLabel: '``',\r\n          value: '``',\r\n          buttonStyle: 'default',\r\n          hasModal: false,\r\n          modalType: `default-modal`,\r\n          childWindowType: `html`,\r\n          additionalContentLink: {},\r\n          html: this.defaultModalContent,\r\n          showModalButtonInUserResponse: true,\r\n          vforkey: uuid.v4()\r\n        }\r\n      },\r\n      openModal (ref) {\r\n        this.$refs[ref].open();\r\n      },\r\n      removeSelectedItem (item) {\r\n        item = {}\r\n      },\r\n      addMedia () {\r\n        this.openModal('select-media');\r\n      },\r\n      addNewUrl () {\r\n        return {\r\n          linkUrl: \"``\",\r\n          vforkey: uuid.v4()\r\n        }\r\n      },\r\n      changeMediaToUrl (index) {\r\n        this.computedValue[index].image = this.addNewUrl();\r\n      },\r\n      changeVideoToUrl (index) {\r\n        this.computedValue[index].video = this.addNewUrl();\r\n      },\r\n      changeAdditionalContentLinkToUrl (index) {\r\n        this.computedValue[index].additionalContentLink = this.addNewUrl();\r\n      },\r\n      additionalContentFileUrlValid(index) {\r\n        const medias = this.computedValue[index].additionalContentLink;\r\n        return !Boolean(_.trim(medias.location, \" `'\\\"\") || _.trim(medias.linkUrl, \" `'\\\"\"));\r\n      },\r\n    }\r\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b0481f2-c629-4c1b-898a-49b2085f45c2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b0481f2-c629-4c1b-898a-49b2085f45c2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-carousel-options\">\r\n  <or-list\r\n    ref=\"list\"\r\n    v-model=\"computedValue\"\r\n    :steps=\"steps\"\r\n    :step-id=\"stepId\"\r\n    :new-item-method=\"newItemMethod\"\r\n    :canRemoveLastItem=\"false\"\r\n    class=\"rwc-carousel-options__list\"\r\n    :readonly=\"readonly\"\r\n  >\r\n    <template slot-scope=\"item\">\r\n      <div class=\"rwc-carousel-options__item\">\r\n        <div class=\"rwc-carousel-options__item-label\">{{ `Card ${item.index + 1}` }}</div>\r\n        \r\n        <div class=\"rwc__media\">\r\n          <or-modal :ref=\"`select-video-${item.index}`\" title=\"Select video\" size=\"large\">\r\n            <or-asset-manager\r\n              v-if=\"!getVideo(item.index).hasOwnProperty('linkUrl')\"\r\n              use-files\r\n              :auth-token=\"authToken\"\r\n              :multi-select=\"false\"\r\n              :max-files=\"maxFiles\"\r\n              :allowed-file-types=\"allowedVideoTypes\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              :allowFilesAndData=\"false\"\r\n              :value=\"getVideo(item.index)\"\r\n              @input=\"val => setVideo(item.index, val)\"\r\n            />\r\n          </or-modal>\r\n          <div v-if=\"item.item.video.name\" class=\"rwc-media__item\">\r\n            <span><b>Video:</b> {{ item.item.video.name }}</span>\r\n            <div class=\"file-controls\">\r\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.video.name && !item.item.video.location && !item.item.video.linkUrl\"></or-progress-circular>\r\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"() => item.item.video = {}\"><or-icon>delete</or-icon></button>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"item.item.video.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\r\n            <or-text-expression\r\n              v-model=\"item.item.video.linkUrl\"\r\n              :mergeFields=\"mergeFields\"\r\n              :steps=\"steps\"\r\n              :step-id=\"stepId\"\r\n              :readonly=\"readonly\"\r\n              label=\"Video URL\"\r\n              placeholder=\"Enter URL to the file\"\r\n              :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].emtyVideoFileUrl`, v)\"\r\n              error=\"Add URL or delete input\"\r\n            />\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"() => item.item.video = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"!(item.item.video.hasOwnProperty('name') || item.item.video.hasOwnProperty('location') || item.item.video.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\r\n            + Add video from\r\n            <or-button\r\n              @click=\"openModal(`select-video-${item.index}`)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              Files\r\n            </or-button>\r\n            or use\r\n            <or-button\r\n              @click=\"changeVideoToUrl(item.index)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              URL\r\n            </or-button>\r\n          </div>\r\n        </div>\r\n        <div class=\"rwc__media\">\r\n          <or-modal :ref=\"`select-media-${item.index}`\" title=\"Select media\" size=\"large\">\r\n            <or-asset-manager\r\n              v-if=\"!getMedia(item.index).hasOwnProperty('linkUrl')\"\r\n              use-files\r\n              :auth-token=\"authToken\"\r\n              :multi-select=\"false\"\r\n              :max-files=\"maxFiles\"\r\n              :allowed-file-types=\"allowedImageTypes\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              :allowFilesAndData=\"false\"\r\n              :value=\"getMedia(item.index)\"\r\n              @input=\"val => setMedia(item.index, val)\"\r\n            />\r\n          </or-modal>\r\n          <div v-if=\"item.item.image.name\" class=\"rwc-media__item\">\r\n            <span><b>{{ item.item.video.linkUrl || item.item.video.name ? `Video poster` : `Image` }}:</b> {{ item.item.image.name }}</span>\r\n            <div class=\"file-controls\">\r\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.image.name && !item.item.image.location && !item.item.image.linkUrl\"></or-progress-circular>\r\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"() => item.item.image = {}\"><or-icon>delete</or-icon></button>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"item.item.image.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\r\n            <or-text-expression\r\n              v-model=\"item.item.image.linkUrl\"\r\n              :mergeFields=\"mergeFields\"\r\n              :steps=\"steps\"\r\n              :step-id=\"stepId\"\r\n              :readonly=\"readonly\"\r\n              :label=\"item.item.video.linkUrl || item.item.video.name ? `Video poster URL` : `Image URL`\"\r\n              placeholder=\"Enter URL to the file\"\r\n              :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].emtyImageFileUrl`, v)\"\r\n              error=\"Add URL or delete input\"\r\n            />\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"() => item.item.image = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"!(item.item.image.hasOwnProperty('name') || item.item.image.hasOwnProperty('location') || item.item.image.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\r\n            + Add {{ item.item.video.linkUrl || item.item.video.name ? `video poster` : `image` }} from\r\n            <or-button\r\n              @click=\"openModal(`select-media-${item.index}`)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              Files\r\n            </or-button>\r\n            or use\r\n            <or-button\r\n              @click=\"changeMediaToUrl(item.index)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              URL\r\n            </or-button>\r\n          </div>\r\n        </div>\r\n        <or-text-message\r\n          v-model=\"item.item.title\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Title\"\r\n          removeBubble\r\n          help=\"Suggested length is up to 110 chars\"\r\n          disablePopover\r\n          :display-char-counter=\"false\"\r\n          placeholder=\"Add text here\"\r\n        />\r\n        <or-text-message\r\n          v-model=\"item.item.description\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Description\"\r\n          removeBubble\r\n          help=\"Suggested length is up to 180 chars\"\r\n          disablePopover\r\n          :display-char-counter=\"false\"\r\n          placeholder=\"Add text here\"\r\n        />\r\n        <div class=\"flex-row\">\r\n          <or-text-message\r\n          v-model=\"item.item.buttonLabel\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Button label\"\r\n          removeBubble\r\n          counterString=\"%currentCharCount% / %maxCharLength%\"\r\n          :maxCharLength=\"24\"\r\n          disablePopover\r\n          placeholder=\"Add text here\"\r\n          :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].longButton`, v)\"\r\n          :error=\"!getValue(`schema.carouselOptions.$each[${item.index}].longButton`, v) ? 'Limit is exceeded, text will be truncated.' : ''\"\r\n        />\r\n        <or-text-expression\r\n          v-model=\"item.item.value\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Card ID\"\r\n          disablePopover\r\n          placeholder=\"Add Card ID here\"\r\n          :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].notUniqValues`, v)\"\r\n          error=\"Value must be unique.\"\r\n        />\r\n        </div>\r\n        <or-select\r\n          v-model=\"item.item.buttonStyle\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :disabled=\"readonly\"\r\n          label=\"Button style\"\r\n          disablePopover\r\n          placeholder=\"Select\"\r\n          :options=\"getButtonsStyle\"\r\n        />\r\n        <or-switch v-model=\"item.item.hasModal\" :readonly=\"readonly\" :disabled=\"readonly\">\r\n          Add modal with additional content\r\n        </or-switch>\r\n        <or-switch v-if=\"item.item.hasModal\" v-model=\"item.item.showModalButtonInUserResponse\" :readonly=\"readonly\" :disabled=\"readonly\">\r\n          Show button to view additional content in user answer\r\n        </or-switch>\r\n        <or-radio-group v-if=\"item.item.hasModal\" :options=\"modalTypeOptions\" v-model=\"item.item.modalType\" :advancedHelp=\"modalTypeAdvancedHelp\" :disabled=\"readonly\">\r\n          Select how user will interact with additional content\r\n        </or-radio-group>\r\n        \r\n        <or-radio-group v-if=\"item.item.hasModal && item.item.modalType === `child-window`\" :options=\"childWindowOptions\" v-model=\"item.item.childWindowType\" :disabled=\"readonly\">\r\n          Child window content type\r\n        </or-radio-group>\r\n        \r\n        <or-code\r\n          v-if=\"item.item.hasModal && (item.item.modalType === `default-modal` || (item.item.modalType === `child-window` && item.item.childWindowType === `html`))\"\r\n          :step-id=\"stepId\"\r\n          :steps=\"steps\"\r\n          label=\"HTML code\"\r\n          placeholder=\"Enter HTML here\"\r\n          v-model=\"item.item.html\"\r\n          :mergeFields=\"mergeFields\"\r\n          mode=\"html\"\r\n          :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].notFilledHtml`, v)\"\r\n          error=\"HTML code is required.\"\r\n        />\r\n        \r\n        <div class=\"rwc__media additional-link\" v-if=\"item.item.hasModal && item.item.modalType === `child-window` && item.item.childWindowType === `url`\">\r\n          <or-modal :ref=\"`select-additionalContentLink-${item.index}`\" title=\"Select file\" size=\"large\">\r\n            <or-asset-manager\r\n              v-if=\"!getAdditionalContentLink(item.index).hasOwnProperty('linkUrl')\"\r\n              use-files\r\n              :auth-token=\"authToken\"\r\n              :multi-select=\"false\"\r\n              :max-files=\"maxFiles\"\r\n              :allowed-file-types=\"[]\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              :allowFilesAndData=\"false\"\r\n              :value=\"getAdditionalContentLink(item.index)\"\r\n              @input=\"val => setAdditionalContentLink(item.index, val)\"\r\n            />\r\n          </or-modal>\r\n          <div v-if=\"item.item.additionalContentLink.name\" class=\"rwc-media__item additional-file\">\r\n            <span><b>File URL:</b> {{ item.item.additionalContentLink.name }}</span>\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"() => item.item.additionalContentLink = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"item.item.additionalContentLink.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\r\n            <or-text-expression\r\n              v-model=\"item.item.additionalContentLink.linkUrl\"\r\n              :mergeFields=\"mergeFields\"\r\n              :steps=\"steps\"\r\n              :step-id=\"stepId\"\r\n              :readonly=\"readonly\"\r\n              label=\"File URL\"\r\n              placeholder=\"Enter URL to the file\"\r\n              :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].emtyAdditionalContentFileUrl`, v)\"\r\n              error=\"Add URL or delete input\"\r\n            />\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"() => item.item.additionalContentLink = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"!(item.item.additionalContentLink.linkUrl || item.item.additionalContentLink.name)\" class=\"rwc-media__buttons\">\r\n            + Add additional content file from\r\n            <or-button\r\n              @click=\"openModal(`select-additionalContentLink-${item.index}`)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly, 'has-error': !isNew && !getValue(`schema.carouselOptions.$each[${item.index}].emtyAdditionalContentFileData`, v) }]\"\r\n              disableRipple\r\n            >\r\n              Files\r\n            </or-button>\r\n            or use\r\n            <or-button\r\n              @click=\"changeAdditionalContentLinkToUrl(item.index)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly, 'has-error': !isNew && !getValue(`schema.carouselOptions.$each[${item.index}].emtyAdditionalContentFileData`, v) }]\"\r\n              disableRipple\r\n            >\r\n              URL\r\n            </or-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <div slot=\"footer\">\r\n      <or-button\r\n        :disabled=\"readonly\"\r\n        :class=\"['rwc-carousel-options__add', { disabled : readonly }]\"\r\n        disableRipple\r\n        icon=\"add\"\r\n        @click.stop.prevent=\"addNewItem\">Add card</or-button>\r\n    </div>\r\n  </or-list>\r\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b0481f2-c629-4c1b-898a-49b2085f45c2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n.rwc-carousel-options {\n  \n  .additiona-file {\n    padding: 8px 0;\n  }\n  \n  .ui-select__display {\n    background: #fff;\n  }\n  .remove-bubble .wrapper .message-input {\n    background-color: #fff;\n  }\n  .or-editable-wrapper.single-line {\n    background-color: #fff;\n  }\n  .or-list .list-item>.sortable-handle {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .or-list .list-item>.remove-button {\n    position: absolute;\n    top: -7px;\n    right: 0;\n  }\n  .rwc-carousel-options__item {\n    padding: 0 16px;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    \n    & > * {\n      width: 100%;\n      flex-shrink: 0;\n    }\n    \n    &-label {\n      margin: 0 -16px;\n      margin-bottom: 16px;\n      background-color: #fff;\n      padding-bottom: 8px;\n      font-weight: bold;\n      font-size: 14px;\n      width: calc(100% + 32px);\n    }\n  }\n  \n  .list-item {\n    position: relative;\n    background-color: #f6f6f6;\n    margin-bottom: 16px;\n    padding-top: 0;\n  }\n  \n  .flex-row {\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n  \n  /* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  .additional-link {\n    margin-bottom: 16px;\n  }\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    \n    .or-text-expression {\n      width: calc(100% - 20px);\n    }\n    \n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    padding-right: 0;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "04625cef-9f12-4206-861d-556e2b087b09",
                    "data": {
                      "label": "Allow select multiple",
                      "helpText": "",
                      "variable": "carouselMultiselect",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ce05f3a1-7c32-434b-9b58-e8ca0f4ca621",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ce05f3a1-7c32-434b-9b58-e8ca0f4ca621",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://release.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://release.components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "07e4e173-2121-47fc-b373-ded09f51dc3a",
                    "data": {
                      "label": "Submit button label",
                      "helpText": "",
                      "variable": "carouselSubmitBtnLabel",
                      "multiline": false,
                      "placeholder": "E.g. Submit",
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "48cac8cf-bf76-4d26-b1ee-071b27375a94",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b8fc5754-04fa-4098-ba40-738b0a017e11",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "a8c5b446-87e6-4573-8be1-f59148e82a01",
                          "errorMessage": "Submit button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "d7578748-9185-4c48-95a7-ca9569b9e284",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.carouselSubmitBtnLabel, ' `\"\\'')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "48cac8cf-bf76-4d26-b1ee-071b27375a94",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b8fc5754-04fa-4098-ba40-738b0a017e11",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "6b779e2a-2678-4105-b139-a7a36d55bf4c",
                    "data": {
                      "label": "Cancel button label",
                      "helpText": "",
                      "variable": "carouselCancelBtnLabel",
                      "multiline": false,
                      "placeholder": "E.g. No, thanks",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ef0a70c5-b969-418a-a4c4-92aac334ba17",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "739b5e59-f82d-4a0d-a5de-311a139b49a3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "2d173a70-b26f-46d9-b828-d1978267cfb8",
                          "errorMessage": "Cancel button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a48146f2-b884-4425-828e-146c8f6d66a4",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.carouselCancelBtnLabel, ' `\\'\"')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ef0a70c5-b969-418a-a4c4-92aac334ba17",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "739b5e59-f82d-4a0d-a5de-311a139b49a3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "2d23786f-d744-493f-9a60-7e8804617e0b",
                    "data": {
                      "label": "Add alternative suggestion card",
                      "helpText": "",
                      "variable": "carouselHasAlternative",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bca869b4-3ddd-47c7-8a5d-f4d4819baecf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bca869b4-3ddd-47c7-8a5d-f4d4819baecf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "c0042900-e423-4ff9-bf97-eec19fa8dcfc",
                    "data": {
                      "data": "{\n  \"carouselAlternative\": {\n    \"description\": \"``\",\n    \"buttonLabel\": \"``\",\n    \"buttonStyle\": \"default\",\n    \"value\": \"``\"\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  carouselAlternative: {\n    description: {\n      longDesc (value) {\n        if (value.match(/\\$\\{.+?\\}/)) return true;\n        return _.trim(value, '`').length <= 200\n      }\n    },\n    buttonLabel: {\n      longDesc (value) {\n        if (value.match(/\\$\\{.+?\\}/)) return true;\n        return _.trim(value, '`').length <= 24\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.carouselAlternative\"\n  :carouselHasAlternative=\"schema.carouselHasAlternative\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bwsluoedxjmcqptgnfriykvahz",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { \n              this.getValue('schema', this.v)\n              this.$emit('input', value); \n            }\n        },\n        getButtonsStyle() {\n          return [\n          {\n            label: 'Default',\n            value: 'default'\n          },\n          {\n            label: 'Filled',\n            value: 'filled'\n          },\n          {\n            label: 'Outlined',\n            value: 'outlined'\n          },\n          {\n            label: 'Custom',\n            value: 'grayed'\n          }]\n      },\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: Object,\n        isNew : Boolean,\n        carouselHasAlternative: Boolean,\n        inputComponent: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, el) {\n        return _.get(el || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b3b34ff-8306-495a-98a7-c7dca64de041",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselHasAlternative",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "394cc192-da31-42b1-88ee-94b55218059b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b3b34ff-8306-495a-98a7-c7dca64de041",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselHasAlternative",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "394cc192-da31-42b1-88ee-94b55218059b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-alternative\">\n  <or-text-message\n    v-model=\"computedValue.description\"\n    counterString=\"%currentCharCount% / %maxCharLength%\"\n    disablePopover\n    removeBubble\n    :maxCharLength=\"200\"\n    :mergeFields=\"mergeFields\"\n    :steps=\"steps\"\n    :stepId=\"stepId\"\n    label=\"Description\"\n    placeholder=\"E.g. Nothing fits? You can make your own suggestion\"\n    :invalid=\"!getValue(`schema.carouselAlternative.description.longDesc`, v)\"\n    error=\"Limit is exceeded, text will be truncated.\"\n  />\n  <div class=\"rwc-flex\">\n    <or-text-message\n      v-model=\"computedValue.buttonLabel\"\n      counterString=\"%currentCharCount% / %maxCharLength%\"\n      disablePopover\n      removeBubble\n      :maxCharLength=\"24\"\n      label=\"Button label\"\n      placeholder=\"E.g. Show more\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :stepId=\"stepId\"\n      :invalid=\"!getValue(`schema.carouselAlternative.buttonLabel.longDesc`, v)\"\n      error=\"Limit is exceeded, text will be truncated.\"\n    />\n    <or-text-expression\n      v-model=\"computedValue.value\"\n      label=\"Card ID\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :stepId=\"stepId\"\n      placeholder=\"Add value\"\n    />\n  </div>\n  <or-select\n    v-model=\"computedValue.buttonStyle\"\n    :mergeFields=\"mergeFields\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :readonly=\"readonly\"\n    label=\"Button style\"\n    disablePopover\n    placeholder=\"Select\"\n    :options=\"getButtonsStyle\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b3b34ff-8306-495a-98a7-c7dca64de041",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselHasAlternative",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "394cc192-da31-42b1-88ee-94b55218059b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-alternative {\n  .ui-select__display {\n    background: #fff;\n  }\n  padding: 16px;\n  background-color: #f6f6f6;\n  \n  .rwc-flex {\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  .remove-bubble .wrapper .message-input {\n    background-color: #fff;\n  }\n  \n  .or-editable-wrapper.single-line {\n    background-color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "92ec834b-0817-446d-8453-7efa0baef9a0",
                    "data": {
                      "data": "{ \n  \"customTemplateId\": null\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.customTemplateId\" \n  :customTemplateHtmlCode.sync=\"schema.customTemplateHtmlCode\" \n  :customTemplateJavaScriptCode.sync=\"schema.customTemplateJavaScriptCode\"\n  :customTemplateCSSCode.sync=\"schema.customTemplateCSSCode\"\n  :customTemplateVueHtmlTemplate.sync=\"schema.customTemplateVueHtmlTemplate\"\n  :customTemplateVueScript.sync=\"schema.customTemplateVueScript\"\n  :customTemplateType.sync=\"schema.customTemplateType\"\n  :customVariables.sync=\"schema.customVariables\"\n  :customTempalateScripts.sync=\"schema.customTempalateScripts\"\n  \n  :hideCustomComponentAfterSubmit.sync=\"schema.hideCustomComponentAfterSubmit\"\n  :showCustomComponentInMessage.sync=\"schema.showCustomComponentInMessage\"\n  :autoSubmitCustomTemplate.sync=\"schema.autoSubmitCustomTemplate\"\n  :showBotIcon.sync=\"schema.showBotIcon\"\n  \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-uiazpdtyjflkongbqvsrwmechx",
                      "componentLogic": "{\n    data() {\n      return {\n        loading: false,\n        flatTemplatesList: [],\n        customTemplates: []\n      }\n    },\n    \n    created() {\n      eventHub.$on('lib-templates-list::refresh', this.refreshTemplatesList);\n    },\n    \n    beforeDestroy() {\n      eventHub.$off('lib-templates-list::refresh', this.refreshTemplatesList);\n    },\n    \n    mounted() {\n      this.refreshTemplatesList();\n    },\n  \n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { \n              if(this.value === value) return;\n              \n              this.$emit('input', value); \n              \n              this.setTemplateSources(value);\n              eventHub.$emit('lib-templates-list::selected', _.find(this.flatTemplatesList, { value }));\n            }\n        },\n        canRevertChanges () {\n          if(!this.localValue || _.size(this.flatTemplatesList) === 0) return false;\n          const valueInList = _.find(this.flatTemplatesList, { value: this.value });\n          \n          return Boolean(valueInList);\n        }\n    },\n    \n    \n    methods: {\n    \n      openModal (modalRef) {\n        if(!this.$refs[modalRef]) return;\n          this.$refs[modalRef].open();\n      },\n      \n      closeModal (modalRef) {\n        if(!this.$refs[modalRef]) return;\n        this.$refs[modalRef].close();\n      },\n      \n      async revertTemplateChanges () {\n        if(!this.value) return;\n        \n        await this.setTemplateSources(this.localValue);\n        this.closeModal('confirmRevertModal');\n      },\n      \n      transformTemplatesToGroups(templates) {\n        const groupedObj = _.groupBy(templates, 'type');\n        \n        return _.map(_.toPairs(groupedObj), ([ key, value ]) => ({ groupLabel: key, items: _.orderBy(value, ['label'], ['asc']) }));\n      },\n      \n      async refreshTemplatesList(templateId = null) {\n        this.loading = true;\n        const files = await this.getTemplates();\n        \n        const templates = await this.getTemplatesMeta(files);\n        \n        this.flatTemplatesList = templates;\n        \n        this.customTemplates = this.transformTemplatesToGroups(templates);\n        \n        if(templateId) {\n          this.localValue = templateId;\n        }\n        \n        this.loading = false;\n        eventHub.$emit('lib-templates-list::refresh-finished', this.flatTemplatesList);\n        if(this.localValue) {\n          eventHub.$emit('lib-templates-list::selected', _.find(this.flatTemplatesList, { value: this.localValue })); \n        }\n      },\n      \n      async getTemplates () {\n        return await this.$flow.api.files.ls({ isPublic: true, prefix: 'RWC_custom_templates/' })\n      },\n      \n      async getTemplatesMeta (templateKeys) {\n          const promises = [];\n          const keys = [];\n          \n          _.forEach(templateKeys, ({ key }) => {\n            promises.push(fetch(`${this.$flow.filesApiUrl}/public/${this.$flow.accountId}/${key}meta.json`));\n            keys.push(_.last(_.split(key, '/').slice(0, -1)));\n          });\n          \n          const results = await Promise.all(promises);\n        \n          \n          const data = _.map(results, result => result.json());\n          const templateMetas = await Promise.all(data);\n          \n          return _.map(templateMetas, (meta, index) => ({ value: keys[index], ...meta }));\n          \n      },\n      \n      async setTemplateSources (key) {\n        const templateMeta = _.find(this.flatTemplatesList, ({ value }) => value === key);\n        \n        if(!templateMeta) return;\n        \n        this.updateTemplateType(templateMeta.type);\n        this.updateCustomVars(templateMeta.vars);\n        this.updateScripts(templateMeta.scripts);\n        \n        this.updateControls({ \n          hideCustomComponentAfterSubmit: templateMeta.hideCustomComponentAfterSubmit, \n          showCustomComponentInMessage: templateMeta.showCustomComponentInMessage, \n          autoSubmitCustomTemplate: templateMeta.autoSubmitCustomTemplate, \n          showBotIcon: templateMeta.showBotIcon\n        });\n        \n        \n        if(templateMeta.type === `html`) {\n          const [ html, css, js ] = await this.getHtmlTemplateFiles(key);\n          console.log(html, css, js);\n          this.updateCustomTemplateSources({ html, css, js });\n          return;\n        }\n        \n        if(templateMeta.type === `vue`) {\n          console.log(await this.getVuetemplateFiles(key));\n          let [ vueTemplate, vueScript, css ] = await this.getVuetemplateFiles(key);\n          \n          if(!vueTemplate) vueTemplate = '';\n          if(!css) css = '';\n          \n          this.updateCustomTemplateSources({ vueTemplate, vueScript, css });\n          return;\n        }\n        \n        throw new Error(`Unsupported template type: ${templateMeta.type}`);\n      },\n      \n      updateControls({ hideCustomComponentAfterSubmit = false, showCustomComponentInMessage = true, autoSubmitCustomTemplate = true, showBotIcon = true }) {\n        if(!_.isBoolean(hideCustomComponentAfterSubmit)) {\n          this.$emit('update:hideCustomComponentAfterSubmit', false);\n        } else {\n          this.$emit('update:hideCustomComponentAfterSubmit', hideCustomComponentAfterSubmit);\n        }\n        \n        if(!_.isBoolean(showCustomComponentInMessage)) {\n          this.$emit('update:showCustomComponentInMessage', false);\n        } else {\n          this.$emit('update:showCustomComponentInMessage', showCustomComponentInMessage);\n        }\n        \n        if(!_.isBoolean(autoSubmitCustomTemplate)) {\n          this.$emit('update:autoSubmitCustomTemplate', false);\n        } else {\n          this.$emit('update:autoSubmitCustomTemplate', autoSubmitCustomTemplate);\n        }\n        \n        if(!_.isBoolean(showBotIcon)) {\n          this.$emit('update:showBotIcon', false);\n        } else {\n          this.$emit('update:showBotIcon', showBotIcon);\n        }\n        \n      },\n      \n      async getHtmlTemplateFiles(key) {\n        const link = `${this.$flow.filesApiUrl}/public/${this.$flow.accountId}/RWC_custom_templates/${key}`;\n        this.loading = true;\n        \n        try {\n          const promises = [];\n          promises.push(fetch(`${link}/index.html`));\n          promises.push(fetch(`${link}/index.css`));\n          promises.push(fetch(`${link}/index.js`));\n          \n          const results = await Promise.all(promises);\n        \n          const data = _.map(results, result => result.text());\n          return await Promise.all(data);\n        } finally {\n          this.loading = false; \n        }\n      },\n      \n      async getVuetemplateFiles (key) {\n        const link = `${this.$flow.filesApiUrl}/public/${this.$flow.accountId}/RWC_custom_templates/${key}`;\n        this.loading = true;\n        \n        try {\n          const promises = [];\n          promises.push(fetch(`${link}/index.vue`));\n          promises.push(fetch(`${link}/index.js`));\n          promises.push(fetch(`${link}/index.css`));\n          \n          const results = await Promise.allSettled(promises);\n        \n          const data = [];\n        \n          for(let response of results) {\n              response = response.value();\n              // console.log('response ->', response);\n              if(response.status === 200) {\n                  const responseData = await response.text();\n                  data.push(responseData);\n              } else {\n                  data.push(null);\n              }\n          }\n          \n          return data;\n        } finally {\n          this.loading = false; \n        }\n      },\n      \n      isError (string) {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(string, \"application/xml\");\n        \n        return dom.documentElement.nodeName === `Error`;\n      },\n      \n      updateScripts (scripts) {\n        if(!_.isArray(scripts) || !_.size(scripts)) { \n          this.$emit('update:customTempalateScripts', []);\n          return; \n        }\n        \n        this.$emit('update:customTempalateScripts', scripts);\n      },\n      \n      updateCustomVars (vars) {\n        if(!_.isArray(vars) || !_.size(vars)) {\n          this.$emit('update:customVariables', []);\n          return;\n        }\n        \n        this.$emit('update:customVariables', vars);\n      },\n      \n      updateShowBotIcon(showBotIcon) {\n        this.$emit('update:showBotIcon', showBotIcon);\n      },\n      \n      updateTemplateType (type) {\n        if(!type) throw new Error('Type of template should be present');\n        this.$emit('update:customTemplateType', `\\`${type}\\``);\n      },\n      \n      updateCustomTemplateSources({ html = ``, css = ``, js = ``, vueTemplate = ``, vueScript = `` }) {\n        if(html && !this.isError(html))  { \n          this.$emit('update:customTemplateHtmlCode', html); \n        } else { this.$emit('update:customTemplateHtmlCode', ``) }\n        \n        if(js && !this.isError(js)) {\n          this.$emit('update:customTemplateJavaScriptCode', js); \n        } else { this.$emit('update:customTemplateJavaScriptCode', ``); }\n        \n        if(css && !this.isError(css)) {\n          this.$emit('update:customTemplateCSSCode', css);\n        } else { this.$emit('update:customTemplateCSSCode', ``); }\n        \n        if(vueTemplate && !this.isError(vueTemplate)) {\n          this.$emit('update:customTemplateVueHtmlTemplate', vueTemplate);\n        } else { this.$emit('update:customTemplateVueHtmlTemplate', ``); }\n        \n        if(vueScript && !this.isError(vueScript)) {\n          this.$emit('update:customTemplateVueScript', vueScript);\n        } else { this.$emit('update:customTemplateVueScript', ``); }\n      }\n    },\n    \n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        customTemplateHtmlCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateJavaScriptCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateCSSCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueHtmlTemplate: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueScript: {\n          type: String,\n          default: ``\n        },\n        customTemplateType: {\n          type: String,\n          default: ``\n        },\n        customVariables: {\n          type: Array,\n          default: () => ([])\n        },\n        customTempalateScripts: {\n          type: Array,\n          default: () => ([])\n        },\n        hideCustomComponentAfterSubmit: {\n          type: Boolean,\n          default: false\n        },\n        showCustomComponentInMessage: {\n          type: Boolean,\n          default: true\n        },\n        autoSubmitCustomTemplate: {\n          type: Boolean,\n          default: true\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "01f24406-73ce-4253-88c3-8ca9e1e7242e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "01f24406-73ce-4253-88c3-8ca9e1e7242e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"template-chooser\">\n  <div class=\"dropdown\">\n    <or-select-expression\n      :disabled=\"loading\"\n      v-model=\"localValue\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Custom template\"\n      placeholder=\"Select custom template\"\n      :options=\"customTemplates\"\n      hasSearch\n      :has-groups=\"true\"\n    >\n      <div slot=\"no-results\">No saved templates in this account</div>\n    </or-select-expression>\n  </div>\n  <div class=\"refresh-btn\">\n    <or-icon-button :disabled=\"!canRevertChanges || loading\" tooltip=\"Revert current changes\" tooltip-position=\"top center\" @click=\"openModal('confirmRevertModal')\" icon=\"settings_backup_restore\"></or-icon-button>\n  </div>\n  <div class=\"refresh-btn\">\n    <or-icon-button :loading=\"loading\" tooltip=\"Refresh templates list\" tooltip-position=\"top center\" @click=\"refreshTemplatesList\" icon=\"refresh\"></or-icon-button>\n  </div>\n</div>\n\n<or-modal ref=\"confirmRevertModal\" title=\"Revert current changes\">\n  You sure you want revert current changes?\n  <div slot=\"footer\">\n    <or-button @click=\"revertTemplateChanges\" :dismissible=\"!loading\" :loading=\"loading\" color=\"primary\">Revert</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmRevertModal')\">Cancel</or-button>\n  </div>\n</or-modal>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "01f24406-73ce-4253-88c3-8ca9e1e7242e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".template-chooser {\n  display: flex;\n  align-items: flex-end;\n  \n  .dropdown {\n    width: calc(100% - 46px - 46px);\n  }\n  \n  .refresh-btn {\n    width: 36px;\n    margin-left: 10px;\n    margin-bottom: 1rem;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "be21bafd-38eb-4c5c-8993-96a315208294",
                    "data": {
                      "label": "Custom template type",
                      "options": [
                        {
                          "label": "Vue template",
                          "value": "`vue`",
                          "checked": false,
                          "vforkey": "bbfadf52-3ee0-4844-b79c-656327ceb3f9"
                        },
                        {
                          "label": "HTML",
                          "value": "`html`",
                          "checked": false,
                          "vforkey": "eff161fe-8347-4e62-a8f5-88d2e67cb9fc"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "customTemplateType",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`vue`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6d465bcc-dce4-4b5c-a9b6-8f6312ffb753",
                            "ruleType": {
                              "func": "{ return validators.jsExpression(firstValue) }",
                              "type": "single",
                              "input": [
                                "string"
                              ],
                              "label": "valid JS expression",
                              "modes": [],
                              "category": "code"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6d465bcc-dce4-4b5c-a9b6-8f6312ffb753",
                            "ruleType": {
                              "func": "{ return validators.jsExpression(firstValue) }",
                              "type": "single",
                              "input": [
                                "string"
                              ],
                              "label": "valid JS expression",
                              "modes": [],
                              "category": "code"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "38264dc0-a19b-4093-919a-30bfd20bbaad",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "HTML",
                      "helpText": "",
                      "variable": "customTemplateHtmlCode",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76e8530b-d057-4748-9b5b-231866f9452c",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76e8530b-d057-4748-9b5b-231866f9452c",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "4aff4818-7b60-4e62-9cf7-a68c5e92253e",
                    "data": {
                      "data": "{\"customTemplateJavaScriptCode\": \"// readonly <Boolean> - true if message is sent\\n// loading <Boolean> - true on message sending and false when message received in chat\\n// isInPreview <Boolean> - true if message is in preview mode\\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\\n\\nconst testData = 'test data';\\n\\nconst btn = document.getElementById('custom-button');\\nbtn.addEventListener('click', send);\\n\\nfunction send() {\\n  /**\\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\\n   * `myData` field will be stored in mergeField\\n  **/\\n  sendMessage({ \\n    message: testData, \\n    myData: testData \\n  });\\n}\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  customTemplateJavaScriptCode: {\n    jsCode(value) {\n      const error = validators.validateJsCode(`${value}`);\n      return !Boolean(error);\n    }\n  }\n}",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.customTemplateJavaScriptCode\" :v=\"$v\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-instmzehlxpwagkjdfuycrqbvo",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: {\n          type: Object,\n          default: () => ({})\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1bce1794-9f84-4097-a7dc-bb071dd0d733",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1bce1794-9f84-4097-a7dc-bb071dd0d733",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code\n        v-model=\"localValue\"\n        label=\"JavaScript\"\n        :readonly=\"readonly\"\n        :disable-warnings=\"false\"\n        :disable-autocomplete=\"false\"\n        js-env=\"ecma6\"\n        mode=\"javascript\"\n        :steps=\"steps\"\n        :merge-fields=\"mergeFields\"\n        :useBuiltInValidator=\"true\"\n        :disableVariables=\"true\"\n    >\n    </or-code>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1bce1794-9f84-4097-a7dc-bb071dd0d733",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c91aaa36-87d6-49b2-a696-1e8c06202fc4",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "Vue template",
                      "helpText": "",
                      "variable": "customTemplateVueHtmlTemplate",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d3e51bc1-b530-4636-96cc-ab884fc5406b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d3e51bc1-b530-4636-96cc-ab884fc5406b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "fd6c7a80-29b4-4de2-874a-dbc297f3d75c",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Vue script",
                      "helpText": "",
                      "variable": "customTemplateVueScript",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
                      "validateCode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fcc1543a-c4d7-4142-a279-67ef2240b7d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fcc1543a-c4d7-4142-a279-67ef2240b7d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "d1c33207-b1bf-44f8-a048-85f6a78ab18d",
                    "data": {
                      "data": "{\n  \"customTempalateScripts\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  customTempalateScripts: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.customTempalateScripts\" \n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-owjprncmbihskfyvzalxgudqte",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['js'],\n        maxFiles: 10\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0acb5b59-5911-4c0b-b64d-e12de1b74295",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0acb5b59-5911-4c0b-b64d-e12de1b74295",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal ref=\"select-media\" title=\"Select scripts\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n            <span>{{ item.item.name }}</span>\n            <div class=\"file-controls\">\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n            </div>\n        </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n            <or-text-expression\n              v-model=\"item.item.linkUrl\"\n              :mergeFields=\"mergeFields\"\n              :steps=\"steps\"\n              :step-id=\"stepId\"\n              :readonly=\"readonly\"\n              label=\"Script URL\"\n              placeholder=\"Enter URL to the file\"\n              :invalid=\"getValue(`schema.customTempalateScripts.$each[${item.index}].$invalid`, v)\"\n              error=\"Add URL or delete input\"\n              @input=\"val => updateMedias(item.item, val)\"\n            />\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n        </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add script</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add script from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n  <div v-if=\"getValue(`schema.messageText.$invalid`, v)\" class=\"rwc__error-message\">\n    Message should contain a text or attachment\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0acb5b59-5911-4c0b-b64d-e12de1b74295",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n    \n    .medias-wrapper {\n      width: 100%;\n    }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "83f0d5db-dcd3-471c-8d16-e7f3bc937ce5",
                    "data": {
                      "label": "",
                      "inputs": [
                        {
                          "id": "450d3d40-84df-4592-aa2e-dea24dbad101",
                          "data": {
                            "label": "Name",
                            "helpText": "",
                            "variable": "varName",
                            "multiline": false,
                            "placeholder": "Enter variable name here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        },
                        {
                          "id": "eb750d1c-220c-47e6-8cc3-f11ac4baa094",
                          "data": {
                            "label": "Value",
                            "helpText": "",
                            "variable": "varValue",
                            "multiline": false,
                            "placeholder": "Enter variable value here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        }
                      ],
                      "variable": "customVariables",
                      "singleline": true,
                      "prettifyDrag": false,
                      "allowCodeMode": true,
                      "limitMaxItems": false,
                      "maxItemsCount": "10",
                      "addButtonLabel": "Add variable",
                      "hasDefaultItem": false,
                      "dragHandleRight": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "30ba5112-a216-4575-abde-6d025a53a382",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "canRemoveLastItem": true,
                      "disabledCondition": "",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "30ba5112-a216-4575-abde-6d025a53a382",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formList",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "List",
                    "compiled": {},
                    "component": "formList",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formList\"]"
                    ]
                  },
                  {
                    "id": "5fc988dd-6512-443f-9252-2a34e76578dc",
                    "data": {
                      "data": "{\n  \"customTemplateCSSCode\": \".custom-send-button {\\n  // add styles for button  \\n  // with this step execution css will be applied for for follow-up messages of the flow\\n}\",\n  \"customTemplateCompiledCSS\": \"\",\n  \"customTemplateCSSWrapperClassName\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.customTemplateCSSCode\" \n  :customTemplateCompiledCSS.sync=\"schema.customTemplateCompiledCSS\"\n  :customTemplateCSSWrapperClassName.sync=\"schema.customTemplateCSSWrapperClassName\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n>\n  \n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-anfeuyvptirdqsocgbkhmwzxjl",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        alertType() {\n          if(this.compiling && !this.error)\n            return 'info';\n            \n          if(!this.compiling && !this.error)\n            return 'success';\n            \n          return 'error';\n        }\n    },\n    \n    data() {\n      return {\n        compiling: false,\n        error: false,\n        showAlert: false\n      }\n    },\n    \n    async mounted() {\n      await this.$nextTick();\n      await this.compileSCSS();\n    },\n    \n    methods: {\n      generateCSSWrapperClassName() {\n        const uniqId = `${uuid.v4()}`.replaceAll('-', '')\n        const className = `custom-component-${uniqId}`;\n        this.$emit('update:customTemplateCSSWrapperClassName', className);\n        return className;\n      },\n      \n      async compileSCSS() {\n        if(this.readonly) return;\n        this.showAlert = true;\n        this.error = false;\n        \n        if(!this.customTemplateCSSWrapperClassName) {\n          this.generateCSSWrapperClassName();\n        }\n        \n        await this.$nextTick();\n        \n        const styles = `.${this.customTemplateCSSWrapperClassName} { ${this.value} }`;\n       \n      try {\n        this.compiling = true;\n         \n         const compiledCSS = await this.$flow.api.toolbox.compileStyles({ \n          styles,\n          options: {}\n        });\n        \n        if(compiledCSS.compiled.status !== 0) {\n          this.error = true;\n        }\n        \n        const result = _.get(compiledCSS, 'compiled.text') || '';\n      \n        this.$emit('update:customTemplateCompiledCSS', result);\n      } catch(e) {\n        console.error(e);\n        this.error = true;\n      } finally {\n        this.compiling = false;\n      }\n       \n      }\n    },\n      \n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        customTemplateCompiledCSS: {\n          type: String,\n          default: ''\n        },\n        customTemplateCSSWrapperClassName: {\n          type: String,\n          default: ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b1addc74-cba9-4362-90d2-43fb42e0c0f9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b1addc74-cba9-4362-90d2-43fb42e0c0f9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code \n  :invalid=\"error\" \n  :error=\"showAlert ? '' : 'Invalid SCSS'\" \n  v-model=\"localValue\" \n  label=\"CSS (SCSS)\" \n  @blur=\"compileSCSS\" \n  :readonly=\"readonly\"\n>\n</or-code>\n\n<or-alert @dismiss=\"showAlert = false\" :type=\"alertType\" v-show=\"showAlert\" remove-icon>\n  <div class=\"alert-container\">\n    <or-icon-button :class=\"['alert-icon', alertType]\" disabled icon=\"check_circle\" :loading=\"compiling\" :size=\"16\" type=\"secondary\"></or-icon-button>\n    <span v-if=\"compiling && !error\">Compiling SCSS</span>\n    <span v-if=\"!compiling && !error\">SCSS compiled</span>\n    <span v-if=\"!compiling && error\">Invalid SCSS</span>\n  </div>\n</or-alert>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b1addc74-cba9-4362-90d2-43fb42e0c0f9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".container {\n  display: flex;\n}\n\n.info {\n  font-size: 12px;\n  color: grey;\n}\n\n.alert-container {\n  display: flex;\n  align-items: center;\n}\n\n.ui-icon-button.alert-icon {\n  pointer-events: none;\n  padding: 0;\n  width: 26px;\n  height: 26px;\n  margin-right: 16px;\n  \n  \n  &.info {\n    .ui-icon-button__icon { color: #2196f3 !important; }\n  }\n  \n  &.success {\n    .ui-icon-button__icon { color: #4caf50 !important; }\n  }\n  \n  &.error {\n    .ui-icon-button__icon { color: #f44336 !important; }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "bee39a1c-ed2d-475a-aa2e-82f45590af7c",
                    "data": {
                      "label": "Proceed without waiting for user reply",
                      "helpText": "",
                      "variable": "autoSubmitCustomTemplate",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "info",
                          "content": "If the component does not require user interaction, messag will be sent immediatly",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c67f7bb6-bf5a-4d5e-ad0f-ac30638c64d4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c67f7bb6-bf5a-4d5e-ad0f-ac30638c64d4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "443b2601-30f0-4dde-bd50-da1286cea820",
                    "data": {
                      "label": "Send component in message bubble",
                      "helpText": "",
                      "variable": "showCustomComponentInMessage",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1e228e4a-e67a-46a6-b9f8-2ec4801c2a6e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1e228e4a-e67a-46a6-b9f8-2ec4801c2a6e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "7039e6c4-5da9-4a88-9344-b2d1df79aa80",
                    "data": {
                      "label": "Hide component after submit",
                      "helpText": "",
                      "variable": "hideCustomComponentAfterSubmit",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8b69339d-5fcd-4f54-a391-20389eaf16e4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8b69339d-5fcd-4f54-a391-20389eaf16e4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "e951fef4-0808-421a-a2dd-0a2ee9a0ebd3",
                    "data": {
                      "label": "Show bot icon for the message",
                      "helpText": "",
                      "variable": "showBotIcon",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "60ad989f-13ac-40e2-8b23-aaaed2e3fd09",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "60ad989f-13ac-40e2-8b23-aaaed2e3fd09",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "23a33514-a0f8-4e89-a657-93efccfe5a66",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :customTemplateHtmlCode.sync=\"schema.customTemplateHtmlCode\" \n  :customTemplateJavaScriptCode.sync=\"schema.customTemplateJavaScriptCode\"\n  :customTemplateCSSCode.sync=\"schema.customTemplateCSSCode\"\n  :customTemplateVueHtmlTemplate.sync=\"schema.customTemplateVueHtmlTemplate\"\n  :customTemplateVueScript.sync=\"schema.customTemplateVueScript\"\n  \n  :customTemplateType.sync=\"schema.customTemplateType\"\n  :customVariables.sync=\"schema.customVariables\"\n  :customTempalateScripts.sync=\"schema.customTempalateScripts\"\n  :customTemplateId.sync=\"schema.customTemplateId\"\n  \n  :hideCustomComponentAfterSubmit=\"schema.hideCustomComponentAfterSubmit\"\n  :showCustomComponentInMessage=\"schema.showCustomComponentInMessage\"\n  :autoSubmitCustomTemplate=\"schema.autoSubmitCustomTemplate\"\n  :showBotIcon=\"schema.showBotIcon\"\n  \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-swubacevqrnylmpgkxhidjoztf",
                      "componentLogic": "{\n    data() {\n      return {\n        loading: false,\n        templateLabel: ``,\n        hasChanges: false,\n        templates: [],\n        selectedTemplate: null\n      }\n    },\n    \n    created() {\n      eventHub.$on('lib-templates-list::refresh-finished', this.stopLoading);\n      eventHub.$on('lib-templates-list::selected', this.handleTemplateSelection);\n    },\n    \n    beforeDestroy() {\n      eventHub.$off('lib-templates-list::refresh-finished', this.stopLoading);\n      eventHub.$off('lib-templates-list::selected', this.handleTemplateSelection);\n    },\n    \n    computed: {\n      canDeleteTemplateFromLib () {\n        return _.trim(this.customTemplateId, ' `\"\\'')\n      },\n      labelUniq () {\n        if(!this.templateLabel) return true;\n        \n        const templateWidthSameLabel = _.find(this.templates, ({ label }) => {\n          return _.toLower( _.trim(label)) === _.toLower(_.trim(this.templateLabel))\n        });\n        \n        return !Boolean(templateWidthSameLabel);\n      },\n      labelUniqOrSame () {\n        if(!this.templateLabel) return true;\n        \n        const selectedLabel = _.get(this.selectedTemplate, 'label') || ``;\n        \n        const templateWidthSameLabel = _.find(this.templates, ({ label }) => {\n          if(_.toLower( _.trim(label)) === _.toLower(_.trim(selectedLabel))) return false;\n          \n          return _.toLower( _.trim(label)) === _.toLower(_.trim(this.templateLabel));\n        });\n        \n        return !Boolean(templateWidthSameLabel);\n      }\n    },\n    \n    methods: {\n      stopLoading (templates = []) {\n        this.closeModal('confirmPublishModal');\n        this.closeModal('confirmDeleteModal');\n        this.closeModal('confirmEditModal');\n        \n        this.hasChanges = false;\n        this.loading = false;\n        \n        this.templates = templates;\n      },\n      \n      handleTemplateSelection (selectedTemplate = {}) {\n        this.selectedTemplate = selectedTemplate;\n      },\n      \n      async publishTemplate () {\n        this.loading = true;\n        \n        const normalizedTemplateLabel = _.trim(this.templateLabel, ' `\"\\'');\n        const templateId = `${_.snakeCase(normalizedTemplateLabel)}_${uuid.v4()}`;\n        \n        const templateType = _.trim(this.customTemplateType, ' `\"\\'');\n        const prefix = `RWC_custom_templates/${templateId}/`;\n        const meta = this.getTemplateMetaFile({ \n          type: templateType,\n          label: normalizedTemplateLabel,\n          vars:  this.customVariables,\n          scripts: this.customTempalateScripts,\n          autoSubmitCustomTemplate: this.autoSubmitCustomTemplate,\n          showCustomComponentInMessage: this.showCustomComponentInMessage,\n          hideCustomComponentAfterSubmit: this.hideCustomComponentAfterSubmit\n        });\n        \n        if(templateType === `vue`) {\n          const { vueScript, vueTemplate, css } = this.getTemplateFiles(`vue`);\n          try {\n            const promises = [];\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: vueScript, type: 'text/javascript', name: 'index.js' }, isPublic: true, prefix }));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: vueTemplate, type: 'text/html', name: 'index.vue' }, isPublic: true, prefix }));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: css, type: 'text/css', name: 'index.css' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: meta, type: 'application/json', name: 'meta.json' }, isPublic: true, prefix }));\n            \n            await Promise.all(promises)\n          } catch(e) {\n            console.error(e)\n          }\n        }\n        \n        if(templateType === `html`) {\n          const { html, js, css } = this.getTemplateFiles (`html`);\n          try {\n            const promises = [];\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: html, type: 'text/html', name: 'index.html' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: js, type: 'text/javascript', name: 'index.js' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: css, type: 'text/css', name: 'index.css' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: meta, type: 'application/json', name: 'meta.json' }, isPublic: true,  prefix}));\n            \n            await Promise.all(promises);\n          } catch(e) {\n            console.error(e)\n          }\n        }\n        \n        eventHub.$emit('lib-templates-list::refresh', templateId);\n      },\n      \n      getTemplateMetaFile ({ type = `vue`, label = ``, vars = [], scripts = [], hideCustomComponentAfterSubmit = false, showCustomComponentInMessage = true, autoSubmitCustomTemplate = true }) {\n        const metaObject = { \n          label, \n          type, \n          vars, \n          scripts,\n          autoSubmitCustomTemplate,\n          showCustomComponentInMessage,\n          hideCustomComponentAfterSubmit,\n          showBotIcon: this.showBotIcon,\n          lastModified: Date.now()\n        };\n        return new Blob([JSON.stringify(metaObject, null, 2)], { type: 'text/json', name: `meta.json` });\n        \n      },\n      \n      getTemplateFiles (type) {\n        if(type === `html`) {\n          const html = new Blob([this.customTemplateHtmlCode], { type: 'text/html' });\n          const js = new Blob([this.customTemplateJavaScriptCode], { type: 'text/javascript' });\n          const css = new Blob([this.customTemplateCSSCode], { type: 'text/css' });\n          \n          return { html, js, css }\n        }\n        \n        if(type === `vue`) {\n          const vueScript = new Blob([this.customTemplateVueScript], { type: 'text/javascript' });\n          const vueTemplate = new Blob([this.customTemplateVueHtmlTemplate], { type: 'text/html' });\n          const css = new Blob([this.customTemplateCSSCode], { type: 'text/css' });\n          \n          return { vueScript, vueTemplate, css }\n        }\n        \n        throw new Error('No such type');\n      },\n      \n      async getFilesList (type) {\n        const templateId = _.get(this.selectedTemplate, 'value') || ``;\n        return await this.$flow.api.files.ls({ isPublic: true, prefix: `RWC_custom_templates/${templateId}/` })\n      },\n      \n      async deleteFromLib (withRefresh = true) {\n        this.loading = true;\n        const files = await this.getFilesList();\n        \n        const promises = _.map(files, ({ key }) => this.$flow.api.files.delete(key, true));\n        \n        await Promise.all(promises);\n        \n        this.$emit('update:customTemplateId', ``);\n        if(withRefresh) eventHub.$emit('lib-templates-list::refresh');\n        this.hasChanges = false;\n        this.localValue = ``;\n      },\n      \n      async editTemplate() {\n        await this.deleteFromLib(false);\n        await this.publishTemplate();\n      },\n      \n      openModal(ref) {\n        if(!this.$refs[ref]) return;\n        \n        if(ref === 'confirmPublishModal' && _.get(this.selectedTemplate, 'label')) {\n          this.templateLabel = `${_.get(this.selectedTemplate, 'label') || ''} (1)`;\n        }\n        \n        if(ref === 'confirmEditModal') {\n          this.templateLabel = _.get(this.selectedTemplate, 'label') || '';\n        }\n        \n        this.$refs[ref].open(); \n      },\n      \n      closeModal (ref) {\n      if(!this.$refs[ref]) return;\n       this.$refs[ref].close(); \n      },\n    },\n    \n    watch: {\n        customTemplateHtmlCode(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'')!== 'html') return;\n          this.hasChanges = true;\n        },\n        customTemplateJavaScriptCode(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'') !== 'html') return;\n          this.hasChanges = true;\n        },\n        customTemplateCSSCode(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'') !== 'html') return;\n          this.hasChanges = true;\n        },\n        customVariables(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        customTempalateScripts(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        hideCustomComponentAfterSubmit(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        showCustomComponentInMessage(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        autoSubmitCustomTemplate(nv , ov) {\n          if(_.isEqual(nv, ov) || this.customTemplateType !== 'html') return;\n          this.hasChanges = true;\n        },\n        customComponent(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'') !== 'vue') return;\n          this.hasChanges = true;\n        },\n        customTemplateType(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        showBotIcon (nv, ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        }\n    },\n    \n    props : {\n        customTemplateHtmlCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateJavaScriptCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateCSSCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueHtmlTemplate: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueScript: {\n          type: String,\n          default: ``\n        },\n        customTemplateType: {\n          type: String,\n          default: ``\n        },\n        customVariables: {\n          type: Array,\n          default: () => ([])\n        },\n        customTempalateScripts: {\n          type: Array,\n          default: () => ([])\n        },\n        customTemplateId: {\n          type: String,\n          default: ``\n        },\n        hideCustomComponentAfterSubmit: {\n          type: Boolean,\n          default: true\n        },\n        showCustomComponentInMessage: {\n          type: Boolean,\n          default: true\n        },\n        autoSubmitCustomTemplate: {\n          type: Boolean,\n          default: true\n        },\n        showBotIcon: {\n          type: Boolean,\n          default: true\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5c9c461a-e4ac-4e87-bd16-050ca5e9ea22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5c9c461a-e4ac-4e87-bd16-050ca5e9ea22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-button @click=\"openModal('confirmPublishModal')\" type=\"primary\" color=\"primary\">\n  {{ selectedTemplate ? `Publish template as new` : `Publish template` }}\n</or-button>\n<or-button v-if=\"canDeleteTemplateFromLib\" :disabled=\"!hasChanges\" @click=\"() => { openModal('confirmEditModal') }\" type=\"primary\" color=\"primary\">\n  Update template\n</or-button>\n<or-button v-if=\"canDeleteTemplateFromLib\" @click=\"openModal('confirmDeleteModal')\" type=\"secondary\" color=\"primary\">\n  Delete\n</or-button>\n\n<or-modal :dismissible=\"!loading\" ref=\"confirmPublishModal\" title=\"Publish template\">\n  <or-textbox\n    v-model=\"templateLabel\"\n    label=\"Template label\"\n    :readonly=\"loading\"\n    :invalid=\"!labelUniq\"\n    error=\"Template label should be unique\"\n    placeholder=\"Enter template label\"\n  />\n  <div slot=\"footer\">\n    <or-button :loading=\"loading\" :disabled=\"!templateLabel || !labelUniq\" @click=\"publishTemplate\" color=\"primary\">Publish</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmPublishModal')\">Cancel</or-button>\n  </div>\n</or-modal>\n\n<or-modal :dismissible=\"!loading\" ref=\"confirmEditModal\" title=\"Update template\">\n  <or-textbox\n    v-model=\"templateLabel\"\n    label=\"New template label\"\n    :readonly=\"loading\"\n    :invalid=\"!labelUniqOrSame\"\n    error=\"Label should be unique or the same\"\n    placeholder=\"Enter new template label\"\n  />\n  <div slot=\"footer\">\n    <or-button :loading=\"loading\" :disabled=\"!templateLabel || !labelUniqOrSame\" @click=\"editTemplate\" color=\"primary\">Edit</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmEditModal')\">Cancel</or-button>\n  </div>\n</or-modal>\n\n<or-modal :dismissible=\"!loading\" ref=\"confirmDeleteModal\" title=\"Delete template\">\n  You sure you want to delete this template from library?\n  <div slot=\"footer\">\n    <or-button :loading=\"loading\" @click=\"deleteFromLib\" color=\"red\">Delete</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmPublishModal')\">Cancel</or-button>\n  </div>\n</or-modal>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5c9c461a-e4ac-4e87-bd16-050ca5e9ea22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "b2ac6d8f-7c22-418f-b42f-d65cef8f1330",
                    "data": {
                      "label": "Week starts from",
                      "options": [
                        {
                          "label": "Sunday",
                          "value": "`0`",
                          "checked": false,
                          "vforkey": "f49ca720-194f-411b-a189-2099f6bcb0dc"
                        },
                        {
                          "label": "Monday",
                          "value": "`1`",
                          "checked": false,
                          "vforkey": "8d1c3d16-3478-4d92-9959-d2c0191db5f4"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "datepickerStartsFrom",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`0`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2ef1abbd-6a80-4b1c-919a-87b2eb4efca0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2ef1abbd-6a80-4b1c-919a-87b2eb4efca0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "32456fb3-4310-418e-9332-dfb87aa00a5c",
                    "data": {
                      "label": "Date format",
                      "options": [
                        {
                          "label": "MM-DD-YYYY",
                          "value": "`MM-DD-YYYY`",
                          "checked": false,
                          "vforkey": "0ef7bc71-7afc-4932-b2a3-47d729a09f07"
                        },
                        {
                          "label": "DD-MM-YYYY",
                          "value": "`DD-MM-YYYY`",
                          "checked": false,
                          "vforkey": "60f7f2b5-3fda-43ee-83dd-e0314272ae66"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "datepickerFormat",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`MM-DD-YYYY`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a819a3a-1f71-401c-81d2-2d36a34ffe6f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a819a3a-1f71-401c-81d2-2d36a34ffe6f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "58348e73-246a-448a-b978-e36ca40ed88a",
                    "data": {
                      "label": "Blocked dates",
                      "helpText": "",
                      "variable": "datepickerBlockDates",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9cde5ef1-f224-48bf-ab12-eec77b5e35ed",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9cde5ef1-f224-48bf-ab12-eec77b5e35ed",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "60fc16cb-50c7-46e3-90f8-5d655f321693",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Future dates",
                          "value": "`future`",
                          "checked": false,
                          "vforkey": "9fe15cb4-d5b5-48bc-afab-4a7561bfd7e4",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Past dates",
                          "value": "`past`",
                          "checked": false,
                          "vforkey": "c2974a2d-3c0b-4158-91de-53bceeafcdf5",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Custom dates (set via function)",
                          "value": "`function`",
                          "checked": false,
                          "vforkey": "2eb59730-cc8c-4457-9140-614b65ce6e99",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Custom dates (set via merge field)",
                          "value": "`mergeField`",
                          "checked": false,
                          "vforkey": "f2ce2a5e-173e-4b30-8045-8118b9c9ffdd",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "datepickerBlockedOptions",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [],
                      "allowCodeMode": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "69de7b60-2beb-4913-a56c-6679a2106a1d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "69de7b60-2beb-4913-a56c-6679a2106a1d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "4d3ab02c-5726-44ce-869f-9fefd7645dda",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "browser",
                      "label": "Function to define blocked dates",
                      "helpText": "",
                      "variable": "datepickerBlockedFunc",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "436f2409-8929-478b-aa7c-ea98327171e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`function`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "436f2409-8929-478b-aa7c-ea98327171e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`function`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "d034a329-9559-4d53-98b3-2aedf853a10f",
                    "data": {
                      "label": "Select merge field",
                      "helpText": "",
                      "variable": "datepickerBlockedMergefield",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "876beac8-06a8-460b-a2cb-864b8669cce9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`mergeField`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "876beac8-06a8-460b-a2cb-864b8669cce9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`mergeField`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "5e94e759-5f39-447e-bbd4-6a1ab54a7612",
                    "data": {
                      "label": "Suggested dates",
                      "helpText": "",
                      "variable": "datepickerSuggestedDates",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "feb203c1-9fb4-4e59-a2e0-b0163400e2ac",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "feb203c1-9fb4-4e59-a2e0-b0163400e2ac",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "02548d40-4def-4d35-b51b-f14b2ac8609b",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Custom dates (set via function)",
                          "value": "`function`",
                          "checked": false,
                          "vforkey": "3a8d5720-4d9d-477c-89c1-1dbc6580d2bb",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Custom dates (set via merge field)",
                          "value": "`mergeField`",
                          "checked": false,
                          "vforkey": "ce1f9000-0222-40dd-b1a1-764a9b99061c",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "datepickerSuggestedOptions",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [],
                      "allowCodeMode": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3980fe2a-cea7-49c0-8387-7595d016d6cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3980fe2a-cea7-49c0-8387-7595d016d6cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "4588d471-1a94-4bce-8c3f-f8146b93eae5",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Function to define suggested dates",
                      "helpText": "",
                      "variable": "datepickerSuggestedFunc",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "20aefe36-1664-482f-b070-30715732cfeb",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`function`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "20aefe36-1664-482f-b070-30715732cfeb",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`function`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "9230fd9e-13e8-41e1-9987-778487ce4c7e",
                    "data": {
                      "label": "Select merge field",
                      "helpText": "",
                      "variable": "datepickerSuggestedMergefield",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5dd79ad-5e15-478c-a76b-6242b9832a20",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`mergeField`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5dd79ad-5e15-478c-a76b-6242b9832a20",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`mergeField`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "65e4a22d-b0ad-4b59-afdf-905f58ad7716",
                    "data": {
                      "label": "Allow to select multiple",
                      "helpText": "",
                      "variable": "dropdownMultiple",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfb97cc1-b9e6-49ba-a888-737e7494657d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfb97cc1-b9e6-49ba-a888-737e7494657d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "a0af9fbf-c6c7-4c5c-a3cb-854daa8aea8d",
                    "data": {
                      "data": "{\n  \"dropdownOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  dropdownOptions: {\n    $each: {\n      emptyLabel (obj) {\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        return this.schema.dropdownOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`');\n      },\n      labelOutOfLength (obj) {\n        const label = _.trim(obj.label, '`');\n        const hasMergeField = _.isString(obj.label) && validators.validateExpression(obj.label);\n        if(hasMergeField) return true;\n        return label.length <= 24;\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.dropdownOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qpbtorwvnaezdsmukxijlycghf",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.dropdownOptions.$each[${index}].emptyLabel`, this.v)) {\n          return 'Option label is required.'\n        } \n        if (!this.getValue(`schema.dropdownOptions.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.dropdownOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.dropdownOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "09932c46-b793-4413-b48c-5fd29422deb3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "09932c46-b793-4413-b48c-5fd29422deb3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"24\"\n          help=\"Suggested length is up to 24 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.dropdownOptions.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.dropdownOptions.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add option</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "09932c46-b793-4413-b48c-5fd29422deb3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "54057ef8-860f-42bd-bfaa-79f1668bfaf6",
                    "data": {
                      "help": "Suggested length is up to 25 chars",
                      "label": "Dropdown placeholder",
                      "variable": "dropdownPlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Select an option",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "25",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0f01be99-a787-42a6-b5a1-e456ad34dd64",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "6497d4d1-3ca8-4507-a488-c49b5d3335f0",
                          "errorMessage": "Limit is exceeded, text will be truncated",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "37acafa2-5c2d-4980-9885-302040f2db31",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.dropdownPlaceholder, '`').length > 25",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "79a4cb58-776c-45fd-8bc9-2487cf6c8a83",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "!(_.isString(schema.dropdownPlaceholder) && validators.validateExpression(schema.dropdownPlaceholder))",
                                "valueType": "mergeTags",
                                "firstValue": "schema.dropdownPlaceholder",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0f01be99-a787-42a6-b5a1-e456ad34dd64",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "c27ab054-4aed-4c2a-bad5-515dc1401f35",
                    "data": {
                      "data": "{\n  \"optionListOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  optionListOptions: {\n    $each: {\n      emptyLabel (obj) {\n        if (this.schema.inputComponent !== '`menu`') return true\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        if (this.schema.inputComponent !== '`menu`') return true\n        return this.schema.optionListOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n      labelOutOfLength (obj) {\n        const label = _.trim(obj.label, '`');\n        const hasMergeField = _.isString(obj.label) && validators.validateExpression(obj.label);\n        if(hasMergeField) return true;\n        return label.length <= 24;\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.optionListOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-swazoxctumighrflveqkbndpjy",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.optionListOptions.$each[${index}].emptyLabel`, this.v)) {\n          return 'Option list label is required.'\n        } \n        if (!this.getValue(`schema.optionListOptions.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.optionListOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.optionListOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "829255e5-e735-4556-9b35-f5c8a462e7cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'menu')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "829255e5-e735-4556-9b35-f5c8a462e7cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'menu')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option list label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"24\"\n          help=\"Suggested length is up to 24 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.optionListOptions.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.optionListOptions.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option list value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add option</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "829255e5-e735-4556-9b35-f5c8a462e7cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'menu')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "e142ca5f-e65a-45df-8ae2-01c22ff45a37",
                    "data": {
                      "data": "{\n  \"optionsButtons\": [{\n    \"label\": \"``\",\n    \"value\": \"``\",\n    \"buttonStyle\": \"default\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  optionsButtons: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`buttons`') return true\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        // if (this.schema.inputComponent !== '`buttons`') return true\n        return this.schema.optionsButtons.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`');\n      },\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.optionsButtons\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-naikvlehgpmcfbyosdwqrjzuxt",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getButtonsStyle() {\n          return [\n          {\n            label: 'Default',\n            value: 'default'\n          },\n          {\n            label: 'Filled',\n            value: 'filled'\n          },\n          {\n            label: 'Outlined',\n            value: 'outlined'\n          },\n          {\n            label: 'Custom',\n            value: 'grayed'\n          }]\n        },\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.optionsButtons.$each[${index}].emptyLabel`, this.v)) {\n          return 'Button label is required.'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          buttonStyle: \"default\",\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          buttonStyle: \"default\",\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.optionsButtons.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.optionsButtons.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec644c0b-16c2-4516-90f5-c84c3ecdc046",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'buttons')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec644c0b-16c2-4516-90f5-c84c3ecdc046",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'buttons')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <div>\n          <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Button label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"24\"\n          help=\"Suggested length is up to 24 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.optionsButtons.$each[${item.index}].emptyLabel`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Button value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n        </div>\n        <or-select\n          v-model=\"item.item.buttonStyle\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          label=\"Button style\"\n          disablePopover\n          placeholder=\"Select\"\n          :options=\"getButtonsStyle\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add button</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec644c0b-16c2-4516-90f5-c84c3ecdc046",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'buttons')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    \n    \n    & > div {\n      width: 100%;\n      display: flex;\n      \n      & > * {\n        width: calc(50% - 4px);\n        flex-shrink: 0;\n        \n        &:nth-child(1) {\n          margin-right: 8px;\n        }\n      }\n      \n      .ui-select__content {\n        margin-right: 0 !important;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "4201c4ac-69e2-417c-a690-46e31340fb9c",
                    "data": {
                      "data": "{\n  \"radioOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  radioOptions: {\n    $each: {\n      emptyLabel (obj) {\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        return this.schema.radioOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.radioOptions\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-jeoyzdbslrkfqnhagxwpmicutv",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.radioOptions.$each[${index}].emptyLabel`, this.v)) {\n          return 'Radio button label is required.'\n        } \n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.radioOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.radioOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1400fd2d-4bbf-4a5b-9d70-1e49de83c242",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1400fd2d-4bbf-4a5b-9d70-1e49de83c242",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Radio button label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"400\"\n          help=\"Suggested length is up to 400 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.radioOptions.$each[${item.index}].emptyLabel`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Radio button value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add radio button</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1400fd2d-4bbf-4a5b-9d70-1e49de83c242",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "fac67652-08e2-4bc6-9b71-bdf6d20152ee",
                    "data": {
                      "data": "{\n  \"radioDefault\": \"`No option`\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.radioDefault\"\n  :inputComponent=\"schema.inputComponent\"\n  :options=\"schema.radioOptions\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bdzgmyaskcnervqxulhitojpwf",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    watch: {\n      options: {\n        handler(nv, ov) {\n          this.populateOptions()\n        },\n        deep: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        options: Array,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      onValueSelect (e) {\n        if (this.computedValue === e.value) {\n          this.$refs.selectExpression.value = null\n          this.computedValue = null\n        }\n      },\n      async populateOptions () {\n        await this.$nextTick()\n        if (!this.$refs.selectExpression || !this.options) return\n        \n        this.$refs.selectExpression.localOptions = [];\n        const optionLabels = this.options.map(el => _.trim(el.label, '`'))\n        \n        this.options.map(el => {\n          if (!el || el.label === '``') return;\n          this.$refs.selectExpression.addOption(_.trim(el.label, '`'));\n        })\n        \n        this.$refs.selectExpression.addOption('`No option`');\n        \n        const labels = this.$refs.selectExpression.localOptions.map(el => el.label)\n        this.$refs.selectExpression.localOptions = this.$refs.selectExpression.localOptions.map(el => {\n          el.custom = false\n          return el\n        })\n        if (labels.indexOf(this.computedValue) !== -1) {\n          this.$refs.selectExpression.value = this.value\n        } else {\n          this.$refs.selectExpression.value = '`No option`'\n        }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfca52bd-732f-46f8-bb82-7b7fedf6b2e6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfca52bd-732f-46f8-bb82-7b7fedf6b2e6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-default-options\">\n  <or-select-expression\n    ref=\"selectExpression\"\n    label=\"Preselected option(s)\"\n    :multiple=\"false\"\n    :extendableOptions=\"false\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    placeholder=\"No option is preselected\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    v-model=\"computedValue\"\n    class=\"rwc-default\"\n    @hook:mounted=\"populateOptions\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfca52bd-732f-46f8-bb82-7b7fedf6b2e6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-default-options {\n  .or-select-expression .ui-select__display-selected {\n    background-color: #64b2da;\n  }\n  .or-select-expression .ui-select__display-close-button {\n    color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "237cfb14-0b8a-4637-bb4d-e7d25a0616c1",
                    "data": {
                      "data": "{\n  \"sliderType\": \"single\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :sliderType.sync=\"schema.sliderType\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-npwflbjvzrcosqhkduxyatgiem",
                      "componentLogic": "{\n  data () {\n    return {\n      typeOptions: [\n        {\n          label: 'Select single point',\n          value: 'single'\n        },\n        {\n          label: 'Select range',\n          value: 'range'\n        }\n      ],\n      localType: this.sliderType\n    }\n  },\n  watch: {\n    localType: {\n      handler(nv) {\n        this.$emit('update:sliderType', nv)\n      },\n      immediate: true\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        sliderType: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4416401e-1c33-4f23-b490-096ad0ca5304",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4416401e-1c33-4f23-b490-096ad0ca5304",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-radio-groups\">\n  <or-radio-group \n    name=\"sliderType\"\n    :options=\"typeOptions\"\n    v-model=\"localType\"\n    :disabled=\"readonly\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4416401e-1c33-4f23-b490-096ad0ca5304",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-radio-groups {\n  .ui-radio-group__radios {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 8px;\n  }\n  \n  .ui-radio.ui-radio-group__radio {\n    width: 50%;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5e1f8a57-3348-4794-96b5-09ebff3f5dad",
                    "data": {
                      "data": "{\n  \"sliderMin\": \"``\",\n  \"sliderMax\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  sliderMin: {\n    notEmpty (obj) {\n      return _.trim(obj, '`')\n    },\n    number (value) {\n      if (_.trim(value, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      const val = value.replace(',', '.')\n      return !!(_.trim(val, '`')).match(/^-?\\d*\\.?\\d*$/);\n    },\n    moreThanLimit (obj) {\n      if (_.trim(obj, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      return _.trim(obj, '`').length <= 13\n    },\n    lessThanMin (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  },\n  sliderMax: {\n    notEmpty (obj) {\n      return _.trim(obj, '`')\n    },\n    moreThanLimit (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      return _.trim(obj, '`').length <= 13\n    },\n    number (obj) {\n      if (_.trim(obj, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      const val = obj.replace(',', '.')\n      return !!(_.trim(val, '`')).match(/^-?\\d*\\.?\\d*$/);\n    },\n    lessThanMin (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :sliderMin.sync=\"schema.sliderMin\"\n  :sliderMax.sync=\"schema.sliderMax\"\n  :sliderLabelTypes=\"schema.sliderLabelTypes\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-exfdphzqcgbuntriojylkvwams",
                      "componentLogic": "{\n  data() {\n    return {\n      localMin: this.sliderMin,\n      localMax: this.sliderMax\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getMinError () {\n          if (!this.getValue(`schema.sliderMin.notEmpty`, this.v)) {\n            return 'Min is required.'\n          } \n          if (!this.getValue(`schema.sliderMin.number`, this.v)) {\n            return 'Min is expected as a number.'\n          }\n          if (!this.getValue(`schema.sliderMin.moreThanLimit`, this.v)) {\n            return 'Limit is exceeded, text will be truncated'\n          }\n          if (!this.getValue(`schema.sliderMin.lessThanMin`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        },\n        getMaxError () {\n          if (!this.getValue(`schema.sliderMax.notEmpty`, this.v)) {\n            return 'Max is required.'\n          } \n          if (!this.getValue(`schema.sliderMax.number`, this.v)) {\n            return 'Min is expected as a number.'\n          }\n          if (!this.getValue(`schema.sliderMax.moreThanLimit`, this.v)) {\n            return 'Limit is exceeded, text will be truncated'\n          }\n          if (!this.getValue(`schema.sliderMax.lessThanMin`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        }\n    },\n    watch: {\n      localMin (nv) {\n        this.$emit('update:sliderMin', nv)\n      },\n      localMax (nv) {\n        this.$emit('update:sliderMax', nv)\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        sliderMin: [Number, String],\n        sliderMax: [Number, String],\n        sliderLabelTypes: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        v: Object,\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, el) {\n        return _.get(el || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3db1bb87-73d9-4fc5-ab05-9aca5b7c8ae4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3db1bb87-73d9-4fc5-ab05-9aca5b7c8ae4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-flex\">\n  <or-text-message\n    label=\"Min\"\n    v-model=\"computedValue\"\n    :maxCharLength=\"13\"\n    disablePopover\n    removeBubble\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    placeholder=\"0\"\n    counterString=\"%currentCharCount% / %maxCharLength%\"\n    :invalid=\"!getValue(`schema.sliderMin.notEmpty`, v) || !getValue(`schema.sliderMin.moreThanLimit`, v) || !getValue(`schema.sliderMin.number`, v) || !getValue(`schema.sliderMin.lessThanMin`, v)\"\n    :error=\"getMinError\"\n    v-model=\"localMin\"\n  />\n  <or-text-message\n    label=\"Max\"\n    v-model=\"computedValue\"\n    :maxCharLength=\"13\"\n    disablePopover\n    removeBubble\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    placeholder=\"100\"\n    counterString=\"%currentCharCount% / %maxCharLength%\"\n    :invalid=\"!getValue(`schema.sliderMax.notEmpty`, v) || !getValue(`schema.sliderMax.moreThanLimit`, v) || !getValue(`schema.sliderMax.number`, v) || !getValue(`schema.sliderMax.lessThanMin`, v)\"\n    :error=\"getMaxError\"\n    v-model=\"localMax\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3db1bb87-73d9-4fc5-ab05-9aca5b7c8ae4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-flex {\n  display: flex;\n  \n  & > * {\n    width: calc(50% - 4px);\n    \n    &:nth-child(1) {\n      margin-right: 8px;\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c105307e-7aed-4b70-9282-507aab74f13b",
                    "data": {
                      "label": "Default value",
                      "helpText": "",
                      "variable": "sliderDefaultValue",
                      "multiline": false,
                      "placeholder": "Add value here",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "407b3d07-5d77-45d1-a417-944643bf6cf3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b86ce143-02f0-48ea-aad1-82790eb8730d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'single')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "b9eee005-7a5e-488c-83b9-a558abbadb8c",
                          "errorMessage": "Value must be great than min.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "043e646f-5a5d-446e-a204-eb8a68f18b20",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "(+_.trim(schema.sliderDefaultValue, '`') < +_.trim(schema.sliderMin, '`')) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\$\\{/)) && schema.sliderDefaultValue.trim() ",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "c3c9fef6-6f1d-4f90-a069-453075bc65e3",
                          "errorMessage": "Value must be less than max.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "210609a0-ecfd-4391-a40c-27f271cacc4d",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "(+_.trim(schema.sliderDefaultValue, '`') > +_.trim(schema.sliderMax, '`')) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "90332b33-8a34-439d-b43b-4f9e57dd42c2",
                          "errorMessage": "Default value is required",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "b6b9cdd6-e4c8-4834-a4a6-674f68e9390c",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.sliderDefaultValue, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "83608e8d-c5a3-48e1-be21-2497711ab1ad",
                          "errorMessage": "Default value is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "9b03adf9-f00b-47d4-923f-1538fa699d91",
                                "ruleType": {
                                  "func": "{ return firstValue > secondValue }",
                                  "type": "double",
                                  "input": [
                                    "number",
                                    "number"
                                  ],
                                  "label": ">",
                                  "modes": [
                                    "numStrings"
                                  ],
                                  "category": "number"
                                },
                                "codeValue": "(!_.trim(schema.sliderDefaultValue, '`').match(/^\\-?\\d+([\\.|\\,]?\\d+)?$/)) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\`?\\$\\{.*(}`?)$/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "624ca987-817e-414d-b561-4704de17a1fb",
                          "errorMessage": "Min decimal is 0.0001",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e498f9e7-c84a-4059-892a-e4f525534103",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "((_.trim(schema.sliderDefaultValue, '`').replace(',', '.').split('.')[1] ? _.trim(schema.sliderDefaultValue, '`').replace(',', '.').split('.')[1].length > 4 : splitted)) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "407b3d07-5d77-45d1-a417-944643bf6cf3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b86ce143-02f0-48ea-aad1-82790eb8730d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'single')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "2129e0d6-3402-4210-a459-8a28bbd90037",
                    "data": {
                      "data": "{\n  \"sliderDefaultStart\": \"``\",\n  \"sliderDefaultEnd\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  sliderDefaultStart: {\n    notEmpty (value) {\n      return _.trim(value, '`')\n    },\n    lessThanMin (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      const val = value.trim();\n      return !(+_.trim(val, '`').replace(',', '.') < +_.trim(this.schema.sliderMin, '`').replace(',', '.'))\n    },\n    greatThanMax (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      return !(+_.trim(value, '`').replace(',', '.') > +_.trim(this.schema.sliderMax, '`').replace(',', '.'))\n    },\n    onlyNumber (value) {\n      if (_.trim(value, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      return !!(_.trim(value, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/);\n    },\n    lessDecimal (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  },\n  sliderDefaultEnd: {\n    notEmpty (value) {\n      return _.trim(value, '`')\n    },\n    lessThanMin (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      const val = value.trim();\n      return !(+_.trim(val, '`').replace(',', '.') < + _.trim(this.schema.sliderMin, '`').replace(',', '.'))\n    },\n    greatThanMax (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      return !(+_.trim(value, '`').replace(',', '.') > +_.trim(this.schema.sliderMax, '`').replace(',', '.'))\n    },\n    onlyNumber (value) {\n      if (_.trim(value, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      return !!(_.trim(value, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/);\n    },\n    lessDecimal (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.stepVariable\"\n  :sliderDefaultStart.sync=\"schema.sliderDefaultStart\"\n  :sliderDefaultEnd.sync=\"schema.sliderDefaultEnd\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-eumbtgvhxfolirpzckwynsadjq",
                      "componentLogic": "{\n    computed : {\n        localStart : {\n            get () { return this.sliderDefaultStart; },\n            set (value) { this.$emit('update:sliderDefaultStart', value); }\n        },\n        localEnd: {\n          get () { return this.sliderDefaultEnd; },\n            set (value) { this.$emit('update:sliderDefaultEnd', value); }\n        },\n        getErrorStart () {\n          if (!this.getValue(`schema.sliderDefaultStart.notEmpty`, this.v)) {\n            return 'Default value start is required.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.lessThanMin`, this.v)) {\n            return 'Value must be great than min.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.greatThanMax`, this.v)) {\n            return 'Value must be less than max.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.onlyNumber`, this.v)) {\n            return 'Default value start is expected as number.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.lessDecimal`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        },\n        getErrorEnd () {\n          if (!this.getValue(`schema.sliderDefaultEnd.notEmpty`, this.v)) {\n            return 'Default value end is required.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.lessThanMin`, this.v)) {\n            return 'Value must be great than min.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.greatThanMax`, this.v)) {\n            return 'Value must be less than max.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.onlyNumber`, this.v)) {\n            return 'Default value end is expected as number.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.lessDecimal`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        }\n    },\n    props : {\n      sliderDefaultStart: String,\n      sliderDefaultEnd: String,\n      v: Object,\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, val) {\n        return _.get(val || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1b069379-9764-495a-bf59-7a55247e59e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'range')",
                            "valueType": "advanced",
                            "firstValue": "schema.sliderType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "f8f42c38-3bac-415d-8896-c1bb694a4471",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1b069379-9764-495a-bf59-7a55247e59e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'range')",
                            "valueType": "advanced",
                            "firstValue": "schema.sliderType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "f8f42c38-3bac-415d-8896-c1bb694a4471",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-flex\">\n  <or-text-expression\n    label=\"Default value start\"\n    v-model=\"localStart\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :steps=\"steps\"\n    :stepId=\"stepId\"\n    placeholder=\"Add value here\"\n    showErrorText=\"persistently\"\n    :invalid=\"!getValue(`schema.sliderDefaultStart.lessThanMin`, v) || !getValue(`schema.sliderDefaultStart.greatThanMax`, v) || !getValue(`schema.sliderDefaultStart.onlyNumber`, v) || !getValue(`schema.sliderDefaultStart.notEmpty`, v) || !getValue(`schema.sliderDefaultStart.lessDecimal`, v)\"\n    :error=\"getErrorStart\"\n  ></or-text-expression>\n  <or-text-expression\n    label=\"Default value end\"\n    v-model=\"localEnd\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :steps=\"steps\"\n    :stepId=\"stepId\"\n    placeholder=\"Add value here\"\n    showErrorText=\"persistently\"\n    :invalid=\"!getValue(`schema.sliderDefaultEnd.lessThanMin`, v) || !getValue(`schema.sliderDefaultEnd.greatThanMax`, v) || !getValue(`schema.sliderDefaultEnd.onlyNumber`, v) || !getValue(`schema.sliderDefaultEnd.notEmpty`, v) || !getValue(`schema.sliderDefaultEnd.lessDecimal`, v)\"\n    :error=\"getErrorEnd\"\n  ></or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1b069379-9764-495a-bf59-7a55247e59e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'range')",
                            "valueType": "advanced",
                            "firstValue": "schema.sliderType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "f8f42c38-3bac-415d-8896-c1bb694a4471",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-flex {\n  display: flex;\n  \n  & > * {\n    width: calc(50% - 4px);\n    flex-shrink: 0;\n    \n    &:nth-child(1) {\n      margin-right: 8px;\n    } \n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "bc0c8f7f-f773-4988-baff-d4dd808c6e9f",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :sliderDefaultValue.sync=\"schema.sliderDefaultValue\"\n  :sliderDefaultStart.sync=\"schema.sliderDefaultStart\"\n  :sliderDefaultEnd.sync=\"schema.sliderDefaultEnd\"\n\n  :codeModes.sync=\"schema.__codeModes\"\n  \n  :min=\"schema.sliderMin\"\n  :max=\"schema.sliderMax\"\n  :step=\"schema.sliderStep\"\n  :sliderType=\"schema.sliderType\"\n  \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-epsoilkrujghabmzwdnvyqtxcf",
                      "componentLogic": "{\n    computed : {\n        getMarks () {\n          if(validators.validateExpression(this.max) || validators.validateExpression(this.min)) return [];\n          \n          return [this.getMin, this.getMax].sort((a, b) => a - b);\n        },\n        getStep () {\n          if(validators.validateExpression(this.step)) return 0;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderStep) ? _.trim(this.step, '`').replace(',', '.') : _.trim(this.codeModes.sliderStep, ' \"`\\'');\n          if (formatted === '' && (this.sliderDefaultValue || this.defaultValueStart)) {\n            if ((this.sliderDefaultValue || this.defaultValueStart) - this.getMarks[0] > 10) {\n              return 1;\n            } else {\n              return ((this.sliderDefaultValue || this.defaultValueStart) - this.getMarks[0]) / 100 || 0.01;\n            }\n          }\n    \n          if (formatted === '') {\n            return 1;\n          }\n    \n          if (formatted === 0 || formatted === '0' || formatted === 'undefined' || isNaN(formatted)) {\n            if (this.getMarks[1] % 1 !== 0 || this.getMarks[0] % 1 !== 0) {\n              if (this.getMarks[ 0 ] < 0.01) {\n                let step = '0.';\n                let i = 1;\n                while (i < ('' + this.getMarks[ 0 ]).length - 2) {\n                  step += '0';\n                  i++;\n                }\n                step += '1';\n                return step;\n              }\n    \n              return 0.01;\n            }\n            return 1;\n          }\n    \n          if ((this.getMarks[1] - this.getMarks[0]) % formatted === 0) {\n            return Math.abs(formatted);\n          }\n    \n          if ((this.getMarks[1] - this.getMarks[0]) % formatted !== 0) {\n            return Math.abs(formatted);\n          }\n    \n          if (!formatted.match(numberRegexp)) return 1; // if not only numbers\n    \n          return Math.abs(formatted > (this.getMarks[1] - this.getMarks[0]) / 2 ? 1 : parseInt(formatted));\n        },\n        getMin () {\n          if(validators.validateExpression(this.min)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderMin) ? _.trim(this.min, '`').replace(',', '.') : _.trim(this.codeModes.sliderMin, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 0;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getMax () {\n          if(validators.validateExpression(this.max)) return;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderMax) ? _.trim(this.max, '`').replace(',', '.') : _.trim(this.codeModes.sliderMax, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getDefault() {\n          if(validators.validateExpression(this.sliderDefaultValue)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderDefaultValue) ? _.trim(this.sliderDefaultValue, '` \\'\"').replace(',', '.') : _.trim(this.codeModes.sliderDefaultValue, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getDefaultStart() {\n          if(validators.validateExpression(this.sliderDefaultStart)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderDefaultStart) ? _.trim(this.sliderDefaultStart, '` \\'\"').replace(',', '.') : _.trim(this.codeModes.sliderDefaultStart, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getDefaultEnd() {\n          if(validators.validateExpression(this.sliderDefaultEnd)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderDefaultEnd) ? _.trim(this.sliderDefaultEnd, '` \\'\"').replace(',', '.') : _.trim(this.codeModes.sliderDefaultEnd, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        sliderData() {\n          if(validators.validateExpression(this.max) || validators.validateExpression(this.min) || validators.validateExpression(this.step))\n            return [];\n            \n          \n          if (Math.abs(this.getMax - this.getMin) % this.getStep !== 0 && this.getStep !== 0) {\n            const mod = Math.abs(this.getMax - this.getMin) % this.getStep;\n            let total = parseInt((Math.abs(this.getMax - this.getMin) - mod) / this.getStep);\n      \n            let step = null;\n            if (total >= 1000) {\n              total = 1000;\n              step = parseFloat(Math.abs(this.getMax - this.getMin) / 1002).toFixed(4);\n            }\n      \n            const start = Math.min(+this.getMin, +this.getMax);\n            step =  step || +this.getStep;\n            const toFixedNumber = this.getMarks[1] - this.getMarks[0] > 100 ? 0 : 4;\n      \n            let sliderData = Array.from(Array(total + 2), (_, i) => parseFloat((start + step * i).toFixed(toFixedNumber).replace(/.0000$/, '')));\n            sliderData[sliderData.length - 1] = this.getMarks[1];\n            \n            return sliderData\n          }\n    \n          return [];\n        },\n        \n        showSinglePointWarning() {\n          if(!this.sliderData || _.isEmpty(this.sliderData) || _.isEmpty(this.closestSingleSteps)) return false;\n          if(this.sliderType !== `single`) return false;\n          \n          return !_.find(this.sliderData, (el => el === this.getDefault));\n        },\n        showDefaultStartWarning() {\n          if(!this.sliderData || _.isEmpty(this.sliderData) || _.isEmpty(this.closestStartSteps)) return false;\n          if(this.sliderType !== `range`) return false;\n          \n          return !_.find(this.sliderData, (el => el === this.getDefaultStart));\n        },\n        showDefaultEndWarning() {\n          if(!this.sliderData || _.isEmpty(this.sliderData) || _.isEmpty(this.closestEndSteps)) return false;\n          if(this.sliderType !== `range`) return false;\n          \n          return !_.find(this.sliderData, (el => el === this.getDefaultEnd));\n        },\n        \n        showWarning() {\n          return this.showSinglePointWarning || this.showDefaultStartWarning || this.showDefaultEndWarning;\n        },\n        \n        closestSingleSteps() {\n          return this.findClosestSteps(this.getDefault);\n        },\n        closestStartSteps() {\n          return this.findClosestSteps(this.getDefaultStart);\n        },\n        closestEndSteps() {\n          return this.findClosestSteps(this.getDefaultEnd);\n        }\n    },\n    methods: {\n      setDefaultValue(value, variable) {\n        if(_.has(this.codeModes, variable)) {\n          \n          const codeModes = _.cloneDeep(this.codeModes);\n          \n          codeModes[variable] = `\\`${value}\\``;\n          \n          this.$emit(`update:codeModes`, codeModes);\n          return;\n        }\n        \n        this.$emit(`update:${variable}`, `\\`${value}\\``);\n      },\n      findClosestSteps(defaultValue) {\n        if(!this.sliderData || _.isEmpty(this.sliderData)) return [];\n          \n        const closestIndex = _.findIndex(this.sliderData, el => el > defaultValue);\n        \n        if(closestIndex === -1) return [];\n        \n        if(closestIndex === 0) {\n          return [this.sliderData[closestIndex]];\n        }\n        \n        return [this.sliderData[closestIndex - 1], this.sliderData[closestIndex]]\n      }\n    },\n    props : {\n        sliderDefaultValue : {\n            type : String,\n            default : ''\n        },\n        sliderDefaultStart: {\n          type: String,\n          default: ''\n        },\n        sliderDefaultEnd: {\n          type: String,\n          default: ''\n        },\n\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        \n        min: {\n          type: String,\n          default: ''\n        },\n        max: {\n          type: String,\n          default: ''\n        },\n        \n        step: {\n          type: String,\n          default: ''\n        },\n        sliderType: {\n          type: String,\n          default: ''\n        },\n\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "82d4aac2-fe86-45f9-9fb3-57ce74f49619",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "82d4aac2-fe86-45f9-9fb3-57ce74f49619",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-alert :dismissible=\"false\" type=\"warning\" v-show=\"showWarning\">\r\n  \r\n  <div v-if=\"showSinglePointWarning\" class=\"warn-message\">\r\n    Min would be set as default. Change Step to use your <strong>Default</strong> value, or select closest steps: <span v-for=\"(step, index) in closestSingleSteps\">{{ index ? `, ` : `` }}<a href=\"#\" @click.prevent=\"setDefaultValue(step, 'sliderDefaultValue')\">{{ step }}</a></span>\r\n  </div>\r\n  \r\n  <div v-if=\"showDefaultStartWarning\" class=\"warn-message\">\r\n    Min would be set as default. Change Step to use your <strong>Default start</strong> value: <span v-for=\"(step, index) in closestStartSteps\">{{ index ? `, ` : `` }}<a href=\"#\" @click.prevent=\"setDefaultValue(step, 'sliderDefaultStart')\">{{ step }}</a></span>\r\n  </div>\r\n  \r\n  <div v-if=\"showDefaultEndWarning\" class=\"warn-message\">\r\n    Min would be set as default. Change Step to use your <strong>Default end</strong> value: <span v-for=\"(step, index) in closestEndSteps\">{{ index ? `, ` : `` }}<a href=\"#\" @click.prevent=\"setDefaultValue(step, 'sliderDefaultEnd')\">{{ step }}</a></span>\r\n  </div>\r\n</or-alert>\r\n\r\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "82d4aac2-fe86-45f9-9fb3-57ce74f49619",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".warn-message {\n  margin-bottom: .5rem;\n  \n  &:last-child {\n    margin-bottom: 0;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c6e8fe74-5845-4305-a0ee-3561781f2e2f",
                    "data": {
                      "label": "Step",
                      "helpText": "",
                      "variable": "sliderStep",
                      "multiline": false,
                      "placeholder": "Specify the size of each movement",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f4552f58-a04d-4ab1-9dfb-03c01593de75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "869a4f32-b9ee-4757-a467-1ab5ab0dd28e",
                          "errorMessage": "Step is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "4f2145f4-5b8c-4ed4-adfa-7a04c43e9dd5",
                                "ruleType": {
                                  "func": "{ return !(_.isNil(firstValue) || _.isEmpty(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "mixed"
                                  ],
                                  "label": "has a value",
                                  "modes": [
                                    "trimQuotes"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "(!_.trim(schema.sliderStep, '`')) && (!_.trim(schema.sliderStep, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "schema.sliderStep",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "2fd63c6c-da41-4c61-b989-4e8fa3ad0932",
                          "errorMessage": "Step is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "7a6a1380-04a7-4879-839f-bcede79d6805",
                                "ruleType": {
                                  "func": "{ return _.isNil(firstValue) ? _.isNil(secondValue) : _.isNil(secondValue) ? false : typeof firstValue === 'object' ? firstValue.constructor.toString().split(' ')[1] === secondValue.constructor.toString().split(' ')[1] : (typeof firstValue) === (typeof secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "is same type as",
                                  "modes": false,
                                  "category": "general"
                                },
                                "codeValue": "(!_.trim(schema.sliderStep, '`').match(/^\\d+([\\.|\\,]?\\d+)?$/)) && (!_.trim(schema.sliderStep, '`').match(/^\\`?\\$\\{.*(}`?)$/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "0093b256-b041-49ea-a9a6-21a191c5064a",
                          "errorMessage": "Min decimal is 0.0001",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "edf3c60f-55f2-4c7f-94d1-97c5cea7b8ac",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "((_.trim(schema.sliderStep, '`').replace(',', '.').split('.')[1] ? _.trim(schema.sliderStep, '`').replace(',', '.').split('.')[1].length > 4 : splitted)) && (!_.trim(schema.sliderStep, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f4552f58-a04d-4ab1-9dfb-03c01593de75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "129ac9cb-85f6-4e9a-ba48-5940f82237ca",
                    "data": {
                      "help": "",
                      "label": "Units",
                      "variable": "sliderUnit",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. kg, $, ℃",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "5",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9c78f638-7546-4a86-9266-de83a4742105",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "b71b13ea-0a91-446b-b0d2-a178fb0a8514",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "32b3e48c-475c-40c8-8786-a510034b9dcd",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.sliderUnit, '`').length > 5",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "31bdab8c-0f2e-4e53-88b7-2cdc3ac786a4",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.sliderUnit",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9c78f638-7546-4a86-9266-de83a4742105",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "ec7100a2-9d86-4509-bf6e-fbd7304b1d62",
                    "data": {
                      "label": "Unit position",
                      "options": [
                        {
                          "label": "At the beginning",
                          "value": "`start`",
                          "checked": false,
                          "vforkey": "c144f9d5-1de2-44e5-a6c6-c99949e3fd93"
                        },
                        {
                          "label": "At the end",
                          "value": "`end`",
                          "checked": false,
                          "vforkey": "8f1ff344-e8e6-44d7-bdc9-3129e319fe28"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "sliderUnitPosition",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`start`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "df3d95d7-fa72-4fce-862a-f9e9e8240f30",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'),  'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "df3d95d7-fa72-4fce-862a-f9e9e8240f30",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'),  'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "7b335235-255e-432a-a3b8-0f72d0dc1e13",
                    "data": {
                      "label": "Use custom labels",
                      "helpText": "",
                      "variable": "sliderUseCustomLabels",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b82e21ad-df63-4774-aa33-cf0c0276ec0e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b82e21ad-df63-4774-aa33-cf0c0276ec0e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "52fb901b-f8f0-4b9a-ad3b-b0a4847b0a69",
                    "data": {
                      "data": "{\n  \"sliderCustomLabels\": [\n    {\n      \"label\": \"``\",\n      \"value\": \"``\"\n    },\n    {\n      \"label\": \"``\",\n      \"value\": \"``\"\n    }\n  ]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  sliderCustomLabels: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return this.schema.sliderCustomLabels.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n      labelOutOfLength (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`').length <= 400\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.sliderCustomLabels\"\n  :inputComponent=\"schema.inputComponent\"\n  :sliderLabelTypes=\"schema.sliderLabelTypes\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-vpcuojtamisgehwxzdqbyfrkln",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        sliderLabelTypes: String,\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.sliderCustomLabels.$each[${index}].emptyLabel`, this.v)) {\n          return 'Label is required.'\n        } \n        if (!this.getValue(`schema.sliderCustomLabels.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.sliderCustomLabels.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.sliderCustomLabels.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "33d26fe2-b32b-43b1-9544-718aefce1a1f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "00aea39d-8b81-4edf-8ec3-c1e5310f9b6f",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "33d26fe2-b32b-43b1-9544-718aefce1a1f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "00aea39d-8b81-4edf-8ec3-c1e5310f9b6f",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    :canDeleteItems=\"computedValue.length > 2\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"5\"\n          help=\"Suggested length is up to 5 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.sliderCustomLabels.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.sliderCustomLabels.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Value ${item.index + 1}`\"\n          placeholder=\"Add value here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add label</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "33d26fe2-b32b-43b1-9544-718aefce1a1f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "00aea39d-8b81-4edf-8ec3-c1e5310f9b6f",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "b7e27be6-5121-4683-b42e-31d8ebdd78b0",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Function to define user message, that will be returned in chat",
                      "helpText": "",
                      "variable": "sliderCustomFunction",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0667f944-b381-47be-9bdd-341864bf90d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "d3847309-4700-446d-8751-56b9a9fdd683",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0667f944-b381-47be-9bdd-341864bf90d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "d3847309-4700-446d-8751-56b9a9fdd683",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "ccccb20b-fd45-45e5-ac00-5162903ea0c2",
                    "data": {
                      "data": "{\n  \"medias\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `{}`;\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  medias: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.medias\" \n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-feucqhijmypzawbkndlsvgotxr",
                      "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: [],\n        maxFiles: 10\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cc1cf2a-183e-4085-82a8-319d74fffe49",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cc1cf2a-183e-4085-82a8-319d74fffe49",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <span>{{ item.item.name }}</span>\n          <div class=\"file-controls\">\n            <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n          </div>\n      </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.medias.$each[${item.index}].$invalid`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => updateMedias(item.item, val)\"\n          />\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add file</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add attachment from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n  <div v-if=\"getValue(`schema.messageText.$invalid`, v)\" class=\"rwc__error-message\">\n    Message should contain a text or attachment\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cc1cf2a-183e-4085-82a8-319d74fffe49",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n  \n  .medias-wrapper {\n    width: 100%;\n  }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "d557c63c-855e-4319-aa9c-b729b40d948c",
                    "data": {
                      "label": "Input type",
                      "options": [
                        {
                          "label": "Simple text",
                          "value": "text",
                          "vforkey": "23b37895-9cf3-4609-9f4b-e871da67d8c4"
                        },
                        {
                          "label": "Numeric",
                          "value": "number",
                          "vforkey": "af4eb5ce-09c1-4c20-a5b5-b05c60ce5d8f"
                        },
                        {
                          "label": "Password",
                          "value": "password",
                          "vforkey": "704e0efb-8ad1-4a0d-9e31-6ac130605e95"
                        },
                        {
                          "label": "Email",
                          "value": "email",
                          "vforkey": "bdf1ebad-1fb9-4ef2-a171-11952412eba4"
                        },
                        {
                          "label": "Custom pattern",
                          "value": "custom",
                          "vforkey": "81f81d33-c5da-43a5-83f7-c257ff4faab8"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "textInputType",
                      "placeholder": "Select Field",
                      "defaultValue": "text",
                      "allowCodeMode": true,
                      "renderCondition": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formSelect",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (simple)",
                    "compiled": {},
                    "component": "formSelect",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelect\"]"
                    ]
                  },
                  {
                    "id": "c8fecf9e-76fe-4aec-979d-4a1de9ff05f7",
                    "data": {
                      "help": "",
                      "label": "Pattern",
                      "variable": "textInputCustomPattern",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p>Custom pattern allows only to add formatting for requested data and doesn't provide validation for it. To specify pattern symbol use next chars:</p>\n<ul>\n  <li># - only digits (0-9)</li>\n  <li>X - [0-9a-zA-Z]</li>\n  <li>S - [a-zA-Z]</li>\n  <li>A - [a-zA-Z] will transform to UPPER CASE</li>\n  <li>a - [a-zA-Z] will transform to lower case</li>\n  <li>! - escape char pattern and use as a regular symbol</li>\n</ul>\n\n<p>Examples:</p>\n<p>To request 4 last credit card digits, use pattern:  !#!#!#!# !#!#!#!# !#!#!#!# !#!#!#!# ####</p>\n<p>When end-user adds digits (e.g. 4444) , text input and submitted data will contain  : #### #### #### 4444</p>\n<p>To request phone number for specific country code, use pattern: +1 (500) ###-##-##</p>\n<p>When end-user adds digits (e.g. 1234567) ,  text input and submitted data will contain +1 (500) 123-45-67</p>\n",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength% char",
                      "maxCharLength": 160,
                      "disablePopover": false,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ca5d78c9-fc1f-4058-8729-a94ebb59dd5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "1cf01821-f9d5-409d-abcd-c2eefdc0b492",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.textInputType, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": false,
                      "iconHelpTextOption": "modal",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ca5d78c9-fc1f-4058-8729-a94ebb59dd5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "1cf01821-f9d5-409d-abcd-c2eefdc0b492",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.textInputType, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "7b79ed0a-2426-4ac9-8919-46090c9e2ba7",
                    "data": {
                      "help": "",
                      "label": "User's reply placeholder",
                      "variable": "textPlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Write a reply",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "30",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "17015f01-c354-455f-b2f0-5016495c8541",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "1eed21a0-1709-4c66-853d-91b15ff29129",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "54744b39-48d8-41a9-83a4-cba77b09f350",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.textPlaceholder, '`').length > 30 && (!_.trim(schema.textPlaceholder, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "17015f01-c354-455f-b2f0-5016495c8541",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "3502ae56-7c8d-4b4b-8b1c-19007306033d",
                    "data": {
                      "label": "Time format",
                      "options": [
                        {
                          "label": "Auto-detect",
                          "value": "`auto`",
                          "checked": false,
                          "vforkey": "4b986fe0-91ca-426b-8210-1ccce57fee0c"
                        },
                        {
                          "label": "12-hour clock",
                          "value": "`12`",
                          "checked": false,
                          "vforkey": "606e70b1-e59b-4f70-9b92-2807ff3a782a"
                        },
                        {
                          "label": "24-hour clock",
                          "value": "`24`",
                          "checked": false,
                          "vforkey": "e5dfc746-edd2-4ebc-8cf3-960fb4f50b3e"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "timepickerFormat",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`auto`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b502cb56-dff5-4ef1-8ecc-885e7ccb1813",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'timepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b502cb56-dff5-4ef1-8ecc-885e7ccb1813",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'timepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "176d507b-ca93-4195-b599-209b55a46d70",
                    "data": {
                      "label": "Number of attachments",
                      "options": [
                        {
                          "label": "One",
                          "value": "`0`",
                          "checked": false,
                          "vforkey": "e52c95af-6afb-4ae2-bf44-95c403d13852"
                        },
                        {
                          "label": "Multiple",
                          "value": "`1`",
                          "checked": false,
                          "vforkey": "ce7aee82-3687-412f-b162-d16f2a01be21"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "attachmentsNumber",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`0`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "10b5815a-6d78-4655-81e5-e7d8323bbb33",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "10b5815a-6d78-4655-81e5-e7d8323bbb33",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "b02b422d-e887-4bf8-a098-cf434802c15b",
                    "data": {
                      "label": "Store user files as private",
                      "helpText": "",
                      "variable": "isPrivateFiles",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "Uploaded files won't be accessible in chat client",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "75796a55-000b-40f9-87f4-dc0d7f1b4cf6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "tooltip",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "75796a55-000b-40f9-87f4-dc0d7f1b4cf6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "538c09e4-fa60-4b3b-8e18-01e478f43d59",
                    "data": {
                      "label": "Allow only chosen file types",
                      "helpText": "",
                      "variable": "attachmentsAllowChosen",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c9543938-c2ec-48f4-b47f-e983a1003322",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c9543938-c2ec-48f4-b47f-e983a1003322",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "bb5d9112-fc37-499a-b6d3-eac7f1386583",
                    "data": {
                      "data": "{\n  \"attachmentsAllowedTypes\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  attachmentsAllowedTypes: {\n    notEmpty (obj) {\n      return !_.isEmpty(obj)\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.attachmentsAllowedTypes\"\n  :attachmentsAllowChosen=\"schema.attachmentsAllowChosen\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-euzbgtonldrvxiymcphqksjfwa",
                      "componentLogic": "{\n  data () {\n    return {\n      options: [\n        {\n          \"groupLabel\": \"Audio files\",\n          \"items\": [\n            {\n              \"label\": \"M4A\",\n              \"value\": \"M4A\"\n            },\n            {\n              \"label\": \"MP3\",\n              \"value\": \"MP3\"\n            },\n            {\n              \"label\": \"MPA\",\n              \"value\": \"MPA\"\n            },\n            {\n              \"label\": \"WAV\",\n              \"value\": \"WAV\"\n            },\n            {\n              \"label\": \"WMA\",\n              \"value\": \"WMA\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Compressed files\",\n          \"items\": [\n            {\n              \"label\": \"7Z\",\n              \"value\": \"7Z\"\n            },\n            {\n              \"label\": \"CBR\",\n              \"value\": \"CBR\"\n            },\n            {\n              \"label\": \"DEB\",\n              \"value\": \"DEB\"\n            },\n            {\n              \"label\": \"GZ\",\n              \"value\": \"GZ\"\n            },\n            {\n              \"label\": \"PKG\",\n              \"value\": \"PKG\"\n            },\n            {\n              \"label\": \"RAR\",\n              \"value\": \"RAR\"\n            },\n            {\n              \"label\": \"ZIP\",\n              \"value\": \"ZIP\"\n            },\n            {\n              \"label\": \"ZIPX\",\n              \"value\": \"ZIPX\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Data files\",\n          \"items\": [\n            {\n              \"label\": \"CSV\",\n              \"value\": \"CSV\"\n            },\n            {\n              \"label\": \"DAT\",\n              \"value\": \"DAT\"\n            },\n            {\n              \"label\": \"SDF\",\n              \"value\": \"SDF\"\n            },\n            {\n              \"label\": \"TAR\",\n              \"value\": \"TAR\"\n            },\n            {\n              \"label\": \"XML\",\n              \"value\": \"XML\"\n            },\n            {\n              \"label\": \"JSON\",\n              \"value\": \"JSON\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Image files\",\n          \"items\": [\n            {\n              \"label\": \"BMP\",\n              \"value\": \"BMP\"\n            },\n            {\n              \"label\": \"GIF\",\n              \"value\": \"GIF\"\n            },\n            {\n              \"label\": \"HEIC\",\n              \"value\": \"HEIC\"\n            },\n            {\n              \"label\": \"JPG\",\n              \"value\": \"JPG\"\n            },\n            {\n              \"label\": \"JPEG\",\n              \"value\": \"JPEG\"\n            },\n            {\n              \"label\": \"PNG\",\n              \"value\": \"PNG\"\n            },\n            {\n              \"label\": \"PSD\",\n              \"value\": \"PSD\"\n            },\n            {\n              \"label\": \"TIF\",\n              \"value\": \"TIF\"\n            },\n            {\n              \"label\": \"TIFF\",\n              \"value\": \"TIFF\"\n            },\n            {\n              \"label\": \"SVG\",\n              \"value\": \"SVG\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Spreadsheet files\",\n          \"items\": [\n            {\n              \"label\": \"XLR\",\n              \"value\": \"XLR\"\n            },\n            {\n              \"label\": \"XLS\",\n              \"value\": \"XLS\"\n            },\n            {\n              \"label\": \"XLSX\",\n              \"value\": \"XLSX\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Text files\",\n          \"items\": [\n            {\n              \"label\": \"DOC\",\n              \"value\": \"DOC\"\n            },\n            {\n              \"label\": \"DOCX\",\n              \"value\": \"DOCX\"\n            },\n            {\n              \"label\": \"LOG\",\n              \"value\": \"LOG\"\n            },\n            {\n              \"label\": \"ODT\",\n              \"value\": \"ODT\"\n            },\n            {\n              \"label\": \"PAGES\",\n              \"value\": \"PAGES\"\n            },\n            {\n              \"label\": \"PDF\",\n              \"value\": \"PDF\"\n            },\n            {\n              \"label\": \"RTF\",\n              \"value\": \"RTF\"\n            },\n            {\n              \"label\": \"TXT\",\n              \"value\": \"TXT\"\n            },\n            {\n              \"label\": \"WPD\",\n              \"value\": \"WPD\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Video files\",\n          \"items\": [\n            {\n              \"label\": \"AVI\",\n              \"value\": \"AVI\"\n            },\n            {\n              \"label\": \"FLV\",\n              \"value\": \"FLV\"\n            },\n            {\n              \"label\": \"M4V\",\n              \"value\": \"M4V\"\n            },\n            {\n              \"label\": \"MOV\",\n              \"value\": \"MOV\"\n            },\n            {\n              \"label\": \"MP4\",\n              \"value\": \"MP4\"\n            },\n            {\n              \"label\": \"MPG\",\n              \"value\": \"MPG\"\n            },\n            {\n              \"label\": \"WMV\",\n              \"value\": \"WMV\"\n            }\n          ]\n        },\n      ],\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getSortedOptions () {\n          return this.options.map(el => {\n            el.items = _.sortBy(el.items, 'label');\n            return el;\n          })\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: Object,\n        attachmentsAllowChosen: Boolean,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue (key, el) {\n        return _.get(el || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f072ab4-0a87-4fb5-babb-c0b784f50cc7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "58185ce5-692b-4344-b5f7-b23df4b4f638",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.attachmentsAllowChosen",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f072ab4-0a87-4fb5-babb-c0b784f50cc7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "58185ce5-692b-4344-b5f7-b23df4b4f638",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.attachmentsAllowChosen",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-files-types\">\n  <or-select-expression\n    ref=\"selectGroups\"\n    label=\"File types\"\n    multiple\n    extendableOptions\n    extendsByLabel\n    hasGroups\n    hasSearch\n    extraGroupLabel=\"Custom file types\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    placeholder=\"Select file types\"\n    :mergeFields=\"mergeFields\"\n    :options=\"getSortedOptions\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    :invalid=\"!getValue(`schema.attachmentsAllowedTypes.notEmpty`, v)\"\n    error=\"File type is required\"\n    v-model=\"computedValue\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f072ab4-0a87-4fb5-babb-c0b784f50cc7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "58185ce5-692b-4344-b5f7-b23df4b4f638",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.attachmentsAllowChosen",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-files-types {\n  .or-select-expression .ui-select__display-selected {\n    background-color: #64b2da;\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-close-button {\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-value .merge-tag {\n    color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "98c9725a-b34e-4050-b755-0fadfd1cbbe6",
                    "data": {
                      "help": "",
                      "label": "Button label",
                      "variable": "geolocationBtn",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Share location",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bbd4208e-e874-4eef-999a-9b2e5f70a538",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "f908fa36-0957-41b6-95f3-771912c08203",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "45851cf1-2099-45fa-aea8-17c81a78a356",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.geolocationBtn, '`').length > 24 && !(_.trim(schema.geolocationBtn, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bbd4208e-e874-4eef-999a-9b2e5f70a538",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "13ff862b-4519-4b3b-b841-debe8ee021aa",
                    "data": {
                      "label": "Set default location",
                      "helpText": "",
                      "variable": "geolocationSetDefault",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "152e4115-9d56-426a-8e59-0d90925e8012",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "152e4115-9d56-426a-8e59-0d90925e8012",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "2fcdfdf5-1e4a-4e2e-9964-d289c5dc0c27",
                    "data": {
                      "label": "Latitude",
                      "helpText": "",
                      "variable": "geolocationLat",
                      "multiline": false,
                      "placeholder": "Add value here",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a50c29f3-cc15-4765-a1f9-99112b2392a5",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "8e3e427a-c9bf-4840-acb0-e39ce1a4d895",
                          "errorMessage": "Latitude is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "ef079717-1be2-43fc-a647-84ce0dce1dd3",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLat, '`')",
                                "valueType": "advanced",
                                "firstValue": "schema.inputComponent",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "ce15b6c1-49f8-4ec9-ae72-7fa876a0b8f3",
                          "errorMessage": "Latitude is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "6b646f8b-bd91-47a5-a5e1-31eb3a7a240d",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLat, '`').match(/^-?[0-9\\.]+$/) && (!_.trim(schema.geolocationLat, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a50c29f3-cc15-4765-a1f9-99112b2392a5",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "af95ab89-8732-4b18-b77d-e4c1d27b3334",
                    "data": {
                      "label": "Longitude",
                      "helpText": "",
                      "variable": "geolocationLng",
                      "multiline": false,
                      "placeholder": "Add value here",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "809ea92e-184d-42a6-b867-437dcffba82d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "8394bc79-0f7c-4398-ac46-1e669bb4e4a2",
                          "errorMessage": "Longitude is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "0299ca3a-b222-4a5e-8efe-f9e3dac33467",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLng, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "caaeb28c-0523-4c32-9b19-cb12694c6c83",
                          "errorMessage": "Longitude is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "d3bb04c8-6310-4146-a456-b19cdf40c1c0",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLng, '`').match(/^-?[0-9\\.]+$/) && (!_.trim(schema.geolocationLng, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "809ea92e-184d-42a6-b867-437dcffba82d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "27a321f0-2985-4c45-ad70-70f1b53d99e4",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :geolocationLat.sync=\"schema.geolocationLat\"\n  :geolocationLng.sync=\"schema.geolocationLng\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-enogfupbvhmtyrajslzckxwqid",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    data () {\n      return {\n        defaultLocationWindow: null\n      }\n    },\n    props : {\n      geolocationLat: String,\n      geolocationLng: String,\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    mounted () {\n      window.addEventListener('message', this.frameMessageHandler, false);\n    },\n    methods: {\n      openMapWindow () {\n        const url = `${this.$flow.chatUiUrl}/set-pin`\n        // const url = `http://localhost:8090/set-pin`\n        try {\n          this.defaultLocationWindow = window.open(url, 'default_location', 'width=600,height=600,top=0');\n        } catch (e) {\n          console.warn(e);\n          this.defaultLocationWindow.close();\n          this.defaultLocationWindow = window.open(url, 'default_location', 'width=600,height=600,top=0');\n        }\n      },\n      frameMessageHandler (e) {\n        if (e.data === 'PREVIEW_LOADED' && this.defaultLocationWindow) {\n          this.sendMessageToPreview();\n        }\n        if (e.data.type === 'DATA_FROM_FRAME' && this.defaultLocationWindow) {\n          this.defaultLocationWindow.close();\n          const {lat, lng} = _.get(e, 'data.data.data')\n          this.$emit('update:geolocationLat', '`' + lat + '`')\n          this.$emit('update:geolocationLng', '`' + lng + '`')\n        }\n      },\n      sendMessageToPreview () {\n        if (!this.defaultLocationWindow) return;\n        \n        this.defaultLocationWindow.postMessage({\n          type: 'changeSendBehavior',\n          value: 'to-parent-window'\n        }, '*');\n        \n        this.defaultLocationWindow.postMessage({\n          type: 'messageData',\n          message: {\n            message: 'Set default pin position when user blocks geolocation tracking.',\n            medias: [],\n            answerComponent: {\n              component: 'rwc-location',\n              vBind: {\n                buttonLabel: 'Pick location',\n                defaultLat: this.geolocationLat,\n                defaultLng: this.geolocationLng\n              },\n              showComponentInMessage: true\n            }\n          }\n        }, '*');\n          \n        const config = _.get(this.conversation, 'meta.lookAndFeel')\n        this.defaultLocationWindow.postMessage({\n          type: 'chatConfig',\n          config: {\n            ...config\n          }\n        }, '*');\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "56932013-35b1-45c8-8a12-f712ec1ce384",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "56932013-35b1-45c8-8a12-f712ec1ce384",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-button color=\"primary\" type=\"secondary\" :disabled=\"readonly\" @click=\"openMapWindow\">\n    Set on map\n  </or-button>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "56932013-35b1-45c8-8a12-f712ec1ce384",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "6533116d-a17a-4482-9d64-a071fc43b337",
                    "data": {
                      "help": "Suggested length is up to 24 chars.",
                      "label": "Button label",
                      "variable": "signatureBtn",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "039efce4-0b91-41b1-a89e-8c0c9f98201d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'signature')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "063abe78-52a1-4798-ad46-7b8d96a2e7c3",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "74d8949f-022e-453e-b747-84287ae194f2",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.signatureBtn, '`').length > 24  && (!_.trim(schema.signatureBtn, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "98fc0c16-1f43-4f0f-bd3e-6109c168e252",
                          "errorMessage": "Button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "7cd340ee-a255-4b3b-8b03-7f86d93a87a5",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.signatureBtn, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "039efce4-0b91-41b1-a89e-8c0c9f98201d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'signature')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "b3f6dc77-c8b4-4c7e-a7f0-af132ac23797",
                    "data": {
                      "help": "",
                      "label": "Submit button label",
                      "variable": "ratingSubmitLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Submit",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "15",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ebb0e7fd-c7fd-414b-aed9-bb45b9ea0e3f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "e26630a5-1151-4ddd-912c-31fe2d93ae21",
                          "errorMessage": "Submit button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "eb8cb334-6ed7-41e5-966e-f3e061e692e3",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.ratingSubmitLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "schema.ratingSubmitLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "d7dcd388-d394-46a9-9212-fad4bc2e8fa4",
                          "errorMessage": "Limit is exceeded, text will be truncated",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a644df01-7ade-4e21-80eb-d6abd4aa063e",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.ratingSubmitLabel, '`').length > 15",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "e5987dd1-de95-4f7c-9ff2-df8e5bdd4f17",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.ratingSubmitLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ebb0e7fd-c7fd-414b-aed9-bb45b9ea0e3f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "fe65690d-7e93-4565-b10d-dd13da3c53e9",
                    "data": {
                      "help": "",
                      "label": "Cancel button label",
                      "variable": "ratingDiscardLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. No, thanks",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "15",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4b65f326-5907-47b6-92b6-59b79b5061cf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "87a40e67-acc7-47e3-a5e0-24389faa5fd7",
                          "errorMessage": "Cancel button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e2ced27c-1ab5-4935-b24d-ddfc071a926f",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.ratingDiscardLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "750dbb28-6f5c-446e-800c-95a789855d85",
                          "errorMessage": "Limit is exceeded, text will be truncated",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "d1c63520-d4fd-4a18-a4c4-2773bf5f4843",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.ratingDiscardLabel, '`').length > 15",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "1761f315-7c06-46c2-be82-d1743ea3b02e",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.ratingDiscardLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4b65f326-5907-47b6-92b6-59b79b5061cf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "f7d99281-32ba-4a60-b16f-4a7eda027ed6",
                    "data": {
                      "label": "Input for feedback",
                      "helpText": "",
                      "variable": "rateInput",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cf2adfb-ed5e-42b3-9bef-e71834cccc13",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cf2adfb-ed5e-42b3-9bef-e71834cccc13",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "6ccfcfe1-5979-489b-a2fc-2f3a1c47a5a4",
                    "data": {
                      "help": "",
                      "label": "Placeholder for feedback input",
                      "variable": "ratePlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "30",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8addf5b9-d7ab-462f-9f13-6686aafe7736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b3f9d37e-e064-4895-a8e1-83f6d58519de",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.rateInput",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "fd14d99d-0dd4-4cdc-ba47-4f8839b9c4a0",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e561cdc0-4095-455c-83a5-19584852227e",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.ratePlaceholder, '`').length > 30  && (!_.trim(schema.ratePlaceholder, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "schema.ratePlaceholder",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8addf5b9-d7ab-462f-9f13-6686aafe7736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b3f9d37e-e064-4895-a8e1-83f6d58519de",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.rateInput",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "71257ce1-77d0-410b-907a-5faf24fa7895",
                    "data": {
                      "help": "",
                      "label": "Submit button  label",
                      "variable": "creditBtnLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Submit",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad7294e2-8b73-405c-8dae-f9776a104a3b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "a427e102-a160-47ac-853c-b1128c4d0f20",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "58e4e7e4-c74a-45d7-8282-42763143dfc0",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.creditBtnLabel, '`').length > 24 && !_.trim(schema.creditBtnLabel, '`').match(/\\$\\{.+?\\}/)",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "a891cd10-e633-48c3-867f-7f88a3a267b2",
                          "errorMessage": "Submit button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "c3b8d15f-4eff-45ce-a124-15965e79d762",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.creditBtnLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad7294e2-8b73-405c-8dae-f9776a104a3b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "c15c9e1d-2741-48bf-9242-46083a90f19a",
                    "data": {
                      "help": "",
                      "label": "Cancel button label",
                      "variable": "creditCancelBtnLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. No, thanks",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength% char",
                      "maxCharLength": "24",
                      "disablePopover": false,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f9f92ab-9959-4586-beff-ac733679536a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "28ea4226-994c-454f-846a-9d1f62e1777e",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e50c4afb-c751-41f1-90a9-dd0948785668",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.creditCancelBtnLabel, '`').length > 24 && !_.trim(schema.creditCancelBtnLabel, '`').match(/\\$\\{.+?\\}/)",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "9c3f8e97-9af2-46a5-b340-55575e7755ea",
                          "errorMessage": "Cancel button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "52411a3a-d1e5-44df-85fc-9e9ac593ced1",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.creditCancelBtnLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f9f92ab-9959-4586-beff-ac733679536a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "990142bd-eec5-438b-8d0f-b21902a56294",
                    "data": {
                      "help": "Suggested length is up to 400 chars",
                      "label": "Terms and Сonditions checkbox",
                      "variable": "creditTermsLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. %I agree with Terms and Conditions%",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "info",
                          "content": "Wrap text in '%' to produce a link",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "left middle"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "400",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3e1c68a2-fe97-4e55-8068-ad8c82950961",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, \"`\"), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "tooltip",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3e1c68a2-fe97-4e55-8068-ad8c82950961",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, \"`\"), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "afe295b4-0e99-4356-a6a6-a94713a4cb7d",
                    "data": {
                      "data": "{\n  \"creditTerms\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `[]`;\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  creditTerms: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.creditTerms\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ycunfwdgqtvjmihoszkelrabpx",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: [],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              console.log(value)\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f0debfaf-642a-40b7-bd8d-71156d46290b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f0debfaf-642a-40b7-bd8d-71156d46290b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.creditTerms.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add Terms and Сonditions from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f0debfaf-642a-40b7-bd8d-71156d46290b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c08636c7-67c4-42d4-adbd-4e6d4cba7439",
                    "data": {
                      "data": "{\n  \"videoSrc\": {},\n  \"videoTotalDuration\": 0,\n  \"videoUsedLink\": false\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `[]`;\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  videoSrc: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.videoSrc\" \n  :videoTotalDuration.sync=\"schema.videoTotalDuration\"\n  :videoUsedLink.sync=\"schema.videoUsedLink\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-maztosbhkqgdwvjfcpynxlurie",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['mov', 'MOV', 'mp4', 'MP4'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      },\n      value: {\n        handler(nv) {\n          if (!(_.get(this.value, '[0].location') || _.get(this.value, 'location'))) {\n            this.$emit('update:videoTotalDuration', 0)\n          }\n          const isLinksUsed = this.value.hasOwnProperty('linkUrl');\n          if (isLinksUsed) {\n            this.$emit('update:videoUsedLink', true)\n          } else {\n            this.$emit('update:videoUsedLink', false)\n          }\n        },\n        immediate: true,\n        deep: true\n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          const isLinksUsed = this.value.every(el => el.linkUrl);\n          return isLinksUsed\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        },\n        getVideoSrc () {\n          return _.get(this.value, '[0].location') || _.get(this.value, 'location');\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        videoTotalDuration: Number,\n        videoUsedLink: Boolean,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      },\n      onVideoLoad (e) {\n        this.$emit('update:videoTotalDuration', e.target.duration)\n      },\n      onVideoError () {\n        this.$emit('update:videoTotalDuration', 0)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "80e0e26e-98e4-41d6-a2c8-d728f7f005e1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "80e0e26e-98e4-41d6-a2c8-d728f7f005e1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <div class=\"hidden\">\n    <video \n      :src=\"getVideoSrc\"\n      @loadedmetadata=\"onVideoLoad\"\n      @onerror=\"onVideoError\"\n    ></video>\n  </div>\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Video url\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.videoSrc.$invalid`, v)\"\n      error=\"Add video url or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add video from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "80e0e26e-98e4-41d6-a2c8-d728f7f005e1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n.rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.hidden {\n  position: absolute;\n  left: -100000000px;\n  top: -1000000px;\n  opacity: 0;\n  visibility: hidden;\n  width: 0;\n  height: 0;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "00fdf686-ee1c-48e5-a124-a60eb2f0b156",
                    "data": {
                      "data": "{\n  \"videoPoster\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `[]`;\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  videoPoster: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.videoPoster\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-tnlcjxspvgdirbuozmwehkqfay",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n        \n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              console.log(value)\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "556c697c-507d-4f62-a2f5-aa57fb6efb5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "556c697c-507d-4f62-a2f5-aa57fb6efb5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Poster url\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.videoPoster.$invalid`, v)\"\n      error=\"Add poster url or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add poster from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "556c697c-507d-4f62-a2f5-aa57fb6efb5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "2d5fbe71-b4b9-4d44-aa97-b9a31a4d40ce",
                    "data": {
                      "data": "{\n  \"videoStartTimeTimestring\": \"``\",\n  \"videoStartTime\": \"0\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n   if (/\\$\\{.+?\\}/.test(data)) return data;\n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  videoStartTimeTimestring: {\n    notValid (value) {\n      if (!_.trim(value, '`')) return true\n      if (_.trim(value, '`').match(/^\\s*$/)) return false\n      try {\n        libs.timestring(value, 'ms')\n        if (_.trim(value, '`') == 0) return true\n        if (!value) return true\n        if (/\\$\\{/.test(value)) return true\n        if(!(value.slice(1, -1) || '').match(/^[a-z0-9\\s]+$/gi)) return false\n        if ((value.slice(1, -1) || '').match(/\\`\\$\\\"\\#\\?\\\\\\!\\@\\#\\$\\%\\^\\&\\*\\)\\_\\+\\=\\-\\'\\]\\/\\[\\{\\}/gi)) return false\n        const regex = /^(([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|60)\\s?[ss].*|([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|60)\\s?[mM].*|([0-9]|[0-3][0-9]|4[0-8])\\s?[hH].*|(01-9]|[0-9]\\w+?)\\s?[dD].*)$/;\n        return regex.test(value.slice(1, -1));\n      } catch (e) {\n        if (/\\$\\{/.test(value)) return true\n        return false\n      }\n    },\n    moreThanDuration (value) {\n      if (this.schema.videoUsedLinks || !this.schema.videoTotalDuration || !_.trim(value, '`')) return true\n      try {\n        const val = libs.timestring(value, 'ms')\n        const total = this.schema.videoTotalDuration * 1000\n        return val <= total\n      } catch (e) {\n        console.warn(e)\n        return false\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.videoStartTimeTimestring\"\n  :videoStartTime.sync=\"schema.videoStartTime\"\n  :videoTotalDuration=\"schema.videoTotalDuration\"\n  :videoUsedLink=\"schema.videoUsedLink\"\n  :videoSrc=\"schema.videoSrc\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-lkxzsjidochaebpqtyrwnfvgmu",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) {\n              this.$emit('input', value);\n              \n              let val = 0\n              try {\n                val = libs.timestring(value, 'ms')\n              } catch (e) {\n                console.warn(e)\n              }\n              \n              this.$emit('update:videoStartTime', val)\n            }\n        },\n        getError() {\n          if (!this.getValue(`schema.videoStartTimeTimestring.notValid`, this.v)) {\n            return 'Start time is invalid timestring.'\n          }\n          if (!this.getValue(`schema.videoStartTimeTimestring.moreThanDuration`, this.v)) {\n            return 'Start time must be less than video duration.'\n          }\n        },\n        getVideoDuration () {\n          return this.videoTotalDuration.toFixed(1)\n        }\n    },\n    props : {\n        videoSrc: {\n          type: Object,\n          default: () => ({})\n        },\n        videoUsedLink: Boolean,\n        value : {\n            type : String,\n            default : ''\n        },\n        videoTotalDuration: {\n          type: [Number, String],\n          default: 0\n        },\n        videoStartTime: {\n          type: [String, Number],\n          default: 0\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        v: Object,\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, val) {\n        return _.get(val || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8c0458d6-b652-436e-936d-6c35e40a5b75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8c0458d6-b652-436e-936d-6c35e40a5b75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-text-expression\n    label=\"Video start time\"\n    v-model=\"computedValue\"\n    :mergeFields=\"mergeFields\"\n    :stepId=\"stepId\"\n    :steps=\"steps\"\n    placeholder=\"E.g. 1m 20s\"\n    :helpText=\"videoTotalDuration ? `Video duration is ${getVideoDuration}s` : ''\"\n    :invalid=\"getValue(`schema.videoStartTimeTimestring.$invalid`, v)\"\n    :error=\"getError\"\n    :readonly=\"readonly\"\n  ></or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8c0458d6-b652-436e-936d-6c35e40a5b75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5a1c1632-aa94-4d16-a292-3c3a5ef533fd",
                    "data": {
                      "help": "",
                      "label": "Button label",
                      "variable": "videoBtnLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "849776f9-323d-4f6d-92b8-d135cbe29d58",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "bdfc5088-ca40-4aad-ad9f-295325a99988",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "410017ed-e0c3-409d-8f6c-646e62529dc7",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.videoBtnLabel, '`').length > 24",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "224829fe-96ce-43aa-b349-b9689ed62184",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.videoBtnLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "849776f9-323d-4f6d-92b8-d135cbe29d58",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "4c8504d3-5f8e-4420-96c1-c802aa5dfda0",
                    "data": {
                      "label": "Autoplay",
                      "helpText": "",
                      "variable": "videoAutoplay",
                      "trueValue": "",
                      "falseValue": "",
                      "helpTextURL": "",
                      "isHtmlLabel": false,
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "helpTextOption": "none",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b7dca392-2b85-47fa-97ff-0cbd98d5e14a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "iconHelpTextOption": "none",
                      "forceCheckCondition": {
                        "label": "`Force check`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "forceUncheckCondition": {
                        "label": "`Force uncheck`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b7dca392-2b85-47fa-97ff-0cbd98d5e14a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCheckBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Checkbox",
                    "compiled": {},
                    "component": "formCheckBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCheckBox\"]"
                    ]
                  },
                  {
                    "id": "6eb95593-18dc-456a-84b9-63c0dab2c5e8",
                    "data": {
                      "label": "Show player in chat when user reply is submitted",
                      "helpText": "",
                      "variable": "videoShowInThread",
                      "trueValue": "",
                      "falseValue": "",
                      "helpTextURL": "",
                      "isHtmlLabel": false,
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "helpTextOption": "none",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a063fc5d-a772-488d-80da-33f37c3862c1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "iconHelpTextOption": "none",
                      "forceCheckCondition": {
                        "label": "`Force check`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "forceUncheckCondition": {
                        "label": "`Force uncheck`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a063fc5d-a772-488d-80da-33f37c3862c1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCheckBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Checkbox",
                    "compiled": {},
                    "component": "formCheckBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCheckBox\"]"
                    ]
                  },
                  {
                    "id": "23cd2be4-dd57-4e88-82ef-4b5355a7c275",
                    "data": {
                      "help": "",
                      "label": "Button label",
                      "variable": "scheduleButtonLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add value here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "80",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5d81a736-c0ea-4d9f-8c2e-7c3dfad72ae0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5d81a736-c0ea-4d9f-8c2e-7c3dfad72ae0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "d2b3a472-236b-486a-a5eb-11bc0dddf78d",
                    "data": {
                      "header": "Options",
                      "headingType": "h4",
                      "isHtmlLabel": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec537613-2fe5-4f67-94e4-1e984441b408",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec537613-2fe5-4f67-94e4-1e984441b408",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formHeader",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Header",
                    "compiled": {},
                    "component": "formHeader",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formHeader\"]"
                    ]
                  },
                  {
                    "id": "95075e34-f695-478e-ad12-3305f1056261",
                    "data": {
                      "data": "{\n  \"scheduleOptionItems\": [\n    {\n      \"label\": \"``\",\n      \"value\": \"``\"\n    }\n  ]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  scheduleOptionItems: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`')\n      },\n      emptyDuration (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.value, '`')\n      },\n      labelOutOfLength (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`').length <= 400\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.scheduleOptionItems\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-lqsabfkrgmntcowxypiezuhvdj",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getDurations () {\n          return ['30 min', '1 hour', '1,5 hour', '2 hours', '2,5 hours', '3 hours', '3,5 hours', '4 hours']\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.scheduleOptionItems.$each[${index}].emptyLabel`, this.v)) {\n          return 'Label is required.'\n        } \n        if (!this.getValue(`schema.scheduleOptionItems.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "767360b0-d534-4cc6-a956-64379193799d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "767360b0-d534-4cc6-a956-64379193799d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    :canDeleteItems=\"computedValue.length > 1\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option name ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"100\"\n          help=\"Suggested length is up to 100 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.scheduleOptionItems.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.scheduleOptionItems.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-select\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :disabled=\"readonly\"\n          :label=\"`Option duration ${item.index + 1}`\"\n          placeholder=\"Add duration here\"\n          :options=\"getDurations\"\n          :invalid=\"!getValue(`schema.scheduleOptionItems.$each[${item.index}].emptyDuration`, v)\"\n          error=\"Duration is required.\"\n        ></or-select>\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add option</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "767360b0-d534-4cc6-a956-64379193799d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n    background: rgb(246, 246, 246);\n    padding: 16px;\n    border-radius: 4px;\n    .remove-bubble .wrapper .message-input,\n    .or-editable-wrapper {\n      background: #fff;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      background: #fff;\n    }\n    \n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "4e16d80a-9afa-4ba5-b91e-37a5c335134f",
                    "data": {
                      "label": "Allow multiselect",
                      "helpText": "",
                      "variable": "scheduleAllowMultiselect",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8e17cb05-410e-4977-b25d-1bcfc643396f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8e17cb05-410e-4977-b25d-1bcfc643396f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "e7232c7b-2d61-4155-827d-080f9d0ac42b",
                    "data": {
                      "label": "Options quantity",
                      "options": [
                        {
                          "label": "2",
                          "value": "2",
                          "vforkey": "7c91a3d1-cf9c-4ad2-82fa-55f1ec097a1a"
                        },
                        {
                          "label": "3",
                          "value": "3",
                          "vforkey": "12d1b973-76ab-468f-a927-866a606fab0d"
                        },
                        {
                          "label": "4",
                          "value": "4",
                          "vforkey": "95e0935c-d006-49cd-ae59-e4a44b4be993"
                        },
                        {
                          "label": "5",
                          "value": "5",
                          "vforkey": "2bf43de2-bc07-47f0-90d5-af59aadf299f"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "scheduleMultiselectQuantity",
                      "placeholder": "Select Field",
                      "defaultValue": "3",
                      "allowCodeMode": true,
                      "renderCondition": "_.trim(schema.inputComponent, '`') === 'schedule' && schema.scheduleAllowMultiselect",
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formSelect",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (simple)",
                    "compiled": {},
                    "component": "formSelect",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelect\"]"
                    ]
                  },
                  {
                    "id": "f1d5a2e3-d0e7-4f47-a9e1-2cfcfcf32502",
                    "data": {
                      "header": "Working hours",
                      "headingType": "h4",
                      "isHtmlLabel": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f590434b-3f84-4da3-8bba-02b77202f78b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f590434b-3f84-4da3-8bba-02b77202f78b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formHeader",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Header",
                    "compiled": {},
                    "component": "formHeader",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formHeader\"]"
                    ]
                  },
                  {
                    "id": "deb62bd0-c110-47f6-b168-a8cef72408f5",
                    "data": {
                      "data": "{\n  \"workingHours\": {\n    \"timezone\": { \"id\": \"1\", \"zone\": \"GMT+00:00\" },\n    \"timeFormat\": \"12\",\n    \"from\": null,\n    \"to\": null\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.workingHours\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-hlurzvdapqicyntbgejswmofxk",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getTimezones () {\n          return [\n            {label: 'GMT+00:00 (GMT) Greenwich Mean Time', value: {id: '1', zone: 'GMT+00:00'}},\n            {label: 'GMT+00:00 (UTC) Universal Coordinated Time', value: {id: '2', zone: 'GMT+00:00'}},\n            {label: 'GMT+01:00 (ECT) European Central Time', value: {id: '3', zone: 'GMT+01:00'}},\n            {label: 'GMT+02:00 (EET) Eastern European Time', value: {id: '4', zone: 'GMT+02:00'}},\n            {label: 'GMT+02:00 (ART) (Arabic) Egypt Standard Time', value: {id: '5', zone: 'GMT+02:00'}},\n            {label: 'GMT+03:00 (EAT) Eastern African Time', value: {id: '6', zone: 'GMT+03:00'}},\n            {label: 'GMT+03:30 (MET) Middle East Time', value: {id: '7', zone: 'GMT+03:30'}},\n            {label: 'GMT+04:00 (NET) Near East Time', value: {id: '8', zone: 'GMT+04:00'}},\n            {label: 'GMT+05:00 (PLT) Pakistan Lahore Time', value: {id: '9', zone: 'GMT+05:00'}},\n            {label: 'GMT+05:30 (IST) India Standard Time', value: {id: '10', zone: 'GMT+05:30'}},\n            {label: 'GMT+06:00 (BST) Bangladesh Standard Time', value: {id: '11', zone: 'GMT+06:00'}},\n            {label: 'GMT+07:00 (VST) Vietnam Standard Time', value: {id: '12', zone: 'GMT+07:00'}},\n            {label: 'GMT+08:00 (CTT) China Taiwan Time', value: {id: '13', zone: 'GMT+08:00'}},\n            {label: 'GMT+09:00 (JST) Japan Standard Time', value: {id: '14', zone: 'GMT+09:00'}},\n            {label: 'GMT+09:30 (ACT) Australia Central Time', value: {id: '15', zone: 'GMT+09:30'}},\n            {label: 'GMT+10:00 (AET) Australia Eastern Time', value: {id: '16', zone: 'GMT+10:00'}},\n            {label: 'GMT+11:00 (SST) Solomon Standard Time', value: {id: '17', zone: 'GMT+11:00'}},\n            {label: 'GMT+12:00 (NST) New Zealand Standard Time', value: {id: '18', zone: 'GMT+12:00'}},\n            {label: 'GMT-11:00 (MIT) Midway Islands Time', value: {id: '19', zone: 'GMT-11:00'}},\n            {label: 'GMT-10:00 (HST) Hawaii Standard Time', value: {id: '20', zone: 'GMT-10:00'}},\n            {label: 'GMT-09:00 (AST) Alaska Standard Time', value: {id: '21', zone: 'GMT-09:00'}},\n            {label: 'GMT-08:00 (PST) Pacific Standard Time', value: {id: '22', zone: 'GMT-08:00'}},\n            {label: 'GMT-07:00 (PNT) Phoenix Standard Time', value: {id: '23', zone: 'GMT-07:00'}},\n            {label: 'GMT-07:00 (MST) Mountain Standard Time', value: {id: '24', zone: 'GMT-07:00'}},\n            {label: 'GMT-06:00 (CST) Central Standard Time', value: {id: '25', zone: 'GMT-06:00'}},\n            {label: 'GMT-05:00 (EST) Eastern Standard Time', value: {id: '26', zone: 'GMT-05:00'}},\n            {label: 'GMT-05:00 (IET) Indiana Eastern Standard Time', value: {id: '27', zone: 'GMT-05:00'}},\n            {label: 'GMT-04:00 (PRT) Puerto Rico and US Virgin Islands Time', value: {id: '28', zone: 'GMT-04:00'}},\n            {label: 'GMT-03:30 (CNT) Canada Newfoundland Time', value: {id: '29', zone: 'GMT-03:30'}},\n            {label: 'GMT-03:00 (AGT) Argentina Standard Time', value: {id: '30', zone: 'GMT-03:00'}},\n            {label: 'GMT-03:00 (BET) Brazil Eastern Time', value: {id: '31', zone: 'GMT-03:00'}},\n            {label: 'GMT-01:00 (CAT) Central African Time', value: {id: '32', zone: 'GMT-01:00'}}\n          ]\n          // return [\n          //   {label: '(GMT-12:00) International Date Line West', value: {id: '1', zone: 'GMT-12:00'}},\n          //   {label: '(GMT-11:00) Midway Island, Samoa', value: {id: '2', zone: 'GMT-11:00'}},\n          //   {label: '(GMT-10:00) Hawaii', value: {id: '3', zone: 'GMT-10:00'}},\n          //   {label: '(GMT-09:00) Alaska', value: {id: '4', zone: 'GMT-9:00'}},\n          //   {label: '(GMT-08:00) Pacific Time (US & Canada)', value: {id: '5', zone: 'GMT-8:00'}},\n          //   {label: '(GMT-08:00) Tijuana, Baja California', value: {id: '6', zone: 'GMT-8:00'}},\n          //   {label: '(GMT-07:00) Arizona', value: {id: '7', zone: 'GMT-7:00'}},\n          //   {label: '(GMT-07:00) Chihuahua, La Paz, Mazatlan', value: {id: '8', zone: 'GMT-7:00'}},\n          //   {label: '(GMT-07:00) Mountain Time (US & Canada)', value: {id: '9', zone: 'GMT-7:00'}},\n          //   {label: '(GMT-06:00) Central America', value: {id: '10', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-06:00) Central Time (US & Canada)', value: {id: '11', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-06:00) Guadalajara, Mexico City, Monterrey', value: {id: '12', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-06:00) Saskatchewan', value: {id: '13', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-05:00) Bogota, Lima, Quito, Rio Branco', value: {id: '14', zone: 'GMT-5:00'}},\n          //   {label: '(GMT-05:00) Eastern Time (US & Canada)', value: {id: '15', zone: 'GMT-5:00'}},\n          //   {label: '(GMT-05:00) Indiana (East)', value: {id: '16', zone: 'GMT-5:00'}},\n          //   {label: '(GMT-04:00) Atlantic Time (Canada)', value: {id: '17', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-04:00) Caracas, La Paz', value: {id: '18', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-04:00) Manaus', value: {id: '19', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-04:00) Santiago', value: {id: '20', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-03:30) Newfoundland', value: {id: '21', zone: 'GMT-3:30'}},\n          //   {label: '(GMT-03:00) Brasilia', value: {id: '22', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-03:00) Buenos Aires, Georgetown', value: {id: '23', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-03:00) Greenland', value: {id: '24', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-03:00) Montevideo', value: {id: '25', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-02:00) Mid-Atlantic', value: {id: '26', zone: 'GMT-2:00'}},\n          //   {label: '(GMT-01:00) Cape Verde Is.', value: {id: '27', zone: 'GMT-1:00'}},\n          //   {label: '(GMT-01:00) Azores', value: {id: '28', zone: 'GMT-1:00'}},\n          //   {label: '(GMT+00:00) Casablanca, Monrovia, Reykjavik', value: {id: '29', zone: 'GMT+00:00'}},\n          //   {label: '(GMT+00:00) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London', value: {id: '30', zone: 'GMT+00:00'}},\n          //   {label: '(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', value: {id: '31', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', value: {id: '32', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) Brussels, Copenhagen, Madrid, Paris', value: {id: '33', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb', value: {id: '34', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) West Central Africa', value: {id: '35', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+02:00) Amman', value: {id: '36', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Athens, Bucharest, Istanbul', value: {id: '37', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Beirut', value: {id: '38', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Cairo', value: {id: '39', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Harare, Pretoria', value: {id: '40', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius', value: {id: '41', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Jerusalem', value: {id: '42', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Minsk', value: {id: '43', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Windhoek', value: {id: '44', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+03:00) Kuwait, Riyadh, Baghdad', value: {id: '45', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:00) Moscow, St. Petersburg, Volgograd', value: {id: '46', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:00) Nairobi', value: {id: '47', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:00) Tbilisi', value: {id: '48', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:30) Tehran', value: {id: '49', zone: 'GMT+03:30'}},\n          //   {label: '(GMT+04:00) Abu Dhabi, Muscat', value: {id: '50', zone: 'GMT+04:00'}},\n          //   {label: '(GMT+04:00) Baku', value: {id: '51', zone: 'GMT+04:00'}},\n          //   {label: '(GMT+04:00) Yerevan', value: {id: '52', zone: 'GMT+04:00'}},\n          //   {label: '(GMT+04:30) Kabul', value: {id: '53', zone: 'GMT+04:30'}},\n          //   {label: '(GMT+05:00) Yekaterinburg', value: {id: '54', zone: 'GMT+05:00'}},\n          //   {label: '(GMT+05:00) Islamabad, Karachi, Tashkent', value: {id: '55', zone: 'GMT+05:00'}},\n          //   {label: '(GMT+05:30) Sri Jayawardenapura', value: {id: '56', zone: 'GMT+05:30'}},\n          //   {label: '(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi', value: {id: '57', zone: 'GMT+05:30'}},\n          //   {label: '(GMT+05:45) Kathmandu', value: {id: '58', zone: 'GMT+05:45'}},\n          //   {label: '(GMT+06:00) Almaty, Novosibirsk', value: {id: '59', zone: 'GMT+06:00'}},\n          //   {label: '(GMT+06:00) Astana, Dhaka', value: {id: '60', zone: 'GMT+06:00'}},\n          //   {label: '(GMT+06:30) Yangon (Rangoon)', value: {id: '61', zone: 'GMT+06:30'}},\n          //   {label: '(GMT+06:30) Yangon (Rangoon)', value: {id: '62', zone: 'GMT+06:30'}},\n          //   {label: '(GMT+07:00) Krasnoyarsk', value: {id: '63', zone: 'GMT+07:00'}},\n          //   {label: '(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi', value: {id: '64', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Kuala Lumpur, Singapore', value: {id: '65', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Irkutsk, Ulaan Bataar', value: {id: '66', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Perth', value: {id: '67', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Taipei', value: {id: '68', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+09:00) Osaka, Sapporo, Tokyo', value: {id: '69', zone: 'GMT+09:00'}},\n          //   {label: '(GMT+09:00) Seoul', value: {id: '70', zone: 'GMT+09:00'}},\n          //   {label: '(GMT+09:00) Yakutsk', value: {id: '71', zone: 'GMT+09:00'}},\n          //   {label: '(GMT+09:30) Adelaide', value: {id: '72', zone: 'GMT+09:30'}},\n          //   {label: '(GMT+09:30) Darwin', value: {id: '73', zone: 'GMT+09:30'}},\n          //   {label: '(GMT+10:00) Brisbane', value: {id: '74', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Canberra, Melbourne, Sydney', value: {id: '75', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Hobart', value: {id: '76', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Guam, Port Moresby', value: {id: '77', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Vladivostok', value: {id: '78', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+11:00) Magadan, Solomon Is., New Caledonia', value: {id: '79', zone: 'GMT+11:00'}},\n          //   {label: '(GMT+12:00) Auckland, Wellington', value: {id: '80', zone: 'GMT+12:00'}},\n          //   {label: '(GMT+12:00) Fiji, Kamchatka, Marshall Is.', value: {id: '81', zone: 'GMT+12:00'}},\n          //   {label: '(GMT+13:00) Nuku\\'alofa', value: {id: '82', zone: 'GMT+13:00'}},\n          // ]\n        },\n        getHours () {\n          return this.computedValue.timeFormat === '24' ?\n            [\n              '00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30',\n              '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30',\n              '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00', '22:30', '23:00', '23:30', '24:00'\n            ]\n            :\n            [\n              '12:00 AM', '12:30 AM', '1:00 AM', '1:30 AM', '2:00 AM','2:30 AM', '3:00 AM', '3:30 AM', '4:00 AM', '4:30 AM', '5:00 AM', '5:30 AM', '6:00 AM', '6:30 AM', '7:00 AM',\n              '7:30 AM', '8:00 AM', '8:30 AM', '9:00 AM', '9:30 AM', '10:00 AM', '10:30 AM', '11:00 AM', '11:30 AM', '12:00',\n              '12:30 PM', '1:00 PM', '1:30 PM', '2:00 PM', '2:30 PM', '3:00 PM', '3:30 PM', '4:00 PM', '4:30 PM', '5:00 PM', '5:30 PM', '6:00 PM', '6:30 PM', '7:00 PM', '7:30 PM',\n              '8:00 PM', '8:30 PM', '9:00 PM', '9:30 PM', '10:00 PM', '10:30 PM', '11:00 PM', '11:30 PM', '12:00 PM'\n            ]\n        }\n    },\n    watch: {\n      'computedValue.timeFormat': {\n        handler () {\n          this.setValue('from', null)\n          this.setValue('to', null)\n        }\n      }\n    },\n    props : {\n        value : {\n            type : Object,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, el) {\n        return _.get(el || this.computedValue, key)\n      },\n      setValue(key, val) {\n        this.$set(this.computedValue, key, val)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d49edcb1-3985-45b6-b23d-b2104c933773",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d49edcb1-3985-45b6-b23d-b2104c933773",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"working-hours\">\n  <or-select \n    label=\"Timezone\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    placeholder=\"Select\"\n    :options=\"getTimezones\"\n    v-model=\"computedValue.timezone\"\n  ></or-select>\n  <or-radio-group \n    :value=\"getValue('timeFormat')\"\n    @input=\"val => setValue('timeFormat', val)\"\n    :options=\"[{label: '12-hour clock', value: '12'}, {label: '24-hour clock', value: '24'}]\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n  >\n    Time format\n  </or-radio-group>\n  <div class=\"row\">\n    <or-select \n      label=\"From\" \n      placeholder=\"Select\" \n      :options=\"getHours\" \n      v-model=\"computedValue.from\"\n      :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    ></or-select>\n    <or-select \n      label=\"To\" \n      placeholder=\"Select\" \n      :options=\"getHours\" \n      v-model=\"computedValue.to\"\n      :readonly=\"readonly\"\n      :disabled=\"readonly\"\n    ></or-select>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d49edcb1-3985-45b6-b23d-b2104c933773",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".working-hours {\n  background: rgb(246, 246, 246);\n  padding: 16px;\n  border-radius: 4px;\n  \n  .ui-select .ui-select__content .ui-select__label .ui-select__display {\n    background: #fff;\n  }\n    \n  .row {\n    display: flex;\n    \n    .ui-select {\n      width: calc(50% - 4px);\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "f6beda56-9477-4cfb-8feb-fcb89110610a",
                    "data": {
                      "header": "Disabled dates and time",
                      "headingType": "h4",
                      "isHtmlLabel": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad65ec71-7746-4bcf-8430-fafbafca211d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad65ec71-7746-4bcf-8430-fafbafca211d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formHeader",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Header",
                    "compiled": {},
                    "component": "formHeader",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formHeader\"]"
                    ]
                  },
                  {
                    "id": "b8def0ff-a683-43b5-a6d0-07deb780afe5",
                    "data": {
                      "label": "Set via function",
                      "helpText": "",
                      "variable": "scheduleDisableByFunction",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b2cecfbe-0e61-4734-a12b-1955a69da6d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b2cecfbe-0e61-4734-a12b-1955a69da6d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "de74182c-e7d9-4e92-8465-62891efc308b",
                    "data": {
                      "label": "Set via merge field",
                      "helpText": "",
                      "variable": "scheduleDisableByMf",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76cd20cd-6b3d-4150-8a11-e3bac5740ee4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76cd20cd-6b3d-4150-8a11-e3bac5740ee4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "f4798f7d-2418-42d2-b637-2d4074cc159d",
                    "data": {
                      "label": "Set manually",
                      "helpText": "",
                      "variable": "scheduleDisableByManually",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9bfe4d10-aee9-4284-9b07-a4ed02f5963d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9bfe4d10-aee9-4284-9b07-a4ed02f5963d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "66676367-0e15-47e8-85d5-661244086f25",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Function to define blocked dates and time slots",
                      "helpText": "",
                      "variable": "scheduleDisableFunction",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b3f1686a-2fb0-4228-8419-d4efb2233819",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "5e051228-2cff-420a-852b-8d891b06a873",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByFunction",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b3f1686a-2fb0-4228-8419-d4efb2233819",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "5e051228-2cff-420a-852b-8d891b06a873",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByFunction",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "1675d76c-3a2b-4187-ba08-06e14a60be97",
                    "data": {
                      "label": "Merge field disabled dates",
                      "helpText": "",
                      "variable": "scheduleDisableMf",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dee4f291-916a-452e-98c4-f32fd6ca2e45",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "e1f5a565-f68b-4b01-b334-d63ba6e484bd",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByMf",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dee4f291-916a-452e-98c4-f32fd6ca2e45",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "e1f5a565-f68b-4b01-b334-d63ba6e484bd",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByMf",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "b6fe07bd-ab11-420b-8a07-c8373909f841",
                    "data": {
                      "variableName": "scheduleDisableManual",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c652c38f-92d6-416c-b9df-f0f79c8e99d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "31376bc0-142f-4551-aab4-22d3c3d51f42",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByManually",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c652c38f-92d6-416c-b9df-f0f79c8e99d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "31376bc0-142f-4551-aab4-22d3c3d51f42",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByManually",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": [
                      "time-schedule",
                      "https://content-assets.onereach.ai/component/time-schedule/0.0.13/index.js"
                    ]
                  },
                  {
                    "id": "8076e42b-0d04-43a5-a229-e50e88a079a3",
                    "data": {
                      "label": "Use function to define user answer",
                      "helpText": "",
                      "variable": "useCustomAnswer",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0dcd6f8b-9aca-42fc-8cb5-bec7fa03126f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0dcd6f8b-9aca-42fc-8cb5-bec7fa03126f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "569c4d1e-b755-456b-bad9-b754491cedb3",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "User answer message",
                      "helpText": "",
                      "variable": "userAnswerFunction",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "return ''",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "28de6b35-d66b-424f-bd6b-da89b4e01629",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useCustomAnswer",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "28de6b35-d66b-424f-bd6b-da89b4e01629",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useCustomAnswer",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "6d94a645-eca3-4440-898a-c51ba8bac80c",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :schema=\"schema\"\n  :conversation=\"schema.conversation\"\n  :rwcContext=\"schema.rwcContext\"\n  :textMessage=\"schema.textMessage\"\n  :textPlaceholder=\"schema.textPlaceholder\"\n  :textInputType=\"schema.textInputType\"\n  :textInputCustomPattern=\"schema.textInputCustomPattern\"\n  :inputComponent=\"schema.inputComponent\"\n  :buttonStyle=\"schema.buttonStyle\"\n  :medias=\"schema.medias\"\n  :cardDescription=\"schema.cardDescription\"\n  :cardBtnLabel=\"schema.cardBtnLabel\"\n  :flow=\"$flow\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-qmzavthwfyrxlsigbpcjkuodne",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        flow: {\n          type: Object,\n          default: () => ({})\n        },\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean\n        },\n        mergeFields: {\n            type: Array\n        },\n        buttonStyle: String,\n        textInputCustomPattern: String,\n        textInputType: String,\n        conversation: Object,\n        rwcContext: {\n          type: Object,\n          default: () => ({})\n        },\n        textMessage: String,\n        inputComponent: String,\n        textPlaceholder: String,\n        schema: Object,\n        cardBtnLabel: String,\n        cardDescription: String,\n        medias: Array,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    mounted () {\n      window.addEventListener('message', this.previewLoadedHandler, false);\n    },\n    data() {\n      return {\n        loading: false,\n        btnDisabled: true,\n        configError: false\n      }\n    },\n    watch: {\n      schema: {\n        handler () { this.sendMessageToPreview() },\n        deep: true\n      },\n      rwcContext: {\n        handler(nv) {\n          this.configError = false\n        },\n        deep: true\n      },\n      'flow.store.state.flow.lastActionTime': {\n        immediate: true,\n        handler () {\n          if(!this.readonly) {\n            this.btnDisabled = false;\n            return;\n          }\n          \n          this.checkIsFlowActive();\n        }\n      }\n    },\n    methods: {\n      async checkIsFlowActive (immediate) {\n        this.loading = true;\n        \n        if (!this.flow.id) {\n          this.btnDisabled = false;\n          return;\n        };\n        \n        try {\n          const deployments = await this.flow.api.deployments.getActiveDeploymentsByFlowId(this.flow.id);\n          this.btnDisabled = deployments.length === 0;        \n        } finally { this.loading = false; }\n      },\n      openPreviewWindow () {\n        const url = `${this.$flow.chatUiUrl}/preview`\n        // const url = `http://localhost:8090/preview`\n        try {\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        } catch (e) {\n          console.warn(e);\n          this.previewWindow.close();\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        }\n      },\n      previewLoadedHandler (e) {\n        if (e.data === 'PREVIEW_LOADED' && this.previewWindow) {\n          this.sendMessageToPreview();\n        }\n      },\n      getReadableMergeTag (value = '', options) {\n        const mergeTagLeftWrapper = _.get(options, 'mergeTagLeftWrapper', '`{');\n        const mergeTagRightWrapper = _.get(options, 'mergeTagRightWrapper', '}`');\n        if (value) {\n          return _.chain(value)\n            .replace(/^[`'\"](.*)[`'\"]$/g, '$1')\n            .replace(/await this\\.mergeFields\\[[`'\"](.*)[`'\"]\\]\\.get\\((.*path: *[`'\"](.*)[`'\"])?.*\\)/g, (str, $1, $2, $3) => `${mergeTagLeftWrapper}${$1}${$3 ? `.${$3}` : ''}${mergeTagRightWrapper}`) // eslint-disable-line max-params\n            .replace(/this\\.get\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}$1${mergeTagRightWrapper}`)\n            .replace(/this\\.session\\.get\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}#session.$1${mergeTagRightWrapper}`)\n            .replace(/await this\\.getShared\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}#shared.$1${mergeTagRightWrapper}`)\n            .replace(/await this\\.getGlobal\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}#global.$1${mergeTagRightWrapper}`)\n            .replace(/this\\.(.+)/, `${mergeTagLeftWrapper}#$1${mergeTagRightWrapper}`)\n            .value();\n        }\n        return '';\n      },\n      mapDataToClient (inputComponent) {\n        const componentName = _.trim(this.inputComponent, '`')\n        const isHasMessage = ['card', 'carousel'].indexOf(componentName) === -1\n        const isHasMedias = ['textFiles'].indexOf(componentName) !== -1\n        let showComponentInMessage = [\n          'schedule',\n          'checkbox', \n          'datepicker', \n          'dropdown', \n          'menu', \n          'radio', \n          'timepicker', \n          'attachments', \n          'geolocation',\n          'slider',\n          'signature',\n          'video'\n        ].indexOf(componentName) !== -1\n        \n        const componentMap = {\n          schedule: {\n            name: 'rwc-scheduler',\n            buttonLabel: 'scheduleButtonLabel',\n            options: 'scheduleOptionItems',\n            allowMultiselect: 'scheduleAllowMultiselect',\n            multiselectQuantity: 'scheduleMultiselectQuantity',\n            workingHours: 'workingHours',\n            disableByFunction: 'scheduleDisableByFunction',\n            disableByMf: 'scheduleDisableByMf',\n            disableByManually: 'scheduleDisableByManually',\n            disableFunction: 'scheduleDisableFunction',\n            disableMf: 'scheduleDisableMf',\n            disableManual: 'scheduleDisableManual'\n          },\n          credit: {\n            name: 'rwc-credit',\n            buttonLabel: 'creditBtnLabel',\n            cancelButtonLabel: 'creditCancelBtnLabel',\n            termsCheckboxLabel: 'creditTermsLabel',\n            termsCheckboxLink: 'creditTerms'\n          },\n          carousel: {\n            name: 'rwc-carousel',\n            options: 'carouselOptions',\n            hasOtherOption: 'carouselHasAlternative',\n            otherOptionData: 'carouselAlternative',\n            submitBtnLabel: 'carouselSubmitBtnLabel',\n            cancelBtnLabel: 'carouselCancelBtnLabel',\n            multiple: 'carouselMultiselect'\n          },\n          checkbox: {\n            name: 'rwc-checkbox-group',\n            options: 'checkboxOptions',\n            defaultValue: 'checkboxDefault'\n          },\n          datepicker: {\n            name: 'rwc-datepicker',\n            outFormat: 'datepickerFormat',\n            startDay: 'datepickerStartsFrom',\n            isBlockedDates: 'datepickerBlockDates',\n            isSuggestedDates: 'datepickerSuggestedDates',\n            blockedOptions: 'datepickerBlockedOptions',\n            suggestedOptions: 'datepickerSuggestedOptions',\n            blockedFunction: 'datepickerBlockedFunc',\n            suggestedFunction: 'datepickerSuggestedFunc'\n          },\n          dropdown: {\n            name: 'rwc-dropdown',\n            options: 'dropdownOptions',\n            dropdownPlaceholder: 'dropdownPlaceholder'\n          },\n          slider: {\n            name: 'rwc-slider',\n            min: 'sliderMin',\n            max: 'sliderMax',\n            step: 'sliderStep',\n            unit: 'sliderUnit',\n            unitPosition: 'sliderUnitPosition',\n            mode: 'sliderType',\n            useCustomLabels: 'sliderUseCustomLabels',\n            labelFunction: 'sliderCustomFunction',\n            options: 'sliderCustomLabels',\n            defaultValue: 'sliderDefaultValue',\n            defaultValueStart: 'sliderDefaultStart',\n            defaultValueEnd: 'sliderDefaultEnd'\n          },\n          signature: {\n            name: 'rwc-signature',\n            btnLabel: 'signatureBtn'\n          },\n          menu: {\n            name: 'rwc-menu',\n            options: 'optionListOptions'\n          },\n          buttons: {\n            name: 'rwc-buttons-list',\n            options: 'optionsButtons'\n          },\n          radio: {\n            name: 'rwc-radio-group',\n            options: 'radioOptions',\n            defaultValue: 'radioDefault'\n          },\n          rate: {\n            name: 'rwc-rate',\n            ratePlaceholder: 'ratePlaceholder',\n            showInput: 'rateInput',\n            ratingSubmitLabel: 'ratingSubmitLabel',\n            ratingDiscardLabel: 'ratingDiscardLabel'\n          },\n          textFiles: {\n            name: 'or-textbox',\n            placeholder: 'textPlaceholder',\n            allowMask: 'textInputAllowMask'\n          },\n          timepicker: {\n            name: 'rwc-timepicker',\n            timeFormat: 'timepickerFormat'\n          },\n          video: {\n            name: 'rwc-video',\n            startTime: 'videoStartTime',\n            autoplay: 'videoAutoplay',\n            button: 'videoBtnLabel',\n            video: 'videoSrc',\n            poster: 'videoPoster'\n          },\n          attachments: {\n            name: 'rwc-attachment',\n            isMulti: 'attachmentsNumber',\n            filesValidation: 'attachmentsAllowChosen',\n            allowedFileTypes: 'attachmentsAllowedTypes'\n          },\n          geolocation: {\n            name: 'rwc-location',\n            buttonLabel: 'geolocationBtn',\n            useDefault: 'geolocationSetDefault',\n            defaultLat: 'geolocationLat',\n            defaultLng: 'geolocationLng'\n          },\n          custom: {\n            name: 'custom',\n            templateType: 'customTemplateType',\n            component: 'customComponent',\n            showBotIcon: 'showBotIcon',\n            scripts: 'customTempalateScripts',\n            autoSubmit: 'autoSubmitCustomTemplate',\n            html: 'customTemplateHtmlCode',\n            javascript: 'customTemplateJavaScriptCode',\n            css: 'customTemplateCSSCode',\n            vars: 'customVariables'\n          }\n        }\n        \n        \n        const answerParams = _.mapValues(componentMap[componentName], (el) => { \n          if (el === 'scheduleDisableManual') {\n            return this.schema[el].map(evt => {\n              return {\n                ...evt,\n                dateFrom: evt.dateFrom ? JSON.stringify(evt.dateFrom) : '',\n                dateTo: evt.dateTo ? JSON.stringify(evt.dateTo) : ''\n              }\n            })\n          }\n          \n          const codeModeValue = _.get(this.schema, `__codeModes.${el}`);\n          \n          return _.isUndefined(codeModeValue) ? this.schema[el] : this.parseCodeModeValue(codeModeValue);\n        });\n        \n        \n        const answerComponent = {\n          component: componentMap[componentName].name,\n          vBind: answerParams,\n          showComponentInMessage\n        }\n        \n        return { answerComponent, isHasMessage, isHasMedias }\n      },\n      async sendMessageToPreview () {\n        if (!this.previewWindow) return;\n        \n        const { answerComponent, isHasMessage, isHasMedias } = this.mapDataToClient(_.trim(this.inputComponent, '`'))\n        \n        \n        if (answerComponent.vBind.component) {\n          try {\n            const result = await new Function(answerComponent.vBind.component)()\n            answerComponent.vBind.component = JSON.stringify(result, function(key, value) {\n              if (typeof value === 'function') {\n                return _.toString(value)\n              } else {\n                return value;\n              }\n            });\n            answerComponent.showComponentInMessage = _.get(result, 'showComponentInMessage');\n            \n            const showComponentInMessageLocal = _.get(result, 'showComponentInMessage');\n      \n            answerComponent.showComponentInMessage = _.isUndefined(showComponentInMessageLocal) ? this.schema.showCustomComponentInMessage : showComponentInMessageLocal;\n          } catch (e) {\n            console.warn(e)\n            answerComponent.vBind.component = \"\"\n          }\n          \n          // console.log('COMP', answerComponent.vBind.component)\n          // answerComponent.vBind.component = answerComponent.vBind.component.toString()\n          // console.log('COMP', answerComponent.vBind.component)\n          // answerComponent.vBind.component = answerComponent.vBind.component.replace(/{\\n? * ?path.*\\n*.*}/gi, (match) => {\n          //   return match.replace(/\\n */gi, '')\n          // })\n          \n          // const strWithoutMergeTags = this.getReadableMergeTag(answerComponent.vBind.component)\n          \n          // answerComponent.vBind.component = JSON.stringify(new Function(strWithoutMergeTags).call(this), function(key, value) {\n          //   if (typeof value === 'function') {\n          //     return _.toString(value)\n          //   } else {\n          //     return value;\n          //   }\n          // });\n          \n          // if (this.inputComponent === '`custom`') {\n          //   answerComponent.showComponentInMessage = _.get(JSON.parse(answerComponent.vBind.component), 'showComponentInMessage')\n          //   answerComponent.waitForAnswer = _.get(JSON.parse(answerComponent.vBind.component), 'waitForAnswer')\n          // }\n        }\n        \n        if (this.inputComponent !== '`textFiles`') {\n          answerComponent.vBind.allowMask = false\n        }\n        \n        const codeModeTextMessageValue = _.get(this.schema, '__codeModes.textMessage');\n        const codeModeMediasValue = _.get(this.schema, '__codeModes.medias');\n        const codeModeSuggestionsValue = _.get(this.schema, '__codeModes.autoSuggestionOptionsList');\n        const codeModeSuggestionType = _.get(this.schema, '__codeModes.autoSuggestionType');\n        const codeModeSuggestionsFromMergeField = _.get(this.schema, '__codeModes.autoSuggestionOptionsMergeField');\n        const codeModeIsSuggestionInput = _.get(this.schema, '__codeModes.autoSuggestion');\n\n        \n        const textMessage = _.isUndefined(codeModeTextMessageValue) ? this.textMessage : this.parseCodeModeValue(codeModeTextMessageValue, codeModeTextMessageValue);\n        const medias = _.isUndefined(codeModeMediasValue) ? this.medias : this.parseCodeModeValue(codeModeMediasValue, []);\n        \n        const oldOptions = _.get(this.schema, 'autoSuggestion.options', []);\n        const newOptions = _.get(this.schema, 'autoSuggestionOptionsList', []);\n        const suggestions = _.isUndefined(codeModeSuggestionsValue) ? _.isEmpty(oldOptions) ? newOptions : oldOptions : this.parseCodeModeValue(codeModeSuggestionsValue, []);\n        \n        const suggestionsType = _.isUndefined(codeModeSuggestionType) ? _.get(this.schema, 'autoSuggestionType') : this.parseCodeModeValue(codeModeSuggestionType, `emty`);\n        const suggestionsFromMergeField = _.isUndefined(codeModeSuggestionsFromMergeField) ? _.get(this.schema, 'autoSuggestionOptionsMergeField') : this.parseCodeModeValue(codeModeSuggestionsFromMergeField, ``);\n        const isSuggestionInput = _.isUndefined(codeModeIsSuggestionInput) ? _.get(this.schema, 'autoSuggestion.input') : this.parseCodeModeValue(codeModeIsSuggestionInput, {}).input;\n        \n        \n        this.previewWindow.postMessage({\n          type: 'messageData',\n          message: {\n            message: isHasMessage ? textMessage : '',\n            medias: isHasMedias ? medias : [],\n            answerComponent,\n            suggestions,\n            suggestionsType,\n            suggestionsFromMergeField,\n            isSuggestionInput,\n            placeholder: this.textPlaceholder,\n            textInputType: this.textInputType,\n            textInputCustomPattern: this.textInputCustomPattern\n          }\n        }, '*');\n          \n          \n        // const config = _.get(this.conversation, 'meta.lookAndFeel')\n        const ctxHelpers = this.$flow.getCache('rwcContext.helpers');\n          \n        if (!ctxHelpers) {\n          this.configError = true\n          return;\n        }\n          \n        const config = ctxHelpers.getLastStepWithContext('manual', 'data.conversation.meta.lookAndFeel')\n         || ctxHelpers.getInitialStep('data.dataOut.meta.lookAndFeel');\n         \n        // to show warning message in template\n        if (!config) {\n          this.configError = true\n        } else {\n          this.configError = false\n        }\n        this.previewWindow.postMessage({\n            type: 'chatConfig',\n            config: {\n              ...config\n            }\n          }, '*');\n      },\n      parseCodeModeValue(value, defaultValue = []) {\n        try { return eval(`(${value})`); }\n        catch(e) { return defaultValue; }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-preview\">\n  <or-button color=\"primary\" type=\"secondary\" :disabled=\"btnDisabled\" :loading=\"loading\" @click=\"openPreviewWindow\">\n    Preview message\n  </or-button>\n  <div v-if=\"configError\" class=\"conversation-warning\">\n    <or-alert type=\"warning\" :dismissible=\"false\">To view correct preview, please select conversation manually.</or-alert>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-preview {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.conversation-warning {\n  margin-top: 12px;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "f6840180-c3b8-4e66-9ce0-47ccbb984d01",
                    "data": {
                      "data": "{\n  \"savedStepId\": \"\",\n  \"dataOutput\": null\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard\n  :inputComponent=\"schema.inputComponent\"\n  :suggestion=\"schema.autoSuggestion\"\n  :dataOutput.sync=\"schema.dataOutput\"\n  :output-example.sync=\"step.outputExample\"\n  :savedStepId.sync=\"schema.savedStepId\"\n  :userAnswerFunction.sync=\"schema.userAnswerFunction\"\n  :useCustomAnswer.sync=\"schema.useCustomAnswer\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :schema=\"schema\"\n  :textMessage.sync=\"schema.textMessage\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-ikslfeqphuyrjtowdcvxmagbzn",
                      "componentLogic": "{\n  data () {\n    return {\n      outputExamples: {\n        textFiles: {\n          userReply: 'String'\n        },\n        schedule: {\n          option: {\n            label: 'String',\n            duration: 'String'\n          },\n          selected: [\n            {\n              from: 'String',\n              to: 'String'\n            }\n          ]\n        },\n        card: {\n          description: 'String',\n          value: 'String'\n        },\n        credit: {\n          cardNumber: 'String',\n          expirationDate: 'String',\n          cvv: 'String',\n          cardHolder: 'String'\n        },\n        radio: {\n          label: 'String',\n          value: 'String'\n        },\n        rate: {\n          rating: 'String',\n          feedback: 'String'\n        },\n        video: {\n          playbackStartTime: 'String',\n          playbackEndTime: 'String',\n          totalVideoDuration: 'String',\n          viewDuration: 'String'\n        },\n        carousel: {\n          cards: [{\n            cardId: 'String',\n            image: 'String',\n            video: 'String',\n            title: 'String',\n            description: 'String',\n            buttonLabel: 'String',\n            additionalContentLink: 'String'\n          }]\n        },\n        checkbox: {\n          checkbox: [\n            {\n              label: 'string',\n              value: 'string'\n            }\n          ],\n          checkboxText: 'String'\n        },\n        signature: {\n          image: 'String'\n        },\n        radio: {\n          label: 'String',\n          value: 'String'\n        },\n        attachments: {\n          filePath: 'array'\n        },\n        geolocation: {\n          location: {\n            lat: 'String',\n            lng: 'String'\n          },\n          image: 'string'\n        },\n        menu: {\n          label: 'string',\n          value: 'String'\n        },\n        dropdown: {\n          selected: [{\n            label: 'string',\n            value: 'string'\n          }]\n        },\n        buttons: {\n          label: 'String',\n          value: 'String'\n        },\n        datepicker: {\n          date: 'String',\n          dateText: 'String',\n          dateISO: 'String',\n          dateUnixMs: 'String'\n        },\n        timepicker: {\n          time: 'String'\n        },\n        slider: {\n          value: 'String',\n          units: 'String'\n        }\n      }\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        suggestion: Object,\n        inputComponent: String,\n        savedStepId: String,\n        outputExample: Object,\n        dataOutput: Object,\n        useCustomAnswer: Boolean,\n        userAnswerFunction: String,\n        schema: Object,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        textMessage: {\n          type: String,\n          default: ``\n        }\n    },\n    mounted () {\n      if (this.savedStepId !== this.stepId) {\n        this.$emit('update:savedStepId', this.stepId)\n      }\n    },\n    watch: {\n      outputExample(nv, ov) {\n        if (JSON.stringify(nv) !== JSON.stringify(ov)) {\n          this.changeAnswerFunction()\n        }\n      },\n      inputComponent (nv) {\n        if (_.trim(nv, '`') === 'custom') {\n          this.$emit('update:useCustomAnswer', false)\n        }\n        this.changeOutputExample()\n      },\n      'schema.attachmentsNumber': {\n        handler(nv, ov) {\n          if ((nv && ov) && (nv !== ov)) {\n            this.changeAnswerFunction()\n          }\n        },\n        immediate: true\n      },\n      'schema.dropdownMultiple': {\n        handler(nv, ov) {\n          if (nv !== ov) {\n            this.changeAnswerFunction()\n          }\n        },\n        immediate: true\n      },\n      'schema.sliderType': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      },\n      'schema.sliderUseCustomLabels': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      },\n      'suggestion.input': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      },\n      'schema.carouselMultiselect': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      }\n    },\n    methods: {\n      async changeOutputExample () {\n        await this.$nextTick()\n        let trimedComponent = _.trim(this.inputComponent, '`')\n        let outputFromComponent = this.outputExamples[trimedComponent] || {}\n        const outputSuggestion = _.get(this, 'suggestion.input') ? {userReply: 'String'} : {}\n        if (trimedComponent === 'slider') {\n          const range = _.trim(this.schema.sliderType, '`') === 'range' ? this.schema.sliderUseCustomLabels ? [{label: 'String',value: 'String'}, {label: 'String',value: 'String'}] : [] : null\n          const label = _.trim(this.schema.sliderType, '`') === 'single' ? this.schema.sliderUseCustomLabels ? 'String' : null : null\n          const value = _.trim(this.schema.sliderType, '`') === 'single' ? 'String' : null\n          const units = this.schema.sliderUseCustomLabels ? null : 'String'\n          outputFromComponent = {\n            range,\n            label,\n            value,\n            units\n          }\n          outputFromComponent = _.pickBy(outputFromComponent, _.identity);\n        }\n        if (trimedComponent === 'rate') {\n          outputFromComponent = {\n            rating: 'String',\n            feedback: this.schema.rateInput ? 'String' : null\n          }\n          outputFromComponent = _.pickBy(outputFromComponent, _.identity);\n        }\n        let finalOutput = Object.assign(outputSuggestion, outputFromComponent);\n        \n        this.$emit('update:outputExample', finalOutput)\n        \n        // for backwards compatibility for carousel\n        if (trimedComponent === 'carousel' && !this.schema.carouselMultiselect) {\n          finalOutput = {\n            ...finalOutput,\n            card: {\n              ...this.outputExamples.carousel.cards[0],\n              label: 'String',\n              button: 'String',\n              value: 'String',\n            }\n          }\n        }\n        \n        this.$emit('update:dataOutput', finalOutput)\n      },\n      changeAnswerFunction () {\n        const finalOutput = this.outputExample\n        let outputString = _.isEmpty(finalOutput) ? '' : Object.keys(finalOutput).map(el => {\n          const type = typeof finalOutput[el] === 'object' ? _.isArray(finalOutput[el]) ? 'array' : 'object' : finalOutput[el] === 'Array' ? 'array' : typeof finalOutput[el]\n          return `${el}: ${type}`\n        }).join(', ')\n        \n        // exception for attachment component (hotfix)\n        if (_.trim(this.schema.attachmentsNumber, '`') === '1' && _.trim(this.schema.inputComponent, '`') === 'attachments') {\n          outputString = `filePath: array`\n        }\n        this.$emit('update:userAnswerFunction', outputString ? `// You have access to ${outputString}\\nreturn ''` : '')\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!--this component change output example and save stepId-->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Customize the message your visitors will interact with by selecting an input component and filling the necessary fields.",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "6f6bd9af-3680-484e-9b45-deb0871c6dfa",
              "data": {
                "open": false,
                "header": "Manual user response",
                "inputs": [
                  {
                    "id": "86eddf30-7655-42a5-9cc1-328d648cf707",
                    "data": {
                      "data": "{\n  \"autoSuggestion\": {\n    \"input\": true,\n    \"isExtraLeg\": false\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data\nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n function toJson(data, property = '', parentPath = '') { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.autoSuggestion\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :v=\"$v\"\n  :step-id=\"stepId\"\n  :schema=\"schema\"\n  :steps=\"steps\"\n  :answerComponent=\"schema.inputComponent\"\n  :textPlaceholder.sync=\"schema.textPlaceholder\"\n  :hasCancelExit.sync=\"schema.hasCancelExit\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bnuprdilmswqjakfehgycoztxv",
                      "componentLogic": "{\n    computed : {\n        getAnswerComponentType () {\n          return _.trim(this.answerComponent, '`');\n        },\n        isAnswerTextInput () {\n          return this.getAnswerComponentType === 'textFiles';\n        }\n    },\n    watch: {\n      getAnswerComponentType: {\n        handler(nv) {\n          if (nv === 'credit') {\n            this.$emit('update:hasCancelExit', true)\n          } else {\n            this.$emit('update:hasCancelExit', false)\n          }\n        },\n        immediate: true\n      },\n      isAnswerTextInput: {\n        async handler (nv, ov) {\n          this.setValue('input', nv)\n          if (nv) {\n            await this.$nextTick()\n            this.setValue('isExtraLeg', false)\n          }\n          \n          if (ov !== nv && ov) {\n            this.$emit('update:textPlaceholder', '``')\n          }\n        },\n        immediate: true\n      },\n      'value.input': {\n        handler (nv) {\n          if (nv && !this.isAnswerTextInput) {\n            this.setValue('isExtraLeg', true)\n          } else {\n            this.setValue('isExtraLeg', false)\n          }\n        },\n        immediate: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        hasCancelExit: {\n          type: Boolean,\n          default: false\n        },\n        answerComponent: String,\n        textPlaceholder: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        schema: Object,\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue (key, el) {\n        return _.get(el || this.value, key, null);\n      },\n      async setValue (key, value) {\n        const val = _.cloneDeep(this.value);\n        \n        _.set(val, key, value);\n        this.$emit('input', val);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__suggestion\">\n    <!--TOGGLE-->\n    <or-switch :disabled=\"readonly || isAnswerTextInput\" :value=\"!!getValue('input')\" @input=\"val => setValue('input', val)\">\n      Allow manual user response\n    </or-switch>\n    <!--TOGGLE-->\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__suggestion {\n  /deep/ .or-text-expression {\n    min-width: calc(100% - 32px);\n    max-width: calc(100% - 32px);\n    margin-bottom: 0;\n  }\n  .or-text-expression {\n    min-width: calc(100% - 32px);\n    max-width: calc(100% - 32px);\n    margin-bottom: 0;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "48aae173-c67c-4c93-ab90-eeb97d52d0da",
                    "data": {
                      "help": "",
                      "label": "User’s reply placeholder",
                      "variable": "textPlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. write a reply",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "30",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "586e6861-4b18-48f8-a459-0c7920d67d56",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "66d311fe-35e1-4750-ab13-a2085cdce7d5",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.isExtraLeg",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "0e5a0252-7c2b-4d58-b274-e4f0474e6cd8",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a0afbbb1-5a3d-4f1d-a1c1-c479ea04103f",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.textPlaceholder, '`').length > 30 && (!_.trim(schema.textPlaceholder, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "586e6861-4b18-48f8-a459-0c7920d67d56",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "66d311fe-35e1-4750-ab13-a2085cdce7d5",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.isExtraLeg",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "7e0c0cf6-aab1-4868-9d74-de6846384386",
                    "data": {
                      "icon": "",
                      "label": "Suggested options creation method",
                      "options": [
                        {
                          "label": "No suggested options",
                          "value": "`emty`",
                          "vforkey": "96e8f84e-f4e0-4b11-b4a1-08fdb7e77107"
                        },
                        {
                          "label": "Create a list",
                          "value": "`list`",
                          "vforkey": "5939df90-f26d-4538-8efe-f2e2692ba8bd"
                        },
                        {
                          "label": "Set values dynamically",
                          "value": "`dynamic`",
                          "vforkey": "a7752f3e-e4bb-45d7-b7e2-9b0dafbb3962"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "autoSuggestionType",
                      "hasSearch": false,
                      "optionsMode": "default",
                      "placeholder": "Select type",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p>\n  <strong>No suggested options</strong><br>\n  Text input is shown without suggested options\n</p>\n\n<p>\n  <strong>Create a list</strong><br>\n  Add suggested options manually or set in code mode as objects array in the appropriate format:\n  <pre><code>[{\n  text: `one`\n}, {\n  text: `two`\n}]</code></pre>\n</p>\n\n<p>\n  <strong>Set values dynamically</strong><br>\n  Pass merge field variable to the input that stores suggested options in the appropriate format:\n  <pre><code>[{\n  text: `one`\n}, {\n  text: `two`\n}]</code></pre>\n</p>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`emty`",
                      "dropdownType": "basic",
                      "iconPosition": true,
                      "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                      "allowCodeMode": true,
                      "dynamicOptions": "",
                      "optionsDefault": [],
                      "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [];\nfor (let i = 0; i < 10; i++) {\n    myArr.push({ label: `Number ${i}`, value: i });\n}\nreturn myArr;",
                      "hideOptionTitle": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "731d1a99-fa53-40d5-8e82-27adf961569a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "mergeFieldsTypes": [
                        "session",
                        "shared",
                        "global"
                      ],
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": "",
                      "extendableOptions": false,
                      "optionsKeysCustom": false,
                      "iconHelpTextOption": "modal",
                      "mergeFieldsIsGroup": true,
                      "allowUseMergeFields": false,
                      "allowOnlyMergeFields": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "731d1a99-fa53-40d5-8e82-27adf961569a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSelectExpression",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (advanced)",
                    "compiled": {},
                    "component": "formSelectExpression",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelectExpression\"]"
                    ]
                  },
                  {
                    "id": "2afa1a85-8417-4f93-a3bf-dab7afc2e2d2",
                    "data": {
                      "label": "Merge field",
                      "helpText": "",
                      "variable": "autoSuggestionOptionsMergeField",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b9f210f-e729-44c0-9000-dce3ea880b16",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.input",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "a8f0c6d9-e399-4141-a38d-58f3659a89e1",
                            "ruleType": {
                              "func": "{ return _.includes(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "string",
                                "string"
                              ],
                              "label": "contains",
                              "modes": [
                                "stringNums",
                                "ignoreCase",
                                "trim"
                              ],
                              "category": "string"
                            },
                            "codeValue": "``",
                            "valueType": "string",
                            "firstValue": "schema.autoSuggestionType",
                            "secondValue": "`dynamic`",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b9f210f-e729-44c0-9000-dce3ea880b16",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.input",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "a8f0c6d9-e399-4141-a38d-58f3659a89e1",
                            "ruleType": {
                              "func": "{ return _.includes(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "string",
                                "string"
                              ],
                              "label": "contains",
                              "modes": [
                                "stringNums",
                                "ignoreCase",
                                "trim"
                              ],
                              "category": "string"
                            },
                            "codeValue": "``",
                            "valueType": "string",
                            "firstValue": "schema.autoSuggestionType",
                            "secondValue": "`dynamic`",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "4cd5228c-39c9-42a5-9889-f9fd09a1a73d",
                    "data": {
                      "data": "{\n  \"autoSuggestionOptionsList\": [{\"text\": \"``\"}]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        data = _.omit(data, ['vforkey']);\n        return `{${_.map(data, (value, key) => `${key}: ${value}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  autoSuggestionOptionsList: {\n    $each: {\n      required(val) {\n        const text = _.get(val, 'text', '');\n        return !_.isEmpty(_.trim(text, ' `'));\n      },\n      uniq(val, list) {\n        list = _.get(this, 'schema.autoSuggestionOptionsList', list);\n        const currentText = _.get(val, 'text', '');\n        \n        const duplicates = _.filter(list, ({ text }) => _.trim(text) === _.trim(currentText));\n        \n        return _.size(duplicates) < 2;\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.autoSuggestionOptionsList\" \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :mergeFields=\"mergeFields\" \n  :step-id=\"stepId\"\n  :v=\"$v\"\n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ariknbzvghmupjqdcywsxeflto",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    \n    methods: {\n        addSuggestion() {\n          return {\n            text: '``'\n          }\n        },\n        \n        getErrorText(vObj) {\n          if(!vObj.$invalid) return ``;\n          \n          if(!vObj.required) return `This field should not be empty`;\n          if(!vObj.uniq) return `This field should be unique`;\n        }\n    },\n    \n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: {\n          type: Object,\n          default: () => {}\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "268feda3-7ed1-4641-8ba7-dfebe4f04b1e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.autoSuggestionType, ' `'), `list`) && schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "268feda3-7ed1-4641-8ba7-dfebe4f04b1e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.autoSuggestionType, ' `'), `list`) && schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-list v-model=\"localValue\" addButtonLabel=\"Add suggestion\" :new-item-method=\"addSuggestion\">\r\n  <template slot-scope=\"item\">\r\n    <div class=\"input\">\r\n      <or-text-expression\r\n        :readonly=\"readonly\"\r\n        v-model=\"item.item.text\" \r\n        placeholder=\"Add suggestion to user\" \r\n        :steps=\"item.steps\" \r\n        :stepId=\"item.stepId\" \r\n        label=\"Suggestion\"\r\n        :mergeFields=\"mergeFields\"\r\n        :invalid=\"!isNew && v.schema.autoSuggestionOptionsList.$each[item.index].$invalid\"\r\n        :error=\"getErrorText(v.schema.autoSuggestionOptionsList.$each[item.index])\"\r\n      ></or-text-expression>\r\n    </div>\r\n  </template>\r\n</or-list>\r\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "268feda3-7ed1-4641-8ba7-dfebe4f04b1e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.autoSuggestionType, ' `'), `list`) && schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".input {\n  width: 100%;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Allow users to reply manually and, if necessary, provide them with suggestions.",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "b9b4ddf3-5b09-49d4-96eb-cb77beca73f1",
              "data": {
                "open": false,
                "header": "Additional content customization",
                "inputs": [
                  {
                    "id": "65553bf1-0be9-4440-b581-4feb121947e2",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qbkczylptvwdehojairfmguxns",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "337c117a-79e0-4854-b2e9-36a5b816ae22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'empty'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "7da8ccdd-bef4-4141-8bc9-92f28e10c2db",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "337c117a-79e0-4854-b2e9-36a5b816ae22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'empty'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "7da8ccdd-bef4-4141-8bc9-92f28e10c2db",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"text\">No additional content is selected</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "337c117a-79e0-4854-b2e9-36a5b816ae22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'empty'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "7da8ccdd-bef4-4141-8bc9-92f28e10c2db",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".text {\n  font-size: 14px;\n  line-height: 16px;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5da9f6fa-5068-465c-b8d9-8e939f206528",
                    "data": {
                      "label": "Select how to manage HTML content",
                      "options": [
                        {
                          "label": "Append HTML to content of previous steps",
                          "value": "`append`",
                          "checked": false,
                          "vforkey": "7bdfdda4-2f02-463f-add0-77f4e3177e6f"
                        },
                        {
                          "label": "Override HTML in content card",
                          "value": "`override`",
                          "checked": false,
                          "vforkey": "f4863da8-e3c2-4b76-af45-638ee237fd2a"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "additionalContentCardChangeType",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`append`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f7ab0a8-9dc4-434d-8306-1b95fea45736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f7ab0a8-9dc4-434d-8306-1b95fea45736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "c9c6f71e-3663-47bd-9ddc-378d64b2edbc",
                    "data": {
                      "data": "{\n  \"additionalContentVideo\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/additionalContentVideo/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  additionalContentVideo: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.additionalContentVideo\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qacpbzikfxmolydunretwghsvj",
                      "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: ['mov', 'MOV', 'mp4', 'MP4'],\n        maxFiles: 1\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5774a18d-9aed-4c10-8347-c5e4b68ab07e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'video'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5774a18d-9aed-4c10-8347-c5e4b68ab07e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'video'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    :maxItemsCount=\"1\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <span>{{ item.item.name }}</span>\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n      <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            disableVariables\n            disableCodeMode\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.heroVideo.$each[${item.index}].$invalid`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => updateMedias(item.item, val)\"\n          />\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add video from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5774a18d-9aed-4c10-8347-c5e4b68ab07e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'video'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "39308104-1f9c-42f2-b665-8708651959d8",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "HTML",
                      "helpText": "",
                      "variable": "additionalHtml",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dc4e56ab-f361-4622-8156-09e025749b04",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dc4e56ab-f361-4622-8156-09e025749b04",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "b1ea55c0-3cf0-4111-ba49-de159afbac28",
                    "data": {
                      "mode": "scss",
                      "jsEnv": "ecma6",
                      "label": "CSS",
                      "helpText": "",
                      "variable": "additionalCss",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4123959c-015e-44f6-8689-6672dcfb048b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4123959c-015e-44f6-8689-6672dcfb048b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "86c613ac-37f3-4d14-9160-c437c2560c22",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "JavaScript",
                      "helpText": "",
                      "variable": "additionalScript",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e42de35b-4f80-4597-a6c6-4ca6aaa1e8e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e42de35b-4f80-4597-a6c6-4ca6aaa1e8e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "e4eaf086-eb17-421a-9552-1f4d66fd9887",
                    "data": {
                      "label": "",
                      "inputs": [
                        {
                          "id": "4d0c0b6b-a47c-4c79-875c-20d74ceba321",
                          "data": {
                            "label": "Name",
                            "helpText": "",
                            "variable": "varName",
                            "multiline": false,
                            "placeholder": "Enter variable name here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        },
                        {
                          "id": "85e86246-0500-4a3c-8b15-3420250e75f6",
                          "data": {
                            "label": "Value",
                            "helpText": "",
                            "variable": "varValue",
                            "multiline": false,
                            "placeholder": "Enter variable value here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        }
                      ],
                      "variable": "additionalCardvariables",
                      "singleline": true,
                      "prettifyDrag": false,
                      "allowCodeMode": true,
                      "limitMaxItems": false,
                      "maxItemsCount": "10",
                      "addButtonLabel": "Add variable",
                      "hasDefaultItem": false,
                      "dragHandleRight": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c207280c-5f60-470c-beb3-4a45c5882c4d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "canRemoveLastItem": true,
                      "disabledCondition": "",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c207280c-5f60-470c-beb3-4a45c5882c4d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formList",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "List",
                    "compiled": {},
                    "component": "formList",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formList\"]"
                    ]
                  }
                ],
                "description": "Here you can set up the additional content",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "d21347b3-1bf1-4cd9-adab-037b45f54d3e",
                      "ruleType": {
                        "func": "{ return firstValue === false }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is false",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.textMessage",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "d21347b3-1bf1-4cd9-adab-037b45f54d3e",
                      "ruleType": {
                        "func": "{ return firstValue === false }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is false",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.textMessage",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "bf7442fe-c5bd-4536-8b65-761ac9d445d4",
              "data": {
                "open": false,
                "header": "Conversation",
                "inputs": [
                  {
                    "id": "bd72be90-9c0c-4875-8ae8-ffd639ddc58a",
                    "data": {
                      "inputs": [
                        {
                          "component": [
                            "conversation-select",
                            "https://content-assets.onereach.ai/component/conversation-select/0.0.18/index.js"
                          ]
                        }
                      ],
                      "inherit": {
                        "from": "last",
                        "isAdvanced": false
                      },
                      "isNested": false,
                      "variable": "rwcContext",
                      "contextKey": "__rwc_context",
                      "showEditor": false,
                      "exposeConfig": false,
                      "allowCodeMode": false,
                      "contextInputs": {
                        "step": [
                          {
                            "data": {},
                            "component": "stepChooser"
                          }
                        ],
                        "manual": [
                          {
                            "id": "d0307eb0-6ef4-4216-8f34-fb5444b34e36",
                            "data": {
                              "required": true,
                              "variableName": "conversation",
                              "conversationType": "rwc-chat",
                              "validationConditions": [],
                              "renderConditionBuilder": {
                                "label": "`Conditional visibility`",
                                "rules": [],
                                "trueValue": "any",
                                "description": "``",
                                "defaultValue": true,
                                "isNotCollapsed": false,
                                "isEditableHeader": false
                              },
                              "disableConditionBuilder": {
                                "label": "`Conditional disablement`",
                                "rules": [],
                                "trueValue": "any",
                                "description": "``",
                                "defaultValue": false,
                                "isNotCollapsed": false,
                                "isEditableHeader": false
                              }
                            },
                            "compiled": {},
                            "component": [
                              "conversation-select",
                              "https://content-assets.onereach.ai/component/conversation-select/0.0.18/index.js"
                            ]
                          }
                        ],
                        "dataOut": [
                          {
                            "data": {},
                            "component": "formSelectExpression"
                          }
                        ],
                        "inherited": []
                      },
                      "selectedTypes": [
                        "inherited",
                        "manual"
                      ],
                      "contextControl": {
                        "data": {
                          "id": "4d87de58-d77f-4dd0-ad5f-f134b470d683",
                          "label": "Inherit context from previous step",
                          "helpText": "",
                          "variable": "selectStyle",
                          "labelLeft": false,
                          "trueLabel": "Continue conversation",
                          "trueValue": "inherited",
                          "falseLabel": "",
                          "falseValue": "manual",
                          "isHtmlLabel": false,
                          "switchColor": "primary",
                          "advancedHelp": {
                            "link": {
                              "url": "",
                              "icon": "help",
                              "iconHelp": "",
                              "tooltipPosition": "top center"
                            },
                            "modal": {
                              "icon": "help",
                              "title": "",
                              "content": "",
                              "iconHelp": "",
                              "tooltipPosition": "top center"
                            },
                            "tooltip": {
                              "icon": "help",
                              "content": "",
                              "openTooltipOn": "hover",
                              "tooltipPosition": "top center"
                            }
                          },
                          "defaultValue": "inherited",
                          "allowCodeMode": true,
                          "isHtmlHelpText": false,
                          "switchPosition": "left",
                          "isHtmlTrueLabel": false,
                          "overwriteLabels": true,
                          "overwriteValues": true,
                          "renderCondition": "",
                          "isHtmlFalseLabel": false,
                          "disabledCondition": "",
                          "helpDisplayOption": "hover",
                          "iconHelpTextOption": "none",
                          "validationConditions": [],
                          "renderConditionBuilder": {
                            "label": "`Conditional visibility`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": false,
                            "isEditableHeader": false
                          },
                          "disableConditionBuilder": {
                            "label": "`Conditional disablement`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": false,
                            "isEditableHeader": false
                          }
                        },
                        "component": "formSwitch"
                      },
                      "initEmptyStore": false,
                      "renderCondition": "",
                      "allContextOptions": [
                        {
                          "label": "Inherited",
                          "value": "inherited"
                        },
                        {
                          "label": "Target step",
                          "value": "step"
                        },
                        {
                          "label": "Merge field",
                          "value": "dataOut"
                        },
                        {
                          "label": "Manual",
                          "value": "manual"
                        }
                      ],
                      "configurationName": "rwc",
                      "disabledCondition": "",
                      "useCustomResolver": true,
                      "bufferVariableName": "__contextTtlBuffer",
                      "keyValueCollection": "___simple_context_service_rwc",
                      "initContextInstance": true,
                      "validationConditions": [],
                      "customResolveFunction": "function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": [
                      "simple-context-manager",
                      "https://content-assets.onereach.ai/component/simple-context-manager/0.0.8/index.js"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "a2deda66-54da-4b8f-a74a-1876444ba223",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "68a9f701-3e1c-4d9b-a13e-8e366d3c88cb",
                    "data": {
                      "meta": {
                        "type": "rwc-request-response"
                      },
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{\n  \"type\": 'rwc-request-response'\n}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  userReply: 'string'\n}",
          "defaultTimeout": "`1h`",
          "hasProcessError": true,
          "hasChangeTimeout": true,
          "hasProcessTimeout": true,
          "allowSkipStepLogic": true,
          "processTimeOutMaxValue": "72h",
          "processTimeOutMinValue": "15s"
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate);",
            "version": "0.0.19"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processError'])) step.data['processError'] = true;\nif(_.isUndefined(step.data['stepVariable'])) step.data['stepVariable'] = {\"sendMessage\":true,\"allowMedia\":true,\"waitForAnswer\":true,\"waitForFiles\":false,\"useFiles\":true,\"medias\":[],\"messageText\":\"``\",\"validation\":[],\"answerComponent\":{\"component\":null,\"defaultValue\":\"\",\"sendMessage\":true,\"showComponentInMessage\":false,\"waitForAnswer\":true,\"allowMedia\":true},\"answerType\":null};\nif(_.isUndefined(step.data['conversation'])) step.data['conversation'] = {\"name\":\"\",\"meta\":\"\"};\nif(_.isUndefined(step.data['autoSuggestion'])) step.data['autoSuggestion'] = {\"input\":true,\"isExtraLeg\":false,\"options\":[]};\nif(_.isUndefined(step.data['timeoutVariable'])) step.data['timeoutVariable'] = {\"processTimeout\":false,\"waitTimeout\":\"`1 h`\"};\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{\"type\":\"rwc-request-response\"}};\napplyExitsMigration(step, stepTemplate);",
            "version": "4.0.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{\"type\":\"rwc-request-response\"}};\n",
            "version": "4.0.29"
          },
          {
            "sample": null,
            "script": "step.outputExample.userReply = 'string'",
            "version": "4.1.1"
          },
          {
            "sample": null,
            "script": "step.data.cardDescription = '``';\nstep.data.textMessage = '``';\nstep.data.datepickerStartsFrom = '`sunday`'\nstep.data.datepickerFormat = '`mm-dd-yyyy`'\nstep.data.dropdownPlaceholder = '``'\nstep.data.sliderType = '`range`'\nstep.data.attachmentsNumber = '`one`'\nstep.data.sliderDefaultValue = ''",
            "version": "4.1.18"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['signatureBtn'])) step.data['signatureBtn'] = \"``\";\nstep.data.signatureBtn = \"``\"",
            "version": "4.1.19"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['rateInput'])) step.data['rateInput'] = true;\nif(_.isUndefined(step.data['ratePlaceholder'])) step.data['ratePlaceholder'] = \"``\";\nstep.data.rateInput = true\nstep.data.ratePlaceholder = \"``\"",
            "version": "4.1.20"
          },
          {
            "sample": null,
            "script": "step.data.creditBtnLabel = \"``\";\nstep.data.creditTerms = \"``\";\nstep.data.creditAllowMask = true;",
            "version": "4.1.23"
          },
          {
            "sample": null,
            "script": "step.data.creditTermsLabel = \"``\";\nstep.data.textInputAllowMask = false",
            "version": "4.1.24"
          },
          {
            "sample": null,
            "script": "step.data.videoAutoplay = true\nstep.data.videoBtnLabel = \"``\"\nstep.data.videoShowInThread = true",
            "version": "4.1.34"
          },
          {
            "sample": null,
            "script": "step.data.datepickerBlockDates = false\nstep.data.datepickerSuggestedDates = false\nstep.data.datepickerBlockedOptions = []",
            "version": "4.1.38"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['datepickerBlockedFunc'])) step.data['datepickerBlockedFunc'] = \"// tip: return true to enable and false to disable date\\n\" +\n\"// disable all wednesdays\\n\" +\n\"// return moment(date).day() !== 3;\\n\" +\n\"// disable 10s day of month\\n\" +\n\"// return moment(date).date() !== 10;\\n\" +\n\"// disable Novembers\\n\" +\n\"// return moment(date).month() !== 10;\"\nif(_.isUndefined(step.data['datepickerSuggestedFunc'])) step.data['datepickerSuggestedFunc'] = \"// tip: return true to highlight date\\n\" +\n\"// highlight all mondays and fridays\\n\" +\n\"// return moment(date).day() === 1 || moment(date).day() === 5;\\n\" +\n\"// highlight 1st - 11s day of month\\n\" +\n\"// return moment(date).date() >= 1 && moment(date).date() <= 11;\\n\" +\n\"// highlight Novembers\\n\" +\n\"// return moment(date).month() === 10;\";\n",
            "version": "4.1.39"
          },
          {
            "sample": null,
            "script": "step.data.datepickerBlockedMergefield = \"this.get('')\";\nstep.data.datepickerSuggestedMergefield = \"this.get('')\";\nstep.data.datepickerSuggestedOptions = [];",
            "version": "4.1.40"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['datepickerBlockedFunc'])) step.data['datepickerBlockedFunc'] = \"// tip: return true to disable and false to enable date\\n// disable all wednesdays\\n// return moment(date).day() === 3;\\n// disable 10s day of month\\n// return moment(date).date() === 10;\\n// disable Novembers\\n// return moment(date).month() === 10;\";\n",
            "version": "4.2.2"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['geolocationSetDefault'])) step.data['geolocationSetDefault'] = false;\nif(_.isUndefined(step.data['geolocationLat'])) step.data['geolocationLat'] = \"``\";\nif(_.isUndefined(step.data['geolocationLng'])) step.data['geolocationLng'] = \"``\";\n",
            "version": "4.2.6"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['bookingAllowMultiselect'])) step.data['bookingAllowMultiselect'] = false;\nif(_.isUndefined(step.data['bookingDisableDates'])) step.data['bookingDisableDates'] = false;\nif(_.isUndefined(step.data['bookingDisableDatesOptions'])) step.data['bookingDisableDatesOptions'] = [];\nif(_.isUndefined(step.data['bookingDisableSlots'])) step.data['bookingDisableSlots'] = false;\nif(_.isUndefined(step.data['bookingTimeFormat'])) step.data['bookingTimeFormat'] = \"`12`\";\nif(_.isUndefined(step.data['bookingSessionItems'])) step.data['bookingSessionItems'] = [];\n",
            "version": "4.2.8"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['autoSuggestionType'])) step.data['autoSuggestionType'] = \"emty\";\nif (_.isUndefined(step.data['autoSuggestionOptionsMergeField'])) step.data['autoSuggestionOptionsMergeField'] = ''",
            "version": "4.2.9"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['autoSuggestionOptionsList'])) step.data['autoSuggestionOptionsList'] = [];\n",
            "version": "4.2.10"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.datepickerBlockDates)) {\n  step.data.datepickerBlockDates = false\n}\nif (_.isUndefined(step.data.datepickerBlockedOptions)) {\n  step.data.datepickerBlockedOptions = []\n}\nif (_.isUndefined(step.data.datepickerBlockedMergefield)) {\n  step.data.datepickerBlockedMergefield = \"this.get('')\"\n}\nif (_.isUndefined(step.data.datepickerSuggestedDates)) {\n  step.data.datepickerSuggestedDates = false\n}\nif (_.isUndefined(step.data.datepickerSuggestedOptions)) {\n  step.data.datepickerSuggestedOptions = []\n}\nif (_.isUndefined(step.data.datepickerSuggestedFunc)) {\n  step.data.datepickerSuggestedFunc = ''\n}\nif (_.isUndefined(step.data.datepickerSuggestedMergefield)) {\n  step.data.datepickerSuggestedMergefield = \"this.get('')\"\n}",
            "version": "4.2.12"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.cardDescription)) {\n  step.data.cardDescription = \"``\"\n}\nif (_.isUndefined(step.data.cardBtnLabel)) {\n  step.data.cardBtnLabel = \"``\"\n}\nif (_.isUndefined(step.data.cardBtnValue)) {\n  step.data.cardBtnValue = \"``\"\n}\nif (_.isUndefined(step.data.textMessage)) {\n  step.data.textMessage = _.get(step.data, 'stepVariable.messageText') || \"``\"\n}\nif (_.isUndefined(step.data.carouselHasAlternative)) {\n  step.data.carouselHasAlternative = false\n}\nif (_.isUndefined(step.data.datepickerStartsFrom)) {\n  step.data.datepickerStartsFrom = \"`0`\"\n}\nif (_.isUndefined(step.data.datepickerFormat)) {\n  step.data.datepickerFormat = \"`MM-DD-YYYY`\"\n}\nif (_.isUndefined(step.data.dropdownPlaceholder)) {\n  step.data.dropdownPlaceholder = \"``\"\n}\nif (_.isUndefined(step.data.sliderDefaultValue)) {\n  step.data.sliderDefaultValue = \"``\"\n}\nif (_.isUndefined(step.data.sliderStep)) {\n  step.data.sliderStep = \"\"\n}\nif (_.isUndefined(step.data.sliderUnit)) {\n  step.data.sliderUnit = \"``\"\n}\nif (_.isUndefined(step.data.sliderUnitPosition)) {\n  step.data.sliderUnitPosition = \"`start`\"\n}\nif (_.isUndefined(step.data.sliderType)) {\n  step.data.sliderType = \"single\"\n}\nif (_.isUndefined(step.data.textInputAllowMask)) {\n  step.data.textInputAllowMask = false\n}\nif (_.isUndefined(step.data.videoStartTime)) {\n  step.data.videoStartTime = \"0\"\n}\nif (_.isUndefined(step.data.videoStartTimeTimestring)) {\n  step.data.videoStartTimeTimestring = \"``\"\n}\nif (_.isUndefined(step.data.carouselOptions)) {\n  step.data.carouselOptions = [{\n    image: {},\n    label: \"``\",\n    description: \"``\",\n    button: \"``\",\n    value: \"``\",\n    vforkey: \"d848c364-6f0b-4165-98cb-1e3bbe3e1bb7\"\n  }]\n}\nif (_.isUndefined(step.data.carouselAlternative)) {\n  step.data.carouselAlternative = {\n    text: \"``\",\n    button: \"``\",\n    value: \"``\"\n  }\n}\nif (_.isUndefined(step.data.checkboxOptions)) {\n  step.data.checkboxOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"fb0ba6ca-2292-435e-b375-6e9266f3931e\"\n  }]\n}\nif (_.isUndefined(step.data.sliderUseCustomLabels)) {\n  step.data.sliderUseCustomLabels = false\n}\nif (_.isUndefined(step.data.sliderCustomFunction)) {\n  step.data.sliderCustomFunction = `// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }`\n}\nif (_.isUndefined(step.data.sliderCustomLabels)) {\n  step.data.sliderCustomLabels = [{\n    label: \"``\",\n    value: \"``\"\n  }, {\n    label: \"``\",\n    value: \"``\"\n  }]\n}\nif (_.isUndefined(step.data.sliderMin)) {\n  step.data.sliderMin = \"``\"\n}\nif (_.isUndefined(step.data.sliderMax)) {\n  step.data.sliderMax = \"``\"\n}\nif (_.isUndefined(step.data.textPlaceholder)) {\n  step.data.textPlaceholder = \"``\"\n}\nif (_.isUndefined(step.data.timepickerFormat)) {\n  step.data.timepickerFormat = \"`12`\"\n}\nif (_.isUndefined(step.data.dropdownOptions)) {\n  step.data.dropdownOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"fc0eb1aa-6a5d-494e-acab-8d73268e8de3\"\n  }]\n}\nif (_.isUndefined(step.data.optionListOptions)) {\n  step.data.optionListOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"c1eea434-9e78-4ed2-aae5-6fc65398dd60\"\n  }]\n}\nif (_.isUndefined(step.data.optionsButtons)) {\n  step.data.optionsButtons = [{\n    \"label\": \"``\",\n    \"value\": \"``\",\n    \"vforkey\": \"010b9444-c33d-42e3-ac7f-e1f7225a9c1f\"\n  }]\n}\nif (_.isUndefined(step.data.radioOptions)) {\n  step.data.radioOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"847d2416-4a11-4e62-a9a8-d87ce1e1f519\"\n  }]\n}\nif (_.isUndefined(step.data.radioDefault)) {\n  step.data.radioDefault = \"`No option`\"\n}\nif (_.isUndefined(step.data.attachmentsNumber)) {\n  step.data.attachmentsNumber = \"`0`\"\n}\nif (_.isUndefined(step.data.attachmentsAllowChosen)) {\n  step.data.attachmentsAllowChosen = false\n}\nif (_.isUndefined(step.data.geolocationBtn)) {\n  step.data.geolocationBtn = \"``\"\n}\nif (_.isUndefined(step.data.customComponent)) {\n  step.data.customComponent = `return {\n  template: {\n    template: \\`<button @click=\"send(testData)\">{{ testData }}</button>\\`,\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: [],\n    methods: {\n      send(msg) {\n        /**\n         * \\`message\\` field will be sent as user reply and will NOT be stored in mergeField\n         * \\`myData\\` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    },\n    // mounted () {\n    //  if the component does not require user interaction, you can send a message when the component mount\n    //  this.send('mounted')\n    // },\n    computed: {}\n  },\n  \"showComponentInMessage\": true // if true component will be shown in the message bubble\n}`\n}",
            "version": "4.2.16"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['datepickerAllowed'])) step.data['datepickerAllowed'] = null;",
            "version": "4.2.18"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useCustomAnswer'])) step.data['useCustomAnswer'] = false;\nif(_.isUndefined(step.data['userAnswerFunction'])) step.data['userAnswerFunction'] = \"return ''\";\n",
            "version": "4.2.19"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['buttonStyle'])) step.data['buttonStyle'] = \"default\";\n",
            "version": "4.2.20"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleAllowMultiselect'])) step.data['scheduleAllowMultiselect'] = false;\nif(_.isUndefined(step.data['scheduleDisableDates'])) step.data['scheduleDisableDates'] = false;\nif(_.isUndefined(step.data['scheduleDisableDatesOptions'])) step.data['scheduleDisableDatesOptions'] = [];\nif(_.isUndefined(step.data['scheduleDisableSlots'])) step.data['scheduleDisableSlots'] = false;\nif(_.isUndefined(step.data['scheduleTimeFormat'])) step.data['scheduleTimeFormat'] = \"`12`\";\nif(_.isUndefined(step.data['scheduleSessionItems'])) step.data['scheduleSessionItems'] = [];\nif(_.isUndefined(step.data['scheduleButtonLabel'])) step.data['scheduleButtonLabel'] = \"``\";\nif(_.isUndefined(step.data['workingHours'])) step.data['workingHours'] = {\n    \"timezone\": null,\n    \"timeFormat\": false,\n    \"from\": null,\n    \"to\": null\n  }\n",
            "version": "4.2.23"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleDisableByFunction'])) step.data['scheduleDisableByFunction'] = false;\nif(_.isUndefined(step.data['scheduleDisableByMf'])) step.data['scheduleDisableByMf'] = false;\nif(_.isUndefined(step.data['scheduleDisableByManually'])) step.data['scheduleDisableByManually'] = false;\nif(_.isUndefined(step.data['scheduleDisableFunction'])) step.data['scheduleDisableFunction'] = \"\";\nif(_.isUndefined(step.data['scheduleDisableMf'])) step.data['scheduleDisableMf'] = \"this.get('')\";\nif(_.isUndefined(step.data['scheduleDisableManual'])) step.data['scheduleDisableManual'] = [];\n",
            "version": "4.2.24"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleMultiselectQuantity'])) step.data['scheduleMultiselectQuantity'] = \"3\";\nstep.data.scheduleDisableFunction = `// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;`",
            "version": "4.2.25"
          },
          {
            "sample": null,
            "script": "if(step.data.carouselOptions) {\r\n  step.data.carouselOptions = _.map(step.data.carouselOptions, card => ({\r\n    ...card,\r\n    showModalButtonInUserResponse: true\r\n  }));\r\n}",
            "version": "4.2.34"
          },
          {
            "sample": null,
            "script": "if(step.data.carouselOptions) {\r\n  step.data.carouselOptions = _.map(step.data.carouselOptions, card => ({\r\n    ...card,\r\n    modalType: \"default-modal\"\r\n  }));\r\n}",
            "version": "4.2.36"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleDisableManual'])) step.data['scheduleDisableManual'] = [];",
            "version": "4.2.37"
          },
          {
            "sample": null,
            "script": "step.data['scheduleOptionItems'] = [{label: \"``\", value: \"``\"}]",
            "version": "4.2.43"
          },
          {
            "sample": null,
            "script": "step.data.recordMultimediaOptions = [\"`audio`\", \"`video`\", \"`screen`\", \"`file`\"]",
            "version": "4.2.45"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customVariables'])) step.data['customVariables'] = [];\n",
            "version": "4.2.46"
          },
          {
            "sample": null,
            "script": "step.data.carouselOptions = _.map(step.data.carouselOptions, option => ({\n    image: _.get(option, 'image', {}),\n    video: _.get(option, 'video', {}),\n    label: _.get(option, 'label', \"``\"),\n    description: _.get(option, 'description', \"``\"),\n    button: _.get(option, 'button', \"``\"),\n    value: _.get(option, 'value', \"``\"),\n    hasModal: _.get(option, 'hasModal', false),\n    modalType: _.get(option, 'modalType', \"default-modal\"),\n    buttonStyle: _.get(option, 'buttonStyle', \"default\"),\n    html: _.get(option, 'html', \"\"),\n    showModalButtonInUserResponse: _.get(option, 'showModalButtonInUserResponse', true),\n    vforkey: _.get(option, 'vforkey', \"\")\n  }))",
            "version": "4.2.47"
          },
          {
            "sample": null,
            "script": "step.data.customTemplateType = '`vue`';\nstep.data.customTemplateHtmlCode = ``;\nstep.data.customTemplateJavaScriptCode = ``;\nstep.data.customTemplateCSSCode = ``;",
            "version": "4.2.49"
          },
          {
            "sample": null,
            "script": "step.data.autoSubmitCustomTemplate = true;\nstep.data.showCustomComponentInMessage = true;",
            "version": "4.2.52"
          },
          {
            "sample": null,
            "script": "step.data.customTempalateScripts = [];",
            "version": "4.2.54"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['hideCustomComponentAfterSubmit'])) step.data['hideCustomComponentAfterSubmit'] = false;\n",
            "version": "4.2.55"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.name === `custom`) {\n    step.data.inputComponent = `\\`custom\\``;\n    step.data.customComponent = step.data.stepVariable.answerComponent.template;\n\n    step.data.showCustomComponentInMessage = _.get(step, 'data.stepVariable.answerComponent.showComponentInMessage', true)\n}",
            "version": "4.2.56"
          },
          {
            "sample": null,
            "script": "step.data.customTemplateId = ``;",
            "version": "4.2.57"
          },
          {
            "sample": null,
            "script": "step.data.carouselOptions = _.map(step.data.carouselOptions, option => ({\n    image: _.get(option, 'image', {}),\n    video: _.get(option, 'video', {}),\n    title: _.get(option, 'label', \"``\"),\n    description: _.get(option, 'description', \"``\"),\n    buttonLabel: _.get(option, 'button', \"``\"),\n    value: _.get(option, 'value', \"``\"),\n    hasModal: _.get(option, 'hasModal', false),\n    modalType: _.get(option, 'modalType', \"default-modal\"),\n    buttonStyle: _.get(option, 'buttonStyle', \"default\"),\n    html: _.get(option, 'html', \"\"),\n    showModalButtonInUserResponse: _.get(option, 'showModalButtonInUserResponse', true),\n    vforkey: _.get(option, 'vforkey', \"\")\n}));\n\n_.forEach(step.data.carouselOptions, option => {\n    delete option.label;\n    delete option.button;\n})\n\nstep.data.carouselAlternative = {\n    description: _.get(step, 'data.carouselAlternative.text', \"``\"),\n    buttonLabel: _.get(step, 'data.carouselAlternative.button', \"``\"),\n    buttonStyle: _.get(step, 'data.carouselAlternative.buttonStyle', \"``\"),\n    value: _.get(step, 'data.carouselAlternative.value', \"``\")  \n};",
            "version": "4.2.58"
          },
          {
            "sample": null,
            "script": "\nif(step.data.inputComponent === `\\`card\\``) {\n    step.data.inputComponent = `\\`carousel\\``;\n\n    step.data.carouselOptions = [{\n        image: step.data.cardImage,\n        video: {},\n        title: \"``\",\n        description: step.data.cardDescription,\n        buttonLabel: step.data.cardBtnLabel,\n        value: step.data.cardBtnValue,\n        hasModal: false,\n        modalType: \"default-modal\",\n        buttonStyle: step.data.buttonStyle,\n        html: \"\",\n        showModalButtonInUserResponse: true,\n        vforkey: \"\"\n    }];\n\n    step.data.carouselHasAlternative = false;\n}\n\ndelete step.data.cardImage;\ndelete step.data.cardDescription;\ndelete step.data.cardBtnLabel;\ndelete step.data.cardBtnValue;\ndelete step.data.buttonStyle;",
            "version": "4.2.59"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['carouselOptions'])) step.data['carouselOptions'] = [{\"image\":{},\"video\":{},\"title\":\"``\",\"description\":\"``\",\"buttonLabel\":\"``\",\"value\":\"``\",\"hasModal\":false,\"modalType\":\"default-modal\",\"buttonStyle\":\"default\",\"html\":\"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding: 1rem 0;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: block;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\"showModalButtonInUserResponse\":true}];\n",
            "version": "4.2.60"
          },
          {
            "sample": null,
            "script": "step.data.isPrivateFiles = false;",
            "version": "4.2.66"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['showBotIcon'])) step.data['showBotIcon'] = false;\n",
            "version": "4.2.68"
          },
          {
            "sample": null,
            "script": "step.data.timeoutDuration = step.data.timeoutVariable.waitTimeout;\nstep.data.processTimeout = step.data.timeoutVariable.processTimeout;\nconst timeoutExit = _.find(step.data.exits, exit => exit.label === 'timeout');\nif (timeoutExit) {\n  timeoutExit.id = '__timeout__';\n  timeoutExit.condition = 'processTimeout';\n}\ndelete step.data.timeoutVariable;",
            "version": "4.2.69"
          },
          {
            "sample": null,
            "script": "step.data.carouselOptions = _.map(step.data.carouselOptions, option => ({\n    ...option,\n    childWindowType: `html`,\n    additionalContentLink: {},\n}));",
            "version": "4.2.76"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['ratingSubmitLabel'])) step.data['ratingSubmitLabel'] = \"``\";\nif(_.isUndefined(step.data['ratingDiscardLabel'])) step.data['ratingDiscardLabel'] = \"``\";\n",
            "version": "4.2.78"
          },
          {
            "sample": null,
            "script": "step.data.carouselMultiselect = false;",
            "version": "4.2.81"
          },
          {
            "sample": null,
            "script": "const inputComponent = _.replace(_.get(step.data, 'stepVariable.answerComponent.component'), 'rwc-', '');\n  if(inputComponent) {\n    step.data.inputComponent = `\\`${inputComponent}\\`` || '`textFiles`'\n  }",
            "version": "4.2.86"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.name === `checkbox-group`) {\n    step.data.inputComponent = `\\`checkbox\\``;\n\n    const options = _.get(step, 'data.stepVariable.answerComponent.vBind.options', []);\n    const defaultValue = _.get(step, 'data.stepVariable.answerComponent.vBind.defaultValue', []);\n\n    step.data.checkboxOptions = options;\n    step.data.checkboxDefault = defaultValue;\n\n    step.data.showCustomComponentInMessage = _.get(step, 'data.stepVariable.answerComponent.showComponentInMessage', true)\n}",
            "version": "4.2.87"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-datepicker`) {\n    step.data.inputComponent = `\\`datepicker\\``;\n\n    const datepickerStartsFrom = _.get(step, 'data.stepVariable.answerComponent.vBind.startDay', '0');\n    const datepickerFormat = _.get(step, 'data.stepVariable.answerComponent.vBind.outFormat', 'MM-DD-YYYY');\n\n    step.data.datepickerStartsFrom = `\\`${datepickerStartsFrom}\\``;\n    step.data.datepickerFormat = `\\`${datepickerFormat}\\``;\n\n\n    step.data.datepickerBlockDates = false;\n    step.data.datepickerSuggestedDates = false;\n    step.data.datepickerBlockedOptions = [];\n    step.data.datepickerSuggestedOptions = [];\n}",
            "version": "4.2.88"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-dropdown`) {\n    step.data.inputComponent = `\\`dropdown\\``;\n\n    const options = _.get(step, 'data.stepVariable.answerComponent.vBind.options', []);\n    const dropdownPlaceholder = _.get(step, 'data.stepVariable.answerComponent.vBind.dropdownPlaceholder', '``');\n\n    step.data.dropdownOptions = options;\n    step.data.dropdownPlaceholder = dropdownPlaceholder;\n}",
            "version": "4.2.89"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-menu`) {\n    step.data.inputComponent = `\\`menu\\``;\n\n    const options = _.get(step, 'data.stepVariable.answerComponent.vBind.options', []);\n\n    step.data.optionListOptions = options;\n}",
            "version": "4.2.90"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-timepicker`) {\n    step.data.inputComponent = `\\`timepicker\\``;\n\n    const timeFormat = _.get(step, 'data.stepVariable.answerComponent.vBind.timeFormat', '12');\n\n    step.data.timepickerFormat = `\\`${timeFormat}\\``;\n}",
            "version": "4.2.91"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-buttons-list`) {\n    step.data.inputComponent = `\\`buttons\\``;\n\n    const optionsButtons = _.get(step, 'data.stepVariable.answerComponent.vBind.options') || [];\n\n    step.data.optionsButtons = _.map(optionsButtons, button => ({ ...button, buttonStyle: \"default\" }));\n}",
            "version": "4.2.92"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-radio-group`) {\n    step.data.inputComponent = `\\`radio\\``;\n\n    const radioOptions = _.get(step, 'data.stepVariable.answerComponent.vBind.options') || [];\n    const defaultValue = _.get(step, 'data.stepVariable.answerComponent.vBind.defaultValue') || '`No option`';\n\n    step.data.radioOptions = radioOptions;\n    step.data.radioDefault = defaultValue;\n}",
            "version": "4.2.93"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `or-textbox`) {\n    step.data.inputComponent = `\\`textFiles\\``;\n\n    const medias = _.get(step, 'data.stepVariable.medias') || [];\n    const messageText = _.get(step, 'data.stepVariable.messageText') || '``';\n    const placeholder = _.get(step, 'data.stepVariable.answerComponent.vBind.placeholder') || '``';\n\n    step.data.radiotextMessageOptions = messageText;\n    step.data.medias = medias;\n    step.data.textPlaceholder = placeholder;\n\n    step.data.textInputAllowMask = false;\n}",
            "version": "4.2.94"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-attachment`) {\n    step.data.inputComponent = `\\`attachments\\``;\n\n    const attachmentsNumber = _.get(step, 'data.stepVariable.answerComponent.vBind.isMulti') || \"0\";\n    const attachmentsAllowChosen = _.get(step, 'data.stepVariable.answerComponent.vBind.filesValidation') || false;\n    const attachmentsAllowedTypes = _.get(step, 'data.stepVariable.answerComponent.vBind.allowedFileTypes') || [];\n\n    step.data.attachmentsNumber = `\\`${attachmentsNumber}\\``;\n    step.data.attachmentsAllowChosen = attachmentsAllowChosen;\n    step.data.attachmentsAllowedTypes = attachmentsAllowedTypes;\n\n    step.data.isPrivateFiles = false;\n}",
            "version": "4.2.95"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-location`) {\n    step.data.inputComponent = `\\`geolocation\\``;\n\n    const geolocationBtn = _.get(step, 'data.stepVariable.answerComponent.vBind.buttonLabel') || '``';;\n\n    step.data.geolocationBtn = geolocationBtn;\n\n    step.data.geolocationSetDefault = false;\n    step.data.geolocationLat = '``';\n    step.data.geolocationLng = '``';\n}",
            "version": "4.2.96"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-slider`) {\n    step.data.inputComponent = `\\`slider\\``;\n\n    const sliderMin = _.get(step, 'data.stepVariable.answerComponent.vBind.min') || '``';\n    const sliderMax = _.get(step, 'data.stepVariable.answerComponent.vBind.max') || '``';\n    const sliderStep = _.get(step, 'data.stepVariable.answerComponent.vBind.step') || '``';\n    const sliderUnit = _.get(step, 'data.stepVariable.answerComponent.vBind.unit') || '``';\n    const sliderUnitPosition = _.get(step, 'data.stepVariable.answerComponent.vBind.unitPosition') || 'end';\n\n    step.data.sliderMin = sliderMin;\n    step.data.sliderMax = sliderMax;\n    step.data.sliderStep = sliderStep;\n    step.data.sliderUnit = sliderUnit;\n    step.data.sliderUnitPosition = `\\`${sliderUnitPosition}\\``;\n\n    step.data.sliderType = 'single';\n    step.data.sliderDefaultValue = '``';\n    step.data.sliderUseCustomLabels = false;\n\n    step.data.sliderDefaultStart = '``';\n    step.data.sliderDefaultEnd = '``';\n\n    step.data.sliderCustomLabels = [{ label: '``', value: '``' }, { label: '``', value: '``' }];\n}",
            "version": "4.2.97"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nconst autoSuggestion = _.get(step, 'data.autoSuggestion') || [];\nconst options = _.get(step, 'data.autoSuggestion.options') || [];\n\nstep.data.autoSuggestion = _.omit(autoSuggestion, ['options']);\n\nif(_.size(options)) {\n  step.data.autoSuggestionType = '`list`';\n  step.data.autoSuggestionOptionsList = options;\n} else {\n  step.data.autoSuggestionType = '`emty`';\n  step.data.autoSuggestionOptionsList = [];\n}\n\nstep.data.autoSuggestionOptionsMergeField = `await this.mergeFields[''].get()`\n",
            "version": "4.2.98"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-card`) {\n    step.data.inputComponent = `\\`carousel\\``;\n\n    const image = _.get(step, 'data.stepVariable.answerComponent.vBind.image[0]') || {};\n    const description = _.get(step, 'data.stepVariable.answerComponent.vBind.description') || '``';\n    const buttonLabel = _.get(step, 'data.stepVariable.answerComponent.vBind.button') || '``';\n    const value = _.get(step, 'data.stepVariable.answerComponent.vBind.sendValue') || '``';\n\n    step.data.carouselOptions = [{\n      image,\n      video: {},\n      title: \"``\",\n      description,\n      buttonLabel,\n      value,\n      hasModal: false,\n      modalType: \"default-modal\",\n      childWindowType: \"html\",\n      additionalContentLink: {},\n      buttonStyle: \"default\",\n      html: \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\n      showModalButtonInUserResponse: true,\n    }];\n}",
            "version": "4.2.99"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-carousel`) {\n    step.data.inputComponent = `\\`carousel\\``;\n\n\n    const prevCarouselOptions = _.get(step, 'data.stepVariable.answerComponent.vBind.options') || [];\n\n    step.data.carouselOptions = _.map(prevCarouselOptions, option => {\n      const image = _.get(option, 'image[0]') || {};\n      const title = _.get(option, 'label') || '``';\n      const description = _.get(option, 'description') || '``';\n      const buttonLabel = _.get(option, 'button') || '``';\n      const value = _.get(option, 'value') || '``';\n\n      return {\n        image,\n        video: {},\n        title,\n        description,\n        buttonLabel,\n        value,\n        hasModal: false,\n        modalType: \"default-modal\",\n        childWindowType: \"html\",\n        additionalContentLink: {},\n        buttonStyle: \"default\",\n        html: \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\n        showModalButtonInUserResponse: true,\n      };\n    });\n\n    const carouselHasAlternative = _.get(step, 'data.stepVariable.answerComponent.vBind.hasOtherOption') || false;\n    const carouselAlternative = _.get(step, 'data.stepVariable.answerComponent.vBind.otherOptionData') || {};\n\n    step.data.carouselMultiselect = false;\n    step.data.carouselHasAlternative = carouselHasAlternative;\n\n    step.data.carouselAlternative = {\n      description: _.get(carouselAlternative, 'text') || '``',\n      buttonLabel: _.get(carouselAlternative, 'button') || '``',\n      buttonStyle: 'default',\n      value: _.get(carouselAlternative, 'value') || '``'\n    }\n\n}",
            "version": "4.2.100"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['rwcContext'])) step.data['rwcContext'] = {\"contextKey\":\"__rwc_context\",\"store\":\"this.get('__rwc_context', await this.getShared('__rwc_context'))\",\"output\":{\"selectStyle\":\"inherited\"}};\n",
            "version": "4.3.0"
          },
          {
            "sample": null,
            "script": "step.data.carouselSubmitBtnLabel = '`Submit`';\nstep.data.carouselCancelBtnLabel = '`No, thanks`';",
            "version": "4.3.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['additionalContentCardChangeType'])) step.data['additionalContentCardChangeType'] = \"`append`\";\nif(_.isUndefined(step.data['additionalContentVideo'])) step.data['additionalContentVideo'] = [];\nif(_.isUndefined(step.data['additionalHtml'])) step.data['additionalHtml'] = \"\";\nif(_.isUndefined(step.data['additionalCss'])) step.data['additionalCss'] = \"\";\nif(_.isUndefined(step.data['additionalScript'])) step.data['additionalScript'] = \"\";\nif(_.isUndefined(step.data['additionalCardvariables'])) step.data['additionalCardvariables'] = [];\n",
            "version": "4.4.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['textInputType'])) step.data['textInputType'] = \"text\";\n",
            "version": "4.4.11"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['textInputCustomPattern'])) step.data['textInputCustomPattern'] = \"``\";\n",
            "version": "4.4.12"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.creditCancelBtnLabel)) step.data.creditCancelBtnLabel = \"``\";",
            "version": "4.4.13"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.hasCancelExit)) step.data.hasCancelExit = false",
            "version": "4.4.16"
          },
          {
            "sample": null,
            "script": "const customTemplateVueHtmlTemplate = _.get(step.data, 'customTemplateVueHtmlTemplate');\n\nstep.data.customTemplateVueHtmlTemplate = '';\n\nconst customComponent = _.get(step.data, 'customComponent');\n\nif(customComponent) step.data.customTemplateVueScript = customComponent\n\ndelete step.data.customComponent;",
            "version": "4.4.18"
          },
          {
            "script": "if(_.isUndefined(step.data['dropdownMultiple'])) step.data['dropdownMultiple'] = false;\n",
            "version": "4.4.28"
          },
          {
            "script": "",
            "version": "4.4.29"
          }
        ],
        "modules": [
          {
            "name": "axios",
            "version": ""
          },
          {
            "name": "bluebird",
            "version": ""
          },
          {
            "name": "timestring",
            "version": ""
          },
          {
            "name": "uuid",
            "version": ""
          }
        ],
        "dateCreated": 1571248485762,
        "dateModified": 1664808315701,
        "hooks": {}
      },
      {
        "id": "1683b915-08e7-419c-b4b1-b99cdce7717b",
        "version": "1.4.10",
        "cacheVersion": "449a99f1-f550-4c6d-9819-7a3d1599f402",
        "label": "Create Merge Field Data",
        "icon": "create_data",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "Step allows to declare variables and assign values to them to be used further in the flow.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "let dataOut = {};\nlet parseValue = (elem, force) => {\n  if (force) return _.isString(elem) ? elem : JSON.stringify(elem)\n  if (!_.isEmpty(_.trim(elem)) && _.isFinite(Number(elem))) elem = Number(elem);\n  if (elem === \"true\") elem = true;\n  if (elem === \"false\") elem = false;\n  if (elem === \"null\") elem = null;\n  if (elem === \"undefined\") elem = undefined;\n  return elem;\n}\n\nlet recur = (obj, virtualValue) => {\n  let res;\n  if (_.isArray(obj)) {\n    res = _.map(obj, (elem, key) => {\n      if (_.isArray(elem) || _.isObject(elem)) {\n        return recur(elem, _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)))\n      } else {\n        return parseValue(_.replace(_.replace(elem, /\\\\\\\\/g, \"\\\\\"), /\\\\`/g, '`'), _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)) ? _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)).force : false);\n      }\n    });\n  } else {\n    res = _.mapValues(obj, (elem, key) => {\n      if (_.isArray(elem) || _.isObject(elem)) {\n        return recur(elem, _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)))\n      } else {\n        return parseValue(_.replace(_.replace(elem, /\\\\\\\\/g, \"\\\\\"), /\\\\`/g, '`'), virtualValue ? _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)).force : false);\n      }\n    })\n  }\n  return res;\n};\n\n\nif (selectedMode === 'Advanced') {\n  _.map(Object.keys(nativeJson), item => {\n    let virtualVal = _.find(virtualJson, vitem => vitem.key === item);\n    if (_.find(virtualJson, vitem => vitem.key === item) && _.find(virtualJson, vitem => vitem.key === item).force) {\n      let val = nativeJson[item];\n      _.set(dataOut, item, _.isString(val) ? val : JSON.stringify(val));\n    } else {\n      let val = nativeJson[item];\n      if (_.isObject(nativeJson[item]) || _.isArray(nativeJson[item])) {\n        _.set(dataOut, item, recur(val, virtualVal));\n      } else {\n        val = _.replace(_.replace(val, /\\\\\\\\/g, \"\\\\\"), /\\\\`/g, '`');\n        if (!_.isEmpty(_.trim(nativeJson[item])) && _.isFinite(Number(nativeJson[item]))) val = Number(nativeJson[item]);\n        if (nativeJson[item] === \"true\") val = true;\n        if (nativeJson[item] === \"false\") val = false;\n        if (nativeJson[item] === \"null\") val = null;\n        if (nativeJson[item] === \"undefined\") val = undefined;\n        _.set(dataOut, item, val);\n      }\n    }\n  });\n} else if (selectedMode === 'Extended') {\n  variables.forEach(item => {\n    if (item.variableName === '') throw new Error(\"Property name can't be empty.\");\n\n    switch (_.get(item, 'valueType')) {\n      case 'string':\n        _.set(dataOut, item.variableName, String(item.variableValue))\n        break\n      case 'number':\n        if (_.isEmpty(item.variableValue) || _.isEmpty(item.variableValue.trim())) {\n          throw new Error(\"Value can't be empty.\")\n        }\n        if (!_.isFinite(_.toNumber(item.variableValue))) {\n          throw new Error(`Incorrect data type was used for ${item.variableName}`)\n        }\n        _.set(dataOut, item.variableName, _.toNumber(item.variableValue))\n        break\n      case 'boolean':\n        if (!_.isBoolean(item.variableValue)) {\n          throw new Error(`Incorrect data type was used for ${item.variableName}`)\n        }\n        _.set(dataOut, item.variableName, item.variableValue)\n        break\n      case 'null':\n        _.set(dataOut, item.variableName, null)\n        break\n      default:\n        _.set(dataOut, item.variableName, item.variableValue)\n        break\n    }\n  });\n\n} else if (selectedMode === 'Simple') {\n  if (valueType === 'code' && typeof simpleData === 'undefined') {\n    throw new Error(\"Value type of merge field data is 'undefined', please enter a valid data type!\");\n  }\n\n  if (valueType === 'number' && (_.isEmpty(simpleData) || _.isEmpty(simpleData.trim()))) throw new Error(\"Value can't be empty.\");\n\n  if ((valueType === 'number' && !_.isFinite(_.toNumber(simpleData))) ||\n    (valueType === 'boolean' && !_.isBoolean(simpleData))) {\n    throw new Error(`Incorrect data type was used for Merge Field`);\n  }\n\n  dataOut = valueType === 'number' ?\n    Number(simpleData) : valueType === 'boolean' ?\n    Boolean(simpleData) : valueType === 'null' ?\n    null : simpleData;\n}\n\nreturn this.exitStep('next', dataOut);",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "jsonE": {},
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "valueType": "string",
          "variables": [],
          "mergeField": "",
          "nativeJson": {},
          "simpleData": "",
          "virtualJson": [],
          "processError": true,
          "selectedMode": "",
          "virtualJsonEditable": []
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "variableName": "value"
        },
        "help": "Step allows to declare one or more variables and assign values to them to be used further in the flow via the *merge field*. The merge field name can be generated automatically from the name of the step or set up manually.\n\n### Create merge field data\nIn order to create data choose one of three modes in the dropdown.\n\n*Simple* mode lets you store a single value in a merge field. The value can be defined manually, using *merge field values* or left empty. *String*, *number*, *boolean* and *null* data types are available in the dropdown, as well as an option to declare more advanced types, like objects and arrays, in code mode. The *value* input will be validated in accordance with to the chosen data type.\n\nUsing *Extended* mode allows creation of multiple variables within one merge field via an *Add merge field property* button and assigning each one a value. At least one property must be defined, and its name should follow these rules:\n- must have a unique name;\n- should start only with a letter;\n- can contain numbers;\n- cannot contain any special characters or spaces;\n- cannot be named as JS reserved words. \n\nThe *value* inputs follow the same rules as in *Simple* mode.\n\n*Advanced* mode allows building a more complex structure of variables and values with help of a JSON editor. Go to full screen mode to be able to make changes. Options to copy and paste created JSON and expand or collapse the created structure are available. Position of the element can be changed using drag controls. Note that elements on the same level can't have empty or identical names and an error message will be displayed in case a user tries to add invalid JSON. If you choose the *Auto* option, the editor will detect the data type automatically.\n\n### Error handling\n\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. the *value* does not match the selected *data type*).\n\n### Reporting events\n\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Release notes\n#### v1.4.2\n- Simple mode was added\n- Advanced mode with JSON Editor was added\n- Added error processing \n- General UI improvements\n- General Bugfixes\n",
        "formBuilder": {
          "stepExits": [
            {
              "id": "3d3d258a-11fa-4bae-a8c7-6e9eab268601",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "b8f42e1e-7821-4967-a3c2-66c8d82ccedf",
              "data": {
                "open": true,
                "header": "Create merge field data",
                "inputs": [
                  {
                    "id": "528d3426-cf02-4e7d-a136-e1bba47eed05",
                    "data": {
                      "data": "{\n  \"selectedMode\": \"Extended\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard  :selectedMode.sync=\"schema.selectedMode\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xcbnrtwphuzgfisldyqakjoemv",
                      "componentLogic": "{\n  data() {\n    return {\n      modeList: ['Simple', 'Extended', 'Advanced'],\n    }\n  },\n  \n  watch: {\n    selectedMode() {\n      this.$emit('update:selectedMode', this.selectedMode)\n    }\n  },\n  \n  props : {\n    selectedMode: {\n      type : String,\n      default : 'Extended'\n    },\n    readonly: String,\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  \n  mounted () {\n    this.$emit('update:selectedMode', this.selectedMode || 'Extended')\n  }\n}",
                      "renderCondition": "",
                      "componentTemplate": "<div class=\"header\">\n  <div></div>\n  <or-select\n    class=\"mode-list-select\"\n    :options=\"modeList\"\n    v-model=\"selectedMode\"\n    ref=\"modeListSelect\"\n    :disabled=\"readonly\"\n  ></or-select>\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "a1009716-96b3-4f0c-8e7c-6083884042ee",
                          "mode": "",
                          "title": "No title",
                          "template": "",
                          "variable": "NoVariable"
                        },
                        {
                          "id": "d1761039-d28a-4e7f-9d20-4891420db729",
                          "mode": "",
                          "title": "No title",
                          "template": "",
                          "variable": "NoVariable"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 0;\n  \n  & * {\n    margin: 0;\n  }\n  \n  & > h4 {\n    font-size: 16px;\n    line-height: 22px;\n  }\n}\n\n.ui-select .ui-select__content .ui-select__label .ui-select__display {\n  width: auto;\n  padding: 2px 0 2px 10px;\n  border: 0;\n  background: transparent;\n  color: #a1a5aa;\n  font-weight: 300;\n}\n\n.ui-select__display-value {\n    flex-grow: 0;\n}\n\n.ui-textbox .value .ui-textbox--icon-position-left .has-label {\n  font-weight: bold;\n}\n\n.mode-list-select {\n  margin-top: -44px !important;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "b1a5157d-8ae5-4404-a3f7-b8123d9e4e1e",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "The output data of the step will be stored under this name and can be reused further in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "",
                      "defaultType": "session",
                      "placeholder": "Enter merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "label": "Merge field",
                    "compiled": {},
                    "component": "formDataOut"
                  },
                  {
                    "id": "3b718b92-8358-496a-a1d9-3af282b56137",
                    "data": {
                      "data": "{\n  \"simpleData\": \"\",\n  \"valueType\": \"string\",\n  \"mergeField\":\"\",\n  \"selectedMode\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) { \n    if (_.isArray(data)) { \n      return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n      return `{${_.map(data, (value, key) => `${_.isEmpty(key) ? `\"\"`: key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n    if (_.isEqual(key, 'simpleData')) {\n      return data;\n    }\n    \n    // if ((_.isEqual(key, 'simpleData') || _.isEqual('variableValue', key)) && data.selectedMode === 'Simple') {\n    //   // console.log('data simple:', { data })\n    //   return data;\n    // }\n    \n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  simpleData : {\n    custom(value) {\n      if(this.schema.selectedMode !== 'Simple') return true;\n      \n      let containsMergeField = _.isString(value) && validators.validateExpression(value);\n      \n      if (/await|this/.test(value) && this.schema.valueType === 'number') {\n        return true\n      }\n      \n      if (this.schema.valueType === 'code' && !validators.jsExpression(value)){\n        return false;\n      }\n    \n      if(\n        this.schema.valueType === 'number' && !value.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/) || \n        this.schema.valueType === 'number' && !(value.slice(1,-1) && !_.isEmpty(value.slice(1,-1)) && \n        (containsMergeField || _.isFinite(_.toNumber(value.slice(1,-1)))))\n      ){\n        return false;\n      }\n       \n      return true;\n    }\n  },\n  variableName : {\n     custom(value) {\n        return !_.isEmpty(this.schema.dataOut);\n      }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :isInvalidJSandEmpty.sync=\"schema.isInvalidJSandEmpty\"\n  :mergeField.sync=\"schema.dataOut\"\n  :simpleData.sync=\"schema.simpleData\"\n  :outputExample.sync=\"step.outputExample\"\n  :selectedMode=\"schema.selectedMode\"\n  :merge-fields=\"mergeFields\"\n  :steps.sync=\"steps\"   \n  :step=\"step\"\n  :stepId=\"stepId\"    \n  :schema.sync=\"schema\"   \n  :v=\"$v\"   \n  :readonly=\"readonly\"\n  :isNew=\"isNew\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-enafqigbzxkumjvtcolywdshrp",
                      "componentLogic": "{\n  components: {\n    variableItem: {\n      props: {\n        mergeField: {\n          type: Object,\n          default: ''\n        },\n        variableName: {\n          type: String,\n          default: ''\n        },\n        variableValue: {\n          default: ''\n        },\n        valueType: {\n          type: String,\n          default: 'string'\n        },\n        steps: '',\n        stepId: '',\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        readonly: {\n          type: Boolean,\n          default: false\n        },\n        isNew: Boolean\n      },\n      \n      computed: {\n        invalidValue() {\n          const invalid = (this.valueTypeLocal === 'number' && !this.isValidNumber) || \n            (this.valueTypeLocal === 'code' && !validators.jsExpression(this.variableValueLocal)) ||\n            (this.valueTypeLocal === 'code' && this.variableValueLocal === '')\n            \n          if (invalid) {\n            this.errorText = this.valueTypeLocal === 'number' \n              ? 'Invalid number.' \n              : 'Please enter a valid JS expression.';\n          }\n          \n          if (this.valueTypeLocal === 'number') {\n            this.checkNumber()\n          }\n          \n          return invalid\n        },\n        \n        isNull () {\n          return this.valueTypeLocal === 'null';\n        },\n        \n        isValidNumber () {\n          const checked =  this.checkNumber();\n          \n          let containsMergeField = validators.validateExpression(this.variableValue);\n          \n          return checked || this.variableValue.slice(1,-1) && \n            !_.isEmpty(this.variableValue.slice(1,-1)) && (_.isFinite(_.toNumber(this.variableValue.slice(1,-1))) || containsMergeField) && \n            this.variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/);\n        },\n        \n        variableNameLocal: {\n          get() {\n            return this.variableName;\n          },\n          set(newValue) {\n            this.$emit('update:variableName', newValue);\n            this.validateVariableName(newValue);\n          }\n        },\n        \n        variableValueLocal: {\n          get() {\n            return this.variableValue;\n          },\n          set(newValue) {\n            this.$emit('update:variableValue', newValue.trim ? newValue.trim() : newValue);\n          }\n        },\n        \n        valueTypeLocal: {\n          get() {\n            return this.valueType;\n          },\n          set(newValue) {\n            if (newValue === 'string' || newValue === 'number') {\n              this.variableValueLocal = '``'\n            } else if (newValue === 'boolean') {\n              this.variableValueLocal =  _.isBoolean(this.variableValueLocal) ? this.variableValueLocal : true;\n            } else if (newValue === 'null') {\n              this.variableValueLocal = '`null`';\n            } else if (newValue === 'code') {\n              this.variableValueLocal = ''\n            }\n            \n            this.$emit('update:valueType', newValue);\n          }\n        }\n      },\n      \n      watch: {\n        mergeField(newVal) {\n          this.variableName = newVal.name;\n          this.validateVariableName(newVal.name)\n        },\n        variableName(val) {\n          this.$emit('update:variableName', val)\n        }\n      },\n  \n      data () {\n        return {\n          variableTypeOptions: ['string', 'number', 'boolean', 'null', 'code'],\n          isInvalidVariableName: false,\n          errorText: 'Invalid number.'\n        }  \n      },\n      \n      methods: {\n        checkNumber () {\n          if (/await|this/.test(this.variableValue)) return true\n          \n          this.errorText =  _.isFunction(this.variableValue.slice) && this.variableValue.slice(1,-1).trim() === '' ? 'Value is required.' : 'Invalid number'\n          \n          if (_.isFunction(this.variableValue.slice) && /^\\s+$/.test(this.variableValue.slice(1,-1))) {\n            this.errorText = 'Value is required.'\n          }\n          \n          return false\n        },\n        \n        handleTypeChange (type) {\n          this.valueTypeLocal = type\n          \n          if (type === 'number') this.checkNumber()\n          \n          setTimeout(() => {\n            const showText = _.get(this, '$refs.variableValueInput.showText')\n            if (type === 'code' || (type !== 'code' && !showText)) {\n              this.toggleInputMode()\n            }\n          }, 50)\n        },\n        \n        validateVariableName (varName, isFromEmit = false) {\n          this.isInvalidVariableName = false;\n          \n          let validName = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n\n          if (this.variableName === '') return\n          \n          if (_.isEmpty(_.trim(varName))) {\n            this.errorText = 'Value is required.';\n            this.isInvalidVariableName = true;\n          } else if (!validName.test(varName)) {\n            this.errorText = 'Use valid variable name.';\n            this.isInvalidVariableName = true;\n          }\n          \n          if(!isFromEmit) this.$root.$emit('validateVariable', this._uid);\n        },\n           \n        toggleInputMode () {\n          if(_.get(this, '$refs.variableValueInput.toggleMode')) this.$refs.variableValueInput.toggleMode()\n        }\n      },\n      \n      mounted () {\n        if (this.valueType === 'code') {\n          this.toggleInputMode()\n        }\n        \n        if (this.valueType === 'string' && this.variableValueLocal === '') {\n          this.variableValueLocal = '``'\n        }\n      \n        this.$root.$on('validateVariable', itemId => {\n          if (itemId !== this._uid) this.validateVariableName(this.variableName, true);\n        });\n        \n        if(!this.isNew && _.isEmpty(this.variableName)){\n          this.errorText = 'Value is required.';\n          this.isInvalidVariableName = true;\n        }\n        \n        // if(this.$refs.variableValueInput) this.isTextInput = this.$refs.variableValueInput.displayTextInput;\n        // this.isInvalidVariableName = _.isEmpty(this.variableNameLocal) && !this.isNew;\n      },\n\n      template: `<%= variableItem %>`\n    }\n  },\n  \n  data(){\n    return {\n      variableName: this.mergeField.name || '',\n      variableValue: _.isBoolean(this.simpleData) ? this.simpleData : (this.simpleData || ''),\n      valueType: 'string'\n    }\n  },\n  \n  watch: {\n    variableName() {\n      const mergeField = _.assign(this.mergeField, {name : this.variableName});\n      this.$emit('update:mergeField', mergeField);\n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n      \n      if(currentIndexStep !== -1) {\n        this.steps[currentIndexStep]['outputExample'] = {};\n        \n        this.$emit('update:simpleData', this.variableValue)\n        \n      \n      }\n    },\n    \n    variableValue(v) {\n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n      if(currentIndexStep !== -1) {\n        this.steps[currentIndexStep]['outputExample'] = {};\n        \n        this.$emit('update:simpleData', this.variableValue)\n      }\n    },\n    \n    selectedMode:{\n      handler(newVal){\n        if(_.isEqual(newVal, 'Simple')){\n          this.variableName = this.mergeField.name;\n          const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n          if(currentIndexStep !== -1) {\n            this.steps[currentIndexStep]['outputExample'] = {};\n            this.$emit('update:simpleData', this.variableValue)\n          }\n        }\n      }\n    } \n  },\n  \n  mounted(){\n    if (this.selectedMode !== 'Simple') return \n    \n    this.variableName = this.mergeField.name;\n    const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n    \n    if(currentIndexStep !== -1) {\n      this.steps[currentIndexStep]['outputExample'] = {};\n      this.$emit('update:simpleData', this.variableValue)\n    }\n  },\n    \n  props : {\n    mergeField: {\n      type: String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    outputExample: {\n      type: Object,\n      default () { return {} }\n    },\n    step:Object,\n    simpleData: String,\n    schema:{\n      type: Object,\n      default : () => {} \n    },\n    selectedMode : {\n      type : String,\n      default : 'string'\n    },\n    v: {\n      type: Object,\n      default () {\n        return {\n          schema: {\n            variables: {}\n          }\n        }\n      }\n    },\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    isNew:Boolean\n  }\n}",
                      "renderCondition": "",
                      "componentTemplate": "<div class=\"simple-mode\" v-if=\"selectedMode === 'Simple'\">\n  <variable-item \n    :mergeField.sync=\"mergeField\"\n    :variable-name.sync=\"variableName\"\n    :variable-value.sync=\"variableValue\"\n    :value-type.sync=\"schema.valueType\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    :merge-fields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :isNew=\"isNew\"\n  ></variable-item>\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "91e839ec-d69a-4ca3-a9dc-555fc2ee5885",
                          "mode": "html",
                          "title": "Variable Item",
                          "template": "<div class=\"variable\">\n  <div class=\"variable__value\">\n    <div class=\"select-wrapper\">\n      <div class=\"select-label\">Value</div>\n      <or-select \n        ref=\"valueTypeSelect\"\n        :disabled=\"readonly\"\n        :options=\"variableTypeOptions\"\n        :class=\"[{ valueTypeSelect : valueTypeLocal === 'code' }]\"\n        v-model=\"valueTypeLocal\"\n        @change=\"handleTypeChange\"\n      >\n      </or-select>\n    </div>\n    \n    <or-text-expression\n      v-if=\"valueTypeLocal !== 'boolean'\"\n      ref=\"variableValueInput\"\n      :readonly=\"readonly || isNull\"\n      :error=\"errorText\"\n      :invalid=\"invalidValue\"\n      :steps=\"steps\" \n      :merge-fields=\"mergeFields\"\n      :step-id=\"stepId\"\n      placeholder=\"Enter value\"\n      v-model=\"variableValueLocal\"\n    >\n    </or-text-expression>\n    \n    <or-radio-group \n      v-else\n      :disabled=\"readonly\"\n      :options=\"[true, false]\"\n      v-model=\"variableValueLocal\"\n    >\n    </or-radio-group>\n    \n    <span\n      v-show=\"this.valueType === 'number'\"\n      class=\"value-type-helper\"\n    >\n      Value should match the selected data type.\n    </span>\n  </div>\n</div>",
                          "variable": "variableItem"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".simple-mode {\n  margin-bottom: 30px;\n}\n\n.or-code {\n  min-height: 100%;\n}\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.variables-list {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  \n  .or-list-items {\n    width: 100%;\n  }\n  \n  > button.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  \tfont-size: 14px;\n  \tline-height: 14px;\n  }  \n  \n  &.or-list {\n    \n    .list-item {\n      position: relative;\n      padding: 0 36px 0 0;\n      \n      > .remove-button {\n      \tposition: absolute;\n        right: 0;\n        top: 36px;\n      }\n      \n      > .handle {\n        display: none;\n      }\n    }\n    \n    &.single-item {\n      \n      .list-item {\n        padding-left: 0;\n      }\n    }\n  }\n}\n\n.variable {\n  width: 100%;\n  display: flex;\n  .ui-select__content{\n    z-index:3;\n  }\n  &__name {\n    width: 50%;\n    padding-right: 21px;\n    \n    .ui-textbox {\n      &.is-invalid .ui-textbox__feedback-text {\n        visibility: visible;\n      }\n    }\n  }\n  \n  &__value {\n    width: 100%;\n    \n    .input-wrapper {\n      position: relative;\n      \n      &:after {\n        content: '';\n        position: absolute;\n        top: 18px;\n        left: -15px;\n        color: #0F232E;\n        font-size: 14px;\n        transform: translateY(-50%);\n      }\n    }\n    \n    .ui-select {\n      &__dropdown {\n        top: 100%;\n        right: 0;\n        width: auto;\n        min-width: auto;\n      }\n      \n      &__options {\n        min-width: auto;\n      }\n    }\n    \n    .ui-select,\n    .or-text-expression {\n      margin-bottom: 0;  \n    }\n    \n    .or-text-expression.invalid .or-code .ace-wrapper {\n      border-color: #f95d5d;\n    }\n    \n    .ui-select__label {\n    \tdisplay: flex;\n    \tjustify-content: space-between;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n        flex-grow: 0;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n      color: #64b2da !important;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__label-text {\n      white-space: nowrap;\n      font-size: 14px;\n    }\n    \n    .ui-select.has-label .ui-select__dropdown-button {\n      top: 0px;\n      font-size: 20px;\n      margin-top: 2px;\n    }\n    \n    .ui-radio-group {\n      &__label-text {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        font-size: 12px;\n        line-height: 36px;\n        color: rgb(145, 150, 157);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      \n      &__radio {\n        &:not(:first-child) {\n          margin-left: 10px;\n        }\n      }\n      \n      &__radios {\n        position: relative;\n        \n        &:after {\n          content: '';\n          position: absolute;\n          top: 18px;\n          left: -15px;\n          color: #0F232E;\n          font-size: 14px;\n          transform: translateY(-50%);\n        }\n      }\n      \n      &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n      &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n        color: #91969d;\n      }\n    }\n    \n    .ui-radio .ui-radio__label-text {\n      font-size: 14px;\n      line-height: 24px;\n    }\n    \n    .ui-radio-group__radios {\n      display: flex;\n      justify-content: left;\n      height: 36px;\n      font-size: 14px;\n      border-radius: 3px;\n      padding: 7px 10px;\n      background: #f6f6f6;\n    }\n  }\n}\n\n.value-type-helper {\n  display: block;\n  color: rgba(0,0,0,.38);\n  line-height: 1.2;\n  font-size: 12px;\n}\n\n.or-text-expression {\n  position: relative;\n  flex-grow: 1;\n  min-width: 50%;\n  .ui-icon-button.ui-icon-button--type-secondary.ui-icon-button--color-default.ui-icon-button--size-normal.flat.js-mode-btn.active{\n    top:2px;\n    right:26px;\n  }\n    & >.header {\n    position: absolute;\n    height: 36px;\n    width: 100%;\n    min-height: 0;\n    top: -36px;\n    & >button.ui-icon-button.flat.add-variable {\n      visibility: visible;\n      position: absolute;\n      top: 38px;\n      right: 0;\n      z-index: 2;\n    }\n  }\n  \n  .input-wrapper {\n    width: 100%;\n  }\n\n  .js-mode-btn {\n    visibility: hidden;\n    position: absolute;\n    top: -2px;\n    right: 75px;\n    z-index: 2;\n  }\n\n\n  .editable {\n      width: calc(100% - 36px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n  .ace_scroller {\n      width: calc(100% - 72px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n}\n.select-label {\n    color: rgba(0, 0, 0, 0.54);\n    font-size: 12px;\n    line-height: 36px;\n    transform-origin: left;\n    transition: color .1s ease,transform .2s ease;\n}\n.select-wrapper {\n  display: flex;\n  justify-content: space-between;\n}\n\n.valueTypeSelect {\n  margin-right: 30px;\n}\n\n.js-mode-btn {\n  display: none;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "93b7819a-ab60-40a5-a97e-127fd0d69e02",
                    "data": {
                      "data": "{\n  \"variables\": [],\n  \"jsonE\": {},\n  \"selectedMode\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(localData, key) { \n if (_.isArray(localData)) { \n    return `[${_.map(localData, toJson).join(',')}]`;\n    }\n    if (_.isObject(localData)) {\n      return `{${_.map(localData, (value, key) => `${key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n    \n    if(_.isEqual('variableValue',key) && data.selectedMode === 'Extended'){\n      return localData;\n    }\n    return JSON.stringify(localData);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "variables : {\n  custom(value) {\n    if(this.schema.selectedMode !== 'Extended') return true;\n    \n    let validName = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n    \n    let res = true\n    \n    for (let i = 0; i <= value.length - 1; i++) {\n      if (_.isEmpty(value[i].variableName.trim()) || !validName.test(value[i].variableName)) {\n        res = false;\n      } else {\n        for (let j = i + 1; j <= value.length - 1; j++) {\n          if (value[i].variableName === value[j].variableName) {\n            res = false;\n          }\n        }\n      }\n      \n      let containsMergeField = _.isString(value[i].variableValue) && validators.validateExpression(value[i].variableValue);\n      \n      if(\n        ((value[i].valueType === 'number' && !value[i].variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/)) || \n        (value[i].valueType === 'number' && !(value[i].variableValue.slice(1,-1) && !_.isEmpty(value[i].variableValue.slice(1,-1)) && (containsMergeField || _.isFinite(_.toNumber(value[i].variableValue.slice(1,-1)))))) || \n        (value[i].valueType === 'code' && !validators.jsExpression(value[i].variableValue))) && !/await|this/.test(value[i].variableValue)\n      ) {\n        res = false;\n      }\n    }\n    \n    return res;\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-zpbgnlwiemvxcuoh \n  v-model=\"schema.variables\" \n  :selectedMode=\"schema.selectedMode\"\n  :mergeFieldName.sync=\"schema.dataOut\"\n  :steps.sync=\"steps\"   \n  :stepId=\"stepId\"   \n  :merge-fields=\"mergeFields\"\n  :v=\"$v\"   \n  :readonly=\"readonly\"\n  :isNew=\"isNew\"\n  >\n  \n</or-wildcard-zpbgnlwiemvxcuoh>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zpbgnlwiemvxcuoh",
                      "componentLogic": "{\n  components: {\n    variableItem: {\n      props: {\n        variableNameLable: {\n          type: String,\n          default: ''\n        },\n        variableName: {\n          type: String,\n          default: ''\n        },\n        variableValue: {\n          default: ''\n        },\n        valueType: {\n          type: String,\n          default: 'string'\n        },\n        variables: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        isTextInput: {\n          type: Boolean,\n          default: true\n        },\n        steps: '',\n        stepId: '',\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        readonly: {\n          type: Boolean,\n          default: false\n        },\n        isNew:Boolean\n      },\n      \n      computed: {\n        invalidValue(){\n          const invalid = (this.valueTypeLocal === 'number' && !this.isValidNumber) || \n            (this.valueTypeLocal === 'code' && !validators.jsExpression(this.variableValueLocal)) ||\n            (this.valueTypeLocal === 'code' && this.variableValueLocal === '')\n            \n          if (invalid) {\n            this.errorText = this.valueTypeLocal === 'number' \n              ? 'Invalid number.' \n              : 'Please enter a valid JS expression.';\n          }\n          \n          if (this.valueTypeLocal === 'number') {\n            this.checkNumber()\n          }\n          \n          return invalid\n        },\n\n        isNull () {\n          return this.valueTypeLocal === 'null';\n        },\n      \n        isValidNumber(){\n          const checked =  this.checkNumber();\n          \n          let containsMergeField = validators.validateExpression(this.variableValue);\n          \n          return checked || _.isFunction(this.variableValue.slice) && \n            (this.variableValue.slice(1,-1) && !_.isEmpty(this.variableValue.slice(1,-1)) && (_.isFinite(_.toNumber(this.variableValue.slice(1,-1))) || containsMergeField) && \n            this.variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/));\n        },\n        \n        variableNameLocal: {\n          get() {\n            return this.variableName;\n          },\n          set(newValue) {\n            this.$emit('update:variableName', newValue);\n            this.validateVariableName(newValue);\n          }\n        },\n        variableValueLocal: {\n          get() {\n            return this.variableValue;\n          },\n          set(newValue) {\n            this.$emit('update:variableValue', newValue);\n          }\n        },\n        valueTypeLocal: {\n          get() {\n            return this.valueType;\n          },\n          \n          set(newValue, oldValue) {\n            if (newValue === 'string' || newValue === 'number') {\n              this.variableValueLocal = '``'\n            } else if (newValue === 'boolean') {\n              this.variableValueLocal =  _.isBoolean(this.variableValueLocal) ? this.variableValueLocal : true;\n            } else if (newValue === 'null') {\n              this.variableValueLocal = '`null`';\n            } else if (newValue === 'code') {\n              this.variableValueLocal = ''\n            }\n            \n            this.$emit('update:valueType', newValue);\n          }\n        }\n      },\n  \n      data () {\n        return {\n          variableTypeOptions: ['string', 'number', 'boolean', 'null', 'code'],\n          isInvalidVariableName: false,\n          errorText: 'Invalid number',\n          errorLabelText: 'Property name is required.',\n          isTextInput: true\n        }  \n      },\n      \n      watch: {\n        variables() {\n          this.$root.$emit('validateVariable');\n        },\n        isTextInput: {\n          handler(newVal){\n              this.errorText = newVal ? 'Invalid number': 'Please enter a valid JS expression.';\n          }\n        }\n      },\n      \n      methods: { \n        checkNumber () {\n          if (/await|this/.test(this.variableValue)) return true\n          \n          this.errorText =  _.isFunction(this.variableValue.slice) && this.variableValue.slice(1,-1).trim() === '' ? 'Value is required.' : 'Invalid number'\n          \n          if (_.isFunction(this.variableValue.slice) && /^\\s+$/.test(this.variableValue.slice(1,-1))) {\n            this.errorText = 'Value is required.'\n          }\n          \n          return false\n        },\n        \n        handleTypeChange (type) {\n          this.valueTypeLocal = type\n          \n          if (type === 'number') this.checkNumber()\n          \n          setTimeout(() => {\n            const showText = _.get(this, '$refs.variableValueInput.showText')\n            if (type === 'code' || (type !== 'code' && !showText)) {\n              this.toggleInputMode()\n            }\n          }, 100) // TODO: dirty huck but it works\n        },\n        \n        validateVariableName (varName, isFromEmit = false) {\n          this.isInvalidVariableName = false;\n          let validName = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n\n          if (_.isEmpty(varName.trim())) {\n            this.errorLabelText = 'Property name is required.';\n            this.isInvalidVariableName = true;\n          } else if (!validName.test(varName)) {\n            this.errorLabelText = 'Use valid property name.';\n            this.isInvalidVariableName = true;\n          } else {\n            let variables = _.clone(this.variables);\n            let duplicates = variables.map(item => item.variableName)\n                                    .filter((item, index, arr) => arr.lastIndexOf(item) == index && arr.indexOf(item)!= index);\n\n            if (duplicates.indexOf(varName) > -1) {\n              this.errorLabelText = 'Use another property name.';\n              this.isInvalidVariableName = true;\n            }\n          }\n          \n          if(!isFromEmit) this.$root.$emit('validateVariable', this._uid);\n        },\n        toggleInputMode () {\n          if(_.get(this, '$refs.variableValueInput.toggleMode')) this.$refs.variableValueInput.toggleMode()\n        }\n      },\n      \n      mounted () {\n        if (this.valueType === 'code') {\n          this.toggleInputMode()\n        }\n        \n        if (this.valueType === 'string' && this.variableValueLocal === '') {\n          this.variableValueLocal = '``'\n        }\n        \n        this.$root.$on('validateVariable', itemId => {\n          if (itemId !== this._uid) this.validateVariableName(this.variableName, true);\n        });\n        \n        if(this.$refs.variableValueInput) this.isTextInput = this.$refs.variableValueInput.displayTextInput;\n        this.isInvalidVariableName = _.isEmpty(this.variableNameLocal) && !this.isNew;\n      },\n\n      template: `<%= variableItem %>`\n    }\n  },\n  \n  watch: {\n    variables: {\n      handler (newValue) {\n        if (this.selectedMode === 'Extended') {\n          const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n        \n          if(currentIndexStep !== -1) {\n            const outputExample = {};\n            _.forEach(newValue, item => {\n              _.set(outputExample, `${item.variableName}`, item.variableValue);\n            });\n            this.steps[currentIndexStep]['outputExample'] = outputExample;\n          }\n          this.$emit('input', newValue); \n        }\n      },\n      deep: true\n    },\n    selectedMode:{\n      handler(newVal){\n        if (newVal === 'Extended') {\n          const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n        \n          if(currentIndexStep !== -1) {\n            const outputExample = {};\n            _.forEach(this.variables, item => {\n              _.set(outputExample, `${item.variableName}`, item.variableValue);\n            });\n            this.steps[currentIndexStep]['outputExample'] = outputExample;\n          }\n          this.$emit('input', this.variables); \n      \n        }\n      }\n    } \n  },\n  \n  data () {\n    return {\n      variables: this.value,\n      newVariable () {\n        return {\n          variableName: '',\n          variableValue: '``',\n          valueType: 'string'\n        };\n      }\n    }  \n  },\n  \n  async mounted () {\n    await this.$nextTick();\n    if (this.selectedMode === 'Extended') {\n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n    \n      if(currentIndexStep !== -1) {\n        const outputExample = {};\n        _.forEach(this.variables, item => {\n          _.set(outputExample, `${item.variableName}`, item.variableValue);\n        });\n        this.steps[currentIndexStep]['outputExample'] = outputExample;\n      }\n      this.$emit('input', this.variables); \n          \n      if (this.variables.length === 0 && _.get(this, '$refs.variablesOrList.addItem')) {\n        \n        this.$refs.variablesOrList.addItem();\n      }\n    }\n  },\n  \n  props: {\n    value: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    v: {\n      type: Object,\n      default () {\n        return {\n          schema: {\n            variables: []\n          }\n        }\n      }\n    },\n    selectedMode: '',\n    mergeFieldName: {},\n    steps: '',\n    stepId: '',\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    isNew:Boolean\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-show=\"selectedMode === 'Extended'\">\n  <div v-if=\"!variables.length\" class=\"empty-list\">Your variables list is empty.</div>\n  <or-list v-model=\"variables\" \n    ref=\"variablesOrList\"\n    :steps=\"steps\" \n    :step-id=\"stepId\" \n    :merge-fields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :new-item-method=\"newVariable\"\n    :add-button-label=\"'Add merge field property'\"\n    class=\"variables-list\"\n    :can-remove-last-item=\"false\"\n  >\n    <template scope=\"item\">\n      <variable-item :variable-name.sync=\"item.item.variableName\"\n        :variable-value.sync=\"item.item.variableValue\"\n        :value-type.sync=\"item.item.valueType\"\n        :variable-name-lable=\"mergeFieldName\"\n        :variables=\"variables\"\n        :steps=\"item.steps\" \n        :merge-fields=\"mergeFields\"\n        :step-id=\"item.stepId\"\n        :readonly=\"item.readonly\"\n        :isNew=\"isNew\"\n      ></variable-item>\n    </template>\n  </or-list>\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "daf54781-a236-4880-8a37-38d5dcb62466",
                          "mode": "html",
                          "title": "Variable Item",
                          "template": "<div class=\"variable\">\n  <div class=\"variable__name\">\n    <or-textbox v-model=\"variableNameLocal\"\n      :readonly=\"readonly\"\n      ref=\"testRef\"\n      :disableVariables=\"true\"\n      placeholder=\"enter name\"\n      :invalid=\"isInvalidVariableName\"\n      :error=\"errorLabelText\"\n      class=\"value\"\n      label=\"Property name\"\n      :data-textbox-label=\"variableNameLable.name\"\n    ></or-textbox>\n  </div>\n  <div class=\"variable__value\">\n    <div class=\"select-wrapper\">\n      <div class=\"select-label\">Value</div>\n        <or-select\n          ref=\"valueTypeSelect\"\n          :disabled=\"readonly\"\n          :options=\"variableTypeOptions\"\n          :class=\"[{ valueTypeSelect : valueTypeLocal === 'code' }]\"\n          v-model=\"valueTypeLocal\"\n          @change=\"handleTypeChange\"\n        >\n        </or-select>\n    </div>\n    <or-text-expression \n      v-if=\"valueTypeLocal !== 'boolean'\"\n      ref=\"variableValueInput\"\n      v-model=\"variableValueLocal\"\n      :readonly=\"readonly || isNull\"\n      label=\"\"\n      :error=\"errorText\"\n      :invalid=\"invalidValue\"\n      placeholder=\"Enter value\"\n      :steps=\"steps\" \n      :step-id=\"stepId\"\n      :merge-fields=\"mergeFields\"\n      multiLine\n    >\n    </or-text-expression>\n    <or-radio-group \n      v-else\n      :disabled=\"readonly\"\n      :options=\"[true, false]\"\n      v-model=\"variableValueLocal\"\n    ></or-radio-group>\n    \n    <span \n      v-if=\"this.valueType === 'number'\"\n      class=\"value-type-helper\"\n    >\n      Value should match the selected data type.\n    </span>\n  </div>\n</div>",
                          "variable": "variableItem"
                        },
                        {
                          "id": "afe2d0f3-d67e-4a19-a014-c025a2edf829",
                          "mode": "",
                          "title": "No title",
                          "template": "",
                          "variable": "NoVariable"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n.variables-list.single-item {\n   &.or-list {\n    \n    .list-item {\n      padding: 0px;\n    }\n     \n   }\n}\n.variables-list {\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  \n  .or-list-items {\n    width: 100%;\n    min-width: 322px;\n  }\n  \n  .ui-button {\n    margin-left: 8px;\n  }\n  \n  > button.ui-button.ui-button--type-secondary.ui-button--color-primary {\n\n  \tfont-size: 14px;\n  \tline-height: 14px;\n  }  \n  \n  &.or-list {\n    \n    .list-item {\n      position: relative;\n      padding: 0 36px 0 0;\n      \n      > .remove-button {\n      \tposition: absolute;\n        right: 0;\n        top: 36px;\n      }\n      \n      > .handle {\n        display: none;\n      }\n    }\n    \n    &.single-item {\n      \n      .list-item {\n        padding-left: 0;\n      }\n    }\n  }\n}\n\n.variable {\n  width: -webkit-fill-available;\n  display: flex;\n  \n  &__name {\n    width: 50%;\n    padding-right: 21px;\n    display: flex;\n    .ui-textbox__content{\n      width: 100%;\n    }\n    .prefix {\n      margin-right: 0;\n    }\n    \n    .value {\n      \n    }\n    \n    .ui-textbox {\n      &.is-invalid .ui-textbox__feedback-text {\n        visibility: visible;\n      }\n    }\n  }\n  \n  &__value {\n    width: 50%;\n    \n    .input-wrapper {\n      position: relative;\n      width:100%;\n      // display:flex;\n      &:after {\n        content: '=';\n        position: absolute;\n        top: 18px;\n        left: -15px;\n        color: #0F232E;\n        font-size: 14px;\n        transform: translateY(-50%);\n      }\n    }\n    \n    .ui-select {\n    \n      &__dropdown {\n        top: 100%;\n        right: 0;\n        width: auto;\n        min-width: auto;\n      }\n      \n      &__options {\n        min-width: auto;\n      }\n    }\n    \n    .ui-select,\n    .or-text-expression {\n      margin-bottom: 0;  \n    }\n    \n    .or-text-expression.invalid .or-code .ace-wrapper {\n      border-color: #f95d5d;\n    }\n    \n    .ui-select__label {\n    \tdisplay: flex;\n    \tjustify-content: space-between;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n      z-index:3;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n        flex-grow: 0;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n      color: #64b2da !important;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__label-text {\n      white-space: nowrap;\n      font-size: 14px;\n    }\n    \n    .ui-select.has-label .ui-select__dropdown-button {\n      top: 0px;\n      font-size: 20px;\n      margin-top: 2px;\n    }\n    \n    .ui-radio-group {\n      &__label-text {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        font-size: 12px;\n        line-height: 36px;\n        color: rgb(145, 150, 157);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      \n      &__radio {\n        &:not(:first-child) {\n          margin-left: 0px;\n        }\n      }\n      \n      &__radios {\n        position: relative;\n        \n        &:after {\n          content: '=';\n          position: absolute;\n          top: 18px;\n          left: -15px;\n          color: #0F232E;\n          font-size: 14px;\n          transform: translateY(-50%);\n        }\n      }\n      \n      &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n      &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n        color: #91969d;\n      }\n    }\n    \n    \n    .ui-radio-group__radios {\n      display: flex;\n      justify-content: left;\n      height: 36px;\n      font-size: 14px;\n      border-radius: 3px;\n      padding: 7px 10px;\n      background: #f6f6f6;\n    }\n  }\n}\n\n.value-type-helper {\n  display: block;\n  color: rgba(0,0,0,.38);\n  line-height: 1.2;\n  font-size: 12px;\n}\n\n\n.or-text-expression {\n  position: relative;\n  flex-grow: 1;\n  min-width: 50%;\n  .ui-icon-button.ui-icon-button--type-secondary.ui-icon-button--color-default.ui-icon-button--size-normal.flat.js-mode-btn.active{\n    top:2px;\n    right:26px;\n  }\n  \n  .or-editable-wrapper .placeholder {\n    // margin-top:0px;\n    // position:absolute;\n  }\n  .or-code{\n    display: flex;\n    flex-grow: 1;\n    // width: 0px;\n  }\n    & >.header {\n    position: absolute;\n    height: 36px;\n    width: 100%;\n    min-height: 0;\n    top: -36px;\n    & >button.ui-icon-button.flat.add-variable {\n      visibility: visible;\n      position: absolute;\n      top: 38px;\n      right: 0;\n      z-index: 2;\n    }\n  }\n  \n  .input-wrapper {\n    width: 100%;\n  }\n\n  .js-mode-btn {\n    visibility: hidden;\n    position: absolute;\n    top: -2px;\n    right: 75px;\n    z-index: 2;\n  }\n\n\n  .editable {\n      width: calc(100% - 36px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n  .ace_scroller {\n      width: calc(100% - 77px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n}\n.select-label {\n    color: rgba(0, 0, 0, 0.54);\n    font-size: 12px;\n    line-height: 36px;\n    transform-origin: left;\n    transition: color .1s ease,transform .2s ease;\n}\n.select-wrapper {\n  display: flex;\n  justify-content: space-between;\n}\n\n\n\n.ui-textbox {\n    position: relative;\n    width:100%;\n    &:after {\n        position: absolute;\n        content: attr(data-textbox-label);\n        top: 36px;\n        left: 0;\n        max-width:50%;\n        height: 36px;\n        padding: 0 5px 0 12px;\n        color: #91969D;\n        font-size: 14px;\n        line-height: 36px;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        box-sizing: border-box;\n    }\n    &:before {\n        position: absolute;\n        content: \".\";\n        top: 43px;\n        left: calc(50% - 4px);\n        height: 36px;\n        color: #000;\n        font-size: 15px;\n    }\n    .ui-textbox__wr-input-feedback {\n      width:100%;\n    }\n    .ui-textbox__input {\n      padding: 7px 0px 7px 50%;\n    }\n    \n}\n.or-editable-wrapper.single-line{\n  display:flex;\n  flex-grow:1;\n  width:0px;\n}\n\n.valueTypeSelect {\n  margin-right: 30px;\n}\n\n.js-mode-btn {\n  display: none;\n}\n\n.value {\n  &::after {\n    font-weight: bold;\n  }\n}\n"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "05e36001-be78-47d9-ab4a-1f1b56c1078a",
                    "data": {
                      "data": "{\n  \"nativeJson\":{},\n  \"virtualJson\":[],\n  \"virtualJsonEditable\":[]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nlet stringifyExpression = this.$flow.stringifyExpression;\n function toJson(localData, key) { \n if (_.isArray(localData)) { \n    return `[${_.map(localData, toJson).join(',')}]`;\n    }\n    if (_.isObject(localData)) {\n        return `{${_.map(localData, (value, key) => `\"${key}\" : ${toJson(value)}`).join(',')}}`;\n    }\n    \n    if(_.some(stringifyExpression(localData), elem => _.isObject(elem))){\n      return localData;\n    }\n    \n    return JSON.stringify(localData);\n}\nreturn _.mapValues(data, toJson);",
                      "validators": "virtualJson : {\n  custom(value) {\n    if(this.schema.selectedMode !== 'Advanced') return true;\n    let tempObj = {\n      value,\n      type:\"object\"\n    }\n    function isJsonValid(node){\n      let res = true;\n      if(node.type === \"object\"){\n        const checker = _.chain(node.value)\n                    .map('key')\n                    .filter((elem) => !_.isEmpty(_.trim(elem)))\n                    .uniq()\n                    .value()\n                    .length\n        if(checker !== _.get(node, 'value.length', 0)) {\n          res = false;\n        }\n        _.forEach(node.value, n => {\n          res = res && isJsonValid(n);\n        });\n      }\n      if(node.type === \"array\"){\n        _.forEach(node.value, n => {\n          res = res && isJsonValid(n);\n        });\n      }\n      return res;\n    }\n   \n    return isJsonValid(tempObj);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :selectedMode.sync=\"schema.selectedMode\" \n  :schema.sync=\"schema\" \n  :merge-fields=\"mergeFields\" \n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :is-new=\"isNew\" \n  :readonly=\"readonly\"\n  :step=\"step\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-yadtlferwqhvzosunmkgxbjpci",
                      "componentLogic": "{\n  data(){\n    return {\n      localNativeJson: {}\n    }\n  },\n  watch:{\n    localNativeJson:{\n      handler(newVal){\n        this.$emit('update:nativeJson', newVal);\n        this.updateOutputExample(newVal);\n      },\n      deep:true\n    }\n  },\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    step:Object,\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps   : \"\",\n    stepId  : \"\",\n    schema  : ()=>{},\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    selectedMode: \"\"\n  },\n  methods:{\n    updateOutputExample (object) {\n      if(this.selectedMode !== 'Advanced') return \n      \n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n\n      if(currentIndexStep !== -1 && !_.isEqual(object, this.steps[currentIndexStep]['outputExample'])) {\n        this.steps[currentIndexStep]['outputExample'] = _.cloneDeep(object);\n      }\n    }\n  },\n  mounted(){\n    this.updateOutputExample(this.schema.nativeJson);\n  },\n  updated(){\n    this.updateOutputExample(this.schema.nativeJson);\n  },\n}",
                      "renderCondition": "",
                      "componentTemplate": "<div v-if=\"schema.selectedMode === 'Advanced'\">  \r\n  <or-json-editor\r\n    v-model=\"localNativeJson\"\r\n    :steps=\"steps\"\r\n    :stepId=\"stepId\"\r\n    :merge-fields=\"mergeFields\"\r\n    :schema=\"schema\"\r\n    :readonly=\"readonly\"\r\n  >\r\n  </or-json-editor>\r\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".json-editor {\r\n    height: calc(100% - 92px);\r\n}\r\n\r\n.preview {\r\n  .info.item-value-info {\r\n    min-width: unset;\r\n  }\r\n}\r\n\r\n  .editor__json-editor.ui-modal__body.ui-modal.has-footer {\r\n      max-height: 100vh;\r\n  }"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "disableBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  variableName: 'value'\n}",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "jsonE": {},
                "dataOut": "",
                "jsonData": "",
                "variables": [],
                "nativeJson": {},
                "virtualJson": [],
                "selectedMode": ""
              },
              "rawMode": false,
              "version": "848d7c32-a6f3-4a78-9eee-1806e9f2b5c2",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "3d3d258a-11fa-4bae-a8c7-6e9eab268601",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.selectedMode = 'Extended'",
            "version": "1.0.10"
          },
          {
            "sample": null,
            "script": "step.data.valueType = ''\n",
            "version": "1.4.4"
          },
          {
            "sample": null,
            "script": "step.data.processError = true",
            "version": "1.4.5"
          },
          {
            "sample": null,
            "script": "step.data.valueType = 'string'\nstep.data.processError = true\n",
            "version": "1.4.6"
          },
          {
            "sample": null,
            "script": "if (step.data.processError && !_.find(step.data.exits, ['id', '__error__'])) {\n  step.data.exits.push({\n    \"condition\": \"processError\",\n    \"id\": \"__error__\",\n    \"label\": \"error\"\n  })\n}",
            "version": "1.4.7"
          },
          {
            "script": "if (!_.isEmpty(step.data['selectedMode'])) {\n  step.data['selectedMode'] = step.data['selectedMode'];\n} else if (_.isEmpty(step.data['selectedMode'])) {\n  step.data['selectedMode'] = 'Simple'\n}\n",
            "version": "1.4.10"
          }
        ],
        "dateModified": 1617002812051
      },
      {
        "id": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
        "version": "1.1.2",
        "cacheVersion": "46755963-6df5-480b-a64f-5f1bec548c96",
        "label": "Go to a Step in Current Flow",
        "icon": "goto",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-down",
        "description": "Use this step to go to any other step on the tree during the flow execution.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "if (!gotoStepId) {\n  throw new Error('no goto step id');\n}\n\nif (loopDetection) {\n  const stepId = this.currentStepId;\n  let limit = this.get(`limit_${stepId}`, numberOfPasses);\n  let parsedLimit;\n  \n  let firstEnterLocal = this.get(`firstEnter_${stepId}`, firstEnter);\n  this.set(`firstEnter_${stepId}`, false);\n  \n  if (!_.isNumber(limit) && !_.isString(limit)) {\n    if (handleLimit) {\n      this.log.error(`The Limit is invalid: ${limit}`);\n      return this.exitStep('limit');  \n    }\n    throw new Error(`The Limit is invalid: ${limit}`);\n  }\n  \n  parsedLimit = _.parseInt(limit);\n  \n  if ((_.isNaN(parsedLimit) || parsedLimit < 1) && firstEnterLocal) {\n    if (handleLimit) {\n      this.log.error(`The Limit is invalid: ${limit}`);\n      return this.exitStep('limit');\n    }\n    throw new Error(`The Limit is invalid: ${limit}`);\n  }\n  \n  if (parsedLimit >= 1) {\n    parsedLimit -= 1;\n    this.set(`limit_${stepId}`, parsedLimit);\n    return this.jumpTo(gotoStepId);\n  } else if (handleLimit) {\n    return this.exitStep('limit');\n  } else {\n    throw new Error(`Limit of Go To step is exceeded.`);\n  }\n} else {\n  return this.jumpTo(gotoStepId);\n}",
        "form": {
          "component": null
        },
        "data": {
          "exits": [],
          "firstEnter": true,
          "gotoStepId": "``",
          "handleLimit": false,
          "selectedStep": {},
          "loopDetection": true,
          "numberOfPasses": "`10`",
          "textExpressionMode": "text"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Use this step to forward the end user to any step on the tree during the flow execution.\n\n**Destination step**\nSelect the step user needs to go to from the list in dropdown. The icon of that step will be highlighted on the flow tree. When the destination step is splitted from the tree, Go to step remembers the destination path and is validated. And after the splitted step is back to the tree the Go to step directs user correctly to it.\n\n**Loop handling**\n*Loop handling* toggle is on by default and lets you specify the number of returns to the selected step in the single session in the *Limit of redirects* field. This can be useful in a case where flow has a lot of loops and iterations and additional control is needed on the number of redirects. The field can be filled in manually or using a merge field. Only positive numbers can be used. If a decimal value was entered an integer part of it will be used as limit.\n*Process limit* toggle adds an exit leg to the step to route the flow if the number of redirects exceeds limit or incorrect value was used.\n\n**Reporting events**\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n**Release notes**\n#### 1.1.12\n- add mergeFields property to the `Limit of redirects` field\n",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "ab6241e1-9df2-482f-a2f3-487e89539ad1",
              "data": {
                "data": "{\n  \"selectedStep\": {},\n  \"gotoStepId\": \"``\"\n}",
                "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data, key) { \n    if (_.isEqual(key, 'gotoStepId')) {\n      return data;\n    }\n    if (_.isArray(data)) { \n      return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n      return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "gotoStepId: {\n  custom (value) {\n    const stepId = value.slice(1, -1);\n    if (_.isEmpty(stepId)) return true;\n    let steps = _.filter(this.steps, step => step.type != 'empty');\n    return  Boolean(_.find(steps, {id : stepId}));\n  }\n},\n\nselectedStep: {\n  custom (value) {\n    return !_.isEmpty(value);\n  }\n}",
                "applyToJson": true,
                "formTemplate": "<wildcard \n  :selected-step.sync=\"schema.selectedStep\"\n  :goto-step-id.sync=\"schema.gotoStepId\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :v=\"$v\">\n</wildcard>",
                "allowCodeMode": true,
                "componentName": "or-wildcard-fyivjntzxbgwqupmlhkaescrod",
                "componentLogic": "{ \n  props : {\n    gotoStepId : {\n      type : String,\n      default : '``'\n    },\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    selectedStep : {\n      type : Object,\n      default () {\n        return {};\n      }\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            gotoStepId: {},\n            selectedStep: {}\n          }\n        };\n      }\n    }\n  },\n  \n  data() {\n    return {\n      options : this.fillOptions(),\n      query : '',\n      brokenRefernceError: 'Broken reference: the selected step is detached from the main flow tree.',\n      requiredFieldError: 'Destination step is required.'\n    }\n  },\n  \n  computed: {\n    selectedStepId: {\n      get() {\n        this.highlightDestinationOn(this.gotoStepId);\n        return this.gotoStepId;\n      },\n      \n      set(selectedStepId) {\n        this.highlightDestinationOff(this.selectedStepId);\n        const selectedStep = _.find(this.options, { value: selectedStepId });\n        this.$emit('update:gotoStepId', selectedStepId);\n        if (selectedStep) {\n          this.$emit('update:selectedStep', selectedStep);\n        }\n        this.highlightDestinationOn(selectedStepId);\n      }\n    },\n    errorMessage() {\n      let errorMessage = '';\n      if (this.v.schema.gotoStepId.$error) {\n        errorMessage = this.brokenRefernceError;\n      }\n      \n      if (this.v.schema.selectedStep.$error) {\n        errorMessage = this.requiredFieldError;\n      }\n      return errorMessage;\n    }\n  },\n  \n  methods : {\n    highlightDestinationOn(stepId) {\n      stepId = stepId.slice(1, -1);\n      this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n    },\n    \n    highlightDestinationOff(stepId) {\n      stepId = stepId.slice(1, -1);\n      this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});  \n    },\n    \n    highlightDestinationOffOnMouseout(stepId) {\n      if (stepId !== this.selectedStepId) {\n        stepId = stepId.slice(1, -1);\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});  \n      }\n    },\n    \n    zoomInOnStep () {\n      const stepId = this.selectedStepId.slice(1, -1);\n      this.$flow.zoomInOnStep(stepId);\n    },\n    \n    fillOptions() {\n      const thisStep = _.find(this.steps, {id : this.stepId}) || {};\n      const steps =  _.chain(this.steps)\n        .filter(step => step.id !== thisStep.id && step.type !== 'empty' && step.type !== thisStep.type)\n        .map(step => ({ value: `\\`${step.id}\\``, label : step.label || 'No name' }))\n        .value();\n      const rememberedStep = _.clone(this.selectedStep);\n      const selectedStep = _.find(steps, {value : rememberedStep.value});\n      \n      if (rememberedStep.label && !selectedStep) {\n        steps.push(rememberedStep);\n      } else if (rememberedStep && selectedStep && rememberedStep.label !== selectedStep.label){\n        this.$emit('update:selectedStep', selectedStep);\n      }\n      \n      return _.sortBy(steps, step => step.label.toLowerCase());\n    }\n  },\n  \n  watch : {\n    steps : {\n      handler() {\n        this.options = this.fillOptions();\n      }, \n      deep : true\n    }\n  },\n  \n  beforeDestroy () {\n    this.highlightDestinationOff(this.selectedStepId);\n  },\n  \n  created () {\n    const selectedStep = _.find(this.options, {value : this.selectedStepId});\n    if (!selectedStep) {\n      this.selectedStepId = '``';\n    } else {\n      this.highlightDestinationOn(this.selectedStepId);\n    }\n  }\n}",
                "renderCondition": "",
                "componentTemplate": "<h4>Destination step</h4>\n<div class=\"select-destination-wr\">\n  <or-select has-search \n    class=\"select-destination\"\n    placeholder=\"Select a step\"\n    search-placeholder=\"Type to search\"\n    :options=\"options\" \n    v-model=\"selectedStepId\"\n    :invalid=\"v.schema.gotoStepId.$error || v.schema.selectedStep.$error\"\n    :error=\"errorMessage\"\n    :disabled=\"readonly\">\n    <template slot-scope=\"props\" slot=\"option\">\n      <div \n        class=\"ui-select-option__basic\"\n        @mouseenter=\"highlightDestinationOn(props.option.value)\"\n        @mouseout=\"highlightDestinationOffOnMouseout(props.option.value)\"\n        @click=\"highlightDestinationOn(props.option.value)\">\n        {{props.option.label}}\n      </div>\n    </template>\n  </or-select>\n  <or-icon-button \n    class=\"zoom-in-button\" \n    icon=\"zoom_in\" \n    type=\"secondary\" \n    color=\"primary\" \n    @click=\"zoomInOnStep\" \n    tooltip=\"Show destination\" \n    tooltip-position=\"top right\">\n  </or-icon-button>\n</div>\n",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".select-destination-wr {\n  position: relative;\n}\n\n.select-destination {\n  width: calc(100% - 36px);\n}\n\n.zoom-in-button {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 1;\n}"
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "fd795075-4347-491a-ac6e-ac35a4376c5e",
              "data": {
                "open": false,
                "header": "Loop handling",
                "inputs": [
                  {
                    "id": "eefc0deb-b58d-461d-ae71-eb086900a6f9",
                    "data": {
                      "data": "{\n  \"loopDetection\": true,\n  \"handleLimit\": false,\n  \"numberOfPasses\": \"`10`\",\n  \"textExpressionMode\": \"text\",\n  \"firstEnter\": true\n}",
                      "toJson": "return {\n  \"handleLimit\": data.handleLimit,\n  \"loopDetection\": data.loopDetection,\n  \"numberOfPasses\": data.numberOfPasses,\n  \"firstEnter\": data.firstEnter\n}",
                      "validators": "{\n  numberOfPasses: {\n    required: validators.required,\n    jsExpression: validators.jsExpression,\n    jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n    custom(value) {\n      if (/this./.test(value)) return true;\n      value = Number(value.replace(/`/g, ''));\n      if (isNaN(value)) return false;\n      if (value < 1) return false;\n      return true;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :loop-detection.sync=\"schema.loopDetection\" \n  :handle-limit.sync=\"schema.handleLimit\"\n  :number-of-passes.sync=\"schema.numberOfPasses\" \n  :text-expression-mode.sync=\"schema.textExpressionMode\" \n  :exits.sync=\"schema.exits\" \n  :v=\"$v\"\n  :is-new=\"isNew\" \n  :steps=\"steps\" \n  :step-id=\"stepId\" \n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"  \n  :goto-step-id=\"schema.gotoStepId\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ymdqxgtwcbjuhsolrezviaknfp",
                      "componentLogic": "{\n  data() {\n    return {\n      exitsLocal: _.clone(this.exits),\n      errorMessageInCodeMode: 'The Limit of redirects is not a valid JavaScript expression.',\n      errorMessageRequired: 'The Limit of redirects is required.',\n      errorMessageInTextMode: 'Only positive number can be used as a value.'\n    }\n  },\n  computed: {\n    errorMessage() {\n      let message = '';\n      switch (this.textExpressionMode) {\n        case 'text': \n          const mergfieldRegex = /\\$\\{this.get\\('.{1,}'\\)\\}/g;\n          let num = this.numberOfPassesLocal.slice(1, -1);\n          if (_.isEmpty(num)) {\n            message = this.errorMessageRequired;\n          } else if (!mergfieldRegex.test(num) || _.isNaN(parseInt(num))) {\n            message = this.errorMessageInTextMode;\n          }\n          break;\n        case 'code': \n          if (_.isEmpty(this.numberOfPassesLocal)) {\n            message = this.errorMessageRequired;\n          } else if (!validators.jsExpression(this.numberOfPassesLocal)) {\n            message = this.errorMessageInCodeMode;\n          }\n          break;\n      }\n      \n      return message;\n    },\n    loopDetectionLocal: {\n      get () { \n        return this.loopDetection; \n      },\n      set (value) {\n        if (!value) {\n          this.handleLimitLocal = false;\n        }\n        this.$emit('update:loopDetection', value);\n      }\n    },\n    handleLimitLocal: {\n      get () { \n        return this.handleLimit;\n      },\n      set (value) {\n        if (!_.isEmpty(this.stepId)) {\n          const limitLegIndex =  _.findIndex(this.exitsLocal, { label : 'limit' });\n          if (!value && limitLegIndex >= 0) {\n            this.exitsLocal.splice(limitLegIndex, 1);\n          } else if (value && limitLegIndex === -1) {\n            this.exitsLocal.splice(0, 0, {\n              id : uuid.v4(),\n              label : 'limit',\n              stepId : '',\n              dynamic : true\n            });\n          }\n        }\n        \n        this.$emit('update:handleLimit', value);\n      }\n    },\n    numberOfPassesLocal: {\n      get () { return this.numberOfPasses; },\n      set (value) { this.$emit('update:numberOfPasses', value); }\n    }\n  },\n  methods: {\n    setTextExpressionMode(mode) {\n      this.$emit('update:textExpressionMode', mode)\n    },\n    highlightDestinationOn() {\n      const stepId = this.gotoStepId.slice(1, -1);\n      this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n    }\n  },\n  watch : {\n    exitsLocal : {\n      handler (value) {\n        this.$emit('update:exits', value);\n      }\n    }\n  },\n  props: {\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    loopDetection: {\n      type: Boolean,\n      default: true\n    },\n    handleLimit: {\n      type: Boolean,\n      default: true\n    },\n    numberOfPasses: {\n      type: String,\n      default: '`10`'\n    },\n    textExpressionMode: {\n      type: String,\n      default: 'text'\n    },\n    gotoStepId: {\n      type: String,\n      default: 'text'\n    },\n    exits : {\n      type : Array,\n      default () {\n        return []\n      }\n    },\n    v: {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            numberOfPasses: {}\n          }\n        }\n      }\n    },\n    isNew: Boolean,\n    readonly: {\n      type: Boolean \n    },\n    steps: {},\n    stepId: ''\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch v-model=\"loopDetectionLocal\"\n    :disabled=\"readonly\">\n    Set the limit of redirects\n  </or-switch>\n  <or-text-expression v-if=\"loopDetectionLocal\"\n    label=\"Limit of redirects\"\n    ref=\"numberOfPasses\"\n    v-model=\"numberOfPassesLocal\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    help-text=\"Only positive number can be used as value.\"\n    :readonly=\"readonly\"\n    :invalid=\"v.schema.numberOfPasses.$error\"\n    :error=\"errorMessage\"\n    :merge-fields=\"mergeFields\"\n    @mode-changed=\"setTextExpressionMode\">\n  </or-text-expression>\n  <or-switch v-if=\"loopDetectionLocal\"\n    v-model=\"handleLimitLocal\"\n    :disabled=\"readonly\">\n    Process limit\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "hasProcessError": false,
          "hasProcessTimeout": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [],
                "gotoStepId": "",
                "selectedStep": {}
              },
              "rawMode": false,
              "version": "816c79a4-624f-4de8-bfcc-f64dfd488d60",
              "formBuilder": {
                "stepExits": [],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.handleLimit = false;\nstep.data.loopDetection = false;\nstep.data.numberOfPasses = \"`10`\";\nstep.data.stepId = \"\";\nstep.data.textExpressionMode = \"text\";\nstep.data.firstEnter = true;",
            "version": "1.1.0"
          },
          {
            "script": "",
            "version": "1.1.2"
          }
        ],
        "dateModified": 1613053822975
      }
    ]
  },
  "dateCreated": 1664371443432,
  "dateModified": 1666970803749,
  "isDeleted": false,
  "version": "30293f0d-3005-43e3-8eee-73df309ee983"
}