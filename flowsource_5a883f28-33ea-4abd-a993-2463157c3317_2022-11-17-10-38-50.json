{
  "data": {
    "label": "OmniShareExperience",
    "description": "",
    "deploy": {
      "memory": 1024,
      "timeout": 30,
      "role": "USER",
      "logLevel": "warn"
    },
    "meta": {
      "flowEventId": "8c89e332-00a8-4b97-be13-082fe02ffe68",
      "globalProcessError": true,
      "globalTimeoutProcessing": true,
      "globalProcessErrorStepId": "8433172e-2ab1-4a8c-b9ff-050976d0d1bd",
      "dataOuts": [
        {
          "name": "sendEmail",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "allResponses": [],
            "latestResponse": {
              "tag": {
                "contents": "",
                "attributes": {
                  "id": "",
                  "title": ""
                }
              },
              "link": "",
              "type": "",
              "value": "",
              "datetime": "",
              "messageId": "",
              "eventSender": {
                "name": "",
                "email": ""
              }
            },
            "outgoingMessage": {
              "sender": {
                "name": "",
                "address": ""
              },
              "beacons": [],
              "content": {
                "html": "",
                "plain": "",
                "trimmedHtml": "",
                "trimmedText": ""
              },
              "subject": {
                "text": "",
                "trimmed": ""
              },
              "datetime": "",
              "inReplyTo": "",
              "messageId": "",
              "timestamp": "",
              "recipients": {
                "cc": [],
                "to": [],
                "bcc": []
              },
              "references": [],
              "attachments": []
            }
          },
          "stepLabel": "sendEmail",
          "stepId": "665a4a8a-206b-4b52-bfcc-356e47d79e4f"
        },
        {
          "name": "tableAsImage",
          "type": "session",
          "ttl": 86400000,
          "outputExample": {
            "url": ""
          },
          "stepLabel": "tableAsImage",
          "stepId": "76d959fa-6fab-478f-be82-e7bee54e5af4"
        },
        {
          "name": "sendInvalidEmail",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "type": "rwc-send-message"
          },
          "stepLabel": "sendInvalidEmail",
          "stepId": "7fe37019-96ba-4de0-9604-c75f335d4742"
        },
        {
          "name": "handleError",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "time": "2011-10-05T14:48:00.000Z",
            "error": {
              "name": "Error",
              "stack": "error stack",
              "message": "error message",
              "formattedStack": []
            },
            "rawError": {
              "name": "Error",
              "stack": "error stack",
              "message": "error message"
            },
            "isTimeout": false,
            "timestamp": 1615202652220,
            "errorsCounter": 1,
            "flowWithError": {
              "id": "flow id",
              "bot": {
                "id": "bot id"
              },
              "url": "URL of the flow",
              "label": "flow label"
            },
            "stepWithError": {
              "id": "step id",
              "label": "label of a step that caused the error",
              "template": {
                "id": "step template id",
                "label": "step template label",
                "version": "step template version"
              }
            },
            "sessionWithError": {
              "sessionId": "session id",
              "previousSessionId": "previous session id",
              "beginningSessionId": "beginning session id"
            },
            "isInstanceOfError": true
          },
          "stepLabel": "handle error",
          "stepId": "8433172e-2ab1-4a8c-b9ff-050976d0d1bd"
        },
        {
          "name": "urlImage",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "generatedURL": ""
          },
          "stepLabel": "urlImage",
          "stepId": "869b80e7-ff13-410c-88ac-40b21df09067"
        },
        {
          "name": "shareOption",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "type": "rwc-request-response"
          },
          "outputExample": {},
          "stepLabel": "shareOption",
          "stepId": "8a926464-aad9-4724-bd25-fb86ef9ed1b8"
        },
        {
          "name": "generateImageMetaTags",
          "type": "session",
          "ttl": 86400000,
          "outputExample": {
            "url": ""
          },
          "stepLabel": "generateImageMetaTags",
          "stepId": "923e96a9-c6c8-4bd0-96c8-a2777471279e"
        },
        {
          "name": "combineSharedAppUrlwithPhoneContactId",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "value": ""
          },
          "stepLabel": "combineSharedAppUrlwithPhoneContactID",
          "stepId": "a483aa86-deef-4b1d-8f90-aef866391dd4"
        },
        {
          "name": "createOrFindReceiverContactEmail",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "contactId": "",
            "firstName": "",
            "phoneNumbers": [
              {
                "val": "",
                "type": ""
              }
            ]
          },
          "stepLabel": "createOrFindReceiverContactEmail",
          "stepId": "a8b6511c-71ca-4f79-b991-57a3cb22ec1b"
        },
        {
          "name": "report",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "type": "",
            "event": {
              "Tags": [],
              "BotId": "",
              "Event": "",
              "FlowId": "",
              "StepId": "",
              "EventId": "",
              "AccountId": "",
              "SessionId": "",
              "Timestamp": "",
              "EventValue": {},
              "EventCategory": "",
              "TransactionId": ""
            }
          },
          "stepLabel": "Report",
          "stepId": "b01fddef-1ffa-484e-b450-3bcb0ab36c6a"
        },
        {
          "name": "createOrFindReceiverContactPhone",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "contactId": "",
            "firstName": "",
            "phoneNumbers": [
              {
                "val": "",
                "type": ""
              }
            ]
          },
          "stepLabel": "createOrFindReceiverContactPhone",
          "stepId": "b07c891e-af90-438d-a98b-598f5c08c519"
        },
        {
          "name": "loadedData",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "events": "JSON.parse(await this.mergeFields['getEvents'].get({path: 'value'}))"
          },
          "stepLabel": "loadedData",
          "stepId": "b08eb03f-8334-4d4d-9a87-76f0f355b2e0"
        },
        {
          "name": "generateTable",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "html": "HTML presentation of table"
          },
          "stepLabel": "generateTable",
          "stepId": "c09e2bb9-4893-42da-aa61-f796d4f9d001"
        },
        {
          "name": "combineSharedAppUrlwithDifferentFigure",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "value": ""
          },
          "stepLabel": "combineSharedAppUrlwithDifferentFigure",
          "stepId": "c6367947-5ce0-45c2-969d-2dbf5d49a6ae"
        },
        {
          "name": "tinyUrlDifferent",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "generatedURL": ""
          },
          "stepLabel": "tinyURLDifferent",
          "stepId": "c904d3bc-e156-42c1-bfc1-94bb3ba34ad5"
        },
        {
          "name": "getEvents",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "value": {}
          },
          "stepLabel": "getEvents",
          "stepId": "cbf06deb-c664-42b8-81f2-aed40f9be8e2"
        },
        {
          "name": "updateNameContact",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "exits": [
              "result"
            ],
            "conversationType": "subflow",
            "doNotExpectResult": false,
            "conversationStarter": true,
            "conversationStepType": "trigger_n_proceed"
          },
          "outputExample": {
            "id": ""
          },
          "stepLabel": "updateNameContact",
          "stepId": "d8903c37-7a19-49d2-8ffc-9161ae6d3d96"
        },
        {
          "name": "addStepEventToArray",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "stepLabel": "addStepEventToArray",
          "stepId": "e98402b7-1379-4cdb-841b-afe1c038ad75"
        },
        {
          "name": "requestUserName",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "type": "rwc-request-response"
          },
          "outputExample": {
            "userReply": "String"
          },
          "stepLabel": "requestUserName",
          "stepId": "ebbcec0a-3245-4bc8-8336-0a039ddf3542"
        },
        {
          "name": "tinyPhoneUrl",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "generatedURL": ""
          },
          "stepLabel": "tinyPhoneURL",
          "stepId": "fb0fd462-c5ac-4d3c-872c-a483ad75b6b8"
        },
        {
          "name": "waitRequest",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "exits": [
              {
                "name": "result",
                "vforkey": "2b11b92e-c356-4610-881c-51c2961a43d0"
              }
            ],
            "conversationType": "subflow",
            "conversationStarter": true,
            "conversationStepType": "wait_for_trigger"
          },
          "outputExample": {
            "params": {
              "year": "",
              "title": "",
              "bioimage": "",
              "userName": "",
              "wikiName": "",
              "biography": "",
              "sessionID": "",
              "convOutput": "",
              "figureTypeID": "",
              "userContactId": "",
              "figureFullName": ""
            }
          },
          "stepLabel": "wait request",
          "stepId": "51d0a6f3-7f71-4420-97ce-b79d74c1784a"
        },
        {
          "name": "combineSharedAppUrlwithSameFigure",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "value": ""
          },
          "stepLabel": "combineSharedAppUrlwithSameFigure",
          "stepId": "09161584-6084-4c29-b94a-186846a3b6ae"
        },
        {
          "name": "reportingData",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "events": "[]"
          },
          "stepLabel": "reportingData",
          "stepId": "1039b9b2-34f2-4694-95f9-9bf7f64427c7"
        },
        {
          "name": "combineSharedAppUrl",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "value": ""
          },
          "stepLabel": "combineSharedAppUrl",
          "stepId": "15614fea-9e8a-4409-91d2-464803c8da46"
        },
        {
          "name": "sendInvalidPhone",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "type": "rwc-send-message"
          },
          "stepLabel": "sendInvalidPhone",
          "stepId": "156f5ba6-2a24-4b0e-8ed5-adfeadf931e0"
        },
        {
          "name": "convString",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "data": "JSON.stringify(await this.mergeFields['waitRequest'].get({path: 'params.convOutput'}))"
          },
          "stepLabel": "convString",
          "stepId": "24fae94b-5269-4f60-a2df-35b970828ef5"
        },
        {
          "name": "validatedReceiverPhone",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "type": "string",
            "phone": "string",
            "valid": true,
            "possible": true,
            "regionCode": "string",
            "possibility": "string",
            "canBeInternationallyDialled": true
          },
          "stepLabel": "validatedReceiverPhone",
          "stepId": "25e0e033-6dc9-4902-8b8c-960068ca4554"
        },
        {
          "name": "tinyUrlSame",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "generatedURL": ""
          },
          "stepLabel": "tinyURLSame",
          "stepId": "29ba8d03-b72d-439d-81e8-a251508e5625"
        },
        {
          "name": "requestReceiverPhone",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "type": "rwc-request-response"
          },
          "outputExample": {
            "userReply": "String"
          },
          "stepLabel": "requestReceiverPhone",
          "stepId": "3324e635-3530-435f-8653-46df28e310be"
        },
        {
          "name": "genericOrFigureShare",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "output": "any type"
          },
          "stepLabel": "genericOrFigureShare",
          "stepId": "37f5053e-0204-4e72-94f0-20939abe2d8e"
        },
        {
          "name": "validatedReceiverEmail",
          "type": "session",
          "ttl": 86400000,
          "stepLabel": "validatedReceiverEmail",
          "stepId": "3ae4dd3b-f8b2-43d4-8747-58461a4c0812"
        },
        {
          "name": "requestReceiverEmail",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "type": "rwc-request-response"
          },
          "outputExample": {
            "userReply": "String"
          },
          "stepLabel": "requestReceiverEmail",
          "stepId": "40155271-02b6-4591-9183-dd59638c12b7"
        },
        {
          "name": "sharedUrl",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "outputExample": {
            "generatedURL": ""
          },
          "stepLabel": "sharedUrl",
          "stepId": "42fd5f5e-b2d6-45cd-a7ee-fdfc2954e34f"
        },
        {
          "name": "addStepEventToNewArray",
          "type": "session",
          "ttl": 86400000,
          "meta": {},
          "stepLabel": "addStepEventToNewArray",
          "stepId": "47d3e4bf-5b8e-45d5-b15e-9d78f831e22c"
        },
        {
          "name": "sendSms",
          "type": "session",
          "ttl": 86400000,
          "meta": {
            "conversationType": "sms",
            "conversationStarter": true
          },
          "outputExample": {
            "botNumber": "+17205555555",
            "transcriptId": "",
            "endUserNumber": "+17205555551",
            "lastTranscriptId": ""
          },
          "stepLabel": "sendSMS",
          "stepId": "5f0bc8e1-ccce-4cf8-a5f9-193879dbeffd"
        }
      ]
    },
    "color": null,
    "categories": null,
    "annotations": [],
    "stepTemplates": [
      {
        "id": "4b9817f4-230c-47a1-8365-40f054de7d87",
        "version": "1.0.3",
        "cacheVersion": "6ee6c523-7d9a-40db-b8ba-b4f0dbd88658",
        "label": "Validate and Interpret Phone Number",
        "icon": "interpret_phone_number",
        "iconType": "default",
        "iconUrl": "",
        "shape": "octagon",
        "description": "Step allows to change format of phone numbers. ",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical",
          "Validation"
        ],
        "recommended": [],
        "tags": [],
        "template": "const PhoneNumber = require( 'awesome-phonenumber' );\n\nlet interpreted = new PhoneNumber(input_phone, isoCountry);\n\nif (!interpreted.isValid() && !input_phone.startsWith('+')) {\n  this.log.warn(`Input phone number is not ${isoCountry}/cell and is not in E.164, may be invalid input. Attempting to interpret anyway.`);\n  interpreted = new PhoneNumber(`+${input_phone}`);\n} else if (!interpreted.isValid()) {\n  interpreted = new PhoneNumber(input_phone);\n}\n\nif (!interpreted.isValid()) {\n  this.log.warn('Error attempting to interpret phone number.', input_phone);\n  return this.exitStep('invalid', {\n    inputPhone: input_phone,\n    valid: false,\n    possible: false\n  });\n}\n\ninterpreted = interpreted.toJSON();\n\nif (doLog) {\n  this.log.info('Interpreted phone number ' + input_phone, interpreted);\n}\n\nconst numberDetails = {\n  \"inputPhone\": input_phone,\n  \"phone\": interpreted.number[outputFormat],\n  \"canBeInternationallyDialled\": interpreted.canBeInternationallyDialled,\n  \"regionCode\": interpreted.regionCode,\n  \"valid\": interpreted.valid,\n  \"possible\": interpreted.possible,\n  \"type\": interpreted.type,\n  \"possibility\": interpreted.possibility\n}\n\nreturn this.exitStep('next', numberDetails);\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "doLog": false,
          "exits": [
            {
              "id": "next",
              "label": "valid",
              "condition": ""
            },
            {
              "id": "9e3d66af-2e01-4730-b435-f9ce84a535bc",
              "label": "invalid",
              "condition": ""
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "isoCountry": "`US`",
          "input_phone": "``",
          "outputFormat": "'e164'"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "type": "string",
          "phone": "string",
          "valid": true,
          "possible": true,
          "regionCode": "string",
          "possibility": "string",
          "canBeInternationallyDialled": true
        },
        "help": "Step allows to change format of US and international phone numbers.\n\nData-in field is required and must be filled in with valid phone number.  Supported formats:  e164(+19282271009),  international (+1 928-227-1009),  rfc3966 (tel:+1-928-227-1009) or national((928) 227-1009) for US phone numbers.\nSpecific output phone number format can be chosen from Data-out format drop down (e164 is recommended and preselected by default).\n\n*NOTE*\nOutput format depends on country of provider phone number.\n\n**Advanced Settings**\nAdvanced settings allow to specify a merge field name where the result of step execution will be stored. Merge field contains properties which provides extra information for the number.\n\"Show result in logs\" toggle adds processing result to be shown in console logs.\n\n**Reporting Events**\nDefault reporting events for the step is Step. Once step executed, each event collects specific data, which can be used in reports. Flow composer is able to specify tags for each event. Tag acts as a marker for the event it’s specified for. Those markers allow to build more extended reports.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "e567bb59-3793-41c8-87a0-530e9ad4880b",
              "data": {
                "id": "next",
                "label": "valid",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "f1170495-905a-4a05-8fde-101bc93df5b7",
              "data": {
                "id": "9e3d66af-2e01-4730-b435-f9ce84a535bc",
                "label": "invalid",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "0354fea1-203f-449b-9100-a639061d1e79",
              "data": {
                "label": "Data-in (Phone number)",
                "helpText": "",
                "variable": "input_phone",
                "multiline": false,
                "placeholder": "",
                "defaultValue": "``",
                "renderCondition": "",
                "trimWhitespaces": false,
                "validateRequired": true,
                "disabledCondition": ""
              },
              "label": "Text box",
              "compiled": {},
              "component": "formTextBox"
            },
            {
              "id": "d9e89df2-58e2-4ff0-94b4-c703c1350da6",
              "data": {
                "label": "Default Country",
                "helpText": "",
                "variable": "isoCountry",
                "multiline": false,
                "placeholder": "",
                "defaultValue": "`US`",
                "allowCodeMode": true,
                "renderCondition": "",
                "allowMergeFields": true,
                "validateRequired": false,
                "disabledCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formTextInput"
            },
            {
              "id": "51d3d86f-4c75-4c53-8356-5ffd8eb6e0fa",
              "data": {
                "label": "Data-out format",
                "options": [
                  {
                    "label": "e164 (recommended, +19282271009)",
                    "value": "'e164'",
                    "vforkey": "e8850b94-a173-48ef-81c4-e30e67b4d286"
                  },
                  {
                    "label": "international (+1 928-227-1009)",
                    "value": "'international'",
                    "vforkey": "c7cfee21-39df-4cf4-b0ac-432c160d8a42"
                  },
                  {
                    "label": "national ((928) 227-1009)",
                    "value": "'national'",
                    "vforkey": "0d7fa897-8733-40c0-8916-27c3723d7b7c"
                  },
                  {
                    "label": "rfc3966 (tel:+1-928-227-1009)",
                    "value": "'rfc3966'",
                    "vforkey": "26fdd343-d224-42db-8da1-b1a5fae8c3d9"
                  },
                  {
                    "label": "significant (9282271009)",
                    "value": "'significant'",
                    "vforkey": "2ff859ba-dee3-4001-9088-b6aa35dc89fd"
                  }
                ],
                "helpText": "",
                "multiple": false,
                "variable": "outputFormat",
                "placeholder": "",
                "defaultValue": "'e164'",
                "allowCodeMode": true,
                "renderCondition": "",
                "validateRequired": true,
                "defaultArrayValue": [],
                "disabledCondition": ""
              },
              "label": "Drop down",
              "compiled": {},
              "component": "formSelect"
            },
            {
              "id": "911573eb-a9a1-4953-806b-cd7685bd49bc",
              "data": {
                "meta": {},
                "label": "Merge field name",
                "helpText": "Specify the name of the merge field where the step's result will be stored and can be reused later in the flow.",
                "defaultTTL": 86400000,
                "dataOutMeta": "{}",
                "defaultName": "normalizedPhone",
                "defaultType": "session",
                "placeholder": "Merge field name",
                "defaultValue": "",
                "renderCondition": "",
                "validateRequired": true
              },
              "label": "Merge field",
              "compiled": {},
              "component": "formDataOut"
            },
            {
              "id": "2c264496-ee08-4ee9-8925-b163c5b20d4f",
              "data": {
                "open": true,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "148ad4cb-ee9f-4a4e-b60e-3da9853ccc25",
                    "data": {
                      "label": "Show result in logs",
                      "helpText": "",
                      "variable": "doLog",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"phone\": \"string\",\n  \"canBeInternationallyDialled\": true,\n  \"regionCode\": \"string\",\n  \"valid\": true,\n  \"possible\": true,\n  \"type\": \"string\",\n  \"possibility\": \"string\"\n}",
          "hasProcessError": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "doLog": false,
                "exits": [
                  {
                    "id": "next",
                    "label": "valid"
                  },
                  {
                    "id": "9e3d66af-2e01-4730-b435-f9ce84a535bc",
                    "label": "invalid"
                  }
                ],
                "dataOut": "normalizedPhone",
                "input_phone": "``",
                "outputFormat": "'e164'"
              },
              "rawMode": false,
              "version": "1f206b3e-af6f-43d8-9788-1666037c925d",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "e567bb59-3793-41c8-87a0-530e9ad4880b",
                    "data": {
                      "id": "next",
                      "label": "valid"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "f1170495-905a-4a05-8fde-101bc93df5b7",
                    "data": {
                      "id": "9e3d66af-2e01-4730-b435-f9ce84a535bc",
                      "label": "invalid"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['isoCountry'])) step.data['isoCountry'] = \"`US`\";\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{}};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.3"
          }
        ],
        "dateModified": 1594129584527
      },
      {
        "id": "7e80c113-ea4a-4c40-b0fe-f3650d919371",
        "version": "1.0.1",
        "cacheVersion": "c56a506b-8b2e-4dc6-ae1c-c649bbd870c5",
        "label": "Handle Reporting Events",
        "icon": "label_or_note",
        "iconType": "default",
        "iconUrl": "",
        "shape": "octagon",
        "description": "Use this step to process reporting events of the flow.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Reporting"
        ],
        "recommended": [],
        "tags": [],
        "template": "const _ = require('lodash');\nexports.step = class HandleReporting extends require('@onereach/flow-sdk/step') {\n    static init (flow, {data}) {\n      flow.on('before/main/event', async ({context : main}) => {\n        await main.process.runThread({ \n          id : '_reporting',\n          local : {\n            background : true\n          },\n          state : { \n            name : 'initThread',\n            step : data.id\n          }\n        })\n      })\n  \n      flow.on('notify/main/report-event', async ({context : main, params : event}) => {\n        const step = main.getStepInstance(data.id)\n        step.data = await step.resolveDataIn()\n        await step.handleReportEvent(event)\n      })\n    }\n    \n    async runStep () {\n      this.log.debug(`Exiting a step through 'next' exit`)\n      return this.exitStep('next')\n    }\n    \n    async handleReportEvent (event) {\n      const reportingThread = this.process.getSafeThread('_reporting')\n      \n      if (event) {\n        const reportingEventType = event.Event;\n        const eventParams = this._getEventSettings(reportingEventType);\n      \n        // skip unknown events\n        if (!eventParams) this.log.warn(`Unknown reporting event '${reportingEventType}'`, {event});\n\n        if (eventParams.handle) {\n            this.log.debug(`Enqueue '${event.Event}' reporting event to be processed`, {event});\n            reportingThread.state.events.push({\n                event,\n                exit : eventParams.exit\n            });\n        }\n      }\n      \n      if (!reportingThread.state.running && reportingThread.state.events.length > 0) {\n        await reportingThread.enqueueAndRun({\n          name : 'event',\n          event : {\n            name : '_reporting_event'\n          }\n        })\n      }\n    }\n    \n    async initThread () {\n      this.thread.gotoState({\n        name : 'reportingThread',\n        step : this.step.id,\n        events : []\n      });\n    }\n    \n    async reportingThread () {\n      this.triggers.local('_reporting_event', async () => {\n        const event = this.state.events.pop();\n        if (!event) return this.exitFlow();\n        const exitName = event.exit;\n        const reportingEvent = event.event;\n        const reportingEventType = reportingEvent.Event;\n\n        this.log.debug(`Start processing of '${reportingEventType}' event (exit: '${exitName}')`, {event : reportingEvent});  \n        \n        this.state.running = true;\n        \n        await this.process.runThread({\n          state : { \n            name : 'handleEvent',\n            step : this.step.id,\n            event : reportingEvent,\n            exitName\n          }\n        });\n      })\n    }\n    \n    /**\n     * Get settings (report or not, exit leg name, etc.) for a specif type of bot or provider event\n     */\n    _getEventSettings (eventType) {\n        const { \n            botEventsFilter, providerEventsFilter, processApi, processSession, processStep, processTransacript,\n            processUserAction, processIdentifier, processMessage, processNLU, processOptOut, processPhoneLookup, \n            processTelephony\n        } = this.data\n  \n        const handleBotEvent = (eventFlag) => botEventsFilter === 'any' || eventFlag;\n        const handleProviderEvent = (eventFlag) => providerEventsFilter === 'any' || eventFlag;\n        const botEventExit = (exitName) => botEventsFilter === 'any' ? 'any bot event' : exitName;\n        const providerEventExit = (exitName) => providerEventsFilter === 'any' ? 'any provider event' : exitName;\n\n        const botEventDetails = (exitName, handleEventFlag) => ({exit : botEventExit(exitName), handle : handleBotEvent(handleEventFlag)})\n        const providerEventDetails = (exitName, handleEventFlag) => ({exit : providerEventExit(exitName), handle : handleProviderEvent(handleEventFlag)})\n\n        const exitsMap = {\n            // bot events\n            Api        : botEventDetails('api',         processApi),\n            Session    : botEventDetails('session',     processSession),\n            Step       : botEventDetails('step',        processStep),\n            Transcript : botEventDetails('transcript',  processTransacript),\n            UserAction : botEventDetails('user-action', processUserAction),\n            // Tag        : botEventDetails('tag',         processTag),\n            Tag        : {exit : null, handle : false},    // we never really report this event\n            \n            // provider events\n            ExecutionTime : {exit : null, handle : false}, // it's impossible to handle this reporting event due to flow architecture\n            Identifier    : providerEventDetails('identifier',   processIdentifier),\n            Message       : providerEventDetails('message',      processMessage),\n            NLU           : providerEventDetails('nlu',          processNLU),\n            OptOut        : providerEventDetails('opt-out',      processOptOut),\n            PhoneLookup   : providerEventDetails('phone-lookup', processPhoneLookup),\n            Telephony     : providerEventDetails('telephony',    processTelephony)\n        };\n        \n        return exitsMap[eventType];\n    }\n    \n    /**\n     * Build reporting event tags into object structure\n     */\n    _buildTags (reportingEvent) {\n      return _.chain(reportingEvent)\n        .get('Tags')\n        .groupBy('TagCategory')\n        .mapValues(categoryTags => _.chain(categoryTags)\n          .keyBy('Tag')\n          .mapValues('TagValue')\n          .value()\n        )\n        .value()\n    }\n\n    handleEvent () {\n      const reportingEvent = this.state.event\n      const reportingEventType = reportingEvent.Event\n      \n      this.log.debug(`Finished processing of reporting event. Stopping thread.`, {event : reportingEvent});\n      this.once('end', this.handleNextEvent)\n      \n      this.exitStep(this.state.exitName, {\n        type  : reportingEventType,\n        event : reportingEvent,\n        tags  : this._buildTags(reportingEvent)\n      })\n    }\n    \n    handleNextEvent () {\n      const reportingThread = this.process.getSafeThread('_reporting')\n      delete reportingThread.state.running\n      \n      this.handleReportEvent()\n    }\n  }",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "5d47e4f9-b755-47a8-9214-f4a46b5d7644",
              "label": "any bot event",
              "condition": "schema.botEventsFilter === 'any'"
            },
            {
              "id": "45a7d244-7264-4e2e-b2bb-bffc2abb95bd",
              "label": "api",
              "condition": "schema.botEventsFilter === 'some' && schema.processApi"
            },
            {
              "id": "31494458-dba5-42d3-b635-ac2516a10b7d",
              "label": "session",
              "condition": "schema.botEventsFilter === 'some' && schema.processSession"
            },
            {
              "id": "aa71f8b0-345e-4263-8d93-e993b000e6b0",
              "label": "step",
              "condition": "schema.botEventsFilter === 'some' && schema.processStep"
            },
            {
              "id": "5bd1303e-b151-474a-b9b4-a42e3afda424",
              "label": "tag",
              "condition": "schema.botEventsFilter === 'some' && schema.processTag"
            },
            {
              "id": "e1bff931-321a-49d6-8b4f-9b3b67dc0719",
              "label": "transcript",
              "condition": "schema.botEventsFilter === 'some' && schema.processTransacript"
            },
            {
              "id": "dcc326c6-a4f6-49e6-969d-3a3d3c24a0e6",
              "label": "user-action",
              "condition": "schema.botEventsFilter === 'some' && schema.processUserAction"
            },
            {
              "id": "cd7ce336-f57e-4ea1-b3e1-5a534cd9fbd1",
              "label": "any provider event",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'any'"
            },
            {
              "id": "b4594b1e-196d-4461-ba03-127cb19fc297",
              "label": "identifier",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processIdentifier"
            },
            {
              "id": "aa0779c3-22d0-4b39-ad7f-24d62d9beed8",
              "label": "message",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processMessage"
            },
            {
              "id": "0aeb5544-8862-41e4-818c-c286ae29e87a",
              "label": "nlu",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processNLU"
            },
            {
              "id": "5d361cf2-337d-4cf8-bfc6-a5f3c6c44ac5",
              "label": "opt-out",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processOptOut"
            },
            {
              "id": "643c84c9-bf5a-4b84-88d2-ad3c3483e59d",
              "label": "phone-lookup",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processPhoneLookup"
            },
            {
              "id": "dd8af419-df63-4dc4-8c03-5fa096277c43",
              "label": "telephony",
              "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processTelephony"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "processApi": false,
          "processNLU": false,
          "processTag": false,
          "processStep": true,
          "processOptOut": false,
          "processMessage": false,
          "processSession": true,
          "botEventsFilter": "any",
          "processTelephony": false,
          "processIdentifier": false,
          "processUserAction": false,
          "isProvidersAccount": false,
          "processPhoneLookup": false,
          "processTransacript": false,
          "providerEventsFilter": "any"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "type": "",
          "event": {
            "Tags": [],
            "BotId": "",
            "Event": "",
            "FlowId": "",
            "StepId": "",
            "EventId": "",
            "AccountId": "",
            "SessionId": "",
            "Timestamp": "",
            "EventValue": {},
            "EventCategory": "",
            "TransactionId": ""
          }
        },
        "help": "The step template allows you to add an action or a number of actions run asynchronously from the flow’s main logic when a bot event is reported during a flow execution. Selecting any or specific event will enable additional step leg where you can define the logic of how to handle this event or what the flow should do next if the event is received. For example, you may want to add a record to _Tables_ with the event’s details, or collect its details in a merge field value and use it later in the flow, etc.\n\nNext bot events can be processed: \n- API,\n- Session, \n- Step,\n- Transcript, \n- User Action (for Live Agent only). \n\nThe step has two exits: _next_, followed by the main flow logic, and _any bot event_ - the default option which means to handle any bot event received and follow the appropriate exit. \nIf you want to handle specific events only, change the value in the dropdown to _specific event types_ and switch on a toggle for an event you’d like to handle.\nDuring a flow execution, the step will take an appropriate exit as many times as a specific event is reported regardless of a step in the tree. For example, each action of a message being sent or received by the step in a flow is followed by reporting of _Transcript_ bot event in the flow logs with the details of the message, like “To” and “From” numbers, message text, media link, etc. And if a step in your flow sends a message and then receives a response from the end user, the step will report _Transcript_ event twice, and Handle reporting events step will take _Transcript_ exit also twice for a single step execution. \n\nThe step logic ignores bot events reported by its own execution so it’s not stuck in the loop.  \n\n#### Merge field settings\nMerge field contains details of the event reported. \n\n```\n{\n  type: '',\n  event: {\n    AccountId : '',\n    BotId : '',\n    Event : '',\n    EventId: '',\n    EventCategory : '',\n    EventValue : {},\n    FlowId : '',\n    SessionId : '',\n    StepId : '',\n    Tags : [],\n    Timestamp : '',\n    TransactionId : ''\n  }\n}\n```\n#### Reporting events\nThe step reports default Step event. \n\n## Release notes\n### 0.0.4\n- fix session.trigger_not_found issue\n\n### 0.0.2\n- do not filter out from output example tags with dynamic values in TagValue\n- remove 'Tag' reporting event processing since we never actually report it\n- \n### 0.0.1\n- initial release",
        "formBuilder": {
          "stepExits": [
            {
              "id": "d688a3d1-858b-4d5a-bb72-30acc1bb8e40",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "f986e783-0a14-46c8-a9f1-ee974faef6d3",
              "data": {
                "id": "5d47e4f9-b755-47a8-9214-f4a46b5d7644",
                "label": "any bot event",
                "condition": "schema.botEventsFilter === 'any'"
              },
              "component": "exitStatic"
            },
            {
              "id": "e9ec6f05-a9cb-44a4-8c70-628bc8687b16",
              "data": {
                "id": "45a7d244-7264-4e2e-b2bb-bffc2abb95bd",
                "label": "api",
                "condition": "schema.botEventsFilter === 'some' && schema.processApi"
              },
              "component": "exitStatic"
            },
            {
              "id": "b508be16-a6ae-459f-91a5-30bfc56ca3b3",
              "data": {
                "id": "31494458-dba5-42d3-b635-ac2516a10b7d",
                "label": "session",
                "condition": "schema.botEventsFilter === 'some' && schema.processSession"
              },
              "component": "exitStatic"
            },
            {
              "id": "0c13d79d-b451-4852-a8e7-851a71783ab3",
              "data": {
                "id": "aa71f8b0-345e-4263-8d93-e993b000e6b0",
                "label": "step",
                "condition": "schema.botEventsFilter === 'some' && schema.processStep"
              },
              "component": "exitStatic"
            },
            {
              "id": "d7b3fdf9-f01f-4600-91bf-0aa333abf7d0",
              "data": {
                "id": "5bd1303e-b151-474a-b9b4-a42e3afda424",
                "label": "tag",
                "condition": "schema.botEventsFilter === 'some' && schema.processTag"
              },
              "component": "exitStatic"
            },
            {
              "id": "fc006612-daad-4e96-a1d6-71bb900fa842",
              "data": {
                "id": "e1bff931-321a-49d6-8b4f-9b3b67dc0719",
                "label": "transcript",
                "condition": "schema.botEventsFilter === 'some' && schema.processTransacript"
              },
              "component": "exitStatic"
            },
            {
              "id": "ac90614e-4a17-43ba-8db9-d6a702c2c987",
              "data": {
                "id": "dcc326c6-a4f6-49e6-969d-3a3d3c24a0e6",
                "label": "user-action",
                "condition": "schema.botEventsFilter === 'some' && schema.processUserAction"
              },
              "component": "exitStatic"
            },
            {
              "id": "1ee776d0-fbbc-4612-91ce-c539ea45bf74",
              "data": {
                "id": "cd7ce336-f57e-4ea1-b3e1-5a534cd9fbd1",
                "label": "any provider event",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'any'"
              },
              "component": "exitStatic"
            },
            {
              "id": "63821917-5d53-45af-aaba-7c02d4b782d5",
              "data": {
                "id": "b4594b1e-196d-4461-ba03-127cb19fc297",
                "label": "identifier",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processIdentifier"
              },
              "component": "exitStatic"
            },
            {
              "id": "838d7fb9-d406-4edb-8bed-4cfafb7cbd68",
              "data": {
                "id": "aa0779c3-22d0-4b39-ad7f-24d62d9beed8",
                "label": "message",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processMessage"
              },
              "component": "exitStatic"
            },
            {
              "id": "161c83b4-dea9-4537-85d0-32dcdfc4ef0b",
              "data": {
                "id": "0aeb5544-8862-41e4-818c-c286ae29e87a",
                "label": "nlu",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processNLU"
              },
              "component": "exitStatic"
            },
            {
              "id": "9df4a286-64fe-42be-885e-d419aa25cfd9",
              "data": {
                "id": "5d361cf2-337d-4cf8-bfc6-a5f3c6c44ac5",
                "label": "opt-out",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processOptOut"
              },
              "component": "exitStatic"
            },
            {
              "id": "13e1082b-26c4-4809-8372-fff8b67753df",
              "data": {
                "id": "643c84c9-bf5a-4b84-88d2-ad3c3483e59d",
                "label": "phone-lookup",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processPhoneLookup"
              },
              "component": "exitStatic"
            },
            {
              "id": "77f695e5-d2ae-46c3-8ea4-2ed96a9b60df",
              "data": {
                "id": "dd8af419-df63-4dc4-8c03-5fa096277c43",
                "label": "telephony",
                "condition": "schema.isProvidersAccount && schema.providerEventsFilter === 'some' && schema.processTelephony"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "553fee25-c42d-4af0-8703-969da7d5c899",
              "data": {
                "data": "{}",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<wildcard :output-example.sync=\"step.outputExample\" :steps=\"steps\"></wildcard>",
                "allowCodeMode": false,
                "componentName": "or-wildcard-lyomsaibjgwtrqdukxvefncpzh",
                "componentLogic": "{\n    computed : {\n      existingFlowTags () {\n        return _.get(this.outputExample, ['tags'], {});\n      },\n      expectedFlowTags () {\n        return _.chain(this.steps)\n          .map(step => _.chain(step)\n            .get(['reporting'])\n            .values()\n            .value()\n          )\n          .flatten()\n          .filter({enabled : true})\n          .flatMap('tags')\n          // remove tags with any merge fields\n          .reject(tag => {\n            const isDynamic = /\\$\\{/;\n            return isDynamic.test(tag.category) || isDynamic.test(tag.label);\n          })\n          // replace `value`\n          .map(tag => {\n            const isTextExpression = /^\\s*`(.*)`\\s*$/;\n            return {\n              category : _.replace(tag.category, isTextExpression, '$1'),\n              label    : _.replace(tag.label, isTextExpression, '$1'),\n              value    : _.replace(tag.value, isTextExpression, '$1'),\n            };\n          })\n          // convert tags from array to object\n          .groupBy('category')\n          .mapValues(tag => _.chain(tag).keyBy('label').mapValues(() => '').value())\n          .value();\n      }\n    },\n    mounted () {\n      if (!_.isEqual(this.existingFlowTags, this.expectedFlowTags)) {\n        this.$emit('update:outputExample', {...this.outputExample, tags : this.expectedFlowTags});\n      }\n    },\n    props : {\n      outputExample: Object,\n      steps: Array\n    }\n}",
                "componentTemplate": "<!-- Add flow reporting tags into output example as 'tags' field -->",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "7e95e18c-8079-4c1c-aa17-0b695d022832",
              "data": {
                "data": "{\"isProvidersAccount\": false}",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<wildcard v-model=\"schema.isProvidersAccount\"></wildcard>",
                "allowCodeMode": false,
                "componentName": "or-wildcard-wivdgyekqmpsjonacxbtfluhzr",
                "componentLogic": "{\n  computed : {\n    isProvidersAccount () {\n      return this.$flow.accountId === this.$flow.providersAccountId();\n    },\n    computedValue : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    }\n  },\n  props : {\n    value : Boolean\n  },\n  mounted () {\n    this.computedValue = this.isProvidersAccount\n  }\n}",
                "componentTemplate": "<!-- Create `isProvidersAccount` variable in step data -->",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "fb8c04fd-8478-4c8f-a41f-284919e3c5e8",
              "data": {
                "label": "Handle bot reporting events",
                "options": [
                  {
                    "label": "Any bot event type",
                    "value": "any",
                    "vforkey": "f9163b41-5915-4d21-970e-5c8934e6cf7f"
                  },
                  {
                    "label": "Specific event types",
                    "value": "some",
                    "vforkey": "a8d064ad-72af-4ddf-b46d-22ef092bacc3"
                  }
                ],
                "helpText": "",
                "multiple": false,
                "variable": "botEventsFilter",
                "placeholder": "Select Field",
                "defaultValue": "any",
                "allowCodeMode": false,
                "renderCondition": "",
                "validateRequired": true,
                "defaultArrayValue": [],
                "disabledCondition": ""
              },
              "compiled": {},
              "component": "formSelect"
            },
            {
              "id": "9b181edd-b021-47e6-b33f-3e12955a9618",
              "data": {
                "open": true,
                "header": "Bot reporting events filter",
                "inputs": [
                  {
                    "id": "c27b33e8-e66e-4eed-8b76-d53fcf013fe6",
                    "data": {
                      "label": "API",
                      "helpText": "",
                      "variable": "processApi",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "98443aaf-d775-46ef-938e-f84340a630e5",
                    "data": {
                      "label": "Session",
                      "helpText": "",
                      "variable": "processSession",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "41edb947-9b39-4ab2-b601-0a7a6f9ab5d4",
                    "data": {
                      "label": "Step",
                      "helpText": "",
                      "variable": "processStep",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "27a57066-aea3-432c-b200-60af4fde6e75",
                    "data": {
                      "label": "Tag",
                      "helpText": "",
                      "variable": "processTag",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "06bf52cb-0cbf-487e-b895-9c192bfef22c",
                            "ruleType": "",
                            "codeValue": "false",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "3e9acb81-f972-4e28-9173-3ee94ced616f",
                    "data": {
                      "label": "Transcript",
                      "helpText": "",
                      "variable": "processTransacript",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "b15a706e-e57c-4ac0-bf49-4ec862f12d31",
                    "data": {
                      "label": "User Action",
                      "helpText": "",
                      "variable": "processUserAction",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "46ccb14a-0067-46b1-bb03-1b80983e8402",
                      "ruleType": "",
                      "codeValue": "schema.botEventsFilter === 'some'",
                      "valueType": "advanced",
                      "firstValue": "``",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "09d00b10-5843-4a6f-9e78-211e9f765c55",
              "data": {
                "label": "Handle provider reporting events",
                "options": [
                  {
                    "label": "Any provider event type",
                    "value": "any",
                    "vforkey": "db3ffb68-bd18-4713-b5fd-111718c0d1d2"
                  },
                  {
                    "label": "Specific event types",
                    "value": "some",
                    "vforkey": "cfee10c7-7219-4053-a53f-d1b2130994fb"
                  }
                ],
                "helpText": "",
                "multiple": false,
                "variable": "providerEventsFilter",
                "placeholder": "Select Field",
                "defaultValue": "any",
                "allowCodeMode": false,
                "renderCondition": "schema.isProvidersAccount",
                "validateRequired": true,
                "defaultArrayValue": [],
                "disabledCondition": ""
              },
              "meta": {
                "name": "formSelect",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Dropdown (simple)",
              "compiled": {},
              "component": "formSelect",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"formSelect\"]"
              ]
            },
            {
              "id": "3e36f66a-d2d6-41ce-bbf8-131587da136b",
              "data": {
                "open": true,
                "header": "Provider reporting events filter",
                "inputs": [
                  {
                    "id": "ccf9a70c-79b9-49ad-999b-df3ead0584ab",
                    "data": {
                      "label": "Identifier",
                      "helpText": "",
                      "variable": "processIdentifier",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "61d69214-caa7-4990-abaf-05f07e5f3e17",
                    "data": {
                      "label": "Message",
                      "helpText": "",
                      "variable": "processMessage",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "53d3b443-8180-4bd9-8ff4-90bba5e67abf",
                    "data": {
                      "label": "NLU",
                      "helpText": "",
                      "variable": "processNLU",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "696717d7-75f0-4b96-bc96-ddd11fa7bc8e",
                    "data": {
                      "label": "Opt Out",
                      "helpText": "",
                      "variable": "processOptOut",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "ce2fb473-84a6-4d7e-a4a0-8461614256fe",
                    "data": {
                      "label": "Phone Lookup",
                      "helpText": "",
                      "variable": "processPhoneLookup",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "b85aa721-99fb-4a82-b425-56b4d9d141e3",
                    "data": {
                      "label": "Telephony",
                      "helpText": "",
                      "variable": "processTelephony",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "d2327c7e-53e4-4fdd-bea1-fc6244942e78",
                      "ruleType": "",
                      "codeValue": "schema.isProvidersAccount && schema.providerEventsFilter === 'some'",
                      "valueType": "advanced",
                      "firstValue": "``",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "0173c75b-591d-4be9-a0cb-ee93942ea991",
              "data": {
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "3cc75fa1-e704-4cee-b1ea-6c6c0a3ae289",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  type: '',\n  event: {\n    AccountId : '',\n    BotId : '',\n    Event : '',\n    EventId: '',\n    EventCategory : '',\n    EventValue : {},\n    FlowId : '',\n    SessionId : '',\n    StepId : '',\n    Tags : [],\n    Timestamp : '',\n    TransactionId : ''\n  }\n}",
          "hasProcessError": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "script": "",
            "version": "1.0.0"
          },
          {
            "script": "",
            "version": "1.0.1"
          }
        ],
        "modules": [
          {
            "name": "lodash",
            "version": ""
          }
        ],
        "dateCreated": 1587736144420,
        "dateModified": 1646395482574
      },
      {
        "id": "efc014cb-d50b-4bf7-8799-7a9ac27287ef",
        "version": "3.2.10",
        "cacheVersion": "6b6762f2-37ee-43a8-8885-f07b7b9323de",
        "originalSource": "9adf3a1c-3ecf-4090-b57e-08dbf76969a8",
        "label": "Trigger Another Flow and Proceed",
        "icon": "flow",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-right",
        "description": "Starts another flow and proceeds with the current flow's execution without waiting for the result.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Trigger"
        ],
        "recommended": [],
        "tags": [],
        "template": "const short = require('short-uuid');\nconst translator = short();\n\nconst emitEvent = async (additionalParams) => {\n  flowId = isUseCustomSubflow ? customSubFlowName.toLowerCase() : flowIdToTrigger\n\n  if (isUseCustomSubflow && paramsProcessType === 'manually') {\n    flowParameters = customFlowParameters\n  }\n  const target = isUseCustomSubflow ? customTriggerTargetAccountId.toLowerCase() : targetAccountId\n  const event = {\n    name: `try/${flowId}`,\n    params: {\n      ...flowParameters,\n      ...additionalParams\n    },\n    ...(target && { target })\n  };\n\n  const result = await this.emitAsync(event);\n\n  if (_.isNil(result)) {\n    const errorText = 'Unable to find the flow you\\'ve tried to trigger. Re-check your subflow name.';\n    await this.setDataOut({\n      errorText,\n      event\n    });\n    throw new Error(errorText);\n  }\n\n  return;\n}\n\nif (doNotExpectResult) {\n  await emitEvent({\n    doNotSendResultBack: true\n  });\n  return this.exitStep('next', {doNotExpectResult});\n\n}\n\nlet eventId = thisStep.get(this, ['eventId'], false);\n\n// eventId will be truthy if this execution is for result/error/timeout\nif (!eventId) {\n  eventId = translator.new();\n  thisStep.set(this, ['eventId'], eventId);\n\n  const thread = this.process.newThread(eventId)\n  thread.currentStep = thisStep;\n  \n  // prevent thread subscriptions from blocking main thread on its end\n  thread.local.background = true;\n  \n  thisStep.set(thread, ['eventId'], eventId);\n  thread.activate();\n  await thread.run();\n\n  // remove flag from main thread, so step will be able to trigger another flow again\n  thisStep.set(this, ['eventId'], false);\n  return this.exitStep('next', {\n    id: eventId\n  });\n\n} else {\n  return this.triggers\n    .once(`result/${eventId}`, async (event) => {\n      this.log.warn('once', eventId)\n      await this.setDataOut({\n        result: event.params,\n        id: eventId\n      });\n\n      // unsubscribe from result/eventId \n      // required until fixed in flow-sdk\n      this.triggers.off(`result/${eventId}`)\n\n      return this.end(event.params);\n    })\n\n    .otherwise(async () => {\n      await this.triggers.flush();\n      \n      await emitEvent({eventId});\n      return this.exitFlow();\n    });\n\n}",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "a4bd4491-693e-4689-b66e-5a8e3b803d11",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "flowId": "",
          "dataOut": {
            "ttl": 86400000,
            "meta": {
              "conversationType": "subflow",
              "conversationStarter": true,
              "conversationStepType": "trigger_n_proceed"
            },
            "name": "",
            "type": "session"
          },
          "resultExits": [],
          "processError": true,
          "flowParameters": [],
          "flowIdToTrigger": "",
          "targetAccountId": "",
          "customResultExits": [
            {
              "name": "result",
              "vforkey": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17"
            }
          ],
          "customSubFlowName": "``",
          "doNotExpectResult": false,
          "paramsProcessType": "manually",
          "isUseCustomSubflow": false,
          "flowToGetParamsFrom": "",
          "customFlowParameters": [],
          "cachedFlowListOptions": [],
          "customTriggerTargetAccountId": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "id": ""
        },
        "help": "Starts another flow and proceeds with the current flow's execution without waiting for the result.\n\n**How can I use this Step?**\n\nUse this step to start another flow (Subflow) and proceed with the current flow's (Main Flow) execution without waiting for the result. Step works together with *Wait for Trigger from Another Flow*, *Return Result to Another Flow*, *Return Error to Another Flow* and *Fetch Result from Another Flow* steps.\n\nTo execute this step properly, please follow these instructions:\n1. Build and activate a Subflow using the *Wait for Trigger from Another Flow* step. Optionally, use either one or both *Return Result to Another Flow* and *Return Error to Another Flow* steps to return the result of the Subflow's execution.\n2. Build a separate, Main Flow, using a *Trigger Another Flow and Proceed* step. Connect both the Main Flow and the Subflow by choosing the **flow to trigger** from the dropdown or using a **custom trigger name**. Optionally, to get the result of the Subflow's execution place the *Fetch Result from Another Flow* step in the logic on the **next** exit of the *Trigger Another Flow and Proceed* step.\n3. Activate the Main Flow. When the connected *Trigger Another Flow and Proceed* step is reached in the Main Flow, the Subflow is triggered and the Main Flow proceeds down the **next** exit without waiting for the result of the Subflow's execution.\n\n## <a name=\"content\"></a>Help content:\n\n- [Flow to trigger](#flow-to-trigger)\n- [Parameters and exits](#parameters-exits)\n- [Advanced settings](#advanced-settings)\n- [Cross account settings](#cross-account-settings)\n- [Merge field settings](#merge-field-settings)\n- [Reporting](#reporting)\n- [Services dependencies](#services-dependencies)\n- [Release notes](#release-notes)\n\n## <a name=\"flow-to-trigger\"></a>Flow to trigger\n\nIn this section you define the Subflow that will be triggered. There are three options available:\n\n- Create a [new Subflow](#new-subflow);\n- Select an [existing Subflow](#existing-subflows) from the list;\n- Provide a [custom trigger name](#custom-trigger-name) identical to the one used in a Subflow.\n\n### <a name=\"new-subflow\"></a>Create a new subflow\n\nTo create a new Subflow, follow these steps:\n1. Click **+** above the **Flow to trigger** dropdown. The **New subflow settings** modal window will pop up.\n2. Select the **Bot** from the list of existing bots within your OneReach.ai account that will host the new Subflow.\n3. Provide a **Flow name** for the new Subflow.\n4. Optionally, provide **additional settings**. This section matches the settings of a *Wait for Trigger from Another Flow* step template, such as options to set a **custom trigger name** or to add **parameters** and **exits** expected from the triggering flow. The description of its limits can be found in the help text of the *Wait for Trigger from Another Flow* step. \n5. Click **Create flow**. After the Subflow is created, options to immediately activate and select it as the **flow to trigger**, or to open the Subflow in a new tab are provided. The created Subflow includes the *Wait for Trigger from Another Flow*, *Return Result to Another Flow* and *Return Error to Another Flow* step templates.\n\n### <a name=\"existing-subflows\"></a>Existing subflows\n\nTo trigger an existing Subflow, select one from the **flow to trigger** dropdown. It lists the name of the bot and each activated Subflow within that bot that contains a *Wait for Trigger from Another Flow*, as well as the Subflows shared with your account by other OneReach.ai accounts.\n\n### <a name=\"custom-trigger-name\"></a>Custom trigger name\n\nTo trigger a Subflow using a **custom trigger name**, turn on the respective toggle, then specify the name manually or choose it from the list of **existing custom triggers**. The **custom trigger name** value is case insensitive.\n\n> **Note:** The **use custom trigger name** toggle must also be turned on in the *Wait for Trigger from Another Flow* step of the Subflow, and the provided **custom trigger names** must be identical in both flows.\n\nTo trigger a custom Subflow in another OneReach.ai account, provide its **Account ID** in the **[Cross account settings](#cross-account-settings)** section.\n\n[Back to content](#content)\n\n## <a name=\"parameters-exits\"></a>Parameters and exits\n\nEach Subflow may have one or several predefined **parameters**, the values of which can be passed on from the Main Flow, as well as **exits**, down which the Main Flow could proceed. These parameters and exits are listed in this section after a **flow to trigger** is selected.\n\nIf the **custom trigger name** option is used, additional parameters and exits can be either specified manually or inherited from an existing subflow. Each parameter name and value are interpreted as a JSON object key and value, respectively.\n\n> **Note:** If parameters and exits are defined manually, the **parameter name** and **exit name** values must exactly match the respective values defined in the *Wait for Trigger from Another Flow* step with the selected **custom trigger name**.\n\n[Back to content](#content)\n\n## <a name=\"cross-account-settings\"></a>Cross account settings\n\nTo access a Subflow with a custom trigger name owned by another OneReach.ai account do the following:\n\n1. Make sure that the Sublow owned by another OneReach.ai account is shared with your account. This can be done in that account, in the **Subflow sharing settings** of the *Wait for Trigger from Another Flow* step of the Subflow.\n2. Provide the exact same **custom trigger name** in the Main Flow and the Subflow.\n3. Provide the **Account ID** of the owner of the Subflow.\n\n> **Note:** If the **custom trigger name** value is selected from the list of existing custom triggers, the Step adds the **Account ID** value automatically.\n\n[Back to content](#content)\n\n## <a name=\"advanced-settings\"></a>Advanced settings\n\nBy default, when the Subflow is triggered by the Main Flow, an event ID value is created. This value is used to get the results of the Subflow execution further in the Main Flow using a *Fetch Result of Another Flow* step. If you **do not expect a result from the Subflow**, turn on the respective toggle.\n\n> **Note:** If a *Fetch Result from Another Flow* step was used to get the result of the Subflow execution from this step, and no result is expected, it needs to be removed from the flow tree.\n\n[Back to content](#content)\n\n\n## <a name=\"merge-field-settings\"></a>Merge field settings\n\nThe output data of the step will be stored under the name provided in the **merge field name**. It contains the ID of the Subflow that was triggered by this step.\n\n[Back to content](#content)\n\n\n## <a name=\"error-handling\"></a>Error handling\n\n**Handle error** is on by default and adds an **error** exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. the Subflow wasn't found).\n\n[Back to content](#content)\n\n\n\n## <a name=\"reporting\"></a>Reporting\n\n**Step** event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n[Back to content](#content)\n\n\n##  <a name=\"services-dependencies\"></a>Services dependencies\n\n-   flow builder v2.25.3\n-   event-manager v2.0.1\n-   deployer 2.7.1\n-   library content 2.25.6\n\n[Back to content](#content)\n\n\n## <a name=\"release-notes\"></a>Release notes\n\n\n**v3.2.10**\n\n- Add option to allow subflow sharing with another account\n- Add option to unsubscribe from the result event before exiting the thread\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.2.10\n-   Trigger Another Flow and Wait for Result v3.2.10\n-   Wait for Trigger from Another Flow v3.2.10\n-   Fetch Result from Another Flow v3.2.10\n-   Return Result to Another Flow v3.2.10\n-   Return Error to Another Flow v3.2.10\n\n**v3.0.0**\n\n-   Custom subflow name option was renamed to _custom trigger name_ and moved to a separate toggle.\n-   Option to add multiple custom exits in the main flow when _custom trigger name_ is implemented.\n-   All subflows are available throughout the account.\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.0.0\n-   Trigger Another Flow and Wait for Result v3.0.0\n-   Wait for Trigger from Another Flow v3.0.0\n-   Fetch Result from Another Flow v3.0.0\n-   Return Result to Another Flow v3.0.0\n-   Return Error to Another Flow v3.0.0\n\n**v2.0.0**\n\n-   Custom trigger name works with merge field\n-   UI validation\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v2.0.0\n-   Trigger Another Flow and Wait for Result v2.0.0\n-   Wait for Trigger from Another Flow v2.0.0\n-   Fetch Result from Another Flow v2.0.0\n-   Return Result to Another Flow v2.0.0\n-   Return Error to Another Flow v2.0.0\n\n[Back to content](#content)",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        stepId : String,\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [
            {
              "id": "ce98aa47-6985-42b3-9e09-1ed02b7504f3",
              "data": {
                "id": "a4bd4491-693e-4689-b66e-5a8e3b803d11",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "d8284ed7-d7b2-4c30-ae5e-5a5071c34446",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "87eff58e-5323-43c8-bb17-d6e4dcf3f53b",
                    "major": "3",
                    "minor": "2",
                    "patch": "",
                    "vforkey": "092f6803-1589-4688-a61c-eccea6d8e5f2",
                    "stepLabel": "Fetch Result from Another Flow 3.2.1",
                    "allowUpdate": false
                  },
                  {
                    "id": "2f7652d8-e5ed-43a3-a6a7-56e15be03562",
                    "major": "3",
                    "minor": "2",
                    "patch": "",
                    "vforkey": "db3f85d9-7b9b-454b-8fab-a01f36f8af47",
                    "stepLabel": "Fetch Result from Another Flow 3.2.0",
                    "allowUpdate": false
                  },
                  {
                    "id": "cf56458a-a6f4-433e-8d7a-8c4db73fd873",
                    "major": "3",
                    "minor": "2",
                    "patch": "",
                    "vforkey": "c52bf573-7c92-4042-a1ea-a0c8c58e1162",
                    "stepLabel": "Fetch Result from Another Flow 3.0.0",
                    "allowUpdate": true
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "ebe2486c-3687-45c3-8bbb-af03cd3a813f",
              "data": {
                "stepName": "TAFAP"
              },
              "meta": {
                "name": "ui-triggers-steps-component",
                "type": "onereach-studio-form-input"
              },
              "label": "Trigger step UI",
              "compiled": {},
              "component": [
                "ui-triggers-steps-component",
                "https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.1.0/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.1.0/index.js\"][\"ui-triggers-steps-component\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.1.0/index.js\"][\"ui-triggers-steps-component\"]"
              ]
            },
            {
              "id": "444a144f-f2d7-4b78-8a2c-7f1b8493f3be",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "55ff9c78-16c1-4a6b-9fcf-636fa5868152",
                    "data": {
                      "label": "Do not expect result from subflow",
                      "helpText": "",
                      "variable": "doNotExpectResult",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "3134cd07-ded5-40c4-a8a4-79e01293ea98",
                    "data": {
                      "data": "{}",
                      "toJson": "return",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\" :step=\"step\" :data-out.sync=\"schema.dataOut\" :doNotExpectResult=\"schema.doNotExpectResult\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zofaxmwnlgcjbqriktuvydephs",
                      "componentLogic": "{\n    mounted(){\n      if (this.isNew) {\n        this.$emit('update:dataOut', {\n          ...this.dataOut,\n          meta: {\n            ...this.dataOut.meta,\n            doNotExpectResult: false\n          }\n        })\n      }\n    },\n    watch: {\n      doNotExpectResult(newValue){\n        this.$emit('update:dataOut', {\n        ...this.dataOut,\n        meta: {\n          ...this.dataOut.meta,\n          doNotExpectResult: newValue\n        }\n      });\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        step: {\n            type: Object,\n            default: () => {\n                return {}\n            }\n        },\n        dataOut: {\n            type: Object,\n            default: () => {\n                return {}\n            }\n        },\n        doNotExpectResult: Boolean,\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "1b00de5f-66cf-40c4-8e83-7e65b78ac7e8",
              "data": {
                "open": false,
                "header": "Cross-account settings",
                "inputs": [
                  {
                    "id": "825826fb-a467-4705-8a54-b32e66868a05",
                    "data": {
                      "label": "Flow to Trigger Account Id",
                      "helpText": "",
                      "variable": "customTriggerTargetAccountId",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "0ba9514b-60c5-4b3b-9d1a-653fbd67f734",
                      "ruleType": {
                        "func": "{ return firstValue === true }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is true",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.isUseCustomSubflow",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "0ba9514b-60c5-4b3b-9d1a-653fbd67f734",
                      "ruleType": {
                        "func": "{ return firstValue === true }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is true",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.isUseCustomSubflow",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "c7268ced-bc93-4da9-8cff-984717a1ff56",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "d19f4566-667b-4253-915b-42a56c352eb4",
                    "data": {
                      "meta": {
                        "conversationType": "subflow",
                        "conversationStarter": true,
                        "conversationStepType": "trigger_n_proceed"
                      },
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{\n  conversationType: 'subflow',\n  conversationStepType: 'trigger_n_proceed',\n  conversationStarter: true\n}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"id\": \"\"\n}",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "a4bd4491-693e-4689-b66e-5a8e3b803d11",
                    "label": "next"
                  },
                  {
                    "id": "__error__",
                    "label": "error"
                  }
                ],
                "flowId": "",
                "dataOut": "triggerProceedData",
                "isProceed": true,
                "processError": true,
                "flowParameters": [],
                "customSubFlowName": "``",
                "flowToGetParamsFrom": ""
              },
              "rawMode": false,
              "version": "f8f23ecc-27fc-4a7a-8110-4d43d15170dc",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "ce98aa47-6985-42b3-9e09-1ed02b7504f3",
                    "data": {
                      "id": "a4bd4491-693e-4689-b66e-5a8e3b803d11",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": true
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.1.13"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.1.14"
          },
          {
            "sample": null,
            "script": "step.data.isUseCustomSubflow =  false\n\nif(typeof step.data.flowIdToTrigger === 'undefined') step.data.flowIdToTrigger = step.data.flowId || \"\"\nif(typeof step.data.processError === 'undefined') step.data.processError = true\n\nif (step.data.flowId === 'customSubFlowName') {\n  step.data.isUseCustomSubflow =  true\n} else {\n  step.data.flowIdToTrigger = step.data.flowId\n}\n\nif (step.data.flowToGetParamsFrom === 'paramsListManualy') {\n  step.data.paramsProcessType = 'manually'\n} else {\n  step.data.paramsProcessType = 'inherit'\n}\n\n// migrate exits\n\nconst errorExit = _.find(step.data.exits, {label: 'error'})\nif (errorExit) errorExit.condition = 'processError'\n\n\nstep.data['dataOut']['meta'] = {\n    conversationType: 'subflow',\n    conversationStepType: 'trigger_n_proceed',\n    conversationStarter: true\n}",
            "version": "2.6.0"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.customFlowParameters)) step.data.customFlowParameters = []",
            "version": "2.6.5"
          },
          {
            "sample": null,
            "script": "const isUseCustomSubflow = _.get(step, 'data.isUseCustomSubflow');\r\nconst paramsProcessType = _.get(step, 'data.paramsProcessType');\r\n\r\nif (isUseCustomSubflow && paramsProcessType === 'manually') {\r\n  const customResultExits = _.get(step, 'data.customResultExits', []);\r\n  const metaExits = _.get(step, 'data.dataOut.meta.exits', []);\r\n  const resultExist = _.find(customResultExits, {\r\n    name: 'result'\r\n  })\r\n  if (_.isEmpty(resultExist)) {\r\n    customResultExits.unshift({\r\n      vforkey: uuid.v4(),\r\n      name: 'result'\r\n    })\r\n    metaExits.unshift('result')\r\n  }\r\n}",
            "version": "2.6.7"
          },
          {
            "sample": null,
            "script": "// missing piece\nif(_.isUndefined(step.data['customResultExits'])) step.data['customResultExits'] = [{\"name\":\"result\",\"vforkey\":\"bb4c0c44-215f-4bb4-887e-a4cf7131d07e\"}];",
            "version": "3.0.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['targetAccountId'])) step.data['targetAccountId'] = '';\n",
            "version": "3.1.0"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customResultExits'])) step.data['customResultExits'] = [{\"name\":\"result\",\"vforkey\":\"df0bbaaa-b88b-47e3-ab75-262e29b5ac9f\"}];\n\nif(_.isUndefined(step.data.doNotExpectResult)){\n  step.data.doNotExpectResult = false;\n  step.data.dataOut.meta.doNotExpectResult = false;\n}",
            "version": "3.2.0"
          },
          {
            "script": "if (_.isUndefined(step.data.customTriggerTargetAccountId)) {\n  step.data.customTriggerTargetAccountId = step.data.isUseCustomTrigger ? `\\`${step.data.targetAccountId}\\`` : '``'\n}",
            "version": "3.2.2"
          },
          {
            "script": "if(_.isUndefined(step.data['customResultExits'])) step.data['customResultExits'] = [{\"name\":\"result\",\"vforkey\":\"2908bc29-1377-4a7c-97d2-30a426b682d1\"}];\n",
            "version": "3.2.10"
          }
        ],
        "modules": [
          {
            "name": "short-uuid",
            "version": ""
          }
        ],
        "dateModified": 1662039876479
      },
      {
        "id": "d51593b3-7c89-44bc-9961-d7f08922ca14",
        "version": "3.0.0",
        "cacheVersion": "72d76837-1f3b-45cd-80a8-be0fb2bd71e4",
        "label": "Wait for Trigger from Another Flow",
        "icon": "flow",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-down",
        "description": "Starts a flow after it is triggered by another flow.",
        "isGatewayStep": true,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Trigger"
        ],
        "recommended": [],
        "tags": [],
        "template": "const timestring = require('timestring');\nconst params = parameters;\nconst timeout = timestring(sessionTimeout.input, 'ms');\nconst flowId = useCustomFlowName ? customFlowName.toLowerCase() : flowIdToTrigger || this.config.flowId;\nconst forbiddenExitNames = ['timeout', 'error']\n\nif (useCustomFlowName && _.isEmpty(_.trim(flowId))) throw new Error(`Custom trigger name can not be empty`);\n\nresultExits = _.chain(resultExits).map(exit => _.trim(exit.name)).uniq().compact().value()\n\n_.forEach(resultExits, exit => {\n  if (_.includes(forbiddenExitNames, exit)) throw new Error(`Invalid exit name. These names are forbidden - ${forbiddenExitNames.toString()}`);\n})\n\nconst tryEvent = {\n    name: `try/${flowId}`,\n    params: {\n        params,\n        flowId,\n        resultExits\n    }\n};\n\nreturn this.triggers\n    .on(tryEvent, async event => {\n        \n        if (!timeout || timeout < 60 * 1000 || timeout > 48 * 60 * 60 * 1000)\n          throw new Error('Invalid timeout');\n        \n        await this.session.start({\n            key: this.request.requestId,\n            timeout\n        });\n\n        // The way return result/error step knows eventId\n        \n        const result = {\n            name: event.name,\n            id: event.params.eventId,\n            params: event.params,\n            callback: event.params.isSync ? this.takeCallback() : undefined,\n            availableExits : resultExits\n        };\n        return this.exitStep('trigger', result);\n    })\n    .otherwise(() => this.exitFlow());",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "trigger",
              "label": "trigger",
              "condition": ""
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {
              "conversationType": "subflow",
              "conversationStarter": true,
              "conversationStepType": "wait_for_trigger"
            },
            "name": "",
            "type": "session"
          },
          "parameters": [],
          "resultExits": [
            {
              "name": "result"
            }
          ],
          "triggerExist": false,
          "customFlowName": "``",
          "sessionTimeout": {
            "input": "`2 hours`",
            "outputMode": "ms"
          },
          "flowIdToTrigger": "",
          "useCustomFlowName": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "session": {
            "tags": [],
            "type": "session",
            "label": "Session",
            "enabled": true,
            "canDisable": false
          }
        },
        "outputExample": {
          "params": {}
        },
        "help": "Use this step to start a flow after it is triggered by another flow. Step works together with the `Trigger Another Flow and Wait for Result` or `Trigger Another Flow and Proceed` steps.\n\nTo execute this step properly, please follow these instructions:\n1. Build and activate a *subflow* using a `Wait for Trigger from Another Flow` step and either one or both `Return Result to Another Flow` and `Return Error to Another Flow` steps.\n2. Build a separate, *main flow*, using `Trigger Another Flow and Wait for Result` or `Trigger Another Flow and Proceed` steps; connect both the main flow and the subflow by choosing the subflow to trigger from the dropdown or using a *custom trigger name*.\n3. Activate the main flow. When the connected *Trigger Another Flow* step is reached in the main flow, the subflow will be triggered and proceed down the exit.\n\n### Subflow name settings\nYou can trigger the subflow using a custom name. To do that, turn on the respective toggle and specify the exact same *custom trigger name* both in the Wait for Trigger from Another Flow step of the subflow and in the *Trigger Another Flow* step of the main flow. Custom trigger name should be unique for each Wait for Trigger from Another Flow step throughout your OneReach.ai account. In case there is a match of the custom trigger name between the current subflow and another activated subflow, a pop-up with the name of the bot and flow that contains the link to the conflicting flow will become available during an activation.\n\n### Parameters expected from the triggering flow\nIn case any parameters are expected from the main flow, click on *add parameter* and specify the *parameter name*. Its value will be received from the main flow. Multiple parameters can be added.\n\n### Result exits\nTo send the *main flow* down a custom exit, do the following:\n1. Click *add exit* and specify its name. Multiple exits may be added but none can be named as \"result\", \"timeout\" or \"error\".\n2. Choose the name of an exit from the list in the `Return Result to Another Flow` step of the subflow. Save and activate the flow.\n\nFor the main flow with the `Trigger Another Flow and Wait for Result` step:\n\n3. Click the *Refresh subflow data* option in the *Flow to trigger* section of the Trigger Another Flow and Wait for Result step. \n\nFor the main flow with the `Trigger Another Flow and Proceed` step:\n\n3. Click the *Refresh subflow data* option in the *Flow to trigger* section of the Trigger Another Flow and Proceed step.\n4. Click the *Update exits* option in the *Fetch Results from Another Flow* step.\n\n\n### Advanced settings\nThe subflow's session lifespan is set in the *Session timeout* field and is 2 hours from the beginning of a session by default. Its limits are between 1 min and 48 h and can be filled in manually, with a merge field value or in code mode. Examples of acceptable time formats: `26h 33m` or `126m`.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in the *merge field name*. It may include the parameters received from the main flow, as well as its ID.\nThe structure of the merge field object is:  \n``` json\n{\n  \"params\": {}\n}\n```\n\n### Reporting\n*Session* and *Step* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services dependencies\n- flow bulider v2.24.2\n- event-manager v2.0.1\n- deployer 2.3.1\n- library content 2.9.0\n\n### Release notes\n**v3.0.0**\n- Option to add multiple custom exits in the main flow.\n- All sublows are available throughout the account.\n\nNote, that all next steps in the solution should be updated to work correctly:\n- Trigger Another Flow and Proceed v3.0.0\n- Trigger Another Flow and Wait for Result v3.0.0\n- Wait for Trigger from Another Flow v3.0.0\n- Fetch Result from Another Flow v3.0.0\n- Return Result to Another Flow v3.0.0\n- Return Error to Another Flow v3.0.0\n\n**v2.0.0**\n- UI validation\n\nNote, that all next steps in the solution should be updated to work correctly:\n- Trigger Another Flow and Proceed v2.0.0\n- Trigger Another Flow and Wait for Result v2.0.0\n- Wait for Trigger from Another Flow v2.0.0\n- Fetch Result from Another Flow v2.0.0\n- Return Result to Another Flow v2.0.0\n- Return Error to Another Flow v2.0.0\n",
        "formBuilder": {
          "formCode": "return {\n    props : ['schema']\n};",
          "stepExits": [
            {
              "id": "4e27803b-b172-4136-8ff6-e9d1398b684c",
              "data": {
                "id": "trigger",
                "label": "trigger",
                "condition": ""
              },
              "compiled": {
                "exits": [
                  {
                    "id": "trigger",
                    "label": "trigger"
                  }
                ]
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "2bbc18a8-605f-474b-9b43-ac77139de210",
              "data": {
                "open": true,
                "header": "Subflow name settings",
                "inputs": [
                  {
                    "id": "97d8b500-f395-4dd4-9fc7-c6d8f06b17c2",
                    "data": {
                      "data": "{\n  \"flowIdToTrigger\": \"\",\n  \"triggerExist\": false\n}",
                      "toJson": "\nreturn {\n  flowIdToTrigger: JSON.stringify(data.flowIdToTrigger)\n};",
                      "validators": "\r\n  triggerExist: {\r\n     custom (value, schema) {\r\n      \r\n      return !schema.triggerExist;\r\n      \r\n      \r\n      // console.log('schema', schema)\r\n      // console.log('$flow', $flow)\r\n      \r\n      // if($flow) {\r\n      //   const flowIdToTrigger = schema.useCustomFlowName ? _.trim(schema.customFlowName, '`').toLowerCase() : schema.flowIdToTrigger;\r\n      //   const currentFlow = $flow.id;\r\n        \r\n      //   const triggerFlows = await $flow.api.deployments.getActiveDeployments([\r\n      //     'botId',\r\n      //     'flowId',\r\n      //     'data.triggers'\r\n      //   ]);\r\n        \r\n      //   console.log('triggerFlows',triggerFlows)\r\n        \r\n      //   const activeFlow = _.find(triggerFlows, triggerFlow => {\r\n      //     // skip current flow\r\n      //     return _.some(triggerFlow.data.triggers, trigger => {\r\n      //       return (\r\n      //         trigger.params.name &&\r\n      //                     trigger.params.name.startsWith(`try/${flowIdToTrigger}`)\r\n      //       );\r\n      //     });\r\n      //   });\r\n        \r\n      //   console.log('activeFlow',activeFlow)\r\n      //   console.log('currentFlow',currentFlow)\r\n        \r\n      //   console.log('is valid?: ', !_.isEmpty(activeFlow) && activeFlow.flowId !== currentFlow)\r\n        \r\n      //   if(!_.isEmpty(activeFlow) && activeFlow.flowId !== currentFlow) return false;\r\n        \r\n      //   return true;\r\n      // }\r\n      \r\n      \r\n      // return true;\r\n      \r\n    }\r\n  }\r\n",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  v-model=\"schema.flowIdToTrigger\" \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :triggerExist.sync=\"schema.triggerExist\"\n  :customFlowName.sync=\"schema.customFlowName\"\n  :useCustomFlowName=\"schema.useCustomFlowName\"\n  :$v=\"$v\"\n  >\n  \n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-tmkizfcjnvxaslquhpyegdbowr",
                      "componentLogic": "{\n    data() {\n      return {\n        loading : false,\n        showSuccessAlert: false\n      }\n    },\n    inject: ['getFlowMeta', 'setFlowMeta', 'mergeFlowMeta'],\n    async mounted(){\n      let cachedTriggerFlows = this.$flow.getCache('subflow.triggerFlows') || []\n      \n      if(this.isNew && _.isEmpty(this.value)) {\n        this.$emit('input', libs.uuid.v4())\n      }\n\n      const flowIdToTrigger = this.useCustomFlowName ? _.trim(this.customFlowName, '`').toLowerCase() : this.value;\n      const currentFlow = this.$flow.id;\n      \n      if (_.isEmpty(cachedTriggerFlows)) {\n        this.loading = true;\n        cachedTriggerFlows = await this.$flow.api.deployments.getActiveDeployments([\n          'botId',\n          'flowId',\n          'data.triggers'\n        ])\n        \n        this.$flow.setCache('subflow.triggerFlows', cachedTriggerFlows)\n        \n        this.loading = false;\n      }\n      \n      const activeFlow = _.find(cachedTriggerFlows, triggerFlow => {\n          // skip current flow\n          return _.some(triggerFlow.data.triggers, trigger => {\n            return (\n              trigger.params.name &&\n                          trigger.params.name.startsWith(`try/${flowIdToTrigger}`)\n            );\n          });\n        });\n      if(!_.isEmpty(activeFlow) && activeFlow.flowId !== currentFlow) {\n        this.$emit('update:triggerExist', true)\n      }\n    },\n    methods: {\n      generateNewEventId() {\n        if (this.useCustomFlowName) {\n          eventId = `\\`${_.trim(this.customFlowName, '`')}_copy\\``\n          this.$emit('update:customFlowName', eventId)\n        } else {\n          eventId = libs.uuid.v4()\n          this.$emit('input', eventId)\n        }\n        this.$emit('update:triggerExist', false)\n        this.mergeFlowMeta({flowEventId: eventId})\n        this.showSuccessAlert = true; \n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        customFlowName : {\n            type : String,\n            default : ''\n        },\n        useCustomFlowName : Boolean,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        triggerExist: Boolean,\n        $v : {\n          type: Object,\n          default() {\n            return {\n              schema: {\n                triggerExist: {}\n              }\n            };\n          }\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- \n  Wildcard for generating UUID insted of flowId\n  and in schema\n-->\n<!--{{$v.schema.triggerExist}}-->\n<div v-show=\"loading\"> \n  Checking subflow information\n  <or-progress-linear\n    color=\"primary\"\n  />\n</div>\n\n<or-alert :dismissible=\"false\" type=\"error\" v-show=\"$v.schema.triggerExist.$error\">\n  There is already exist subflow with the same subscription. \n  You won't be able activate it until generate new event ID. <br/>\n  <or-button \n    type=\"primary\"\n    color=\"primary\"\n    @click=\"generateNewEventId\"\n  >\n    Generate new event ID\n  </or-button>\n</or-alert>\n\n<or-alert :dismissible=\"true\" @dismiss=\"showSuccessAlert = false\" type=\"info\" v-show=\"showSuccessAlert\">\n  You're all set. Flow can be activated\n</or-alert>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "3ec3f6ca-d7fd-41ad-856f-25f77b01d1a9",
                    "data": {
                      "label": "Use custom trigger name",
                      "helpText": "",
                      "variable": "useCustomFlowName",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch"
                  },
                  {
                    "id": "fb2fd9a7-ab0f-4821-9fd6-2b1b278cfdea",
                    "data": {
                      "label": "Custom trigger name",
                      "helpText": "",
                      "variable": "customFlowName",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "4a70d372-c83d-47c0-b663-bbd5e6c3dd08",
                          "errorMessage": "The Custom trigger name is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "358bf6cf-025f-4f44-90a9-9e70be05a3cc",
                                "ruleType": "",
                                "codeValue": "_.isEmpty(_.trim(_.trim(schema.customFlowName, '`')))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bb0b3b94-a280-42dd-a643-90a132f0e2d4",
                            "ruleType": "",
                            "codeValue": "schema.useCustomFlowName === true",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components-staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components-staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "9c43c904-fa13-4970-a8d0-b40c61d500ad",
              "data": {
                "open": false,
                "header": "Parameters expected from the triggering flow",
                "inputs": [
                  {
                    "id": "749591ef-e5f1-4c89-ae9e-63d7ad19dcfc",
                    "data": {
                      "data": "{\n  \"parameters\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "parameters: {\n  $each: {\n    name: {\n      custom (value, ctx) {\n        const isSame = _.some(this.schema.parameters, parameter => parameter.vforkey !== ctx.vforkey && parameter.name === value)\n        \n        return !isSame && _.trim(value)\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-nbmuqgtadpjyhflr   :parameters.sync=\"schema.parameters\"   :readonly=\"readonly\"   :step=\"step\"   :steps=\"steps\"   :step-id=\"stepId\"  :v=\"$v\"></or-wildcard-nbmuqgtadpjyhflr>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-nbmuqgtadpjyhflr",
                      "componentLogic": "{\n  components: {\n    parameterItem: {\n      props: {\n        parameters: {\n          type: Array,\n          default () {\n            return []\n          }\n        },\n        vforkey: {\n          type: String,\n          default: ''\n        },\n        validator: {\n          type: Array,\n          default () {\n            return []\n          }\n        },\n        paramName: {\n          type: String,\n          default: ''\n        },\n        steps: '',\n        stepId: '',\n        readonly: {\n          type: Boolean,\n          default: false\n        }\n      },\n\n      data() {\n        return {\n          errorText: 'This field is required.'\n        }\n      },\n\n      computed: {\n        paramNameLocal: {\n          get() {\n            return this.paramName;\n          },\n\n          set(value) {\n            this.$emit('update:paramName', value);\n            eventHub.$emit('update:param-name');\n          }\n        },\n\n        currentItemInex() {\n          return _.findIndex(this.parameters, item => item.vforkey === this.vforkey);\n        }\n      },\n      template: `<or-textbox label=\"Parameter name\"\n                    v-model=\"paramNameLocal\"\n                    error=\"Parameter name can't be empty or duplicate\"\n                    :invalid=\"validator.$each[currentItemInex].$error\"\n                    :disabled=\"readonly\"\n                    show-error-text=\"persistently\"\n                    @input=\"validator.$each[currentItemInex].$touch()\"\n                  ></or-textbox>`\n    }\n  },\n  \n  data() {\n    return {}\n  },\n  \n  computed: {\n    localParameters: {\n      get() {\n        return this.parameters;\n      },\n\n      set(value) {\n        this.$emit('update:parameters', value)\n      }\n    },\n  },\n  \n  created() {\n    eventHub.$on('update:param-name', this.updateOutputExample)\n  },\n  \n  beforeDestroy() {\n    eventHub.$off('update:param-name', this.updateOutputExample)\n  },\n  \n  methods: {\n    updateOutputExample() {\n      if (this.step) {\n        this.step.outputExample.params = _.reduce(\n          this.localParameters,\n          (o, key) => Object.assign(o, {\n            [key.name]: ''\n          }), {}\n        )\n      }\n    },\n    \n    newParam() {\n      return {\n        name: ''\n      };\n    }\n  },\n  \n  watch: {\n    localParameters: {\n      handler (newValue) {\n        this.updateOutputExample()\n      }\n    }\n  },\n  \n  props: {\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    step: '',\n    steps: '',\n    stepId: '',\n    v: {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            parameters: []\n          }\n        }\n      }\n    },\n    parameters: {\n      default() {\n        return [];\n      }\n    },\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-list v-model=\"localParameters\"\r\n  :new-item-method=\"newParam\"\r\n  :readonly=\"readonly\"\r\n  :steps=\"steps\"\r\n  :step-id=\"stepId\"\r\n  :add-button-label=\"'Add parameter'\"\r\n  can-remove-last-item\r\n  drag-handle-right\r\n>\r\n  <template scope=\"item\">\r\n    <parameter-item :param-name.sync=\"item.item.name\"\r\n      :vforkey=\"item.item.vforkey\"\r\n      :parameters=\"localParameters\"\r\n      :validator=\"v.schema.parameters\"\r\n      :readonly=\"item.readonly\"\r\n      :steps=\"item.steps\"\r\n      :step-id=\"item.stepId\"\r\n    ></parameter-item>\r\n  </template>\r\n</or-list>\r\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".params-container {\n  margin-bottom: 35px;\n\n  button.add-button {\n    padding-left: 0;\n    font-size: 14px;\n  }\n}\n\n.list-item {\n  margin-bottom: 0;\n}\n\n.ui-textbox {\n  flex-grow: 1;\n}\n\n.ui-textbox__label-text {\n  font-size: 12px;\n  line-height: 20px;\n}\n\n.or-list .list-item > .item.multi-line > * {\n  margin: 0;\n}\n"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "3de94d5e-af2d-4964-b54c-b590747f95ac",
              "data": {
                "open": false,
                "header": "Result exits",
                "inputs": [
                  {
                    "id": "1def8a2a-9b65-4fce-9388-d450ce3b6c75",
                    "data": {
                      "data": "{\n  \"resultExits\": [{\n    \"name\" : \"result\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "resultExits: {\n  $each: {\n    name: {\n      custom (value, ctx) {\n        const isUsedForbiddenNames = _.includes(['timeout', 'error'], value)\n        const isSame = _.some(this.schema.resultExits, exits => exits.vforkey !== ctx.vforkey && exits.name === value)\n        \n        return !isSame && !isUsedForbiddenNames && _.trim(value)\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n:customFlowName=\"schema.customFlowName\"\n:useCustomFlowName=\"schema.useCustomFlowName\"\n:data-out.sync=\"schema.dataOut\"\n:result-exits.sync=\"schema.resultExits\"\n:readonly=\"readonly\" \n:step=\"step\"\n:steps=\"steps\" \n:step-id=\"stepId\" \n:v=\"$v\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qxhwotgmvcsljrdbpafeunkyzi",
                      "componentLogic": "{\n  data() {\n    return {}\n  },\n  computed: {\n    localParameters: {\n      get(){\n        return this.resultExits\n      },\n      set(value){\n        this.$emit('update:resultExits', value);\n        this.updateDataOutWithExits(value)\n      }\n    }\n  },\n  methods: {\n    isForbiddenExitName(exitName){\n      return _.includes(['timeout', 'error'], exitName)\n    },\n    updateDataOutWithExits(exits) {\n      this.$emit('update:dataOut', {\n        ...this.dataOut,\n        meta: {\n          ...this.dataOut.meta,\n          exits: exits\n        }\n      })\n    },\n    newParam() {\n      return {\n        name: ''\n      };\n    },\n    trimData (index) {\n      this.localParameters[index].name = _.trim(this.localParameters[index].name);\n      this.$emit('update:resultExits', this.localParameters);\n    }\n  },\n  mounted(){\n    this.updateDataOutWithExits(this.localParameters)\n  },\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    step: '',\n    steps: '',\n    stepId: '',\n    v: {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            resultExits: []\n          }\n        }\n      }\n    },\n    dataOut: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    resultExits: {\n      default() {\n        return [];\n      }\n    },\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-list v-model=\"localParameters\"\r\n  :new-item-method=\"newParam\"\r\n  :readonly=\"readonly\"\r\n  :steps=\"steps\"\r\n  :step-id=\"stepId\"\r\n  :add-button-label=\"'Add exit'\"\r\n  :can-remove-last-item=\"false\"\r\n  drag-handle-right\r\n  :canDragItems=\"false\"\r\n>\r\n  <template scope=\"item\">\r\n    <or-textbox label=\"Exit name\"\r\n      v-model=\"item.item['name']\"\r\n      :error=\"isForbiddenExitName(item.item['name']) ? 'The following name is prohibited' : 'Exit name can\\'t be empty or duplicate'\"\r\n      :invalid=\"v.schema.resultExits.$each[item.index].name.$error\"\r\n      :disabled=\"readonly\"\r\n      show-error-text=\"persistently\"\r\n      @input=\"v.schema.resultExits.$each[item.index].name.$touch()\"\r\n      @blur=\"trimData(item.index)\"\r\n    ></or-textbox>\r\n  </template>\r\n</or-list>\r\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".params-container {\n  margin-bottom: 35px;\n\n  button.add-button {\n    padding-left: 0;\n    font-size: 14px;\n  }\n}\n\n.list-item {\n  margin-bottom: 0;\n}\n\n.ui-textbox {\n  flex-grow: 1;\n}\n\n.ui-textbox__label-text {\n  font-size: 12px;\n  line-height: 20px;\n}\n\n.or-list .list-item > .item.multi-line > * {\n  margin: 0;\n}\n"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://new-shared.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://new-shared.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"http://localhost:8081\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"http://localhost:8081\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "4466917a-7865-4863-a9d0-6cdcc4932db7",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "de84148d-76d9-4f90-8aed-a668b9124278",
                    "data": {
                      "label": "Session timeout",
                      "helpText": "Min 1 min, max 48 hours",
                      "variable": "sessionTimeout",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`2 hours`",
                      "errorMessage": "Must be a valid duration using timestring ('30 seconds', '1d 12h', etc.) format",
                      "maxTimeoutValue": "`48 hours`",
                      "minTimeoutValue": "`1 min`",
                      "renderCondition": "",
                      "validateRequired": true,
                      "allowDynamicValues": false,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Must be a valid duration using timestring ('30 seconds', '1d 12h', etc.) format",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "validated_timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.1"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": "validated_timestring",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"validated_timestring\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "c3fc28b4-7d18-44ad-bafe-f079e81ac685",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "40b7a859-e588-45c7-9da9-3ef3786b128b",
                    "data": {
                      "meta": {
                        "conversationType": "subflow",
                        "conversationStarter": true,
                        "conversationStepType": "wait_for_trigger"
                      },
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{\n  conversationType: 'subflow',\n  conversationStepType: 'wait_for_trigger',\n  conversationStarter: true\n}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  params: {}\n}",
          "hasProcessError": false,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "trigger",
                    "label": "trigger"
                  }
                ],
                "dataOut": "incomingEvent",
                "parameters": [],
                "customFlowName": "``",
                "sessionTimeout": "2 hours",
                "useCustomFlowName": false
              },
              "rawMode": false,
              "version": "58eb0658-18c4-493f-9bb6-4c8b5dad7609",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "4e27803b-b172-4136-8ff6-e9d1398b684c",
                    "data": {
                      "id": "trigger",
                      "label": "trigger"
                    },
                    "compiled": {
                      "exits": [
                        {
                          "id": "trigger",
                          "label": "trigger"
                        }
                      ]
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.sessionTimeout = \"`\" + step.data.sessionTimeout + \"`\"",
            "version": "1.1.12"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useCustomFlowName'])) step.data['useCustomFlowName'] = false;\nif(_.isUndefined(step.data['customFlowName'])) step.data['customFlowName'] = \"``\";\nif(_.isUndefined(step.data['parameters'])) step.data['parameters'] = [];\nif(_.isUndefined(step.data['resultExits'])) step.data['resultExits'] = [];\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{\"conversationType\":\"subflow\",\"conversationStepType\":\"wait_for_trigger\",\"conversationStarter\":true}};\nif(_.isUndefined(step.data['sessionTimeout'])) step.data['sessionTimeout'] = \"`2 hours`\";\napplyExitsMigration(step, stepTemplate); \n",
            "version": "2.5.1"
          },
          {
            "sample": null,
            "script": "\nif(typeof step.data.resultExits === 'undefined') step.data.resultExits = []\n\nif (typeof step.data.sessionTimeout === 'string') {\n  const sessionTimeout = {\n    input: step.data.sessionTimeout,\n    outputMode: \"'ms'\"\n  }\n  \n  step.data.sessionTimeout = sessionTimeout\n}\n\nstep.data['dataOut']['meta'] = {\n  conversationType: 'subflow',\n  conversationStepType: 'wait_for_trigger',\n  conversationStarter: true\n}\n\nif (_.isUndefined(step.data.flowIdToTrigger)) step.data.flowIdToTrigger = ''\n",
            "version": "2.6.2"
          },
          {
            "sample": null,
            "script": "if(_.isString(step.data['dataOut'])) {\r\n  const oldMergeFieldName = step.data.dataOut;\r\n  step.data['dataOut'] = {\r\n    \"name\": oldMergeFieldName,\r\n    \"type\": \"session\",\r\n    \"ttl\": 86400000,\r\n    \"meta\": {\r\n      \"conversationType\":\"subflow\",\r\n      \"conversationStepType\":\"wait_for_trigger\",\r\n      \"conversationStarter\":true\r\n    }\r\n  };\r\n}",
            "version": "2.6.18"
          },
          {
            "script": "if(_.isString(step.data['dataOut'])) {\r\n  const oldMergeFieldName = step.data.dataOut;\r\n  step.data['dataOut'] = {\r\n    \"name\": oldMergeFieldName,\r\n    \"type\": \"session\",\r\n    \"ttl\": 86400000,\r\n    \"meta\": {\r\n      \"conversationType\":\"subflow\",\r\n      \"conversationStepType\":\"wait_for_trigger\",\r\n      \"conversationStarter\":true,\r\n      \"exits\" : ['result']\r\n    }\r\n  };\r\n}",
            "version": "2.6.19"
          },
          {
            "script": "const defaultExitUUID = uuid.v4()\r\nif(!_.isUndefined(step.data.resultExits)) {\r\n  step.data.resultExits.unshift({\r\n    name : \"result\",\r\n    vforkey: defaultExitUUID\r\n  })\r\n}\r\n\r\nif (_.isUndefined(step.data['dataOut']['meta']['exits'])) step.data['dataOut']['meta']['exits'] = []\r\n\r\nstep.data['dataOut']['meta']['exits'].unshift({\r\n  name : \"result\",\r\n  vforkey: defaultExitUUID\r\n})\r\n",
            "version": "2.6.21"
          },
          {
            "script": "",
            "version": "3.0.0"
          }
        ],
        "modules": [
          {
            "name": "timestring",
            "version": "",
            "vforkey": "27f00c11-1c60-46b8-8eef-dc67bf158e7d"
          }
        ],
        "dateModified": 1631098213927,
        "hooks": {
          "step-added-to-canvas": "/*\n// _ - lodash library\n// axios - axios library\n// env - environment variables\n// sdk - onereach sdk\n// uuid - uuid library\n// \n// step - step on tree\n// stepTemplate - step template\n// flowMeta - meta information of flow.data.meta\n*/\n\nconst flowEventId = _.get(flowMeta, 'flowEventId', '')\n\nif (_.isEmpty(flowEventId)) {\n  const eventId = uuid.v4()\n  _.set(flowMeta, 'flowEventId', eventId)\n  _.set(step, 'data.flowIdToTrigger', eventId)\n} else {\n  _.set(step, 'data.flowIdToTrigger', flowEventId)\n}\n\n\n"
        }
      },
      {
        "id": "37daafca-f609-4ef8-9f8c-f229ce92e765",
        "version": "3.2.10",
        "cacheVersion": "7d890d2b-fcde-4c83-bc96-34ade8e37425",
        "originalSource": "0ec3751d-cf6c-4df4-82fa-1add57b1b7d6",
        "label": "Return Error to Another Flow",
        "icon": "error",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-right",
        "description": "Sends selected data as an error of one flow execution to another.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Trigger"
        ],
        "recommended": [],
        "tags": [],
        "template": "const event = await this.mergeFields[conversation].get();\nconst {\n  callback,\n  params,\n  id,\n  targetAccountId\n} = event;\nconst {\n  isSync,\n  flowId,\n  eventId,\n  doNotSendResultBack\n} = params;\nconst error = executionError;\n\n// const event = this.get('eventParams');\nif (isSync) {\n  await this.eventManager.callbackResolve(callback, {\n    result: {\n      error\n    }\n  });\n\n  return this.exitStep('next');\n}\n\nif (!doNotSendResultBack) {\n  const emitResult = await this.emitAsync({\n    name: `result/${id}`,\n    params: {\n      error,\n      selectedExit: 'error'\n    },\n    target: targetAccountId\n  })\n} else {\n  this.log.warn('Parent flow do not expect for result');\n}\nreturn this.exitStep('next')",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            }
          ],
          "conversation": "",
          "executionError": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Sends selected data as an error of one flow execution to another.\n\n**How can I use this Step?**\nUse this step to send selected data of the current flow's (Subflow) execution to another flow (Main Flow). Step works together with *Wait for Trigger from Another Flow*, *Trigger Another Flow and Wait for Result*, *Trigger Another Flow and Proceed* and *Fetch Result from Another Flow* steps.\n\nTo execute this step properly, please follow these instructions:\n1. Build and activate a Subflow using the *Wait for Trigger from Another Flow* step. Use the *Return Error to Another Flow* step to indicate any errors in the Subflow. The *Return Result to Another Flow* step can be used to pass on data of successful execution.\n2. Build a separate, Main Flow, using either:\n   -- *Trigger Another Flow and Wait for Result* step;\n   -- *Trigger Another Flow and Proceed* and *Fetch Result From Another Flow* steps.\n\n   Connect both the Main Flow and the Subflow by choosing the **flow to trigger** from the dropdown or using a **custom trigger name**.\n3. Activate the Main Flow. When the connected *Trigger Another Flow and Wait for Result* or *Trigger Another Flow and Proceed* step is reached in the Main Flow, the Subflow is triggered. If the *Return Error to Another Flow* step is reached in the Subflow, it sends the data set in the **error** field and takes the Main Flow down the **error** exit of the *Trigger Another Flow and Wait for Result* or the *Fetch Result From Another Flow* step of the Main Flow.\n\n## <a name=\"content\"></a>Help content:\n\n- [Error returned to the main flow](#returned-error)\n- [Reporting](#reporting)\n- [Services dependencies](#services-dependencies)\n- [Release notes](#release-notes)\n\n## <a name=\"returned-error\"></a>Error returned to the main flow\nTo return the error of the Sublow's execution to the Main Flow, do the following steps:\n1. Choose the name of the *Wait for Trigger from Another Flow* step that was triggered by the Main Flow in the respective dropdown.\n2. Define the data sent to the Main Flow in the **error** field.\n\n[Back to content](#content)\n\n## <a name=\"reporting\"></a>Reporting\n\n**Step** event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n[Back to content](#content)\n\n##  <a name=\"services-dependencies\"></a>Services dependencies\n\n-   flow builder v2.25.3\n-   event-manager v2.0.1\n-   deployer 2.7.1\n-   library content 2.25.6\n\n[Back to content](#content)\n\n## <a name=\"release-notes\"></a>Release notes\n\n**v3.2.10**\n\n- Add option to allow subflow sharing with another account\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.2.10\n-   Trigger Another Flow and Wait for Result v3.2.10\n-   Wait for Trigger from Another Flow v3.2.10\n-   Fetch Result from Another Flow v3.2.10\n-   Return Result to Another Flow v3.2.10\n-   Return Error to Another Flow v3.2.10\n\n**v3.0.0**\n\n-   Option to select the Wait for Trigger step (including via shared merge field) that will return the error to the main flow.\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.0.0\n-   Trigger Another Flow and Wait for Result v3.0.0\n-   Wait for Trigger from Another Flow v3.0.0\n-   Fetch Result from Another Flow v3.0.0\n-   Return Result to Another Flow v3.0.0\n-   Return Error to Another Flow v3.0.0\n\n**v2.0.0**\n\n-   UI validation\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v2.0.0\n-   Trigger Another Flow and Wait for Result v2.0.0\n-   Wait for Trigger from Another Flow v2.0.0\n-   Fetch Result from Another Flow v2.0.0\n-   Return Result to Another Flow v2.0.0\n-   Return Error to Another Flow v2.0.0\n\n[Back to content](#content)",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        stepId : String,\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [
            {
              "id": "d9ce65c8-e38e-4de1-8647-fb5da6b7b7b9",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "8be1981b-a3fd-4a7a-9332-c9968b701bfc",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "1fb553cd-3072-4dc2-9989-eaacf9e9552c",
                    "major": "3",
                    "minor": "2",
                    "patch": "",
                    "vforkey": "b324e4d8-4320-4375-a318-3763f5af0134",
                    "stepLabel": "Wait for Trigger from Another Flow",
                    "allowUpdate": true
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "3f28c73a-46e3-4465-971f-0f4ebb26a38d",
              "data": {
                "open": true,
                "header": "Error returned to the main flow",
                "inputs": [
                  {
                    "id": "57bf3c81-2935-4dcc-9762-f6417d8b2213",
                    "data": {
                      "data": "{\n  \"conversation\": \"\"\n}",
                      "toJson": "return {\n  conversation : JSON.stringify(data.conversation)\n};",
                      "validators": "conversation: {\n  jsExpression : validators.required,\n\n  custom (value, schema) {\n    const flowMergeTags =  _.chain(mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const sharedMergeTags =  _.chain(mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const globalMergeTags =  _.chain(mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const options = _.chain([])\n      .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n      .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'subflow')\n      .map('name')\n      .uniq()\n      .value();\n\n    return _.includes(options, value);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :merge-fields=\"mergeFields\"\n  :conversation.sync=\"schema.conversation\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :v=\"$v\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-gizjytfxsmwnlqcuhkrdbeaopv",
                      "componentLogic": "{\n  props : {\n    mergeFields : {\n        type    : Array,\n        default () {\n            return [];\n        }\n    },\n    selectedExit: String,\n    conversation : {\n      type : Object,\n      default : ''\n    },\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            conversation: ''\n          }\n        };\n      }\n    }\n  },\n\n  data() {\n    return {\n      options : this.fillOptions(),\n      conversationRequiredMessage: 'The Wait fot Trigger step is required.'\n    }\n  },\n\n  computed: {\n    selectedStepId () {\n        return this._findStepIdByDataOut(this.conversation);\n    },\n\n    selectedConversation : {\n      get () {\n        return this.conversation;\n      },\n      set (value) {\n        this.$emit('update:conversation', value);\n      }\n    }\n  },\n\n  methods : {\n    _getDataOutName (dataOut) {\n      return _.get(dataOut, 'name', dataOut);\n    },\n\n    _findStepIdByDataOut (mergeFieldMeta) {\n      return _.chain(this.steps)\n      .find(step => this._getDataOutName(_.get(step, 'data.dataOut')) === this._getDataOutName(mergeFieldMeta))\n      .get('id')\n      .value();\n    },\n\n    highlightConversationOn(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOff(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOffOnMouseout(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId && stepId !== this.selectedStepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    zoomInOnStep () {\n      if (this.selectedStepId) {\n        this.$flow.zoomInOnStep(this.selectedStepId);\n      }\n    },\n\n    fillOptions () {\n      const flowMergeTags = _.chain(this.mergeFields).find({title : 'Flow'}).get('variables').map(tag => {\n        return {\n          name  : _.get(tag, 'name'),\n          meta  : _.get(tag, 'meta')\n        }\n      }).filter('name').value();\n\n      const sharedMergeTags =  _.chain(this.mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n        name   : _.get(tag, 'name'),\n        meta   : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const globalMergeTags =  _.chain(this.mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n        name   : _.get(tag, 'name'),\n        meta   : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const options = _.chain([])\n        .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n        .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'subflow' && _.get(tag, 'meta.conversationStepType') === 'wait_for_trigger')\n        .uniqBy('name')\n        .sortBy('name')\n        .map(tag => {\n          return {\n            value : tag.name,\n            label : tag.name\n          }\n        })\n        .value();\n        \n\n      return options;\n    }\n  },\n\n  created () {\n    if (_.isEmpty(this.conversation) && this.options && this.options.length === 1) {\n      this.selectedConversation = _.get(this.options, '0.value');\n    }\n    \n    this.$nextTick(() => {\n      this.highlightConversationOn(this.conversation);\n    });\n  },\n\n  beforeDestroy () {\n    this.highlightConversationOff(this.conversation);\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"select-conversation\">\n  <div class=\"select-conversation-wr\" v-if=\"options.length > 1\">\n    <or-select has-search\n      class=\"select-conversation\"\n      placeholder=\"Wait for Trigger step\"\n      label=\"Wait for Trigger step\"\n      search-placeholder=\"Type to search\"\n      :options=\"options\"\n      v-model=\"selectedConversation\"\n      :invalid=\"v.schema.conversation.$error\"\n      :error=\"conversationRequiredMessage\"\n      :disabled=\"readonly\">\n      <template slot-scope=\"props\" slot=\"option\">\n        <div\n          class=\"ui-select-option__basic\"\n          @mouseenter=\"highlightConversationOn(props.option.value)\"\n          @mouseout=\"highlightConversationOffOnMouseout(props.option.value)\"\n          @click=\"highlightConversationOn(props.option.value)\">\n          {{props.option.label}}\n        </div>\n      </template>\n    </or-select>\n    <or-icon-button\n      class=\"zoom-in-button\"\n      icon=\"zoom_in\"\n      type=\"secondary\"\n      color=\"primary\"\n      @click=\"zoomInOnStep\"\n      tooltip=\"Show Conversation Step\"\n      tooltip-position=\"top right\"\n      :disabled=\"!selectedStepId\">\n    </or-icon-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".select-conversation {\n  .select-conversation-header {\n    position: relative;\n    height: 36px;\n    display: flex;\n    h4 {\n      margin-top: 0.2rem;\n      flex-grow: 1;\n    }\n  }\n\n  .select-conversation-wr {\n    position: relative;\n  }\n\n  .select-conversation {\n    width: calc(100% - 40px);\n  }\n\n  .zoom-in-button {\n    position: absolute;\n    top: 36px;\n    right: 0;\n    z-index: 1;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "12099265-3e28-4f76-a494-ff82211023a9",
                    "data": {
                      "label": "Error",
                      "helpText": "",
                      "variable": "executionError",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "renderCondition": "",
                      "trimWhitespaces": false,
                      "validateRequired": true,
                      "disabledCondition": ""
                    },
                    "compiled": {},
                    "component": "formTextBox"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            }
          ],
          "outputExample": null,
          "hasProcessError": false,
          "hasProcessTimeout": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "executionError": "``"
              },
              "rawMode": false,
              "version": "772ca852-d3e8-4ad8-b333-48f5e489df20",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "d9ce65c8-e38e-4de1-8647-fb5da6b7b7b9",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.11"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "2.0.0"
          },
          {
            "sample": null,
            "script": "const waitForTrigger = _.head(steps);\r\n\r\nif (waitForTrigger) {\r\n  step.data.conversation = {\r\n    name: _.get(waitForTrigger, 'data.dataOut.name', ''),\r\n    exits: _.get(waitForTrigger, 'data.dataOut.exits', [])\r\n  }\r\n}\r\n\r\nif (typeof step.data.selectedExit === 'undefined')  step.data.selectedExit = ''",
            "version": "2.6.0"
          },
          {
            "sample": null,
            "script": "const waitForTrigger = _.head(steps);\r\n\r\nif (waitForTrigger) {\r\n  step.data.conversation = _.get(waitForTrigger, 'data.dataOut.name', '')\r\n}",
            "version": "2.6.4"
          },
          {
            "script": "",
            "version": "3.2.10"
          }
        ],
        "dateModified": 1662031403892
      },
      {
        "id": "7cbb0341-55c0-42b8-962d-a8721585e89d",
        "version": "1.7.5",
        "cacheVersion": "05b06f7f-3a7f-4405-b586-5a055e86edfd",
        "label": "Send Message (SMS/MMS)",
        "icon": "text",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-left",
        "description": "Use this step to send an SMS/MMS to the specified end user phone number.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "SMS"
        ],
        "recommended": [],
        "tags": [],
        "template": "//---------------- report Transcript Event ----------------\nconst report = ({\n  message, \n  mediaUrl, \n  transcriptId, \n  previousTranscriptId, \n  botIdentifier, \n  endUserIdentifier\n}) => {\n  const reportingObject = {\n    botIdentifier,\n    message,\n    previousTranscriptId,\n    eventId              : transcriptId,\n    channel              : _.isEmpty(mediaUrl) ? 'SMS' : 'MMS',\n    reportingSettingsKey : 'transcript',\n    media                : _.map(mediaUrl, fileUrl => ({fileUrl, fileType : 'File'})),\n    fromId               : this.config.flowId,\n    fromType             : 'Bot',\n    toType               : 'Visitor',\n    toIdentifier         : endUserIdentifier,\n    fromIdentifier       : botIdentifier\n  };\n\n  this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\n//---------------- Random and condtion logic ----------------\nconst makeCompare = (rule) => {\n  let firstValue = rule.valueType === 'other' ? rule.firstValue : rule.firstValue.trim();\n  let secondValue = rule.valueType === 'other' ? rule.secondValue : rule.secondValue.trim();\n  \n  if (rule.valueType === 'number') {\n    firstValue = isNaN(rule.firstValue) ? NaN : parseFloat(rule.firstValue);\n    secondValue = isNaN(rule.secondValue) ? NaN : parseFloat(rule.secondValue);\n  }\n\n  if (rule.valueType === 'advanced') {\n    const flowContext = this;\n    return new Function('_', `return ${rule.codeValue}`).bind(flowContext)(_)\n  } else {\n    let compareMethod = rule.compareMethod;\n    return compareMethod(firstValue, secondValue) \n  }\n}\n\nconst getRandomMessage = (messages) => {\n  const weights = _.map(messages, condition => {\n    if (isNaN(parseFloat(condition.weight)))\n      throw new Error(`Weight value ${condition.weight} is invalid.`);\n    \n    if (parseFloat(condition.weight) <= 0)\n      throw new Error(`Weight value should be a positive number.`);\n      \n    return parseFloat(condition.weight);\n   });\n   \n  const selectionIndex = weightedRandom(weights);\n  \n  return messages[selectionIndex];\n};\n\nconst getConditionsMessage = (messages) => {\n  let conditionMessage = {};\n  let isMatch = false;\n  try {\n    _.forEach(messages, message => {\n      let isRule = (message.trueValue === 'any') ? _.some(message.rules, rule => makeCompare(rule)) : _.every(message.rules, rule => makeCompare(rule))\n\n      if (isRule) {\n        conditionMessage = message;\n        isMatch = true;\n        return false;\n      }\n    })\n    \n    return isMatch ? conditionMessage : { \"message\": noConditionMessage, \"medias\": noConditionMedias };\n  } catch (error) {\n    throw error\n  }\n};\n\nconst getMessage = () => {\n  switch (activeTabId) {\n    case 'single':\n      return singleMessage;\n    case 'random':\n      return getRandomMessage(randomGroups);\n    case 'condition':\n      return getConditionsMessage(conditionGroups);\n  }\n};\n//----------------------------------------------------------\n\n//-------------------- exitStep helper ---------------------\nconst exitStep = async exit => {\n  return this.exitStep(exit, {\n    transcriptId,\n    ... _.pick(conversation, ['botNumber', 'endUserNumber', 'lastTranscriptId'])\n  });\n};\n//----------------------------------------------------------\n\n// dependencies\nconst uuid = require('uuid');\nconst Request = require('or-sdk/request');\nconst request = new Request(this);\nconst timestring = require('timestring');\nconst weightedRandom = require('weighted-random');\n\n// read/create conversation\nlet conversation;\nif (continueConversation) {\n  conversation = await this.mergeFields[conversationMeta].get();\n} else {\n  const normalizedBotNumber = _.isNumber(botNumber) ? `+${botNumber}` : botNumber; // when step updated from older version, bot number data could be type of number\n  const botNumberCountryCode = this.helpers.detectIdentifierCountry(normalizedBotNumber);\n  const normalizedUserNumber = this.helpers.normalizePhoneNumber(_.toString(endUserNumber), botNumberCountryCode);\n  conversation = {\n    botNumber        : normalizedBotNumber,\n    endUserNumber    : normalizedUserNumber,\n    lastTranscriptId : undefined\n  };\n}\n\n// main logic\nif (_.isEmpty(conversation.botNumber) && !continueConversation)\n  throw new Error('Bot number is not allowed to be empty');\n\nif (_.isEmpty(conversation.endUserNumber) && !continueConversation)\n  throw new Error('End user number is not allowed to be empty');\n\n// parse timeout\nlet timeoutTime;\ntry {\n  timeoutTime = timestring(String(timeout), 'ms');\n} catch(e) {\n  timeoutTime = timestring('24h', 'ms');\n};\n\n// generate / read transcript id\nconst transcriptId = await thisStep.getset(this, 'transcriptId', uuid.v4());\n    \nthis.triggers.once(`status/text/${transcriptId}`, event => {\n  if (event.params.status === 'delivered') {\n    return checkStatus ? exitStep('next') : this.exitFlow();\n  } else if (_.includes(['failed', 'undelivered', 'optout'], event.params.status)) {\n    throw new Error(event.params.status);\n  } else if (checkStatus) {\n    return this.exitFlow();\n  } else {\n    return exitStep('next');\n  }\n});\n\nif (checkStatus) {\n  this.triggers.timeout(timeoutTime, () => exitStep('next'));\n}\n\nreturn this.triggers.otherwise(async () => {\n  if (/^status\\/text\\/.*/.test(this.event.name) && !this.event.processed){\n    return this.exitFlow();\n  }\n  \n  const messageItem = getMessage();\n  const message = messageItem.message;\n  \n  const event = {\n    name    : 'out/text',\n    target  : this.helpers.providersAccountId,\n    params  : {\n      channel : {\n        id   : transcriptId,\n        from : conversation.botNumber,\n        to   : conversation.endUserNumber\n      },\n      message\n    }\n  };\n\n  const mediaLocations = _.chain(messageItem.medias)\n    .map('location')\n    .compact()\n    .value();\n\n  event.params.mediaUrl = _.compact(\n    await Promise.map(mediaLocations, async url => {\n      try {\n        const response = await request.head({\n          url,\n          timeout                 : 2000,\n          resolveWithFullResponse : true,\n          reporting               : {\n            disable : true\n          }\n        });\n  \n        if (response.statusCode === 200) return url;\n  \n        this.log.error(response);\n        this.log.error(`Error: Image ${url} Status Code: ${response.statusCode}`);\n      } catch (error) {\n        this.log.error(error);\n      }\n    })\n  );\n  \n  if (_.isEmpty(message) && _.isEmpty(event.params.mediaUrl))\n    throw new Error('Text or media is required');\n\n  await this.emitAsync(event);\n  \n  report({\n    ... event.params, \n    transcriptId, \n    previousTranscriptId : conversation.lastTranscriptId, \n    botIdentifier        : conversation.botNumber, \n    endUserIdentifier    : conversation.endUserNumber\n  });\n  \n  conversation.lastTranscriptId = transcriptId;\n  if (continueConversation) conversation = await this.mergeFields[conversationMeta].set(conversation);\n  \n  return this.exitFlow();\n});\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "options": [],
          "timeout": "`24h`",
          "useFiles": false,
          "botNumber": "``",
          "activeTabId": "single",
          "checkStatus": false,
          "isSingleExit": true,
          "processError": true,
          "randomGroups": [
            {
              "medias": [],
              "weight": "`1`",
              "message": "``",
              "weightLabel": "Weight"
            }
          ],
          "endUserNumber": "``",
          "singleMessage": {
            "medias": [],
            "message": "``",
            "useFiles": false
          },
          "conditionGroups": [
            {
              "label": "`New condition 1`",
              "rules": [
                {
                  "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                  "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                  "codeValue": "``",
                  "valueType": "string",
                  "firstValue": "``",
                  "secondValue": "``",
                  "isDisabledSecondValue": false
                }
              ],
              "medias": [],
              "weight": "`1`",
              "dataOut": "``",
              "message": "``",
              "useFiles": false,
              "trueValue": "any",
              "description": "``",
              "isNotCollapsed": true,
              "isEditableHeader": false
            }
          ],
          "conversationMeta": "",
          "noConditionMedias": [],
          "noConditionMessage": "``",
          "continueConversation": true,
          "hasNoConditionDataOut": false,
          "conditionRuleHasDataOut": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "transcript": {
            "tags": [],
            "type": "transcript",
            "label": "Transcript",
            "enabled": true
          }
        },
        "outputExample": {
          "botNumber": "+17205555555",
          "transcriptId": "",
          "endUserNumber": "+17205555551",
          "lastTranscriptId": ""
        },
        "help": "Use this step to send a SMS/MMS to a specified end user number from your account’s bot number or group of numbers. To send the message the step requires few parameters to be preset: both sender and recipient phone numbers and the message body.\n\n### Message\nMessage settings and limits are described in the Message field under the *Info* icon. To send a `Single` message, define the outgoing message via a text and/or media file(s).\n\nChoose the `Random` option to send a message that depends on probability. Each message is defined by a text and/or media, as well as its individual weight. The weight is used to calculate the probability of that message being chosen from the list. It is expected as a positive number with point used for decimals; its range is `> 0` and `< (2^53-1)`. When all weights are set manually with correct numbers, the probabilities for each message to send are calculated automatically and will be displayed. When step is reached in the flow, it chooses one of the messages randomly and sends it to the end user. \n\nUse the `Condition` option to select the prompt message depending on set conditions. Each message is defined by a text and/or media, as well as conditions that should be met for the step to select that message. There is no limit on the number of condition groups, but the step will choose only one during an execution. When step is reached in the flow, each group will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. If none of the rules were met, the step will send the message defined in the *If no condition is met* section. Additional information about condition builder can be found in the *Conditional Selection* step under the *Info* icon.\n\n### Advanced settings\nOption to continue conversation is on by default and allows to select a merge field name of a step, where the conversation you want to follow has been started. If the option is off, bot and end user phone numbers should be defined, and such a step becomes a conversation starter and will be listed in Conversation option for other steps.\n\n*Bot phone number* field lists all identifiers and groups of identifiers available in your OneReach.ai account. Select the value from the list or choose the one stored in the *merge field* value (click `{x}` icon).\n\nThe recipient's phone number should be defined in *End user phone number* field, it can be set manually, declared with a merge field value or written as a code in *code mode*. To make sure the message is sent to the end user, both numbers should be entered in international format, like `+44 871 222 1156`. For US or Canada local numbers the country code may be skipped. In case the value contains special characters or is empty, the message will be sorted out by OneReach.ai provider as invalid and will not be put in the queue to be sent.\n\nIn case your flow logic requires the message to be delivered before proceeding next in the flow, turn on the toggle *Wait for delivery confirmation* and define the timeout to wait. The waiting period is 24 hours by default but you can change it in *Waiting timeout* field to any value between 10 seconds and 48 hours. If no confirmation is received after timeout expires, the flow will proceed down the next leg.\nExamples of acceptable time formats: `28h 25m 12s` or `5m 12s`.\nIn case the value is not defined and the field is empty, default 24h timeout will be applied.\n\nThe step returns *transcriptId* as a unique identifier of the message. The value will be stored under the variable provided in *Merge field name* and can be used later in the flow.\n\n###Error handling\nTo handle flow execution in case of an error in the step, Process error option is set on by default. It enables additional `error` leg which will be exited in case the step execution fails, like faulty status is returned regardless of `Wait for delivery`, required field is empty (no message set) or invalid (e.g. invalid format of phone number). Details of the error will be shown in flow logs.\n\n### Reporting Events\nStep and Transcript events are reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n## Changelog\n```\n### 1.3.1\n- refactor step logic to use async/await\n- refactor reporting\n### 1.5.3\n- remove unnecessary dataOut meta updates\n### 1.6.0\n- remove undelivered leg\n- add standard `Process error` leg/form component\n- exit via `error` leg in case faulty status is returned regardless of `Wait for delivery`\n### 1.7.1\n- add single/random/condition message tabs\n\n```\n",
        "formBuilder": {
          "formCode": "return {\n    props : ['schema']\n};",
          "stepExits": [
            {
              "id": "d064065f-8c57-4d70-ac03-5e3083e1acd3",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "compiled": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ]
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "53c145fa-031c-49f9-830f-636ffd390273",
              "data": {
                "header": "Message",
                "headingType": "h4",
                "isHtmlLabel": false
              },
              "label": "Header",
              "compiled": {},
              "component": "formHeader"
            },
            {
              "id": "f68b8285-e596-4c75-b7b5-08eac2e7d62f",
              "data": {
                "tabs": [
                  {
                    "id": "single",
                    "title": "Single",
                    "inputs": [
                      {
                        "id": "4799a645-1c95-49ef-bb88-90c99e5895b4",
                        "data": {
                          "data": "{\n  \"singleMessage\": {\n    \"message\"  : \"``\",\n    \"medias\"   : [],\n    \"useFiles\" : false\n  }\n}",
                          "toJson": "function isExpression(path, data) {\n  return (/:(message)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n\n  if (_.isArray(data)) \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n\n  if (_.isObject(data))\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n\n  if (isExpression(path, data)) \n    return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                          "validators": "singleMessage : {\n  custom : (value, ctx) => {\n    return value.message.slice(1, -1) || (value.medias.length && _.filter(value.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length)\n  }\n}",
                          "applyToJson": true,
                          "formTemplate": "<wildcard \n  v-model=\"schema.singleMessage\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :readonly=\"readonly\"\n></wildcard>",
                          "componentName": "or-wildcard-pnglcsjrtziyvkbmhxouaqfdew",
                          "componentLogic": "{\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      localMessage: this.value,\r\n      messageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\r\n    }\r\n  },\r\n  \r\n  props : {\r\n    value : {\r\n      type : Object,\r\n      default () {\r\n        return {\r\n          medias: [],\r\n          message: '``',\r\n          useFiles: false\r\n        };\r\n      }\r\n    },\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    isNew: Boolean,\r\n    steps: Array,\r\n    stepId: String,\r\n    v : {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n  \r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    medias : {\r\n      get () {\r\n        return this.value.medias\r\n      },\r\n      set (value) {\r\n        const model = this.value.useFiles\r\n          ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n          : [\r\n              'acl',\r\n              'data',\r\n              'ext',\r\n              'id',\r\n              'location',\r\n              'name',\r\n              'note',\r\n              'type',\r\n              'linkUrl',\r\n            ];\r\n        const res = _.map(value, item => _.pick(item, model));\r\n        this.localMessage.medias = res;\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.value.useFiles;\r\n      },\r\n      set (value) {\r\n        this.localMessage.useFiles = value;\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted () {\r\n    // console.log('this', this)\r\n  },\r\n  \r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.localMessage.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.localMessage.medias[0], 'linkUrl')) {\r\n        this.localMessage.medias.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    localMessage: {\r\n      handler(newValue) {\r\n        this.$emit('input', this.localMessage);\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}",
                          "componentTemplate": "<div class=\"message-wrapper\">\n  <or-text-message  \n    v-model=\"localMessage.message\"\n    class=\"message-item\"\n    :readonly=\"readonly\"  \n    label=\"Message\" \n    placeholder=\"Enter text to be sent here\" \n    :max-char-length=\"160\" \n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\"  \n    :merge-fields=\"mergeFields\"\n    :stepId=\"stepId\"\n    :steps=\"steps\"\n    :invalid=\"v.$error\"\n    @input=\"v.$touch()\"\n    :component-info-text=\"messageInfoText\"\n  ></or-text-message>\n  <div class=\"select-media\">\n    <or-modal ref=\"select-media\" \n      title=\"Select media\" \n      size=\"large\"\n    >\n      <or-asset-manager :assets-url=\"assetsUrl\" \n        :auth-token=\"authToken\"\n        :multi-select=\"true\"\n        :max-files=\"maxFiles\"\n        :allowed-file-types=\"allowedFileTypes\"\n        :use-files.sync=\"useFilesComputed\"\n        :files-api-url=\"$flow.filesApiUrl\"\n        v-model=\"medias\"\n      ></or-asset-manager>\n    </or-modal>\n    \n    <or-list ref=\"mediaList\" \n      v-model=\"localMessage.medias\" \n      class=\"selected-media-list\"\n      :steps=\"steps\" \n      :step-id=\"stepId\" \n      :new-item-method=\"addNewUrl\"\n    >\n      <template slot-scope=\"item\">\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n          {{ item.item.name }}\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n          <or-text-expression\n            label=\"URL\" \n            placeholder=\"Enter image URL to be sent here\"\n            v-model=\"item.item.linkUrl\"\n            :merge-fields=\"mergeFields\"\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.$error\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\" \n          ></or-text-expression>\n            <!--:error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"-->\n            <!--:invalid=\"v.schema.responsesQuantity.$error\"-->\n            <!--@input=\"v.schema.responsesQuantity.$touch()\"-->\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n      </template>\n      <div slot=\"footer\">\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Add media</or-button>\n      </div>\n    </or-list>\n    <div v-if=\"!localMessage.medias.length\"\n      class=\"select-media__inline-message\"\n    >\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Files</or-button>\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>URL</or-button>\n    </div>\n    <p class=\"invalid\" v-show=\"v.$error\">Text or media content is required</p>\n  </div>\n</div>",
                          "wildcardTemplates": [],
                          "componentCompiledStyles": "",
                          "componentOriginalStyles": ".messages-list {\n  .add-button {\n    display: none;\n  }\n}\n\n.select-media {\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}"
                        },
                        "meta": {
                          "name": "formWildcard",
                          "type": "onereach-studio-form-input",
                          "version": "1.0"
                        },
                        "label": "Wildcard",
                        "component": "formWildcard",
                        "pluginRefs": [
                          "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                          "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                        ]
                      }
                    ],
                    "vforkey": "dad07acc-2b68-4bea-b3c5-6970a3439afd"
                  },
                  {
                    "id": "random",
                    "title": "Random",
                    "inputs": [
                      {
                        "id": "027c4015-5d97-4e0c-b4c4-856aee543c57",
                        "data": {
                          "data": "{\n  \"randomGroups\": [{\n    \"medias\": [],\n    \"message\": \"``\",\n    \"weight\": \"`1`\",\n    \"weightLabel\": \"Weight\"\n  }],\n  \"useFiles\": false\n}",
                          "toJson": "function isExpression(path, data) {\n  return (/:(message|weight$)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n  \n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                          "validators": "randomGroups : {\n  $each : {\n    message : {\n      custom : (value, ctx) => {\n        return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n      }\n    },\n    medias : {\n      custom : (value, ctx) => {\n        return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n      }\n    },\n    weight : {\n      custom : (value, ctx, some) => { \n        const isMergeField = value => {\n          return /this.*/.test(value) || /await this.*/.test(value);\n        }\n        \n        const isCodeMode = value => {\n          return !/^\\`.*\\`$/.test(value);\n        }\n        \n        if (isMergeField(value) && validators.jsExpression(value))\n          return true\n          \n        if (!isCodeMode(value))\n          return parseFloat(value.slice(1, -1)) > 0 && validators.jsExpressionNonEmptyString(value);\n          \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n    }\n  }\n}",
                          "applyToJson": true,
                          "formTemplate": "<wildcard \n  :v=\"$v\"\n  :random-groups.sync=\"schema.randomGroups\"\n  :active-tab-id=\"schema.activeTabId\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :use-files.sync=\"schema.useFiles\"\n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :schema=\"schema\"\n  :readonly=\"readonly\">\n</wildcard>",
                          "componentName": "or-wildcard-avcjbkzdruoqgihtfypnsxewlm",
                          "componentLogic": "{\n  data() {\n    return {\n    }\n  },\n  \n  props: {\n    randomGroups: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    useFiles: Boolean,\n    activeTabId: String,\n    isNew: Boolean,\n    schema: Object,\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  \n  computed: {\n    randomGroupsLocal : {\n      get () {\n        return this.randomGroups;\n      },\n      set (newValue) {\n        this.$emit('update:randomGroups', newValue);\n        this.$nextTick(() => {\n          if (this.$refs['message-weight-0'])\n            this.updateProbabilityInPercent(newValue);\n        })\n      }\n    },\n    useFilesComputed : {\t\t\n      get () {\t\t\n        return this.useFiles; \t\t\n      },\t\t\n      set (value) {\t\t\n        this.$emit('update:useFiles', value);\t\t\n      }\n    }\n  },\n  \n  watch: {\n    activeTabId (newValue) {\n      if (newValue === 'random' && this.randomGroupsLocal.length < 2)\n        this.$refs.randomList.addItem();\n    }\n  },\n  \n  mounted () {\n    if (this.activeTabId === 'random' && this.$refs.randomList && this.randomGroupsLocal.length < 2) {\n      this.$refs.randomList.addItem();\n      \n      if (!this.isNew && this.v) {\n        this.$nextTick(() => {\n          this.v.schema.$touch();\n        })\n      }\n    }\n  },\n  \n  methods: {\n    newMessage () {\n      return {\n        message          : '``',\n        medias           : [],\n        weight           : \"`1`\",\n        weightLabel      : \"Weight\"\n      };\n    },\n    updateProbabilityInPercent(messages) {\n      let isInvalidWeight = false;\n      let weightArr = [];\n      let weightSum = messages.reduce((sum, message, index) => {\n        let weight;\n        if (this.$refs['message-weight-' + index].mode == 'code') {\n          weight = parseFloat(message.weight);\n        } else {\n          weight = parseFloat(message.weight.slice(1, -1));\n        }\n        \n        if (isNaN(weight) || weight <= 0 || this.isMergeFieldWeight(index)) {\n          isInvalidWeight = true;\n          return false\n        }\n        \n        weightArr.push(weight);\n        return sum + weight\n      }, 0);\n      \n      _.forEach(messages, (message, index) => {\n        if (isNaN(weightSum) || isInvalidWeight) {\n          message.weightLabel = \"Weight\";\n        } else {\n          let calculatedResult = (weightArr[index] / weightSum * 100).toFixed(0);\n          \n          if (calculatedResult == 0) {\n            calculatedResult = 1;\n          } else if (calculatedResult == 100) {\n            calculatedResult = 99;\n          }\n          \n          message.weightLabel = `Weight (${(weightArr[index] / weightSum * 100).toFixed(0)}%)`\n        }\n      })\n    },\n    errorText (weight) {\n      let text = '';\n      \n      if (!weight || weight === '``') {\n        text = 'Weight is required';\n      } else if (!validators.jsExpression(weight)) {\n        text = 'Please enter a valid JavaScript expression.';\n      } else {\n        text = 'Only positive number can be used as a value';\n      }\n      \n      return text;\n    },\n    isMergeFieldWeight (index) {\n      const isMergeField = (value) => {\n        return /this.*/.test(value) || /await this.*/.test(value);\n      }\n      \n      return isMergeField(this.randomGroups[index].weight);\n    }\n  },\n\n  components: {\n    messageItem: {\n      template: `<%= messageItem %>`,\n      props : {\n        value : {\n          type : Object,\n          default () {\n            return {\n              medias: [],\n              message: '``'\n            };\n          }\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        useFiles : Boolean,\n        isNew : Boolean,\n        readonly : {\n          type : Boolean,\n          default : false\n        },\n        steps: Array,\n        stepId: String,\n        v : {\n          type: Object,\n          default () {\n            return {};\n          }\n        }\n      },\n      \n      data () {\n        return {\n          iconPosition: 'left',\n          allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\n          maxFiles: 10,\n          localMessage: this.value,\n          messageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\n    \n        }\n      },\n      \n      computed : {\n        assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\n        authToken () { return this.$settings.token },\n        medias : {\n          get () {\n            return this.value.medias\n          },\n          set (value) {\n            const model = this.useFiles\n              ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\n              : [\n                  'acl',\n                  'data',\n                  'ext',\n                  'id',\n                  'location',\n                  'name',\n                  'note',\n                  'type',\n                  'linkUrl',\n                ];\n            const res = _.map(value, item => _.pick(item, model));\n            this.localMessage.medias = res;\n          }\n        },\n        useFilesComputed : {\n          get () {\n            return this.useFiles;\n          },\n          set (value) {\n            this.$emit('update:useFiles', value);\n          }\n        }\n      },\n      \n      methods: {\n        openModal (ref) {\n          this.$refs[ref].open();\n        },\n        removeSelectedItem (key) {\n          this.localMessage.medias.splice(key, 1);\n        },\n        addMedia () {\n          if (_.has(this.localMessage.medias[0], 'linkUrl')) {\n            this.localMessage.medias.push(this.addNewUrl());\n          } else {\n            this.openModal('select-media');\n          }\n        },\n        addNewUrl () {\n          return {\n            linkUrl: \"``\"\n          }\n        }\n      },\n      \n      watch: {\n        localMessage: {\n          handler(newValue) {\n            this.$emit('input', newValue);\n          },\n          deep: true\n        }\n      }\n    },\n  }\n}",
                          "componentTemplate": "<div>\r\n  <or-list \r\n    v-model=\"randomGroupsLocal\"\r\n    ref=\"randomList\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n    :readonly=\"readonly\"\r\n    :new-item-method=\"newMessage\"\r\n    :add-button-label=\"'Add new message'\"\r\n    class=\"messages-list messages-list--random\"\r\n    :can-remove-last-item=\"false\"\r\n  >\r\n    <template slot-scope=\"item\">\r\n      <or-text-expression\r\n        v-model=\"item.item.weight\"\r\n        :ref=\"'message-weight-' + item.index\"\r\n        :label=\"item.item.weightLabel\"\r\n        helpText=\"This value is expected as a positive number\"\r\n        class=\"message-weight__input\"\r\n        placeholder=\"Enter value\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        :readonly=\"readonly\"\r\n        :invalid=\"v.schema.randomGroups.$each[item.index].weight.$error\"\r\n        @input=\"v.schema.randomGroups.$each[item.index].weight.$touch()\"\r\n        :error=\"errorText(item.item.weight)\"\r\n      ></or-text-expression>\r\n      <or-alert v-if=\"isMergeFieldWeight(item.index) || ($refs['message-weight-' + item.index] && $refs['message-weight-' + item.index].mode === 'code')\"\r\n        type=\"info\" \r\n        :dismissible=false \r\n        style=\"font-size:small;\">\r\n        <span v-if=\"isMergeFieldWeight(item.index)\">Using merge field input will hide a calculation of the message probability weight.</span>\r\n        <span v-else>Using code mode may hide a calculation of the message probability weight</span>\r\n      </or-alert>\r\n      \r\n      <message-item v-model=\"item.item\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"item.steps\" \r\n        :step-id=\"item.stepId\"\r\n        :readonly=\"item.readonly\"\r\n        :is-new=\"isNew\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :v=\"v.schema.randomGroups.$each[item.index]\"\r\n      ></message-item>\r\n    </template>\r\n  </or-list>\r\n</div>",
                          "wildcardTemplates": [
                            {
                              "id": "7cf5536a-94f5-4cea-8929-43a3bab33efb",
                              "mode": "",
                              "title": "Message item",
                              "template": "<div class=\"message-wrapper\">\r\n  <or-text-message v-model=\"localMessage.message\" class=\"message-item\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent here\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.message.$error\"\r\n    @input=\"v.message.$touch()\"\r\n    :component-info-text=\"messageInfoText\"\r\n    :merge-fields=\"mergeFields\"\r\n  ></or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\"\r\n    >\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :files-api-url=\"$flow.filesApiUrl\"\r\n        v-model=\"medias\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"localMessage.medias\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\" class=\"selected-media-list__item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.message.$error\"\r\n            :mergeFields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!localMessage.medias.length\"\r\n      class=\"select-media__inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>\r\n",
                              "variable": "messageItem"
                            }
                          ],
                          "componentCompiledStyles": "",
                          "componentOriginalStyles": ".select-media {\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}\n\n// Message list for tab random\n.messages-list.or-list {\n  &.single-item {\n    .list-item {\n      padding: 0;\n    }\n  }\n  \n  & > .or-list-items div {\n    .remove-button {\n      display: none;\n    }\n  }\n  \n  & > .or-list-items > div:first-child:nth-last-child(n + 3) ~ div {\n    &>.remove-button {\n      display: block;\n    }\n  }\n}\n\n.messages-list--random {\n  // margin-bottom: 20px;\n  \n  &--single-exit > .or-list-items > .list-item:not(:first-child) {\n    padding-top: 0;\n  }\n  \n  .or-list-items {\n    width: 100%;\n  }\n  \n  &.or-list {\n    \n    & > .or-list-items > .list-item {\n      position: relative;\n      flex-direction: column;\n      align-items: flex-start;\n      padding: 0 40px;\n      \n      .message-weight__input {\n        width: 100%;\n      }\n\n      > .remove-button {\n      \tposition: absolute;\n      \ttop: 145px;\n        right: 0;\n      }\n      \n      > .handle {\n        display: none;\n      }\n      \n      > .drag_handle {\n        position: absolute;\n      \ttop: 150px;\n        left: 0;\n      }\n    }\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}"
                        },
                        "meta": {
                          "name": "formWildcard",
                          "type": "onereach-studio-form-input",
                          "version": "1.0"
                        },
                        "label": "Wildcard",
                        "component": "formWildcard",
                        "pluginRefs": [
                          "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                          "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                        ]
                      }
                    ],
                    "vforkey": "ac8d16ab-b002-46e5-bb4a-cf45d328e69c"
                  },
                  {
                    "id": "condition",
                    "title": "Condition",
                    "inputs": [
                      {
                        "id": "7c1017c1-799f-4e14-a388-452e5a90a61d",
                        "data": {
                          "inputs": [
                            {
                              "id": "d508868c-b96c-4eda-bc69-a7fd502eccc8",
                              "data": {
                                "data": "{\n  \"medias\": [],\n  \"message\": \"``\",\n  \"weight\": \"`1`\",\n  \"useFiles\": false\n}",
                                "toJson": "function isExpression(path, data) {\n  return (/:(message|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                                "validators": "message : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nmedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n  }\n}",
                                "applyToJson": true,
                                "formTemplate": "<wildcard\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :use-files.sync=\"schema.useFiles\"\n  :v=\"$v\" :steps=\"steps\" \n  :step-id=\"stepId\"\n  :conditionItem=\"schema\"\n  :message.sync=\"schema.message\"\n  :medias.sync=\"schema.medias\"\n  :readonly=\"readonly\"\n></wildcard>",
                                "componentName": "or-wildcard-sygbkoxqrcmeltwfjhnudiavzp",
                                "componentLogic": "{\r\n  props : {\r\n    message : String,\r\n    medias : Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    useFiles: Boolean,\r\n    conditionItem : Object,\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      messageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\r\n    \r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    messageLocal : {\r\n      get () { return this.message },\r\n      set (value) {\r\n        this.$emit('update:message', value);\r\n      }\r\n    },\r\n    mediasLocal : {\r\n      get () { return this.medias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:medias', value);\r\n        } else {\r\n          const model = this.useFiles\r\n            ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n            : [\r\n                'acl',\r\n                'data',\r\n                'ext',\r\n                'id',\r\n                'location',\r\n                'name',\r\n                'note',\r\n                'type',\r\n                'linkUrl',\r\n              ];\r\n          const res = _.map(value, item => _.pick(item, model));\r\n          this.$emit('update:medias', res);\r\n        }\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.useFiles;\r\n      },\r\n      set (value) {\r\n        this.$emit('update:useFiles', value);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.medias[0], 'linkUrl')) {\r\n        this.mediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n  }\r\n}",
                                "componentTemplate": "<div class=\"message-block\">\r\n  <or-text-message  \r\n    v-model=\"messageLocal\"\r\n    :merge-fields=\"mergeFields\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n&lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n&lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.schema.message.$error\"\r\n    @input=\"v.schema.message.$touch()\"\r\n    :component-info-text=\"messageInfoText\"\r\n  >\r\n  </or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\">\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :files-api-url=\"$flow.filesApiUrl\"\r\n        v-model=\"mediasLocal\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"mediasLocal\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.message.$error\"\r\n            :merge-fields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!medias.length\"\r\n      class=\"select-media__inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"mediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.schema.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>",
                                "wildcardTemplates": [],
                                "componentCompiledStyles": "",
                                "componentOriginalStyles": ".message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  position: relative;\n  padding-bottom: 10px;\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n    \n    .or-text-expression .or-editable-wrapper {\n      background-color: #ffffff;\n    }\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -7px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                              },
                              "meta": {
                                "name": "formWildcard",
                                "type": "onereach-studio-form-input",
                                "version": "1.0"
                              },
                              "label": "Wildcard",
                              "component": "formWildcard",
                              "pluginRefs": [
                                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                                "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                              ]
                            }
                          ],
                          "isSingleExit": true,
                          "addButtonText": "Add condition",
                          "isSingleGroup": false,
                          "conditionExits": [],
                          "conditionTitle": "New condition",
                          "conditionGroups": [
                            {
                              "label": "`New condition 1`",
                              "rules": [
                                {
                                  "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                                  "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                                  "codeValue": "``",
                                  "valueType": "string",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "medias": [],
                              "weight": "`1`",
                              "dataOut": "``",
                              "message": "``",
                              "useFiles": false,
                              "trueValue": "any",
                              "description": "``",
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            }
                          ],
                          "renderCondition": "",
                          "usePredefinedValue": false,
                          "isNegativeLeftMargin": false,
                          "hasNoConditionDataOut": false,
                          "conditionRuleHasDataOut": false,
                          "noConditionDataOutValue": "``"
                        },
                        "meta": {
                          "name": "condition-builder-component",
                          "type": "onereach-studio-form-input",
                          "version": "0.9.0"
                        },
                        "label": "Conditon builder v0.9.0",
                        "component": [
                          "condition-builder-component",
                          "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                        ],
                        "pluginRefs": [
                          "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                          "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                        ]
                      },
                      {
                        "id": "3749944d-3efd-43b7-b461-2e91f3a35b89",
                        "data": {
                          "data": "{\n  \"noConditionMessage\": \"``\",\n  \"noConditionMedias\": [],\n  \"useFiles\": false\n}",
                          "toJson": "function isExpression(path, data) {\n  return (/:(noConditionMessage|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:noConditionMedias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                          "validators": "noConditionMessage : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.noConditionMedias.length && _.filter(ctx.noConditionMedias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nnoConditionMedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.noConditionMessage.slice(1,-1);\n  }\n}",
                          "applyToJson": true,
                          "formTemplate": "<wildcard \n  :v=\"$v\" :steps=\"steps\" \n  :is-new=\"isNew\"\n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  :conditionItem=\"schema\"\n  :use-files.sync=\"schema.useFiles\"\n  :no-condition-message.sync=\"schema.noConditionMessage\"\n  :no-condition-medias.sync=\"schema.noConditionMedias\"\n  :readonly=\"readonly\"\n></wildcard>",
                          "componentName": "or-wildcard-urjfchklznqxpvbwostgdeimay",
                          "componentLogic": "{\r\n  props : {\r\n    noConditionMessage: String,\r\n    noConditionMedias: Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    useFiles: Boolean,\r\n    conditionItem: Object,\r\n    readonly: {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      noConditionMessageInfoText: 'An SMS text message is limited by up to 1600 characters in standard GSM encoding (up to 670 in Unicode). A message longer than 160 characters is parsed into several messages but is received uniformly by the end user. The field can be defined manually and using merge fields (click on the `{x}` icon). Note that using merge field values makes the length of a message a variable, so make sure that it is below the limit.\\n\\nThe cumulative size of the media files is limited by 5 Mb. Supported formats include jpeg, gif and png, other formats (i.e. bnp, mpeg, mp4, waw) are also acceptable but the content may not be modified for device compatibility from telecom provider side.\\n\\nTo add files from your OneReach storage, click on the respective option, then choose the necessary media in the modal window of `Files & Data` or `Files`. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To use a link, click *URL* and specify it manually or using merge fields.\\n\\nMultiple files or links can be chosen via *add media* button or removed by a click on `X` next to it in the step details panel. A text message will be sent first, and then the selected files, in order from top to bottom.'\r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    noConditionMessageLocal : {\r\n      get () { return this.noConditionMessage },\r\n      set (value) {\r\n        this.$emit('update:noConditionMessage', value);\r\n      }\r\n    },\r\n    noConditionMediasLocal : {\r\n      get () { return this.noConditionMedias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:noConditionMedias', value);\r\n        } else {\r\n          const model = this.useFiles\r\n            ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n            : [\r\n                'acl',\r\n                'data',\r\n                'ext',\r\n                'id',\r\n                'location',\r\n                'name',\r\n                'note',\r\n                'type',\r\n                'linkUrl',\r\n              ];\r\n          const res = _.map(value, item => _.pick(item, model));\r\n          this.$emit('update:noConditionMedias', res);\r\n        }\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.useFiles;\r\n      },\r\n      set (value) {\r\n        this.$emit('update:useFiles', value);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.noConditionMedias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.noConditionMedias[0], 'linkUrl')) {\r\n        this.noConditionMediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n    // console.log('this in wc', this)\r\n  }\r\n}",
                          "componentTemplate": "<div\n  :class=\"['no-condition-data-out', { 'no-condition-data-out__indent': conditionItem.conditionGroups && conditionItem.conditionGroups.length > 1 }, { 'is-invalid': v.schema.noConditionMessage.$error || v.schema.noConditionMedias.$error }, { 'readonly': readonly }]\"\n>\n  <div class=\"no-condition-data-out__header\">If no condition is met</div>\n  <div class=\"no-condition-data-out__body\">\n    <div class=\"message-block\">\n      <or-text-message  \n        v-model=\"noConditionMessageLocal\"\n        :merge-fields=\"mergeFields\"\n        :readonly=\"readonly\"  \n        label=\"Message\" \n        placeholder=\"Enter text to be sent\" \n        :max-char-length=\"160\" \n        merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n    &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n        in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n    &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n        not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \n        :stepId=\"stepId\"\n        :steps=\"steps\"\n        :invalid=\"v.schema.noConditionMessage.$error\"\n        @input=\"v.schema.noConditionMessage.$touch()\"\n        :component-info-text=\"noConditionMessageInfoText\"\n      >\n      </or-text-message>\n      <div class=\"select-media\">\n        <or-modal ref=\"select-media\" \n          title=\"Select media\" \n          size=\"large\">\n          <or-asset-manager :assets-url=\"assetsUrl\" \n            :auth-token=\"authToken\"\n            :multi-select=\"true\"\n            :max-files=\"maxFiles\"\n            :allowed-file-types=\"allowedFileTypes\"\n            :use-files.sync=\"useFilesComputed\"\n            :files-api-url=\"$flow.filesApiUrl\"\n            v-model=\"noConditionMediasLocal\"\n          ></or-asset-manager>\n        </or-modal>\n        \n        <or-list ref=\"mediaList\" \n          v-model=\"noConditionMediasLocal\" \n          class=\"selected-media-list\"\n          :steps=\"steps\" \n          :step-id=\"stepId\" \n          :new-item-method=\"addNewUrl\"\n        >\n          <template slot-scope=\"item\">\n            <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n              {{ item.item.name }}\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n            <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n              <or-text-expression\n                label=\"URL\" \n                v-model=\"item.item.linkUrl\"\n                placeholder=\"Enter image URL to be sent here\"\n                :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.noConditionMessage.$error\"\n                :mergeFields=\"mergeFields\"\n                :steps=\"steps\"\n                :step-id=\"stepId\"\n                :readonly=\"readonly\" \n              ></or-text-expression>\n                <!--:error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"-->\n                <!--:invalid=\"v.schema.responsesQuantity.$error\"-->\n                <!--@input=\"v.schema.responsesQuantity.$touch()\"-->\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n          </template>\n          <div slot=\"footer\">\n            <or-button v-if=\"noConditionMedias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Add media</or-button>\n          </div>\n        </or-list> \n        \n        <div v-if=\"!noConditionMedias.length\"\n          class=\"select-media__inline-message\"\n        >\n          Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Files</or-button>\n          or use <or-button @click=\"noConditionMediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>URL</or-button>\n        </div>\n        \n        <p class=\"invalid\" v-show=\"v.schema.noConditionMessage.$error\">Text or media content is required</p>\n      </div>\n    </div>\n  </div>\n</div>",
                          "wildcardTemplates": [],
                          "componentCompiledStyles": "",
                          "componentOriginalStyles": ".no-condition-data-out {\n  width: 100%;\n  min-width: 350px;\n  flex-grow: 1;\n  padding: 6px 10px 0;\n  border-left: 3px solid #7ED321;\n  border-bottom: 1px solid #DFDFDF;\n  background: #F6F6F6;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n\n  &.is-invalid {\n    border-left-color: #f95d5d;\n  }\n  \n  &__indent {\n    margin-left: 24px;\n    max-width: calc(100% - 24px);\n    min-width: 326px;\n  }\n\n  &__header {\n    padding-left: 3px;\n    padding-bottom: 5px;\n    font-size: 15px;\n    font-weight: 600;\n  }\n\n  &__body {\n    padding: 0 10px 10px;\n    // background: #ffffff;\n    border-radius: 3px;\n  }\n\n  &.readonly {\n    .data-block__header {\n      color: rgba(0,0,0,.38);\n    }\n  }\n}\n\n.message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  position: relative;\n  padding-bottom: 10px;\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n  \n  .or-text-expression .or-editable-wrapper {\n    background-color: #fff;\n  }\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -7px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                        },
                        "meta": {
                          "name": "formWildcard",
                          "type": "onereach-studio-form-input",
                          "version": "1.0"
                        },
                        "label": "Wildcard",
                        "component": "formWildcard",
                        "pluginRefs": [
                          "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                          "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                        ]
                      }
                    ],
                    "vforkey": "a843b492-f234-48a7-ac90-f9242a8ac6e6"
                  }
                ],
                "class": "flex-box",
                "inputs": [
                  {
                    "id": "4799a645-1c95-49ef-bb88-90c99e5895b4",
                    "data": {
                      "data": "{\n  \"singleMessage\": {\n    \"message\" : \"``\",\n    \"medias\"  : []\n  }\n}",
                      "toJson": "function isExpression(path, data) {\n  return (/:(message)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n\n  if (_.isArray(data)) \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n\n  if (_.isObject(data))\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n\n  if (isExpression(path, data)) \n    return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "singleMessage : {\n  custom : (value, ctx) => {\n    return value.message.slice(1, -1) || (value.medias.length && _.filter(value.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length)\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.singleMessage\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :readonly=\"readonly\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-pnglcsjrtziyvkbmhxouaqfdew",
                      "componentLogic": "{\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      localMessage: this.value\r\n    }\r\n  },\r\n  \r\n  props : {\r\n    value : {\r\n      type : Object,\r\n      default () {\r\n        return {\r\n          medias: [],\r\n          message: '``'\r\n        };\r\n      }\r\n    },\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    isNew: Boolean,\r\n    steps: Array,\r\n    stepId: String,\r\n    v : {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n  \r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    medias : {\r\n      get () {\r\n        return this.value.medias\r\n      },\r\n      set (value) {\r\n        const model = {\r\n          data:null,\r\n          ext:null,\r\n          id:null,\r\n          location:null,\r\n          name:null,\r\n          note:null,\r\n          type:null,\r\n          linkUrl: null\r\n        };\r\n        const res = _.map(value, item => _.pick(item, _.keys(model)));\r\n        this.$emit('input', res);\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted () {\r\n    // console.log('this', this)\r\n  },\r\n  \r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.localMessage.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.localMessage.medias[0], 'linkUrl')) {\r\n        this.localMessage.medias.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    localMessage: {\r\n      handler(newValue) {\r\n        this.$emit('input', this.localMessage);\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}",
                      "componentTemplate": "<div class=\"message-wrapper\">\n  <or-text-message  \n    v-model=\"localMessage.message\"\n    class=\"message-item\"\n    :readonly=\"readonly\"  \n    label=\"Message\" \n    placeholder=\"Enter text to be sent here\" \n    :max-char-length=\"160\" \n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\"  \n    :merge-fields=\"mergeFields\"\n    :stepId=\"stepId\"\n    :steps=\"steps\"\n    :invalid=\"v.$error\"\n    @input=\"v.$touch()\"\n  ></or-text-message>\n  <div class=\"select-media\">\n    <or-modal ref=\"select-media\" \n      title=\"Select media\" \n      size=\"large\"\n    >\n      <or-asset-manager :assets-url=\"assetsUrl\" \n        :auth-token=\"authToken\"\n        :multi-select=\"true\"\n        :max-files=\"maxFiles\"\n        :allowed-file-types=\"allowedFileTypes\"\n        v-model=\"localMessage.medias\"\n      ></or-asset-manager>\n    </or-modal>\n    \n    <or-list ref=\"mediaList\" \n      v-model=\"localMessage.medias\" \n      class=\"selected-media-list\"\n      :steps=\"steps\" \n      :step-id=\"stepId\" \n      :new-item-method=\"addNewUrl\"\n    >\n      <template slot-scope=\"item\">\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n          {{ item.item.name }}\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n          <or-text-expression\n            label=\"URL\" \n            placeholder=\"Enter image URL to be sent here\"\n            v-model=\"item.item.linkUrl\"\n            :merge-fields=\"mergeFields\"\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.$error\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\" \n          ></or-text-expression>\n            <!--:error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"-->\n            <!--:invalid=\"v.schema.responsesQuantity.$error\"-->\n            <!--@input=\"v.schema.responsesQuantity.$touch()\"-->\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n        </div>\n      </template>\n      <div slot=\"footer\">\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Add media</or-button>\n      </div>\n    </or-list>\n    <div v-if=\"!localMessage.medias.length\"\n      class=\"select-media inline-message\"\n    >\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>Files</or-button>\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.$error }]\" disableRipple>URL</or-button>\n    </div>\n    <p class=\"invalid\" v-show=\"v.$error\">Text or media content is required</p>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".messages-list {\n  .add-button {\n    display: none;\n  }\n}\n\n.select-media {\n  \n  &.inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "027c4015-5d97-4e0c-b4c4-856aee543c57",
                    "data": {
                      "data": "{\n  \"randomGroups\": [{\n    \"medias\": [],\n    \"message\": \"``\",\n    \"weight\": \"`1`\",\n    \"weightLabel\": \"Weight\"\n  }]\n}",
                      "toJson": "function isExpression(path, data) {\n  return (/:(message|weight$)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n  \n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n  \n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "randomGroups : {\n  $each : {\n    message : {\n      custom : (value, ctx) => {\n        return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n      }\n    },\n    medias : {\n      custom : (value, ctx) => {\n        return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n      }\n    },\n    weight : {\n      custom : (value, ctx) => { \n        const isMergeField = (value) => {\n          return /this.*/.test(value) || /await this.*/.test(value);\n        }\n        \n        if (isMergeField(value))\n          return true\n\n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value) && (parseFloat(value.slice(1, -1)) > 0 || parseFloat(value > 0));\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :v=\"$v\"\n  :random-groups.sync=\"schema.randomGroups\"\n  :active-tab-id=\"schema.activeTabId\"\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :schema=\"schema\"\n  :readonly=\"readonly\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-avcjbkzdruoqgihtfypnsxewlm",
                      "componentLogic": "{\n  data() {\n    return {\n    }\n  },\n  \n  props: {\n    randomGroups: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    activeTabId: String,\n    isNew: Boolean,\n    schema: Object,\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {};\n      }\n    }\n  },\n  \n  computed: {\n    randomGroupsLocal : {\n      get () {\n        return this.randomGroups;\n      },\n      set (newValue) {\n        this.$emit('update:randomGroups', newValue);\n        this.$nextTick(() => {\n          if (this.$refs['message-weight-0'])\n            this.updateProbabilityInPercent(newValue);\n        })\n      }\n    }\n  },\n  \n  watch: {\n    activeTabId (newValue) {\n      if (newValue === 'random' && this.randomGroupsLocal.length < 2)\n        this.$refs.randomList.addItem();\n    }\n  },\n  \n  mounted () {\n    if (this.activeTabId === 'random' && this.$refs.randomList && this.randomGroupsLocal.length < 2) {\n      this.$refs.randomList.addItem();\n      \n      if (!this.isNew && this.v) {\n        this.$nextTick(() => {\n          this.v.schema.$touch();\n        })\n      }\n    }\n  },\n  \n  methods: {\n    newMessage () {\n      return {\n        message          : '``',\n        medias           : [],\n        weight           : \"`1`\",\n        weightLabel      : \"Weight\"\n      };\n    },\n    updateProbabilityInPercent(messages) {\n      let isInvalidWeight = false;\n      let weightArr = [];\n      let weightSum = messages.reduce((sum, message, index) => {\n        let weight;\n        if (this.$refs['message-weight-' + index].mode == 'code') {\n          weight = parseFloat(message.weight);\n        } else {\n          weight = parseFloat(message.weight.slice(1, -1));\n        }\n        \n        if (isNaN(weight) || weight <= 0) {\n          isInvalidWeight = true;\n          return false\n        }\n        \n        weightArr.push(weight);\n        return sum + weight\n      }, 0);\n      \n      _.forEach(messages, (message, index) => {\n        if (isNaN(weightSum) || isInvalidWeight) {\n          message.weightLabel = \"Weight\";\n        } else {\n          let calculatedResult = (weightArr[index] / weightSum * 100).toFixed(0);\n          \n          if (calculatedResult == 0) {\n            calculatedResult = 1;\n          } else if (calculatedResult == 100) {\n            calculatedResult = 99;\n          }\n          \n          message.weightLabel = `Weight(${(weightArr[index] / weightSum * 100).toFixed(0)}%)`\n        }\n      })\n    },\n    isMergeFieldWeight (index) {\n      const isMergeField = (value) => {\n        return /this.*/.test(value) || /await this.*/.test(value);\n      }\n      return isMergeField(this.randomGroups[index].weight)\n    }\n  },\n\n  components: {\n    messageItem: {\n      template: `<%= messageItem %>`,\n      props : {\n        value : {\n          type : Object,\n          default () {\n            return {\n              medias: [],\n              message: '``'\n            };\n          }\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        isNew : Boolean,\n        readonly : {\n          type : Boolean,\n          default : false\n        },\n        steps: Array,\n        stepId: String,\n        v : {\n          type: Object,\n          default () {\n            return {};\n          }\n        }\n      },\n      \n      data () {\n        return {\n          iconPosition: 'left',\n          allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\n          maxFiles: 10,\n          localMessage: this.value\n        }\n      },\n      \n      computed : {\n        assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\n        authToken () { return this.$settings.token },\n        medias : {\n          get () {\n            return this.value.medias\n          },\n          set (value) {\n            const model = {\n              data:null,\n              ext:null,\n              id:null,\n              location:null,\n              name:null,\n              note:null,\n              type:null\n            };\n            const res = _.map(value, item => _.pick(item, _.keys(model)));\n            this.$emit('input', res);\n          }\n        }\n      },\n      \n      methods: {\n        openModal (ref) {\n          this.$refs[ref].open();\n        },\n        removeSelectedItem (key) {\n          this.localMessage.medias.splice(key, 1);\n        },\n        addMedia () {\n          if (_.has(this.localMessage.medias[0], 'linkUrl')) {\n            this.localMessage.medias.push(this.addNewUrl());\n          } else {\n            this.openModal('select-media');\n          }\n        },\n        addNewUrl () {\n          return {\n            linkUrl: \"``\"\n          }\n        }\n      },\n      \n      watch: {\n        localMessage: {\n          handler(newValue) {\n            this.$emit('input', newValue);\n          },\n          deep: true\n        }\n      }\n    },\n  }\n}",
                      "componentTemplate": "<div>\r\n  <or-list \r\n    v-model=\"randomGroupsLocal\"\r\n    ref=\"randomList\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n    :readonly=\"readonly\"\r\n    :new-item-method=\"newMessage\"\r\n    :add-button-label=\"'Add new message'\"\r\n    class=\"messages-list messages-list--random\"\r\n    :can-remove-last-item=\"false\"\r\n  >\r\n    <template slot-scope=\"item\">\r\n      <or-text-expression\r\n        v-model=\"item.item.weight\"\r\n        :ref=\"'message-weight-' + item.index\"\r\n        :label=\"item.item.weightLabel\"\r\n        helpText=\"This value is expected as a positive number\"\r\n        class=\"message-weight__input\"\r\n        placeholder=\"Enter value\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        :readonly=\"readonly\"\r\n        :invalid=\"v.schema.randomGroups.$each[item.index].weight.$error\"\r\n        @input=\"v.schema.randomGroups.$each[item.index].weight.$touch()\"\r\n        :error=\"!item.item.weight || item.item.weight === '``' ? 'Weight is required' : 'Only positive number can be used as a value'\"\r\n      ></or-text-expression>\r\n      <or-alert v-if=\"isMergeFieldWeight(item.index) || ($refs['message-weight-' + item.index] && $refs['message-weight-' + item.index].mode === 'code')\"\r\n        type=\"info\" \r\n        :dismissible=false \r\n        style=\"font-size:small;\">\r\n        <span v-if=\"isMergeFieldWeight(item.index)\">Using merge field input will hide calculation of a message probability weight.</span>\r\n        <span v-else>Using code mode will hide calculation of a message probability weight.</span>\r\n      </or-alert>\r\n      \r\n      <message-item v-model=\"item.item\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"item.steps\" \r\n        :step-id=\"item.stepId\"\r\n        :readonly=\"item.readonly\"\r\n        :is-new=\"isNew\"\r\n        :v=\"v.schema.randomGroups.$each[item.index]\"\r\n      ></message-item>\r\n    </template>\r\n  </or-list>\r\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "7cf5536a-94f5-4cea-8929-43a3bab33efb",
                          "mode": "",
                          "title": "Message item",
                          "template": "<div class=\"message-wrapper\">\r\n  <or-text-message v-model=\"localMessage.message\" class=\"message-item\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent here\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n  &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n  &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.message.$error\"\r\n    @input=\"v.message.$touch()\"\r\n  ></or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\"\r\n    >\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        v-model=\"localMessage.medias\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"localMessage.medias\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\" class=\"selected-media-list__item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.message.$error\"\r\n            :mergeFields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"localMessage.medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!localMessage.medias.length\"\r\n      class=\"select-media inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"localMessage.medias.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>\r\n",
                          "variable": "messageItem"
                        }
                      ],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".select-media {\n  \n  &.inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  margin: 0;\n  color: #f95d5d;\n  font-size: 12px;\n}\n\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.message-wrapper {\n  width: 100%;\n  \n  .or-text-message.message-item {\n    margin-bottom: -10px;\n  }\n}\n\n// Message list for tab random\n.messages-list.or-list {\n  &.single-item {\n    .list-item {\n      padding: 0;\n    }\n  }\n  \n  .or-list-items div {\n    .remove-button {\n      display: none;\n    }\n  }\n  \n  .or-list-items div:first-child:nth-last-child(n + 3) ~ div {\n    &>.remove-button {\n      display: block;\n    }\n  }\n}\n\n.messages-list--random {\n  // margin-bottom: 20px;\n  \n  &--single-exit > .or-list-items > .list-item:not(:first-child) {\n    padding-top: 0;\n  }\n  \n  .or-list-items {\n    width: 100%;\n  }\n  \n  &.or-list {\n    \n    & > .or-list-items > .list-item {\n      position: relative;\n      flex-direction: column;\n      align-items: flex-start;\n      padding: 0 40px;\n      \n      .message-weight__input {\n        width: 100%;\n      }\n\n      > .remove-button {\n      \tposition: absolute;\n      \ttop: 145px;\n        right: 0;\n      }\n      \n      > .handle {\n        display: none;\n      }\n      \n      > .drag_handle {\n        position: absolute;\n      \ttop: 150px;\n        left: 0;\n      }\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "3749944d-3efd-43b7-b461-2e91f3a35b89",
                    "data": {
                      "data": "{\n  \"noConditionMessage\": \"``\",\n  \"noConditionMedias\": []\n}",
                      "toJson": "function isExpression(path, data) {\n  return (/:(noConditionMessage|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:noConditionMedias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                      "validators": "noConditionMessage : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.noConditionMedias.length && _.filter(ctx.noConditionMedias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nnoConditionMedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.noConditionMessage.slice(1,-1);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :v=\"$v\" :steps=\"steps\" \n  :is-new=\"isNew\"\n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  :conditionItem=\"schema\"\n  :no-condition-message.sync=\"schema.noConditionMessage\"\n  :no-condition-medias.sync=\"schema.noConditionMedias\"\n  :readonly=\"readonly\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-urjfchklznqxpvbwostgdeimay",
                      "componentLogic": "{\r\n  props : {\r\n    noConditionMessage: String,\r\n    noConditionMedias: Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    conditionItem: Object,\r\n    readonly: {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    noConditionMessageLocal : {\r\n      get () { return this.noConditionMessage },\r\n      set (value) {\r\n        this.$emit('update:noConditionMessage', value);\r\n      }\r\n    },\r\n    noConditionMediasLocal : {\r\n      get () { return this.noConditionMedias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:noConditionMedias', value);\r\n        } else {\r\n          const model = {\r\n            data:null,\r\n            ext:null,\r\n            id:null,\r\n            location:null,\r\n            name:null,\r\n            note:null,\r\n            type:null\r\n          };\r\n          const res = _.map(value, item => _.pick(item, _.keys(model)));\r\n          this.$emit('update:noConditionMedias', res);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.noConditionMedias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.noConditionMedias[0], 'linkUrl')) {\r\n        this.noConditionMediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n    // console.log('this in wc', this)\r\n  }\r\n}",
                      "componentTemplate": "<div\n  :class=\"['no-condition-data-out', { 'no-condition-data-out__indent': conditionItem.conditionGroups && conditionItem.conditionGroups.length > 1 }, { 'is-invalid': v.schema.noConditionMessage.$error || v.schema.noConditionMedias.$error }, { 'readonly': readonly }]\"\n>\n  <div class=\"no-condition-data-out__header\">If no condition is met</div>\n  <div class=\"no-condition-data-out__body\">\n    <div class=\"message-block\">\n      <or-text-message  \n        v-model=\"noConditionMessageLocal\"\n        :merge-fields=\"mergeFields\"\n        :readonly=\"readonly\"  \n        label=\"Message\" \n        placeholder=\"Enter text to be sent\" \n        :max-char-length=\"160\" \n        merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\n    &lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \n        in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\n    &lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \n        not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \n        :stepId=\"stepId\"\n        :steps=\"steps\"\n        :invalid=\"v.schema.noConditionMessage.$error\"\n        @input=\"v.schema.noConditionMessage.$touch()\"\n      >\n      </or-text-message>\n      <div class=\"select-media\">\n        <or-modal ref=\"select-media\" \n          title=\"Select media\" \n          size=\"large\">\n          <or-asset-manager :assets-url=\"assetsUrl\" \n            :auth-token=\"authToken\"\n            :multi-select=\"true\"\n            :max-files=\"maxFiles\"\n            :allowed-file-types=\"allowedFileTypes\"\n            v-model=\"noConditionMediasLocal\"\n          ></or-asset-manager>\n        </or-modal>\n        \n        <or-list ref=\"mediaList\" \n          v-model=\"noConditionMediasLocal\" \n          class=\"selected-media-list\"\n          :steps=\"steps\" \n          :step-id=\"stepId\" \n          :new-item-method=\"addNewUrl\"\n        >\n          <template slot-scope=\"item\">\n            <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\n              {{ item.item.name }}\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n            <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\n              <or-text-expression\n                label=\"URL\" \n                v-model=\"item.item.linkUrl\"\n                placeholder=\"Enter image URL to be sent here\"\n                :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.noConditionMessage.$error\"\n                :mergeFields=\"mergeFields\"\n                :steps=\"steps\"\n                :step-id=\"stepId\"\n                :readonly=\"readonly\" \n              ></or-text-expression>\n                :error=\"!responsesQuantity.slice(1, -1) ? 'The field is required' : 'Enter correct number of responses'\"\n                :invalid=\"v.schema.responsesQuantity.$error\"\n                @input=\"v.schema.responsesQuantity.$touch()\"\n              <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\n            </div>\n          </template>\n          <div slot=\"footer\">\n            <or-button v-if=\"noConditionMedias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Add media</or-button>\n          </div>\n        </or-list> \n        \n        <div v-if=\"!noConditionMedias.length\"\n          class=\"select-media inline-message\"\n        >\n          Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>Files</or-button>\n          or use <or-button @click=\"noConditionMediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.noConditionMessage.$error }]\" disableRipple>URL</or-button>\n        </div>\n        \n        <p class=\"invalid\" v-show=\"v.schema.noConditionMessage.$error\">Text or media content is required</p>\n      </div>\n    </div>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".no-condition-data-out {\n  flex-grow: 1;\n  padding: 6px 10px 0;\n  border-left: 3px solid #7ED321;\n  border-bottom: 1px solid #DFDFDF;\n  background: #F6F6F6;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n\n  &.is-invalid {\n    border-left-color: #f95d5d;\n  }\n  \n  &__indent {\n    margin-left: 24px;\n  }\n\n  &__header {\n    padding-left: 3px;\n    padding-bottom: 5px;\n    font-size: 15px;\n    font-weight: 600;\n  }\n\n  &__body {\n    padding: 0 10px 10px;\n    // background: #ffffff;\n    border-radius: 3px;\n  }\n\n  &.readonly {\n    .data-block__header {\n      color: rgba(0,0,0,.38);\n    }\n  }\n}\n\n.message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  \n  &.inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n  \n  .or-text-expression .or-editable-wrapper {\n    background-color: #fff;\n  }\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -15px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "7c1017c1-799f-4e14-a388-452e5a90a61d",
                    "data": {
                      "inputs": [
                        {
                          "id": "d508868c-b96c-4eda-bc69-a7fd502eccc8",
                          "data": {
                            "data": "{\n  \"medias\": [],\n  \"message\": \"``\",\n  \"weight\": \"`1`\",\n  \"useFiles\": false\n}",
                            "toJson": "function isExpression(path, data) {\n  return (/:(message|weight)/g).test(path);\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl} }` : `{ location: ${JSON.stringify(media.location)} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\n//function that describe how to serialize wildcard data \nfunction toJson(data, key = '', parentPath = '') { \n  const path = `${parentPath}:${key}`;\n\n  if ((/:medias/g).test(path))\n    return convertMedias(data)\n    \n  if (_.isArray(data)) { \n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);\n",
                            "validators": "message : {\n  custom : (value, ctx) => {\n    return value.slice(1,-1) || (ctx.medias.length && _.filter(ctx.medias, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length);\n  }\n},\nmedias : {\n  custom : (value, ctx) => {\n    return (value.length && _.filter(value, media => _.get(media, 'linkUrl') ? media.linkUrl.slice(1, -1) : true).length) || ctx.message.slice(1,-1);\n  }\n}",
                            "applyToJson": true,
                            "formTemplate": "<wildcard\n  :merge-fields=\"mergeFields\"\n  :is-new=\"isNew\"\n  :use-files.sync=\"schema.useFiles\"\n  :v=\"$v\" :steps=\"steps\" \n  :step-id=\"stepId\"\n  :conditionItem=\"schema\"\n  :message.sync=\"schema.message\"\n  :medias.sync=\"schema.medias\"\n  :readonly=\"readonly\"\n></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-sygbkoxqrcmeltwfjhnudiavzp",
                            "componentLogic": "{\r\n  props : {\r\n    message : String,\r\n    medias : Array,\r\n    mergeFields: {\r\n      type: Array,\r\n      default () {\r\n        return [];\r\n      }\r\n    },\r\n    isNew: Boolean,\r\n    useFiles: Boolean,\r\n    conditionItem : Object,\r\n    readonly : {\r\n      type : Boolean,\r\n      default : false\r\n    },\r\n    steps: Array,\r\n    stepId: String,\r\n    v: Object\r\n  },\r\n  data () {\r\n    return {\r\n      iconPosition: 'left',\r\n      allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'wav', 'mp3', 'mp4'],\r\n      maxFiles: 10,\r\n      // localMessage: this.value,\r\n    }\r\n  },\r\n  computed : {\r\n    assetsUrl () { return `${this.$flow.customDataApiUrl}/api/v1/assets`},\r\n    authToken () { return this.$settings.token },\r\n    messageLocal : {\r\n      get () { return this.message },\r\n      set (value) {\r\n        this.$emit('update:message', value);\r\n      }\r\n    },\r\n    mediasLocal : {\r\n      get () { return this.medias },\r\n      set (value) {\r\n        if (value.length && _.has(value[0], 'linkUrl')) {\r\n          this.$emit('update:medias', value);\r\n        } else {\r\n          const model = this.useFiles\r\n            ? ['name', 'key', 'location', 'isPublic', 'linkUrl']\r\n            : [\r\n                'acl',\r\n                'data',\r\n                'ext',\r\n                'id',\r\n                'location',\r\n                'name',\r\n                'note',\r\n                'type',\r\n                'linkUrl',\r\n              ];\r\n          const res = _.map(value, item => _.pick(item, model));\r\n          this.$emit('update:medias', res);\r\n        }\r\n      }\r\n    },\r\n    useFilesComputed : {\r\n      get () {\r\n        return this.useFiles;\r\n      },\r\n      set (value) {\r\n        this.$emit('update:useFiles', value);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    openModal (ref) {\r\n      this.$refs[ref].open();\r\n    },\r\n    removeSelectedItem (key) {\r\n      this.medias.splice(key, 1);\r\n    },\r\n    addMedia () {\r\n      if (_.has(this.medias[0], 'linkUrl')) {\r\n        this.mediasLocal.push(this.addNewUrl());\r\n      } else {\r\n        this.openModal('select-media');\r\n      }\r\n    },\r\n    addNewUrl () {\r\n      return {\r\n        linkUrl: \"``\"\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // conditionItem : {\r\n    //   handler (newValue) {\r\n    //     console.log('ci', newValue)\r\n    //     this.$emit('update:message', newValue.item.message);\r\n    //   },  \r\n    //   deep : true\r\n    // }\r\n  },\r\n  mounted () {\r\n  }\r\n}",
                            "componentTemplate": "<div class=\"message-block\">\r\n  <or-text-message  \r\n    v-model=\"messageLocal\"\r\n    :merge-fields=\"mergeFields\"\r\n    :readonly=\"readonly\"  \r\n    label=\"Message\" \r\n    placeholder=\"Enter text to be sent\" \r\n    :max-char-length=\"160\" \r\n    merge-field-in-use-message=\"&lt;p&gt;We cannot calculate the exact amount of characters in your message because it contains a variable.&lt;/p&gt;\r\n&lt;p&gt;There are %currentCharCount% characters excluding the variable in your message.&lt;/p&gt;\" \r\n    in-char-limit-message=\"&lt;p&gt;The character limit for an SMS message is %maxCharLength% characters.&lt;/p&gt;\r\n&lt;p&gt;If your message contains more characters, it will be broken down into more than one SMS message.&lt;/p&gt;\" \r\n    not-in-char-limit-message=\"You have exceeded amount of characters that can be sent via a single SMS.\" \r\n    :stepId=\"stepId\"\r\n    :steps=\"steps\"\r\n    :invalid=\"v.schema.message.$error\"\r\n    @input=\"v.schema.message.$touch()\"\r\n  >\r\n  </or-text-message>\r\n  <div class=\"select-media\">\r\n    <or-modal ref=\"select-media\" \r\n      title=\"Select media\" \r\n      size=\"large\">\r\n      <or-asset-manager :assets-url=\"assetsUrl\" \r\n        :auth-token=\"authToken\"\r\n        :multi-select=\"true\"\r\n        :max-files=\"maxFiles\"\r\n        :allowed-file-types=\"allowedFileTypes\"\r\n        :use-files.sync=\"useFilesComputed\"\r\n        :files-api-url=\"$flow.filesApiUrl\"\r\n        v-model=\"mediasLocal\"\r\n      ></or-asset-manager>\r\n    </or-modal>\r\n    \r\n    <or-list ref=\"mediaList\" \r\n      v-model=\"mediasLocal\" \r\n      class=\"selected-media-list\"\r\n      :steps=\"steps\" \r\n      :step-id=\"stepId\" \r\n      :new-item-method=\"addNewUrl\"\r\n    >\r\n      <template slot-scope=\"item\">\r\n        <div v-if=\"item.item.name\" class=\"selected-media selected-media__files\">\r\n          {{ item.item.name }}\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n        <div v-if=\"item.item.linkUrl\" class=\"selected-media selected-media__links\">\r\n          <or-text-expression\r\n            label=\"URL\" \r\n            v-model=\"item.item.linkUrl\"\r\n            placeholder=\"Enter image URL to be sent here\"\r\n            :invalid=\"!isNew && !item.item.linkUrl.slice(1, -1) && v.schema.message.$error\"\r\n            :merge-fields=\"mergeFields\"\r\n            :steps=\"steps\"\r\n            :step-id=\"stepId\"\r\n            :readonly=\"readonly\" \r\n          ></or-text-expression>\r\n          <button class=\"btn-delete-media\" :class=\"{disabled: readonly}\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>close</or-icon></button>\r\n        </div>\r\n      </template>\r\n      <div slot=\"footer\">\r\n        <or-button v-if=\"medias.length\" icon=\"add\" :icon-position=\"iconPosition\" @click.stop.prevent=\"addMedia\" :disabled=\"readonly\" :class=\"['regular-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Add media</or-button>\r\n      </div>\r\n    </or-list>\r\n    \r\n    <div v-if=\"!medias.length\"\r\n      class=\"select-media__inline-message\"\r\n    >\r\n      Add media from <or-button @click=\"openModal('select-media')\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>Files</or-button>\r\n      or use <or-button @click=\"mediasLocal.push(addNewUrl())\" :disabled=\"readonly\" :class=\"['inline-button', { disabled : readonly, invalid: v.schema.message.$error }]\" disableRipple>URL</or-button>\r\n    </div>\r\n    \r\n    <p class=\"invalid\" v-show=\"v.schema.message.$error\">Text or media content is required</p>\r\n  </div>\r\n</div>",
                            "wildcardTemplates": [],
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ".message-block {\n  margin: 0 -10px;\n}\n\n.select-media {\n  position: relative;\n  padding-bottom: 10px;\n  \n  &__inline-message {\n    margin-bottom: 0;\n    \n    .ui-button.ui-button--type-primary.ui-button--color-default {\n      background: transparent;\n      font-weight: 500;\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    &.inline-button {\n      min-width: auto;\n      padding: 0;\n      \n      .ui-button__content {\n        margin: 0;\n        font-size: 1rem;\n      }\n    }\n    \n    &.regular-button {\n      \n    }\n  \n    padding-left: 0;\n    color: #64b2da;\n    background-color: transparent;\n    \n    .ui-button__content {\n      margin-left: 5px;\n    }\n   \n    &.invalid {\n      color: #f95d5d;\n      \n      .ui-icon {\n        color: #f95d5d;\n      }\n      \n      &:hover:not([disabled]) {\n        color: #ff4040;\n        \n        .ui-icon {\n          color: #ff4040;\n        }\n      }\n    }\n    \n    .ui-icon {\n      // font-size: 0.9rem;\n      // line-height: 1.3em;\n      color: #64b2da;\n    }\n    \n    &:hover:not([disabled]) {\n      color: #4b99c1;\n    }\n  }\n}\n\n.selected-media-list {\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-left: 5px;\n  \n  .list-item {\n    padding-top: 0;\n    \n    .or-text-expression .or-editable-wrapper {\n      background-color: #ffffff;\n    }\n  }\n  \n  .sortable-handle,\n  .remove-button {\n    display: none;\n  }\n}\n\n.selected-media {\n  max-width: 100%;\n  width: 100%;\n  position: relative;\n  padding-right: 25px;\n    \n  .btn-delete-media {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    &.btn-delete-media {\n      cursor: default;\n    }\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n  \n  &__files {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    line-height: 20px;\n    color: #91969D;\n    font-size: 14px;\n    text-align: left;\n  }\n  \n  &__links {\n    .btn-delete-media {\n      top: auto;\n      bottom: 9px;\n    }\n  }\n}\n\np.invalid {\n  position: absolute;\n  bottom: -7px;\n  \n  margin: 0;\n  \n  color: #f95d5d;\n  font-size: 12px;\n}"
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                          ]
                        }
                      ],
                      "isSingleExit": true,
                      "addButtonText": "Add condition",
                      "isSingleGroup": false,
                      "conditionExits": [],
                      "conditionTitle": "New condition",
                      "conditionGroups": [
                        {
                          "label": "`New condition 1`",
                          "rules": [
                            {
                              "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                              "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                              "codeValue": "``",
                              "valueType": "string",
                              "firstValue": "``",
                              "secondValue": "``",
                              "isDisabledSecondValue": false
                            }
                          ],
                          "medias": [],
                          "weight": "`1`",
                          "dataOut": "``",
                          "message": "``",
                          "useFiles": false,
                          "trueValue": "any",
                          "description": "``",
                          "isNotCollapsed": true,
                          "isEditableHeader": false
                        }
                      ],
                      "renderCondition": "",
                      "usePredefinedValue": false,
                      "isNegativeLeftMargin": false,
                      "hasNoConditionDataOut": false,
                      "predefinedVariableName": "schema.inputData",
                      "conditionRuleHasDataOut": false,
                      "noConditionDataOutValue": "``"
                    },
                    "meta": {
                      "name": "condition-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "0.9.0"
                    },
                    "label": "Conditon builder v0.9.0",
                    "component": [
                      "condition-builder-component",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                    ]
                  }
                ],
                "fullWidth": true,
                "activeTabId": "single",
                "renderCondition": ""
              },
              "compiled": {},
              "component": [
                "or-tabs-component",
                "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/or-tabs/index.js"
              ]
            },
            {
              "id": "771921b9-6772-43e1-8362-ad3e2c2d87be",
              "data": {
                "open": true,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "0094f842-56ed-42a1-a1c0-45ef1c037400",
                    "data": {
                      "data": "{\"continueConversation\": true}",
                      "toJson": "//function that describe how to serialize wildcard data\n function toJson(data) {\n if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard :continue-conversation.sync=\"schema.continueConversation\" :step-id=\"stepId\" :steps=\"steps\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bctulnwkazemfoxvgdjhyqpisr",
                      "componentLogic": "{\n  props: {\n    continueConversation: {\n      type : Boolean,\n      default : true\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    stepId : {\n      type: String,\n      default: ''\n    },\n    steps : {\n      type: Array,\n      default: []\n    }\n  },\n  mounted() {\n    this.toggleConversation();\n  },\n  computed: {\n    localContinueConversation: {\n      get() {\n        return this.continueConversation;\n      },\n      set(value) {\n        if (this.continueConversation !== value) {\n          this.$emit('update:continueConversation', value);\n          this.$nextTick(() => this.toggleConversation());\n        }\n      }\n    }\n  },\n  methods: {\n    toggleConversation() {\n      const step = _.find(this.steps, {id : this.stepId});\n      if (!_.isObject(_.get(step, 'data.dataOut'))) {\n        return;\n      }\n\n      if (this.continueConversation && _.get(step, 'data.dataOut.meta.conversationStarter')) {\n        _.unset(step, 'data.dataOut.meta');\n      } else if (!this.continueConversation && !_.get(step, 'data.dataOut.meta.conversationStarter')) {\n        _.set(step, 'data.dataOut.meta', {\n          conversationType: 'sms',\n          conversationStarter: true\n        });\n      }\n    }\n  }\n}",
                      "componentTemplate": "<or-switch\n  v-model=\"localContinueConversation\"\n\n  :disabled=\"readonly\"\n  label=\"Continue conversation\"\n></or-switch>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5be3579b-72fd-42a3-b87f-eb5c1667b948",
                    "data": {
                      "data": "{\n  \"conversationMeta\": \"\"\n}",
                      "toJson": "return {conversationMeta : JSON.stringify(data.conversationMeta)};",
                      "validators": "conversationMeta: {\n  custom (value, schema) {\n    if (!this.schema.continueConversation)\n      return true\n\n    const flowMergeTags =  _.chain(mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const sharedMergeTags =  _.chain(mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const globalMergeTags =  _.chain(mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const options = _.chain([])\n      .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n      .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'sms')\n      .map('name')\n      .uniq()\n      .value();\n\n    return _.includes(options, value);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :continue-conversation=\"schema.continueConversation\"\n  :merge-fields=\"mergeFields\"\n  :conversation-meta.sync=\"schema.conversationMeta\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :v=\"$v\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bdtswmylvzerfcjiknxuhgqpoa",
                      "componentLogic": "{\n  props : {\n    continueConversation : {\n      type : Boolean,\n      default : true\n    },\n    mergeFields : {\n        type    : Array,\n        default () {\n            return [];\n        }\n    },\n    conversationMeta : {\n      type : String,\n      default : ''\n    },\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            conversationMeta: {}\n          }\n        };\n      }\n    }\n  },\n\n  data() {\n    return {\n      options : this.fillOptions(),\n      conversationRequiredMessage: 'Conversation is required.'\n    }\n  },\n\n  computed: {\n    selectedStepId () {\n        return this._findStepIdByDataOut(this.conversationMeta);\n    },\n\n    selectedConversation : {\n      get () {\n        return {name : this.conversationMeta};\n      },\n      set (value) {\n        this.$emit('update:conversationMeta', value.name);\n      }\n    }\n  },\n\n  methods : {\n    _getDataOutName (dataOut) {\n      return _.get(dataOut, 'name', dataOut);\n    },\n\n    _findStepIdByDataOut (mergeFieldMeta) {\n      return _.chain(this.steps)\n      .find(step => this._getDataOutName(_.get(step, 'data.dataOut')) === this._getDataOutName(mergeFieldMeta))\n      .get('id')\n      .value();\n    },\n\n    highlightConversationOn(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOff(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOffOnMouseout(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId && stepId !== this.selectedStepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    zoomInOnStep () {\n      if (this.selectedStepId) {\n        this.$flow.zoomInOnStep(this.selectedStepId);\n      }\n    },\n\n    fillOptions () {\n      const flowMergeTags = _.chain(this.mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n        name  : _.get(tag, 'name'),\n        meta  : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const sharedMergeTags = _.chain(this.mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n        name  : _.get(tag, 'name'),\n        meta  : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const globalMergeTags = _.chain(this.mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n        name  : _.get(tag, 'name'),\n        meta  : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      // options value has to be an object ({name : tag.name}), otherwise - weird behaviour\n      const options = _.chain([])\n        .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n        .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'sms')\n        .uniqBy('name')\n        .sortBy('name')\n        .map(tag => ({value : {name : tag.name}, label : tag.name}))\n        .value();\n\n      return options;\n    }\n  },\n\n  created () {\n    if (_.isEmpty(this.conversationMeta) && this.options && this.options.length === 1) {\n      console.log('this.selectedConversation =');\n      this.selectedConversation = _.get(this.options, '0.value');\n    }\n    this.$nextTick(() => {\n      this.highlightConversationOn(this.conversationMeta);\n    });\n  },\n\n  beforeDestroy () {\n    this.highlightConversationOff(this.conversationMeta);\n  }\n}",
                      "componentTemplate": "<div class=\"select-conversation\" v-if=\"continueConversation\">\n  <div class=\"select-conversation-header\">\n    <h4>Conversation</h4>\n  </div>\n  <div class=\"select-conversation-wr\">\n    <or-select has-search\n      class=\"select-conversation\"\n      placeholder=\"Select a conversation\"\n      search-placeholder=\"Type to search\"\n      :options=\"options\"\n      v-model=\"selectedConversation\"\n      :invalid=\"v.schema.conversationMeta.$error\"\n      :error=\"conversationRequiredMessage\"\n      :disabled=\"readonly\">\n      <template slot-scope=\"props\" slot=\"option\">\n        <div\n          class=\"ui-select-option__basic\"\n          @mouseenter=\"highlightConversationOn(props.option.value)\"\n          @mouseout=\"highlightConversationOffOnMouseout(props.option.value)\"\n          @click=\"highlightConversationOn(props.option.value)\">\n          {{props.option.label}}\n        </div>\n      </template>\n    </or-select>\n    <or-icon-button\n      class=\"zoom-in-button\"\n      icon=\"zoom_in\"\n      type=\"secondary\"\n      color=\"primary\"\n      @click=\"zoomInOnStep\"\n      tooltip=\"Show Conversation Step\"\n      tooltip-position=\"top right\"\n      :disabled=\"!selectedStepId\">\n    </or-icon-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".select-conversation {\n  .select-conversation-header {\n    position: relative;\n    height: 36px;\n    display: flex;\n    h4 {\n      margin-top: 0.2rem;\n      flex-grow: 1;\n    }\n  }\n\n  .select-conversation-wr {\n    position: relative;\n  }\n\n  .select-conversation {\n    width: calc(100% - 40px);\n  }\n\n  .zoom-in-button {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 1;\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "52208b63-bef5-4c1b-8014-79d6af0392d0",
                    "data": {
                      "data": "{\n  \"botNumber\": \"``\",\n  \"endUserNumber\": \"``\",\n  \"options\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data\nfunction isExpression(path, data) {\n  return (/:(botNumber|endUserNumber)/g).test(path);\n}\n\nfunction toJson(data, key = '', parentPath = '') {\n  const path = `${parentPath}:${key}`;\n\n  if (_.isArray(data)) {\n    return `[${_.map(data, (value, index) => toJson(value, index, path)).join(',')}]`;\n  }\n\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key, path)}`).join(',')}}`;\n  }\n\n  if (isExpression(path, data)) return data;\n\n  return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  botNumber: {\n    custom: (value, schema) => {\n      return schema.continueConversation || Boolean(value.slice(1, -1));\n    }\n  },\n\n  endUserNumber: {\n    custom: (value, schema) => {\n      return schema.continueConversation || Boolean(value.slice(1, -1));\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-epkxscyrbdmtjogu :continue-conversation=\"schema.continueConversation\" :merge-fields=\"mergeFields\" :v=\"$v\" :options.sync=\"schema.options\" :end-user-number.sync=\"schema.endUserNumber\"    :bot-number.sync=\"schema.botNumber\"     :step-id=\"stepId\"       :steps=\"steps\"       :readonly=\"readonly\"></or-wildcard-epkxscyrbdmtjogu>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-epkxscyrbdmtjogu",
                      "componentLogic": "{\n  computed: {\n    botNumbers: {\n      get() {\n        return _.cloneDeep(this.options);\n      },\n      set(val) {\n        this.$emit('update:options', val);\n      }\n    },\n    localNumbers: {\n      get() {\n        return {\n          botData: this.botNumber,\n          userData: this.endUserNumber\n        }\n      },\n      set(val) {\n        this.$emit('update:botNumber', val.botData);\n        this.$emit('update:endUserNumber', val.userData);\n      }\n    }\n  },\n  mounted () {\n    if (!this.continueConversation) this.getNumbers();\n  },\n  beforeDestroy() {\n    this.botNumbers = [];\n  },\n  methods: {\n    notIncludes (arr, value) {\n      const filteredArr = _.filter(arr, item => _.includes(item, value));\n\n      return _.isEmpty(filteredArr)\n    },\n    async getNumbers () {\n      const response = await this.$http.post(this.$flow.gatewayUrl('provider-numbers-list', this.$flow.providersAccountId()), {accountId : this.$flow.accountId, getSmsNumbers : true});\n      const responseJson = await response.json();\n      console.log(responseJson);\n      const providerNumbers = _.chain(responseJson)\n        .map(number => ({\n          fromProvider : true,\n          id           : number.id,\n          label        : !number.isGroup ? number.phoneNumber + ' (' + number.name + ')' : number.name,\n          value        : '`' + number.phoneNumber + '`'\n        }))\n        .sortBy('label')\n        .value();\n\n      this.botNumbers = _.concat(_.filter(this.botNumbers, num => !num.fromProvider), providerNumbers);\n    }\n  },\n  props: {\n    continueConversation : {\n      type : Boolean,\n      default : true\n    },\n    botNumber: {\n      type: String,\n      default() {\n        return '``'\n      }\n    },\n    endUserNumber: {\n      type: String,\n      default() {\n        return '``'\n      }\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    options: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default() {\n        return false;\n      }\n    },\n    stepId: {\n      type: String,\n      default() {\n        return ''\n      }\n    },\n    steps: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    v: {\n      type: Object,\n      default() {\n        return {}\n      }\n    }\n  },\n  watch: {\n    continueConversation () {\n      if (!this.continueConversation) this.getNumbers();\n    }\n  }\n}\n",
                      "componentTemplate": "<or-select-phone-numbers\n  v-if=\"!continueConversation\"\n  :merge-fields=\"mergeFields\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :options.sync=\"botNumbers\"\n  v-model=\"localNumbers\"\n  :multiple=\"false\"\n  :autofillInputs=\"false\"\n  select-error=\"The bot phone number field is required.\"\n  :select-invalid=\"v.schema.botNumber.$error\"\n  :select-label=\"'Bot phone number'\"\n  select-placeholder=\"Select the bot number from the list\"\n  text-expression-error=\"The end user phone number field is required.\"\n  :text-expression-invalid=\"v.schema.endUserNumber.$error\"\n  :text-expression-label=\"'End user phone number'\"\n  text-expression-placeholder=\"Define recipient number\"\n  :readonly=\"readonly\"\n  ref=\"selectPhoneNumbers\"\n></or-select-phone-numbers>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": "\n\n.ui-select {\n    margin-bottom: 15px;\n\n  .or-text-expression {\n    margin-bottom: 0px;\n  }\n}\n\n"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "952c21ad-e5c1-4d8f-a37a-cafa7254ec6b",
                    "data": {
                      "data": "{\n  \"checkStatus\" : false,\n  \"timeout\"     : \"`24h`\"\n}",
                      "toJson": "return {\n  checkStatus : JSON.stringify(data.checkStatus),\n  timeout     : data.timeout\n}",
                      "validators": "timeout : {\n  required: validators.required,\n  custom(value) {\n    const regexMergefield = /\\${this\\.get\\(\\'(.{1,})\\'\\)}$/;\n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    let parsedTimeout;\n\n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return (parsedTimeout >= 1000 && parsedTimeout <= 172800000) || regexMergefield.test(timeout);\n    } catch(e) {\n      return false;\n    }\n  },\n  isValid(value) {\n    const regexMergefield = /\\${this\\.get\\(\\'(.{1,})\\'\\)}$/;\n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    let parsedTimeout;\n\n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return true\n    } catch(e) {\n      return false;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n :merge-fields=\"mergeFields\" \n :check-status.sync=\"schema.checkStatus\" \n :timeout.sync=\"schema.timeout\" \n :step-id=\"stepId\" \n :steps=\"steps\" \n :readonly=\"readonly\" \n :v=\"$v\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xlbtvpfumyoskgjhqrceaiwdzn",
                      "componentLogic": "{\n  props: {\n    checkStatus: {\n      type : Boolean,\n      default : false\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    stepId : {\n      type: String,\n      default: ''\n    },\n    steps : {\n      type: Array,\n      default: []\n    },\n    timeout: {\n      type: String,\n      default: '``'\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            timeout : {}\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    errors() {\n      const timeout = this.v.schema.timeout;\n\n      if (!timeout.isValid) {\n        return 'Please enter a valid timeout (Example: 5s, 5m, 5h)';\n      } else if (!timeout.custom) {\n        return 'Min 1s, max 48h (Example: 5s, 5m, 5h)'\n      }\n    },\n    localCheckStatus: {\n      get() {\n        return this.checkStatus;\n      },\n      set(value) {\n        this.$emit('update:checkStatus', value);\n      }\n    },\n    timeoutLocal: {\n      get() {\n        if (!this.localCheckStatus) this.$emit('update:timeout', '`24h`')\n\n        return this.timeout;\n      },\n      set(value) {\n        this.$emit('update:timeout', value);\n      }\n    }\n  },\n  data() {\n    return {\n      localExits: _.clone(this.exits) || [],\n      localId: 'undelivered' || uuid.v4()\n    }\n  }\n}",
                      "componentTemplate": "<div class=\"check-status\">\n  <or-switch\n    v-model=\"localCheckStatus\"\n\n    :disabled=\"readonly\"\n    label=\"Wait for delivery confirmation\"\n  ></or-switch>\n\n  <div class=\"check-status__timeout\">\n    <or-text-expression\n      v-model=\"timeoutLocal\"\n      v-show=\"localCheckStatus\"\n\n      :error=\"errors\"\n      :invalid=\"v.schema.timeout.$invalid\"\n      :merge-fields=\"mergeFields\"\n      :readonly=\"readonly\"\n      :step-id=\"stepId\"\n      :steps=\"steps\"\n      help-text=\"Min 1s, max 48h (Example: 5s, 5m, 5h)\"\n      label=\"Waiting timeout\"\n      name=\"Timeout\"\n      placeholder=\"24h\"\n    ></or-text-expression>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "26e2507c-947b-4565-b847-c803d8aba776",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "The output data of the step will be stored under this name and can be reused further in the flow",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "sentMessageDetails",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "renderCondition": "",
                "disabledCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"botNumber\": \"+17205555555\",\n  \"endUserNumber\": \"+17205555551\",\n  \"transcriptId\": \"\",\n  \"lastTranscriptId\": \"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "medias": [],
                "dataOut": "sentMessageDetails",
                "message": "``",
                "botNumber": "``",
                "endUserNumber": "``"
              },
              "rawMode": false,
              "version": "50c1bd77-bf71-426e-af69-0c8de0b899ab",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "d064065f-8c57-4d70-ac03-5e3083e1acd3",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "compiled": {
                      "exits": [
                        {
                          "id": "next",
                          "label": "next"
                        }
                      ]
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.timeout = \"`24h`\";\nstep.data.checkStatus = false",
            "version": "1.2.9"
          },
          {
            "sample": null,
            "script": "step.data.options = [];",
            "version": "1.2.10"
          },
          {
            "sample": null,
            "script": "step.data.continueConversation = false;\n\nstep.dataOutLabelConnected = false;\nstep.data['dataOut'] = {\n  name: step.data['dataOut'],\n  type: 'session',\n  ttl: 86400000,\n  meta: {}\n};",
            "version": "1.2.11"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useFiles'])) step.data['useFiles'] = false;\n",
            "version": "1.3.2"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate);\n",
            "version": "1.4.1"
          },
          {
            "sample": null,
            "script": "if (!step.data.continueConversation) {\n  delete step.outputExample._conversationStarter;\n  delete step.outputExample._conversationType;\n\n  step.data.dataOut.meta = {\n    conversationStarter : true,\n    conversationType    : 'sms'\n  };\n}",
            "version": "1.4.3"
          },
          {
            "sample": null,
            "script": "step.data['conversationMeta'] = _.get(step.data['conversationMeta'], 'name', '');\n",
            "version": "1.5.0"
          },
          {
            "sample": null,
            "script": "if (step.data.checkStatus) {\n  step.data.processError = true;\n  const undeliveredExitIndex = _.findIndex(step.data.exits, {id : 'undelivered'});\n  const undeliveredExitStepId = _.get(step.data.exits, [undeliveredExitIndex, 'stepId']);\n  const errorLegId =  _.findIndex(step.data.exits, {id : '__error__'});\n  \n  if (errorLegId < 0) {\n    step.data.exits.splice(undeliveredExitIndex, 1, {\n      condition : 'processError',\n      id        : '__error__',\n      label     : 'error',\n      stepId    : undeliveredExitStepId\n    });\n  } else {\n    _.set(step.data.exits, [errorLegId, 'stepId'], undeliveredExitStepId);\n  }\n}",
            "version": "1.6.0"
          },
          {
            "sample": null,
            "script": "step.data['activeTabId'] = \"single\";\nstep.data['singleMessage'] = {\"message\":step.data.message,\"medias\":step.data.medias,\"useFiles\":step.data.useFiles};\nstep.data['randomGroups'] = [{\"medias\":[],\"message\":\"``\",\"weight\":\"`1`\",\"weightLabel\":\"Weight\"}];\nstep.data['isSingleExit'] = true;\nstep.data['conditionRuleHasDataOut'] = false;\nstep.data['hasNoConditionDataOut'] = false;\nstep.data['conditionGroups'] = [{\"dataOut\":\"``\",\"description\":\"``\",\"isEditableHeader\":false,\"isNotCollapsed\":true,\"label\":\"`New condition 1`\",\"rules\":[{\"codeValue\":\"``\",\"firstValue\":\"``\",\"isDisabledSecondValue\":false,\"ruleType\":\"function (firstValue, secondValue) {\\nreturn _.includes(firstValue, secondValue);\\n}\",\"secondValue\":\"``\",\"valueType\":\"string\",\"vforkey\":\"f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18\"}],\"trueValue\":\"any\",\"medias\":[],\"message\":\"``\",\"weight\":\"`1`\",\"useFiles\":false}];\nstep.data['noConditionMessage'] = \"``\";\nstep.data['noConditionMedias'] = [];\n\ndelete step.data.message;\ndelete step.data.medias;\ndelete step.data.useFiles;",
            "version": "1.7.0"
          },
          {
            "sample": null,
            "script": "",
            "version": "1.7.5"
          }
        ],
        "dateModified": 1610962978487
      },
      {
        "id": "d6145e55-1d9d-4321-9830-cecf06189dfa",
        "version": "1.4.7",
        "cacheVersion": "477abc29-3a00-46c0-9556-eb741025f8aa",
        "originalSource": "f0757fd6-b2f0-4fa6-a20a-1b481a95b85a",
        "label": "Change Merge Field Data",
        "icon": "change_data",
        "iconType": "default",
        "iconUrl": "",
        "shape": "square",
        "description": "Step allows to assign a different value and/or change data type of an existing variable stored in a merge field object.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "function getDataout(varName, varType, steps){\n  for(const [key, value] of Object.entries(steps)){\n    if(_.isObject(value.dataOut)){\n      if(_.isEqual(value.dataOut.name, varName.split('.')[0]) && _.isEqual(value.dataOut.type, varType)){\n        return {...value.dataOut, name : varName};\n      }\n    }else{\n      if(_.isEqual(value.dataOut, varName.split('.')[0])){\n        return {name : value.dataOut, type : 'session'};\n      }\n    }\n  }\n  if(!_.find(Object.values(steps), step => step.dataOut && _.isEqual(step.dataOut.name, varName))){\n    return {name : varName, type : varType};\n  }\n}\n\nlet vars = _.map(variables, variable => {\n  if (!variable.variableName.label || variable.variableName.label === '' || variable.variableName.label === ``) throw new Error(\"Property name can't be empty.\");\n\n  return {...getDataout(variable.variableName.label, variable.variableName.type,  this.steps), valueType: variable.valueType, variableValue: variable.variableValue}\n})\n\nawait Promise.each(vars, async item => {\n  const name = item.name.split(/[.||[]+/)[0];\n  const path = item.name.replace(name, \"\").replace(/^\\./, '');\n\n  if (item.valueType === 'string') {\n    await this.mergeFields[name].set(String(item.variableValue), path);\n    \n    \n  } else if (item.valueType === 'number') {\n    if (_.isEmpty(item.variableValue) || _.isEmpty(item.variableValue.trim())) throw new Error(\"Value can't be empty.\");\n    \n    if(!_.isFinite(_.toNumber(item.variableValue))){\n      throw new Error(`Incorrect data type was used for ${item.name}`);\n    }\n    await this.mergeFields[name].set(Number(item.variableValue), path);\n  } else if (item.valueType === 'boolean') {\n    \n    if(!_.isBoolean(item.variableValue)){\n      throw new Error(`Incorrect data type was used for ${item.name}`);\n    }\n    await this.mergeFields[name].set(item.variableValue, path);\n  } else if (item.valueType === 'null') {\n    await this.mergeFields[name].set(null, path);\n  } else {\n    await this.mergeFields[name].set(item.variableValue, path);\n  }\n});\nreturn this.exitStep('next');",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "variables": [],
          "mountedFlag": false,
          "processError": true,
          "changeDataStepErrors": [],
          "additionalMergeFields": [],
          "isInvalidChangeDataStep": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "\nStep allows to assign a different value and/or change data type of an existing variable stored in a merge field object. Multiple variables can change their value via *Add merge field property* button, but at least one must be defined.\n\n### Change merge field data\n\nThe variable is chosen from the dropdown and represents the merge field name of the step or its property name. Any variable can change its value only once during the step execution.\n\nThe new *value* can be defined manually, with *merge field values* or left empty. *String*, *number*, *boolean* and *null* data types are available in the dropdown, as well as an option to declare more advanced types, like objects and arrays, in code mode. The *value* input will be validated in accordance with to the chosen data type.\n\nNote that changing **shared** merge field data is possible via chained flows (e.g. between flows that use Trigger steps), where each flow in the chain has a common `beginningSessionId`. The **global** merge field data can be changed only for steps within the current bot.\n\n### Error handling\n\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. the *value* does not match the selected *data type*).\n\n### Reporting events\n\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n## Release notes\n\nv1.4.7\n- UI validation for non-existent merge fields was added\n- Added opportunity to re-add step back to the working tree without losing previously selected session's merge fields.\n\nv1.0.0\n- Initial release",
        "formBuilder": {
          "stepExits": [
            {
              "id": "8882860d-7c83-4d78-b77d-47d67fdb7b01",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "c3eaf15d-c4c4-4f82-b2c6-a58dcbe5b55d",
              "data": {
                "open": true,
                "header": "Change merge field data",
                "inputs": [
                  {
                    "id": "e468d1ed-daf2-4f68-9ede-5dd1d8a7f2fb",
                    "data": {
                      "data": "{\n  \"variables\": [],\n  \"isInvalidChangeDataStep\": false,\n  \"changeDataStepErrors\": [],\n  \"mountedFlag\": false,\n  \"additionalMergeFields\":[]\n}",
                      "toJson": " function toJson(data, key) { \r\n if (_.isArray(data)) { \r\n    return `[${_.map(data, toJson).join(',')}]`;\r\n    }\r\n    if (_.isObject(data)) {\r\n        return `{${_.map(data, (value, key) => `${_.isEmpty(key) ? `\"\"`: key}: ${toJson(value, key)}`).join(',')}}`;\r\n    }\r\n      if(_.isEqual(key,'variableValue')){\r\n      return data;\r\n    }\r\n    return JSON.stringify(data);\r\n}\r\n \r\nreturn _.mapValues(data, toJson);",
                      "validators": "variables : {\n  $each: {\n    variableName: {\n      custom (value, ctx) {\n        return _.chain(mergeFields).reduce((acc, item) => acc.concat(item.variables), []).some(['variableName', value.label]).value();\n      }\n    }\n  },\n  custom (value, ctx) {\n    let steps = _.filter(this.steps, step => !_.isEqual(step.type, \"empty\"));\n    \n    let dataOuts = _.map(steps, step => _.isObject(step.data.dataOut) ?  step.data.dataOut : {name:step.data.dataOut, type : 'session'});\n    \n    if(_.get(ctx, 'additionalMergeFields[0].variables') && _.get(ctx, 'additionalMergeFields[1].variables')){\n      dataOuts = [...dataOuts, ...(_.get(ctx, 'additionalMergeFields[0].variables')), ...(_.get(ctx, 'additionalMergeFields[1].variables'))]\n    }\n    \n    let res = true;\n    \n    for (let i = 0; i <= value.length - 1; i++) {\n      if (_.isEmpty(_.trim(value[i].variableName.label))) {\n        this.schema.isInvalidChangeDataStep = true;\n        res = false;\n      } else {\n        for (let j = i + 1; j <= value.length - 1; j++) {\n          if (value[i].variableName.label === value[j].variableName.label && value[i].variableName.type === value[j].variableName.type) {\n            this.schema.isInvalidChangeDataStep = true;\n             res = false;\n          }\n        }\n      }\n      \n      let containsMergeField = _.isString(value[i].variableValue) && validators.validateExpression(value[i].variableValue);\n      \n      if(\n        (value[i].valueType === 'number' && !value[i].variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/) || \n        value[i].valueType === 'number' && !(value[i].variableValue.slice(1,-1) && !_.isEmpty(value[i].variableValue.slice(1,-1)) && (containsMergeField || _.isFinite(_.toNumber(value[i].variableValue.slice(1,-1))))) ||\n        value[i].valueType === 'code' && !validators.jsExpression(value[i].variableValue)) && !/await|this/.test(value[i].variableValue)\n      ){\n        this.schema.isInvalidChangeDataStep = true;\n        res = false;\n      }\n    }\n    \n    this.schema.isInvalidChangeDataStep = false;\n    \n    return res;\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard v-model=\"schema.variables\"  :additionalMergeFields.sync=\"schema.additionalMergeFields\" :mounted-flag.sync=\"schema.mountedFlag\"   :schema=\"schema\"     :is-invalid-change-data-step.sync=\"schema.isInvalidChangeDataStep\" :change-data-step-errors.sync=\"schema.changeDataStepErrors\" :steps.sync=\"steps\" :isNew=\"isNew\"   :stepId=\"stepId\" :merge-fields=\"mergeFields\"   :v=\"$v\"   :readonly=\"readonly\" ></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xyzoafgblsvcirwjnqekpmthud",
                      "componentLogic": "{\n  components: {\n    variableItem: {\n      props: {\n        variableName: {\n          type: String,\n          default: ''\n        },\n        variableValue: {\n          default: ''\n        },\n        valueType: {\n          type: String,\n          default: 'string'\n        },\n        variables: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        isNew:{\n          type: Boolean,\n          default: false\n        },\n        steps: '',\n        stepId: '',\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        readonly: {\n          type: Boolean,\n          default: false\n        }\n      },\n      \n      computed: {\n        invalidValue(){\n          const invalid = (this.valueTypeLocal === 'number' && !this.isValidNumber) || \n            (this.valueTypeLocal === 'code' && !validators.jsExpression(this.variableValueLocal)) ||\n            (this.valueTypeLocal === 'code' && this.variableValueLocal === '')\n            \n          if (invalid) {\n            this.valueErrorText = this.valueTypeLocal === 'number' \n              ? 'Invalid number.' \n              : 'Please enter a valid JS expression.';\n          }\n          \n          if (this.valueTypeLocal === 'number') {\n            this.checkNumber()\n          }\n          \n          return invalid\n        },\n        \n        isValidNumber(){\n          const checked =  this.checkNumber();\n          \n          let containsMergeField = validators.validateExpression(this.variableValue);\n          \n          return checked || _.isFunction(this.variableValue.slice) && \n            (this.variableValue.slice(1,-1) && !_.isEmpty(this.variableValue.slice(1,-1)) && (_.isFinite(_.toNumber(this.variableValue.slice(1,-1))) || containsMergeField) && \n            this.variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/));\n        },\n        \n        isNull () {\n          return this.valueTypeLocal === 'null';\n        },\n        \n        variableNameLocal: {\n          get() {\n            return this.variableName || ''\n          },\n          \n          set(newValue) {\n            this.$emit('update:variableName', newValue);\n            if (this.$parent.$parent.mountedFlag) {\n              this.validateVariableName(newValue || '');\n            }\n          }\n        },\n        \n        variableValueLocal: {\n          get() {\n            return this.variableValue || '';\n          },\n          set(newValue) {\n            this.$emit('update:variableValue', newValue);\n            this.$nextTick(() => this.validateVariableValue(newValue));\n          }\n        },\n        \n        valueTypeLocal: {\n          get() {\n            return this.valueType;\n          },\n          \n          set(newValue) {\n            if (newValue === 'string' || newValue === 'number') {\n              this.variableValueLocal = '``'\n            } else if (newValue === 'boolean') {\n              this.variableValueLocal =  _.isBoolean(this.variableValueLocal) ? this.variableValueLocal : true;\n            } else if (newValue === 'null') {\n              this.variableValueLocal = '`null`';\n            } else if (newValue === 'code') {\n              this.variableValueLocal = ''\n            }\n            \n            this.$emit('update:valueType', newValue);\n            \n            this.$nextTick(() => this.validateVariableValue(this.variableValueLocal, newValue));\n          }\n        }\n      },\n  \n      data () {\n        return {\n          variableTypeOptions: ['string', 'number', 'boolean', 'null', 'code'],\n          isInvalidVariableName: false,\n          isInvalidVariableValue: false,\n          errorText: 'Property name is required.',\n          valueErrorText: 'Value is required.',\n          isTextInput: true,\n          variableSelectOptions: []\n        }\n      },\n      \n      watch: {\n        variables(v) {\n          this.$root.$emit('validateVariable');\n        }\n      },\n      \n      methods: {\n        checkNumber () {\n          if (/await|this/.test(this.variableValue)) return true\n          \n          this.valueErrorText =  _.isFunction(this.variableValue.slice) && this.variableValue.slice(1,-1).trim() === '' ? 'Value is required.' : 'Invalid number'\n          \n          if (_.isFunction(this.variableValue.slice) && /^\\s+$/.test(this.variableValue.slice(1,-1))) {\n            this.valueErrorText = 'Value is required.'\n          }\n          \n          return false\n        },\n        \n        afterHandleTypeChange (type) {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              const showText = _.get(this, '$refs.variableValueInput.showText')\n              if (type === 'code' || (type !== 'code' && !showText)) {\n                this.toggleInputMode()\n              }\n              resolve()\n            }, 100) \n          })\n        },\n        \n        async handleTypeChange (type) {\n          this.valueTypeLocal = type\n          \n          if (type === 'number') this.checkNumber()\n          \n          await this.afterHandleTypeChange()\n        },\n        \n        validateVariableName (varName, isFromEmit = false) {\n          this.isInvalidVariableName = false;\n          \n          if (_.isEmpty(_.trim(varName.label))) {\n            this.errorText = 'Property name is required.';\n            this.isInvalidVariableName = true;\n          } else {\n            let variables = _.clone(this.variables);\n            let duplicates = _.filter(variables, elem => _.isEqual(elem.variableName.type, varName.type)).map(item => item.variableName.label)\n                                    .filter((item, index, arr) => arr.lastIndexOf(item) == index && arr.indexOf(item)!= index);\n\n            if (duplicates.indexOf(varName.label) > -1) {\n              this.errorText = 'Choose another property name.';\n              this.isInvalidVariableName = true;\n            }\n          }\n          \n          if (!_.isEmpty(_.trim(varName.label)) && ! _.chain(this.mergeFields).reduce((acc, item) => acc.concat(item.variables), []).some(['variableName', varName.label]).value()) {\n              this.errorText = `Selected value isn't available.`;\n              this.isInvalidVariableName = true;\n            }\n          \n          if(!isFromEmit) this.$root.$emit('validateVariable', this._uid);\n        },\n        \n        populateSelect() {\n          const findType = (variables, label) => {\n            const item = variables.find(item => item.stepLabel === label && item.type)\n            \n            return _.get(item, 'type', null)\n          }\n          \n          this.variableSelectOptions = this.mergeFields.reduce((acc, fields) => {\n            \n            const variables = fields.variables\n            \n            if (variables.length > 0) {\n              acc.push({\n                groupLabel: _.get(fields, 'variables[0].type'),\n                items: variables.reduce((acc2, variable) => {\n                  if (variable && !/.+\\.$/.test(variable.variableName)) {\n                    acc2.push({\n                      label: variable.variableName,\n                      value: {\n                        label: variable.variableName, \n                        type: variable.type || findType(variables, variable.stepLabel),\n                      }\n                    })\n                  }\n                  return acc2;\n                }, [])\n              })\n            }\n            return acc\n          }, [])\n        },\n        \n        validateVariableValue (value, valueType) {\n          if (this.isInvalidVariableValue) this.isInvalidVariableValue = false;\n          let type = valueType ? valueType : this.valueType;\n          \n          if (type === 'number' && !this.$refs.variableValueInput.mergeFieldInUse) {\n            const isNumber =_.isFinite(_.toNumber(value.slice(1,-1)));\n            if (!_.trim(value.slice(1,-1)).length) {\n              this.valueErrorText = 'Value is required.';\n              this.isInvalidVariableValue = true;\n              return false;\n            } else if (!isNumber) {\n              this.valueErrorText = 'Invalid number';\n              this.isInvalidVariableValue = true;\n              return false;\n            }\n          }\n          \n          if (!validators.jsExpression(value)) {\n            this.valueErrorText = 'Please enter a valid JavaScript expression.'\n            this.isInvalidVariableValue = true;\n            return false;\n          }\n\n          return true;\n        },\n        toggleInputMode () {\n          if(_.get(this, '$refs.variableValueInput.toggleMode')) this.$refs.variableValueInput.toggleMode()\n        }\n      },\n      \n      created () {\n        this.$emit(\"update:additionalMergeFields\", this.mergeFields);\n      },\n      \n      mounted () {\n        this.populateSelect();\n        \n        if(!this.isNew && _.isEmpty(this.variableName)){\n          this.valueErrorText = 'Value is required.';\n          this.isInvalidVariableName = true;\n        }\n        \n        \n        if (this.valueType === 'code') {\n          this.toggleInputMode()\n        }\n        \n        if (this.valueType === 'string' && this.variableValueLocal === '') {\n          this.variableValueLocal = '``'\n        }\n        \n        if (this.valueType === 'number') {\n          this.checkNumber()\n        }\n        \n        this.$root.$on('validateVariable', itemId => {\n          if (itemId !== this._uid) this.validateVariableName(this.variableName, true);\n        });\n        \n        if (this.$refs.variableValueInput) this.isTextInput = this.$refs.variableValueInput.displayTextInput;\n        \n        if (this.$parent.$parent.mountedFlag) {\n          this.validateVariableName(this.variableName || '');\n        } else {\n          this.$parent.$parent.$emit('update:mountedFlag', true);\n        }\n      },\n      \n      template: `<%= variableItem %>`\n    }\n  },\n  \n  watch: {\n    variables: {\n      handler (newValue) {\n        const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n        \n        if(currentIndexStep !== -1) {\n          const outputExample = {};\n          _.forEach(newValue, item => {\n            _.set(outputExample, `${item.variableName.name}`, item.variableValue);\n          });\n          this.steps[currentIndexStep]['outputExample'] = outputExample;\n        }\n        this.$emit('input', newValue);\n        \n        this.isSharedOrGlobal()\n      },\n      deep: true\n    }\n  },\n    \n  created () {\n    this.populateSelect()\n\n    this.isSharedOrGlobal()\n  },\n  \n  async mounted () {\n    await this.$nextTick();\n    if (!_.isArray(this.value) || this.value.length === 0) this.$refs.variablesOrList.addItem();\n  },\n  \n  updated () {\n\t  this.isSharedOrGlobal()\n\t},\n \n  data () {\n    return {\n      variables: this.value,\n      newVariable () {\n        return {\n          variableName: '',\n          variableValue: '',\n          valueType: 'string'\n        };\n      },\n      isSharedOrGlobalMergeFieldSelected: false\n    }  \n  },\n  \n  methods: {\n    isSharedOrGlobal () {\n      const arrOfVariableSelectOptions = this.variableSelectOptions.reduce((acc, item) => [...acc, ...item.items], [])\n      \n      this.isSharedOrGlobalMergeFieldSelected = this.variables.some(item =>\n  \t   // _.get(item, 'variableName.type') === 'shared' || \n  \t   // _.get(item, 'variableName.type') === 'global' ||\n  \t    _.get(_.find(arrOfVariableSelectOptions, ['label', _.get(item, 'variableName.label')]), 'value.type') === 'shared' ||\n  \t    _.get(_.find(arrOfVariableSelectOptions, ['label', _.get(item, 'variableName.label')]), 'value.type') === 'global' \n  \t  )\n    },\n    \n    populateSelect() {\n      const findType = (variables, label) => {\n      const item = variables.find(item => item.stepLabel === label && item.type)\n        return _.get(item, 'type', null)\n      }\n      \n      this.variableSelectOptions = this.mergeFields.reduce((acc, fields, i) => {\n        const variables = fields.variables;\n        \n        if (variables.length > 0) {\n          acc.push({\n            groupLabel: _.get(fields, 'variables[0].type'),\n            items: variables.reduce((acc2, variable) => {\n              if (variable && !/.+\\.$/.test(variable.variableName)) {\n                acc2.push({\n                  label: variable.variableName,\n                  value: {\n                    label: variable.variableName,\n                    type: variable.type || findType(variables, variable.stepLabel),\n                  }\n                })\n              }\n              return acc2;\n            }, [])\n          });\n        }\n      \n        return acc;\n      }, []);\n      \n      // this.checkSettedMergeFieldExistance()\n    },\n    \n    // checkSettedMergeFieldExistance () {\n    //   const items = _.get(this, 'variables')\n    //   let varsOptions = _.get(this, 'variableSelectOptions')\n    //   varsOptions = varsOptions.reduce((acc, item) => [...acc, ...item.items], [])\n      \n    //   if (items && varsOptions) {\n    //     const _variables = items.reduce((acc, item) => {\n    //       if (\n    //           varsOptions.find(field => {\n    //             return (\n    //               _.get(field, 'label') ===\n    //               _.get(item, 'variableName.label', '')\n    //             )\n    //           })\n    //       ) {\n    //           acc.push(item);\n    //       } else {\n    //         const _item = _.cloneDeep(item)\n    //         // _item.variableName = ''\n    //         acc.push(_item);\n    //       }\n    //       return acc;\n    //   }, []);\n      \n    //   this.variables = _variables;\n    //   }\n    // }\n  },\n  \n  props: {\n    value: {\n      type: Array\n    },\n    additionalMergeFields:{\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    schema: ()=>{},\n    mountedFlag: {\n      type: Boolean,\n      default: false\n    },\n    v: {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            variables: [],\n            additionalMergeFields:[]\n          }\n        }\n      }\n    },\n    isInvalidChangeDataStep: {\n      type: Boolean,\n      default: false\n    },\n    changeDataStepErrors: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    steps: '',\n    stepId: '',\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    isNew:{\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  \n  computed: {\n    changeDataStepErrorsLocal: {\n      get() {\n        return this.changeDataStepErrors;\n      },\n      set(newValue) {\n        this.$emit('update:changeDataStepErrors', newValue);\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-alert \n  :dismissible=\"false\"\n  type=\"warning\" \n  v-show=\"isSharedOrGlobalMergeFieldSelected\"\n>\n  How to work with shared or global merge field data is described in the step help.\n</or-alert>\n<div v-if=\"!variables.length\" class=\"empty-list\">Your variables list is empty.</div>\n<or-list\n  v-model=\"variables\" \n  ref=\"variablesOrList\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\"\n  :new-item-method=\"newVariable\"\n  :add-button-label=\"'Add merge field property'\"\n  :can-remove-last-item=\"false\"\n  class=\"variables-list\"\n>\n  <template scope=\"item\">\n    <variable-item \n      :variable-name.sync=\"item.item.variableName\"\n      :variable-value.sync=\"item.item.variableValue\"\n      :value-type.sync=\"item.item.valueType\"\n      :variables=\"variables\"\n      :isNew=\"isNew\"\n      :steps=\"item.steps\" \n      :step-id=\"item.stepId\"\n      :merge-fields=\"mergeFields\"\n      :readonly=\"item.readonly\"\n    ></variable-item>\n  </template>\n</or-list>",
                      "wildcardTemplates": [
                        {
                          "id": "263b21ef-fe09-4dd3-bf91-a2bfa7d8000d",
                          "mode": "html",
                          "title": "Variable Item",
                          "template": "  <div class=\"variable\">\n  <div class=\"variable__name\">\n    <or-select \n      style=\"color: red\"\n      has-search\n      label=\"Property name\"\n      placeholder=\"Choose name\"\n      :disabled=\"readonly\"\n      v-model=\"variableNameLocal\"\n      :multiple =\"false\"\n      :options =\"variableSelectOptions\"\n      :error=\"errorText\"\n      :invalid=\"isInvalidVariableName\"\n      :steps=\"steps\" \n      :step-id=\"stepId\"\n      :has-groups=\"true\"\n      :merge-fields=\"mergeFields\"\n    ></or-select>\n  </div>\n  <div class=\"variable__value\">\n    <div class=\"select-wrapper\">\n      <div class=\"select-label\">Value</div>\n        <or-select\n        ref=\"valueTypeSelect\"\n        label=\"\"\n        :disabled=\"readonly\"\n        :class=\"[{ valueTypeSelect : valueTypeLocal === 'code' }]\"\n        :options=\"variableTypeOptions\"\n        v-model=\"valueTypeLocal\"\n        @change=\"handleTypeChange\"\n      ></or-select>\n    </div>\n    <or-text-expression v-if=\"valueTypeLocal !== 'boolean'\"\n      v-model=\"variableValueLocal\"\n      ref=\"variableValueInput\"\n      :readonly=\"readonly || isNull\"\n      label=\"\"\n      :error=\"valueErrorText\"\n      :invalid=\"invalidValue\"\n      placeholder=\"Enter value\"\n      :steps=\"steps\" \n      :step-id=\"stepId\"\n      :merge-fields=\"mergeFields\"\n    ></or-text-expression>\n    <or-radio-group v-else\n      name=\"Value bool radio\"\n      :disabled=\"readonly\"\n      :options=\"[true, false]\"\n      v-model=\"variableValueLocal\"\n    >\n    </or-radio-group>\n    <span \n      class=\"value-type-helper\"\n      v-if=\"this.valueType === 'number'\"\n    >Value should match the selected data type.\n    </span>\n  </div>\n</div>",
                          "variable": "variableItem"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.ui-button {\n  margin-left: 10px;\n}\n\n.variables-list {\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  \n  .or-list-items {\n    width: 100%;\n    margin-bottom: 15px;\n  }\n  \n  > button.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  \theight: 30px;\n  \tmargin: 30px auto 0;\n  \tborder-radius: 6px;\n  \tbackground-color: #64B2DA;\n  \tcolor: #FFFFFF;\n  \tfont-size: 14px;\n  \tline-height: 14px;\n  }  \n  \n  &.or-list {\n    \n    .list-item {\n      position: relative;\n      margin-right: -25px;\n      padding: 0 25px 0 0;\n      //padding: 0 36px 0 0;\n      \n      > .remove-button {\n      \tposition: absolute;\n        right: 0;\n        top: 36px;\n        width: 1.5rem;\n      }\n      \n      .handle,\n      .sortable-handle {\n        // display: none;\n        margin-top: 42px;\n        align-self: flex-start;\n      }\n    }\n    \n    &.single-item {\n      \n      .list-item {\n        padding-left: 0;\n      }\n    }\n  }\n}\n\n// .variable__name .ui-select__content .ui-select__display-value {\n//   overflow: hidden;\n//   text-overflow: ellipsis;\n//   white-space: nowrap;\n//   width: 1px;\n// }\n\n.variables-list .variable {\n  width: 100%;\n  display: flex;\n  \n  &__name {\n    width: 50%;\n    padding-right: 21px;\n\n    .ui-select {\n      &__dropdown {\n        top: 100%;\n        left: 0;\n        width: 100%;\n        min-width: auto;\n      }\n      \n      &__content {\n        width: 100%;\n        \n        .ui-select__label .ui-select{ \n          &__display {\n            display: flex;\n            justify-content: space-between;\n            padding: 2px 0px 2px 10px;\n            \n            &-value {\n              overflow: hidden;\n              text-overflow: ellipsis;\n              white-space: nowrap;\n              width: 1px;\n            }\n          }\n          \n          &__dropdown-button {\n            right: 0;\n          }\n        }\n      }\n \n      &.is-invalid .ui-select__feedback {\n        &-text {\n          visibility: visible;\n        }\n      }\n    }\n  }\n  \n  &__value {\n      width: 50%;\n    \n    .input-wrapper {\n      position: relative;\n      display: flex;\n      \n      &:after {\n        content: '=';\n        position: absolute;\n        top: 18px;\n        left: -15px;\n        color: #0F232E;\n        font-size: 14px;\n        transform: translateY(-50%);\n      }\n      \n      .or-editable-wrapper {\n        display: flex;\n        width: 1px;\n        flex-grow: 1;\n        \n        .placeholder {\n          position: absolute;\n          margin-top: 0;\n        }\n        \n        .merge-tag input {\n          // text-overflow: ellipsis;\n        }\n      }\n      \n      .or-code {\n        width: 100%;\n      }\n    }\n    \n    .error-text {\n      margin-top: 4px;\n    }\n    \n    .ui-select {\n      &__dropdown {\n        top: 100%;\n        right: 0;\n        width: auto;\n        min-width: auto;\n      }\n      \n      &__options {\n        min-width: auto;\n      }\n    }\n    \n    .ui-select,\n    .or-text-expression {\n      margin-bottom: 0;  \n    }\n    \n    .or-text-expression.invalid .or-code .ace-wrapper {\n      border-color: #f95d5d;\n    }\n    \n    .ui-select__label {\n    \tdisplay: flex;\n    \tjustify-content: space-between;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n    }\n    \n    .ui-select__display-value {\n      flex-grow: 0;\n    }\n\n    .ui-select .ui-select__content .ui-select__label .ui-select__label-text {\n      white-space: nowrap;\n      font-size: 14px;\n    }\n    \n    .ui-select.has-label .ui-select__dropdown-button {\n      top: 0px;\n      font-size: 20px;\n      margin-top: 2px;\n    }\n    \n    .ui-radio-group {\n      &__label-text {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        font-size: 12px;\n        line-height: 36px;\n        color: rgb(145, 150, 157);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      \n      &__radio {\n        &:not(:first-child) {\n          margin-left: 10px;\n        }\n      }\n      \n      &__radios {\n        position: relative;\n        \n        &:after {\n          content: '=';\n          position: absolute;\n          top: 18px;\n          left: -15px;\n          color: #0F232E;\n          font-size: 14px;\n          transform: translateY(-50%);\n        }\n      }\n      \n      &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n      &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n        color: #91969d;\n      }\n    }\n    \n    .ui-radio .ui-radio__label-text {\n      font-size: 14px;\n      line-height: 24px;\n    }\n    \n    .ui-radio-group__radios {\n      display: flex;\n      justify-content: left;\n      height: 36px;\n      font-size: 14px;\n      border-radius: 3px;\n      padding: 7px 10px;\n      background: #f6f6f6;\n    }\n  }\n}\n\n.value-type-helper {\n  display: block;\n  color: rgba(0,0,0,.38);\n  line-height: 1.2;\n  font-size: 12px;\n}\n\n.or-text-expression {\n  position: relative;\n  flex-grow: 1;\n  min-width: 50%;\n  .ui-icon-button.ui-icon-button--type-secondary.ui-icon-button--color-default.ui-icon-button--size-normal.flat.js-mode-btn.active{\n    top:2px;\n    right:26px;\n  }\n  \n  .or-editable-wrapper .placeholder {\n    margin-top:0px;\n    position:absolute;\n  }\n  .or-code{\n    display: flex;\n    flex-grow: 1;\n    width: 0px;\n  }\n  \n  & >.header {\n    position: absolute;\n    height: 36px;\n    width: 100%;\n    min-height: 0;\n    top: -36px;\n    & >button.ui-icon-button.flat.add-variable {\n      visibility: visible;\n      position: absolute;\n      top: 38px;\n      right: 0;\n      z-index: 2;\n    }\n  }\n  \n  .input-wrapper {\n    width: 100%;\n  }\n\n  .js-mode-btn {\n    visibility: hidden;\n    position: absolute;\n    top: -2px;\n    right: 75px;\n    z-index: 2;\n  }\n\n \n\n  .editable {\n      width: calc(100% - 36px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n  .ace_scroller {\n      width: calc(100% - 77px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n}\n\n.select-label {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    min-width: 16px;\n    color: rgba(0, 0, 0, 0.54);\n    font-size: 12px;\n    line-height: 36px;\n    transform-origin: left;\n    transition: color .1s ease,transform .2s ease;\n}\n.select-wrapper {\n  display: flex;\n  justify-content: space-between;\n  .ui-select.ui-select--type-basic.ui-select--icon-position-left{\n    margin-left: 28px;\n  }\n  .ui-select__display-value, .ui-select__dropdown-button{\n      color: #64b2da !important;\n  }\n  .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n      z-index:3;\n    }\n}\n\n.valueTypeSelect {\n  margin-right: 30px;\n}\n\n.js-mode-btn {\n  display: none;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            }
          ],
          "outputExample": null,
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "variables": [],
                "mountedFlag": false,
                "changeDataStepErrors": [],
                "isInvalidChangeDataStep": false
              },
              "rawMode": false,
              "version": "aae945b3-dca9-4711-8464-7da9e44b06cc",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "8882860d-7c83-4d78-b77d-47d67fdb7b01",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "script": "",
            "version": "1.4.7"
          }
        ],
        "dateModified": 1660840835271
      },
      {
        "id": "74926c4c-bf28-4099-b152-f00b76ced380",
        "version": "0.5.29",
        "cacheVersion": "ab2fcf59-8ab0-4f99-a77b-37a9c9c5f37a",
        "label": "Convert HTML into PDF or Image",
        "icon": "convert_html_to_pdf",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "[alpha] Step allows to create PDF or Image based on data at the provided URL or based on HTML code.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Pre-release",
          "HTML",
          "PDF"
        ],
        "recommended": [],
        "tags": [],
        "template": "const Request   = require('or-sdk/request');\nconst request   = new Request(this);\nconst timestring = require('timestring');\n\nconst fileSettings = {\n  assetsUrl : assetsUrl, \n  fileName :  newName.slice(0, 99),\n  filePath : `/${filePath}`\n}\n\nconst fileSource = fileSourceType === 'url' ? urlSource : htmlSource;\n\nif (!fileSource) {\n  throw new Error('The source is not defined');\n}\n\nif (!fileSettings.fileName.replace(/\\s/g, '').length) {\n    throw new Error('File name can\\'t be empty');\n}\n\nif (!filePath.replace(/\\s/g, '').length) {\n    throw new Error('Folder name can\\'t be empty');\n}\n\nconst fileNameRegex = /^([\\w- '!_.*()]+){0,}$/;\nif (!fileNameRegex.test(fileSettings.fileName)) {\n    this.log.warn('File name will be changed according to naming standarts')\n}\n\n// Setting maximum navigation timeout\nlet defaultNavigationTimeout = 5 * 1000; // default value 5s\ntry {\n  defaultNavigationTimeout = timestring(_.isNumber(maxNavigationTimeout) ? `${maxNavigationTimeout} ms` : maxNavigationTimeout, 'ms');\n} catch (error) {\n    throw new Error(`Failed to parse timeout value \"${maxNavigationTimeout}\".`);\n}\n\nif (defaultNavigationTimeout === 0) {\n  throw new Error(`Failed to parse timeout value \"${defaultNavigationTimeout}\".`);\n}\n\nif (defaultNavigationTimeout < 1000 || defaultNavigationTimeout > 30000) {\n  throw new Error(`Timeout value must be in range from 1 second to 30 seconds.`);\n}\n\n// Setting webpage load waiting time\ntry {\n  loadWaitingTime = timestring(_.isNumber(loadWaitingTime) ? `${loadWaitingTime} ms` : loadWaitingTime, 'ms');\n} catch (error) {\n    throw new Error(`Failed to parse webpage load waiting time value \"${loadWaitingTime}\".`);\n}\n\nif (loadWaitingTime === 0) {\n  throw new Error(`Failed to parse webpage load waiting time value \"${loadWaitingTime}\".`);\n}\n\nif (loadWaitingTime < 1000 || loadWaitingTime > 20000) {\n  throw new Error(`Webpage load waiting time value must be in range from 1 second to 20 seconds.`);\n}\n\nlet body = {\n  src: fileSource,\n  //acl: makeFilePrivate ? \"private\" : \"public-read\",\n  // returnBuffer: false,\n  browser: {\n    javaScriptEnabled: true,\n    loadWaitingTime,\n    defaultNavigationTimeout\n  }\n}\n\nif (fileType === 'pdf') {\n  body.pdf = {\n    marginTop    : topMargin ? parseFloat(topMargin) : 0,\n    marginBottom : bottomMargin ? parseFloat(bottomMargin) : 0,\n    marginLeft   : leftMargin ? parseFloat(leftMargin) : 0,\n    marginRight  : rightMargin ? parseFloat(rightMargin) : 0\n  };\n  \n  let verticalMarginSize = body.pdf.marginTop + body.pdf.marginBottom;\n  let horizontalMarginSize = body.pdf.marginLeft + body.pdf.marginRight;\n  \n//   let verticalMarginSize;\n//   let horizontalMarginSize;\n//   switch (marginUnits) {\n//     case 'in':\n//       verticalMarginSize = topMargin + bottomMargin;\n//       horizontalMarginSize = leftMargin + rightMargin;\n//       break;\n      \n//     case 'px':\n//       // 1 inch equals to 96 vertical pixels and to 72 horizontal pixels\n//       verticalMarginSize = topMargin/96 + bottomMargin/96;\n//       horizontalMarginSize = leftMargin/72 + rightMargin/72;\n//       break;\n    \n//     case 'cm':\n//       let inchesInCm = 0.393701;\n//       verticalMarginSize = topMargin*inchesInCm + bottomMargin*inchesInCm;\n//       horizontalMarginSize = leftMargin*inchesInCm + rightMargin*inchesInCm;\n//       break;\n      \n//     case 'mm':\n//       let inchesInMm = 0.0393701;\n//       verticalMarginSize = topMargin*inchesInMm + bottomMargin*inchesInMm;\n//       horizontalMarginSize = leftMargin*inchesInMm + rightMargin*inchesInMm;\n//       break;\n      \n//     default:\n//       break;\n//   }\n\n  if (pdfViewType === 'predefined') {\n    body.pdf.landscape = pdfPredefinedOrientation.toLowerCase() === 'landscape' ? true : false;\n    pdfPredefinedSize = pdfPredefinedSize.toLowerCase();\n    \n    const printFormats = {\n      letter: {\n        width: 8.5,\n        height: 11\n      },\n      legal: {\n        width: 8.5,\n        height: 14\n      },\n      tabloid: {\n        width: 11,\n        height: 17\n      },\n      ledger: {\n        width: 17,\n        height: 11\n      },\n      a0: {\n        width: 33.1,\n        height: 46.8\n      },\n      a1: {\n        width: 23.4,\n        height: 33.1\n      },\n      a2: {\n        width: 16.5,\n        height: 23.4\n      }, \n      a3: {\n        width: 11.7,\n        height: 16.5\n      },\n      a4: {\n        width: 8.27,\n        height: 11.7\n      },\n      a5: {\n        width: 5.83,\n        height: 8.27\n      },\n      a6: {\n        width: 4.13,\n        height: 5.83\n      }\n    }\n\n    if (!printFormats[pdfPredefinedSize]) throw new Error('Invalid pdf format');\n    if (verticalMarginSize >= printFormats[pdfPredefinedSize].height) throw new Error('Page height must be greater than the vertical margin');\n    if (horizontalMarginSize >= printFormats[pdfPredefinedSize].width) throw new Error('Page width must be greater than the horizontal margin');\n\n    body.pdf.paperHeight = printFormats[pdfPredefinedSize].height;\n    body.pdf.paperWidth = printFormats[pdfPredefinedSize].width;\n    \n  } else if (pdfViewType === 'custom') {\n    if (pdfCustomHeight <= 0) throw new Error('Height must be greater than 0');\n    if (pdfCustomWidth <= 0) throw new Error('Width must be greater than 0');\n    \n//     let heightInInches;\n//     let widthInInches;\n//     switch (pdfSizeUnits) {\n//       case 'in':\n//         heightInInches = pdfCustomHeight;\n//         widthInInches = pdfCustomWidth;\n//         break;\n        \n//       case 'px':\n//         // 1 inch equals to 96 vertical pixels and to 72 horizontal pixels\n//         heightInInches = pdfCustomHeight/96;\n//         widthInInches = pdfCustomWidth/72;\n//         break;\n      \n//       case 'cm':\n//         let inchesInCm = 0.393701;\n//         heightInInches = pdfCustomHeight*inchesInCm;\n//         widthInInches = pdfCustomWidth*inchesInCm;\n//         break;\n        \n//       case 'mm':\n//         let inchesInMm = 0.0393701;\n//         heightInInches = pdfCustomHeight*inchesInMm;\n//         widthInInches = pdfCustomWidth*inchesInMm;\n//         break;\n        \n//       default:\n//         break;\n//     }\n\n    if (verticalMarginSize > pdfCustomHeight) throw new Error('Vertical margin is greater than print page height');\n    if (horizontalMarginSize > pdfCustomWidth) throw new Error('Horizontal margin is greater than print page width');\n\n    body.pdf.paperWidth = pdfCustomWidth;\n    body.pdf.paperHeight = pdfCustomHeight;\n  }\n\n  body.pdf.printBackground = backgroundToPdf;\n  body.pdf.displayHeaderFooter = headerTemplate || footerTemplate ? true : false;\n  if (headerTemplate) body.pdf.headerTemplate = headerTemplate;\n  if (footerTemplate) body.pdf.footerTemplate = footerTemplate;\n//   body.browser.emulateMedia = websitePrintVersion ? \"print\" : \"screen\";\n  // body.pdf.margin = {\n  //   top    : topMargin + marginUnits,\n  //   bottom : bottomMargin + marginUnits,\n  //   left   : leftMargin + marginUnits,\n  //   right  : rightMargin + marginUnits\n  // };\n\n} else if (fileType === 'image') {\n//   body.screenshot = {\n//     fullPage: fullPageScreenShot\n//   };\n  body.screenshot = {};\n  body.browser.viewport = {\n    mobile: isMobileVersion\n  };\n  \n  body.browser.userAgent = isMobileVersion ? \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Mobile Safari/537.36\"\n                                            : \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n\n  if (imageSize === 'custom') {\n    body.resize = {\n      height: parseFloat(imageSizeCustomHeight),\n      width: parseFloat(imageSizeCustomWidth)\n    }\n  } else if (imageSize === 'clip') {\n    if (imageSizeClipHeight <= 0) throw new Error('Clip height must be greater than 0');\n    if (imageSizeClipWidth <= 0) throw new Error('Clip width must be greater than 0');\n    if (imageSizeClipHeight > 10000) throw new Error('Clip height can\\'t be greater than 10000');\n    if (imageSizeClipWidth > 10000) throw new Error('Clip width can\\'t be greater than 10000');\n    \n    body.screenshot.clip = {\n      x      : parseFloat(imageSizeClipXOffset),\n      y      : parseFloat(imageSizeClipYOffset),\n      width  : parseFloat(imageSizeClipWidth),\n      height : parseFloat(imageSizeClipHeight)\n    }\n  }\n\n  if (websiteResolution === 'screen') {\n    body.browser.viewport.width = 1366;\n    // body.browser.viewport.height = 768;\n  } else if (websiteResolution === 'tablet') {\n    body.browser.viewport.width = 768;\n    // body.browser.viewport.height = 1024;\n  } else if (websiteResolution === 'phone') {\n    body.browser.viewport.width = 375;\n    // body.browser.viewport.height = 667;\n  } else if (websiteResolution === 'custom') {\n    if (parseFloat(customResolutionWidth) < 0) throw new Error('Resolution width must be greater than 0');\n    if (parseFloat(customResolutionHeight) < 0) throw new Error('Resolution height width must be greater than 0');\n    if (parseFloat(customResolutionWidth) > 10000) throw new Error('Resolution width can\\'t be greater than 10000');\n    if (parseFloat(customResolutionHeight) > 10000) throw new Error('Resolution height can\\'t be greater than 10000');\n    body.browser.viewport.width = parseFloat(customResolutionWidth);\n    // body.browser.viewport.height = parseFloat(customResolutionHeight);\n  }\n\n  if (imageFileType !== 'png') body.screenshot.quality = parseFloat(imageQuality);\n//   body.screenshot.omitBackground = backgroundToImage;\n}\n\nconst fileExtension = fileType === 'pdf' ? fileType : imageFileType;\n// const converterUrl = `https://toolbox-staging.onereach.ai/convert/${fileSourceType}/${fileType}`;\n// // const converterUrl = `https://70e0772f.ngrok.io/convert/${fileSourceType}/${fileType}`\n// body.filename = `${fileSettings.filePath}${fileSettings.fileName}.${fileExtension}`.substr(1);\nbody.filename = `${fileSettings.fileName}.${fileExtension}`;\nbody.path = fileSettings.filePath;\n\n// const body = {\n//     \"src\": \"https://www.google.com\",\n//     \"filename\": \"converted.png\",\n//     \"browser\" : {\n//         \"javaScriptEnabled\": true,\n//         \"loadWaitingTime\": 1,\n//         \"viewport\": {\n//           \"screenOrientation\": {\n//             \"type\": \"portraitPrimary\",\n//             \"angle\": 45\n//           }\n//         }\n//     }\n// }\n// const converterUrl = `${this.helpers.toolboxUrl}/convert/url`\n\nconst sucessCallbackUrl = await request.post({\n  uri: `${this.helpers.toolboxUrl}/convert/${fileSourceType}`,\n  body,\n  headers: {\n    authorization: authToken\n  },\n  json: true,\n  resolveWithFullResponse: true\n}).then(response => {\n  return response.body.pollUrl;\n}, err => {\n  this.log.error('error', err);\n  throw new Error(err.error);\n});\n\nlet startExecution = new Date();\n\nconst pollingResult = (uri) => {\n  return request.get({\n    uri,\n    headers: {\n      authorization: authToken\n    },\n    json: true,\n    resolveWithFullResponse: true\n  }).then(response => {\n    if (response.statusCode === 202) {\n      let endExecution = new Date() - startExecution;\n      \n      // if (endExecution + 3000 > defaultNavigationTimeout) \n      //   throw new Error('Timeout error.')\n      \n      return Promise.delay(2000)\n        .then(() => pollingResult(uri))\n    } else {\n      return response\n    }\n  }, err => {\n    this.log.error('error', err)\n    throw new Error(err.error);\n  });\n}\n\nconst pollResult = await pollingResult(sucessCallbackUrl);\n\nreturn this.exitStep('next', { \"url\": pollResult.body.url });\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "name": "",
            "type": "session"
          },
          "newName": "``",
          "filePath": "``",
          "fileType": "pdf",
          "useFiles": true,
          "assetsUrl": "",
          "authToken": "",
          "imageSize": "full",
          "topMargin": "``",
          "urlSource": "``",
          "htmlSource": "",
          "leftMargin": "``",
          "pdfViewType": "predefined",
          "rightMargin": "``",
          "bottomMargin": "``",
          "imageQuality": "80",
          "pdfSizeUnits": "px",
          "processError": true,
          "imageFileType": "jpeg",
          "fileSourceType": "url",
          "footerTemplate": "``",
          "headerTemplate": "``",
          "pdfCustomWidth": "``",
          "backgroundToPdf": true,
          "isMobileVersion": false,
          "loadWaitingTime": "`3 sec`",
          "makeFilePrivate": false,
          "pdfCustomHeight": "``",
          "backgroundToImage": false,
          "pdfPredefinedSize": "`Letter`",
          "websiteResolution": "screen",
          "fullPageScreenShot": false,
          "imageSizeClipWidth": "``",
          "imageSizeClipHeight": "``",
          "websitePrintVersion": false,
          "imageSizeClipXOffset": "``",
          "imageSizeClipYOffset": "``",
          "imageSizeCustomWidth": "``",
          "maxNavigationTimeout": "`10 sec`",
          "customResolutionWidth": "``",
          "imageSizeCustomHeight": "``",
          "customResolutionHeight": "``",
          "pdfPredefinedOrientation": "`landscape`"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "url": ""
        },
        "help": "",
        "formBuilder": {
          "stepExits": [
            {
              "id": "dbaccacc-ecca-4e19-8443-2cddd33055c0",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "3674f1eb-179f-4c61-9b01-1f472727430d",
              "data": {
                "data": "{\n  \"fileSourceType\": \"url\",\n  \"urlSource\": \"``\",\n  \"htmlSource\": \"\",\n  \"newName\": \"``\",\n  \"filePath\": \"``\",\n  \"fileType\": \"pdf\",\n  \"pdfViewType\": \"predefined\",\n  \"pdfPredefinedSize\": \"`Letter`\",\n  \"pdfPredefinedOrientation\": \"`landscape`\",\n  \"pdfSizeUnits\": \"px\",\n  \"pdfCustomWidth\": \"``\",\n  \"pdfCustomHeight\": \"``\",\n  \"headerTemplate\": \"``\",\n  \"footerTemplate\": \"``\",\n  \"backgroundToPdf\": true,\n  \"topMargin\": \"``\",\n  \"bottomMargin\": \"``\",\n  \"leftMargin\": \"``\",\n  \"rightMargin\": \"``\",\n  \"imageFileType\": \"jpeg\",\n  \"imageQuality\": \"80\",\n  \"imageSize\": \"full\",\n  \"imageSizeCustomWidth\": \"``\",\n  \"imageSizeCustomHeight\": \"``\",\n  \"imageSizeClipWidth\": \"``\",\n  \"imageSizeClipHeight\": \"``\",\n  \"imageSizeClipXOffset\": \"``\",\n  \"imageSizeClipYOffset\": \"``\",\n  \"backgroundToImage\": false,\n  \"websitePrintVersion\": false,\n  \"fullPageScreenShot\": false,\n  \"websiteResolution\": \"screen\",\n  \"customResolutionWidth\": \"``\",\n  \"customResolutionHeight\": \"``\",\n  \"isMobileVersion\": false,\n  \"assetsUrl\": \"\",\n  \"authToken\": \"\",\n  \"useFiles\" : true\n}",
                "toJson": "return {\n  fileSourceType: JSON.stringify(data.fileSourceType),\n  urlSource: data.urlSource,\n  htmlSource: data.htmlSource === '``' ? data.htmlSource : `\\`${data.htmlSource}\\``,\n  // htmlSource: data.htmlSource,\n  useFiles: data.useFiles,\n  newName: data.newName,\n  filePath: data.filePath,\n  fileType: JSON.stringify(data.fileType),\n  pdfViewType: JSON.stringify(data.pdfViewType),\n  pdfPredefinedSize: data.pdfPredefinedSize,\n  pdfPredefinedOrientation: data.pdfPredefinedOrientation,\n  pdfSizeUnits: JSON.stringify(data.pdfSizeUnits),\n  pdfCustomWidth: data.pdfCustomWidth,\n  pdfCustomHeight: data.pdfCustomHeight,\n  headerTemplate: data.headerTemplate,\n  footerTemplate: data.footerTemplate,\n  backgroundToPdf: data.backgroundToPdf,\n  topMargin: data.topMargin,\n  bottomMargin: data.bottomMargin,\n  leftMargin: data.leftMargin,\n  rightMargin: data.rightMargin,\n  imageFileType: JSON.stringify(data.imageFileType),\n  imageQuality: JSON.stringify(data.imageQuality),\n  imageSize: JSON.stringify(data.imageSize),\n  imageSizeCustomWidth: data.imageSizeCustomWidth,\n  imageSizeCustomHeight: data.imageSizeCustomHeight,\n  imageSizeClipWidth: data.imageSizeClipWidth,\n  imageSizeClipHeight: data.imageSizeClipHeight,\n  imageSizeClipXOffset: data.imageSizeClipXOffset,\n  imageSizeClipYOffset: data.imageSizeClipYOffset,\n  backgroundToImage: data.backgroundToImage,\n  websitePrintVersion: data.websitePrintVersion,\n  fullPageScreenShot: data.fullPageScreenShot,\n  websiteResolution: JSON.stringify(data.websiteResolution),\n  customResolutionWidth: data.customResolutionWidth,\n  customResolutionHeight: data.customResolutionHeight,\n  assetsUrl: JSON.stringify(data.assetsUrl), \n  authToken: JSON.stringify(data.authToken), \n  makeFilePrivate: data.makeFilePrivate, \n  processError: data.processError,\n  isMobileVersion: data.isMobileVersion\n}",
                "validators": "urlSource: {\n  custom(value) {\n    if  (this.schema.fileSourceType === 'url') {\n      return value.slice(1, -1).length && validators.jsExpression(value)\n    }\n    return true\n  }\n},\nhtmlSource: {\n  custom(value) {\n    if  (this.schema.fileSourceType === 'html') {\n      // return validators.jsExpression(value);\n      return value.slice(1, -1).length\n    }\n    return true\n  }\n},\nnewName: {\n  custom(value) {\n    return value.slice(1, -1).replace(/\\s/g, '').length && validators.jsExpression(value)\n  }\n},\nfilePath: {\n  custom(value) {\n    return value.slice(1, -1).length && validators.jsExpression(value)\n  }\n},\npdfCustomWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'pdf' && this.schema.pdfViewType === 'custom') {\n      console.log('pdfwdth')\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0.1)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0.1)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\npdfCustomHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'pdf' && this.schema.pdfViewType === 'custom') {\n    console.log('pdfhgh')\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0.1)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)))\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\nheaderTemplate: {\n  custom(value) {\n    return validators.jsExpression(value)\n  }\n},\nfooterTemplate: {\n  custom(value) {\n    return validators.jsExpression(value)\n  }\n},\ntopMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nbottomMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nleftMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nrightMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nimageSizeCustomWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\nimageSizeCustomHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipXOffset: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipYOffset: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\ncustomResolutionWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.websiteResolution === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\ncustomResolutionHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.websiteResolution === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},",
                "applyToJson": true,
                "formTemplate": "<or-wildcard-ctkiqvdglpyfrsuj \n  :v=\"$v\" \n  :file-source-type.sync=\"schema.fileSourceType\" \n  :url-source.sync=\"schema.urlSource\" \n  :html-source.sync=\"schema.htmlSource\" \n  :new-name.sync=\"schema.newName\" \n  :file-path.sync=\"schema.filePath\" \n  :file-type.sync=\"schema.fileType\" \n  :pdf-view-type.sync=\"schema.pdfViewType\" \n  :pdf-predefined-size.sync=\"schema.pdfPredefinedSize\" \n  :pdf-predefined-orientation.sync=\"schema.pdfPredefinedOrientation\" \n  :pdf-size-units.sync=\"schema.pdfSizeUnits\"\n  :pdf-custom-width.sync=\"schema.pdfCustomWidth\" \n  :pdf-custom-height.sync=\"schema.pdfCustomHeight\" \n  :header-template.sync=\"schema.headerTemplate\" \n  :footer-template.sync=\"schema.footerTemplate\"\n  :background-to-pdf.sync=\"schema.backgroundToPdf\"\n  :top-margin.sync=\"schema.topMargin\"\n  :bottom-margin.sync=\"schema.bottomMargin\"\n  :left-margin.sync=\"schema.leftMargin\"\n  :right-margin.sync=\"schema.rightMargin\"\n  :image-file-type.sync=\"schema.imageFileType\"\n  :image-quality.sync=\"schema.imageQuality\"\n  :image-size.sync=\"schema.imageSize\"\n  :image-size-custom-width.sync=\"schema.imageSizeCustomWidth\"\n  :image-size-custom-height.sync=\"schema.imageSizeCustomHeight\"\n  :image-size-clip-width.sync=\"schema.imageSizeClipWidth\"\n  :image-size-clip-height.sync=\"schema.imageSizeClipHeight\"\n  :image-size-clip-x-offset.sync=\"schema.imageSizeClipXOffset\"\n  :image-size-clip-y-offset.sync=\"schema.imageSizeClipYOffset\"\n  :background-to-image.sync=\"schema.backgroundToImage\"\n  :website-print-version.sync=\"schema.websitePrintVersion\"\n  :full-page-screen-shot.sync=\"schema.fullPageScreenShot\"\n  :website-resolution.sync=\"schema.websiteResolution\"\n  :custom-resolution-width.sync=\"schema.customResolutionWidth\"\n  :custom-resolution-height.sync=\"schema.customResolutionHeight\"\n  :is-mobile-version.sync=\"schema.isMobileVersion\"\n  :process-error.sync=\"schema.processError\" \n  :assets-url.sync=\"schema.assetsUrl\" \n  :auth-token.sync=\"schema.authToken\" \n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\" \n  :steps=\"steps\" \n  :step-id=\"stepId\"\n></or-wildcard-ctkiqvdglpyfrsuj>",
                "componentName": "or-wildcard-txhwnliorqzpumyfgvdcejsbak",
                "componentLogic": "{\n  data() {\n    return {\n      pathFileData: [],\n      pdfCustomWidthError: '',\n      pdfCustomHeightError: '',\n      imageSizeCustomWidthError: '',\n      imageSizeCustomHeightError: '',\n      imageSizeClipWidthError: '',\n      imageSizeClipHeightError: '',\n      imageSizeClipXOffsetError: '',\n      imageSizeClipYOffsetError: '',\n      customResolutionWidthError: '',\n      customResolutionHeightError: '',\n      topMarginError: '',\n      bottomMarginError: '',\n      leftMarginError: '',\n      rightMarginError: '',\n      fileSourceTypeOptions: [\n        {\n            label : 'URL',\n            value : 'url'\n        },\n        {\n            label : 'HTML code',\n            value : 'html'\n        }\n      ],\n      fileTypeOptions: [\n        {\n            label : 'PDF',\n            value : 'pdf',\n            checked: 'checked'\n        },\n        {\n            label : 'Image',\n            value : 'image'\n        }\n      ],\n      pdfViewTypeOptions: [\n        {\n            label : 'Predefined',\n            value : 'predefined'\n        },\n        {\n            label : 'Custom',\n            value : 'custom'\n        }\n      ],\n      pdfPredefinedSizeOptions: [\n        {\n            label : 'Letter',\n            value : '`Letter`'\n        },\n        {\n            label : 'Legal',\n            value : '`Legal`'\n        },\n        {\n            label : 'Tabloid',\n            value : '`Tabloid`'\n        },\n        {\n            label : 'Ledger',\n            value : '`Ledger`'\n        },\n        {\n            label : 'A0',\n            value : '`A0`'\n        },\n        {\n            label : 'A1',\n            value : '`A1`'\n        },\n        {\n            label : 'A2',\n            value : '`A2`'\n        },\n        {\n            label : 'A3',\n            value : '`A3`'\n        },\n        {\n            label : 'A4',\n            value : '`A4`'\n        },\n        {\n            label : 'A5',\n            value : '`A5`'\n        },\n        {\n            label : 'A6',\n            value : '`A6`'\n        }\n      ],\n      pdfPredefinedOrientationOptions: [\n        {\n            label : 'Landscape',\n            value : '`landscape`'\n        },\n        {\n            label : 'Portrait',\n            value : '`portrait`'\n        }\n      ],\n      imageFileTypeOptions: [\n        {\n            label : 'JPEG',\n            value : 'jpeg'\n        },\n        {\n            label : 'PNG',\n            value : 'png'\n        }\n      ],\n      imageQualityOptions: [],\n      imageSizeOptions: [\n        {\n            label : 'Full',\n            value : 'full'\n        },\n        // {\n        //     label : 'Custom',\n        //     value : 'custom'\n        // },\n        {\n            label : 'Clip',\n            value : 'clip'\n        }\n      ],\n      measurementUnitsOptions : [ 'px', 'in', 'cm', 'mm' ],\n      websiteResolutionOptions : [\n        {\n            label : 'Large screen (1366x768)',\n            value : 'screen'\n        },\n        {\n            label : 'Tablet (768x1024)',\n            value : 'tablet'\n        },\n        {\n            label : 'Phone (375x667)',\n            value : 'phone'\n        },\n        {\n            label : 'Custom',\n            value : 'custom'\n        }\n      ]\n    }\n  },\n  \n  computed : {\n    fileSourceTypeLocal : {\n      get () { return this.fileSourceType; },\n      set (value) { this.$emit('update:fileSourceType', value); }\n    },\n    urlSourceLocal : {\n      get () { return this.urlSource; },\n      set (value) { this.$emit('update:urlSource', value); }\n    },\n    htmlSourceLocal : {\n      get () { return this.htmlSource; },\n      set (value) { this.$emit('update:htmlSource', value); }\n    },\n    newNameLocal : {\n      get () { return this.newName; },\n      set (value) { this.$emit('update:newName', value); }\n    },\n    filePathLocal: {\n      get () { return this.filePath; },\n      set (value) {\n        this.$emit('update:filePath', value);\n      }\n    },\n    fileNameHelpText () {\n      return `File name can contain only letters, numbers, spaces and special characters \"!\", \"-\", \"_\", \".\", \"*\", \"'\", \"(\", \")\". Other characters will be deleted.`;\n    },\n    filePathHelpText () {\n      return 'Folder name can contain only letters, numbers, hyphens, underscores and spaces.';\n    },\n    fileTypeLocal : {\n      get () { return this.fileType; },\n      set (value) { this.$emit('update:fileType', value); }\n    },\n    pdfViewTypeLocal : {\n      get () { return this.pdfViewType; },\n      set (value) { this.$emit('update:pdfViewType', value); }\n    },\n    pdfPredefinedSizeLocal : {\n      get () { return this.pdfPredefinedSize; },\n      set (value) { this.$emit('update:pdfPredefinedSize', value); }\n    },\n    pdfPredefinedOrientationLocal : {\n      get () { return this.pdfPredefinedOrientation; },\n      set (value) { this.$emit('update:pdfPredefinedOrientation', value); }\n    },\n    pdfSizeUnitsLocal : {\n      get () { return this.pdfSizeUnits; },\n      set (value) { this.$emit('update:pdfSizeUnits', value); }\n    },\n    pdfCustomWidthLocal : {\n      get () { \n        if (this.v.schema.pdfCustomWidth.$error) this.pdfCustomWidthError = this.generateNumericInputError(this.pdfCustomWidth, true, 'pdfCustomSize');\n        return this.pdfCustomWidth; },\n      set (value) { this.$emit('update:pdfCustomWidth', value); }\n    },\n    pdfCustomHeightLocal : {\n      get () { \n        if (this.v.schema.pdfCustomHeight.$error) this.pdfCustomHeightError = this.generateNumericInputError(this.pdfCustomHeight, 'pdfCustomSize');\n        return this.pdfCustomHeight;\n      },\n      set (value) { this.$emit('update:pdfCustomHeight', value); }\n    },\n    headerTemplateLocal : {\n      get () { return this.headerTemplate; },\n      set (value) { this.$emit('update:headerTemplate', value); }\n    },\n    footerTemplateLocal : {\n      get () { return this.footerTemplate; },\n      set (value) { this.$emit('update:footerTemplate', value); }\n    },\n    backgroundToPdfLocal : {\n      get () { return this.backgroundToPdf; },\n      set (value) { this.$emit('update:backgroundToPdf', value); }\n    },\n    // marginUnitsLocal : {\n    //   get () { return this.marginUnits; },\n    //   set (value) { this.$emit('update:marginUnits', value); }\n    // },\n    topMarginLocal : {\n      get () { \n        if (this.v.schema.topMargin.$error) this.topMarginError = this.generateNumericInputError(this.topMargin);\n        return this.topMargin;\n      },\n      set (value) { this.$emit('update:topMargin', value); }\n    },\n    bottomMarginLocal : {\n      get () { \n        if (this.v.schema.bottomMargin.$error) this.bottomMarginError = this.generateNumericInputError(this.bottomMargin);\n        return this.bottomMargin;\n      },\n      set (value) { this.$emit('update:bottomMargin', value); }\n    },\n    leftMarginLocal : {\n      get () { \n        if (this.v.schema.leftMargin.$error) this.leftMarginError = this.generateNumericInputError(this.leftMargin);\n        return this.leftMargin;\n      },\n      set (value) { this.$emit('update:leftMargin', value); }\n    },\n    rightMarginLocal : {\n      get () { \n        if (this.v.schema.rightMargin.$error) this.rightMarginError = this.generateNumericInputError(this.rightMargin);\n        return this.rightMargin;\n      },\n      set (value) { this.$emit('update:rightMargin', value); }\n    },\n    imageFileTypeLocal : {\n      get () { return this.imageFileType; },\n      set (value) { this.$emit('update:imageFileType', value);\n      }\n    },\n    imageQualityLocal : {\n      get () { return this.imageQuality; },\n      set (value) { this.$emit('update:imageQuality', value);\n      }\n    },\n    imageSizeLocal : {\n      get () { return this.imageSize; },\n      set (value) { \n        if (value === 'clip') this.fullPageScreenShotLocal = false;\n        this.$emit('update:imageSize', value);\n      }\n    },\n    imageSizeCustomWidthLocal : {\n      get () { \n        if (this.v.schema.imageSizeCustomWidth.$error) this.imageSizeCustomWidthError = this.generateNumericInputError(this.imageSizeCustomWidth, true);\n        return this.imageSizeCustomWidth;\n      },\n      set (value) { this.$emit('update:imageSizeCustomWidth', value);\n      }\n    },\n    imageSizeCustomHeightLocal : {\n      get () { \n        if (this.v.schema.imageSizeCustomHeight.$error) this.imageSizeCustomHeightError = this.generateNumericInputError(this.imageSizeCustomHeight, true);\n        return this.imageSizeCustomHeight;\n      },\n      set (value) { this.$emit('update:imageSizeCustomHeight', value);\n      }\n    },\n    imageSizeClipWidthLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipWidth.$error) this.imageSizeClipWidthError = this.generateNumericInputError(this.imageSizeClipWidth, true);\n        return this.imageSizeClipWidth;\n      },\n      set (value) { this.$emit('update:imageSizeClipWidth', value);\n      }\n    },\n    imageSizeClipHeightLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipHeight.$error) this.imageSizeClipHeightError = this.generateNumericInputError(this.imageSizeClipHeight, true);\n        return this.imageSizeClipHeight;\n      },\n      set (value) { this.$emit('update:imageSizeClipHeight', value);\n      }\n    },\n    imageSizeClipXOffsetLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipXOffset.$error) this.imageSizeClipXOffsetError = this.generateNumericInputError(this.imageSizeClipXOffset, true, 'imgOffset');\n        return this.imageSizeClipXOffset;\n      },\n      set (value) { this.$emit('update:imageSizeClipXOffset', value);\n      }\n    },\n    imageSizeClipYOffsetLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipYOffset.$error) this.imageSizeClipYOffsetError = this.generateNumericInputError(this.imageSizeClipYOffset, true, 'imgOffset');\n        return this.imageSizeClipYOffset;\n      },\n      set (value) { this.$emit('update:imageSizeClipYOffset', value); }\n    },\n    backgroundToImageLocal : {\n      get () { return this.backgroundToImage; },\n      set (value) { this.$emit('update:backgroundToImage', value); }\n    },\n    // filePathComp() {\n    //   return _.get(this.pathFileData, '[0].data.Key', '').replace(/.+?(?=\\/)/, '');\n    // },\n    websitePrintVersionLocal : {\n      get () { return this.websitePrintVersion; },\n      set (value) { this.$emit('update:websitePrintVersion', value); }\n    },\n    fullPageScreenShotLocal : {\n      get () { return this.fullPageScreenShot; },\n      set (value) { \n        if (value && this.websiteResolutionLocal === 'custom') {\n          this.v.schema.customResolutionHeight.$touch()\n          this.customResolutionHeightLocal = '``';\n        }\n        this.$emit('update:fullPageScreenShot', value); \n      }\n    },\n    websiteResolutionLocal : {\n      get () { return this.websiteResolution; },\n      set (value) { \n        if (this.fullPageScreenShotLocal && value === 'custom') {\n          this.customResolutionHeightLocal = '``';\n        }\n\n        this.isMobileVersionLocal = value === 'phone' ? true : false;\n\n        this.$emit('update:websiteResolution', value); \n      }\n    },\n    customResolutionWidthLocal : {\n      get () { \n        if (this.v.schema.customResolutionWidth.$error) this.customResolutionWidthError = this.generateNumericInputError(this.customResolutionWidth, true);\n        return this.customResolutionWidth;\n      },\n      set (value) { this.$emit('update:customResolutionWidth', value); }\n    },\n    customResolutionHeightLocal : {\n      get () { \n        if (this.v.schema.customResolutionHeight.$error) this.customResolutionHeightError = this.generateNumericInputError(this.customResolutionHeight, true);\n        return this.customResolutionHeight;\n      },\n      set (value) { this.$emit('update:customResolutionHeight', value); }\n    },\n    isMobileVersionLocal : {\n      get () { return this.isMobileVersion; },\n      set (value) { this.$emit('update:isMobileVersion', value); }\n    }\n  },\n  \n  mounted () {\n    this.$emit('update:assetsUrl', `${this.$flow.customDataApiUrl}/api/v1/assets`);\n    this.$emit('update:authToken', this.$settings.token);\n\n    this.getImageQualityOptions();\n  },\n  \n  props : {\n    fileSourceType : {\n      type : String,\n      default : 'url'\n    },\n    urlSource : {\n      type : String,\n      default : '``'\n    },\n    htmlSource : {\n      type : String,\n      default : ''\n    },\n    newName : {\n      type : String,\n      default : '``'\n    },\n    filePath : {\n      type: 'String',\n      default: ''\n    },\n    fileType : {\n      type : String,\n      default : 'pdf'\n    },\n    pdfViewType : {\n      type : String,\n      default : 'predefined'\n    },\n    pdfPredefinedSize : {\n      type : String,\n      default : '`Letter`'\n    },\n    pdfPredefinedOrientation : {\n      type : String,\n      default : '`landscape`'\n    },\n    pdfSizeUnits : {\n      type : String,\n      default : 'px'\n    },\n    pdfCustomWidth : {\n      type : String,\n      default : '``'\n    },\n    pdfCustomHeight : {\n      type : String,\n      default : '``'\n    },\n    headerTemplate : {\n      type : String,\n      default : '``'\n    },\n    footerTemplate : {\n      type : String,\n      default : '``'\n    },\n    backgroundToPdf : {\n      type : Boolean,\n      default : true\n    },\n    // marginUnits : {\n    //   type : String,\n    //   default : 'px'\n    // },\n    topMargin : {\n      type : String,\n      default : '``'\n    },\n    bottomMargin : {\n      type : String,\n      default : '``'\n    },\n    leftMargin : {\n      type : String,\n      default : '``'\n    },\n    rightMargin : {\n      type : String,\n      default : '``'\n    },\n    imageFileType : {\n      type : String,\n      default : 'jpeg'\n    },\n    imageQuality : {\n      type : String,\n      default : '80'\n    },\n    imageSize : {\n      type : String,\n      default : 'full'\n    },\n    imageSizeCustomWidth : {\n      type : String,\n      default : '``'\n    },\n    imageSizeCustomHeight : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipWidth : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipHeight : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipXOffset : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipYOffset : {\n      type : String,\n      default : '``'\n    },\n    backgroundToImage : {\n      type : Boolean,\n      default : false\n    },\n    websitePrintVersion : {\n      type : Boolean,\n      default : false\n    },\n    fullPageScreenShot : {\n      type : Boolean,\n      default : false\n    },\n    websiteResolution : {\n      type : String,\n      default : 'screen'\n    },\n    customResolutionWidth : {\n      type : String,\n      default : '``'\n    },\n    customResolutionHeight : {\n      type : String,\n      default : '``'\n    },\n    isMobileVersion : {\n      type : Boolean,\n      default : false\n    },\n    assetsUrl : {\n      type : String,\n      default : ''\n    },\n    authToken : {\n      type : String,\n      default : ''\n    },\n    steps : '',\n    stepId : '',\n    processError : true,\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema: {htmlSource: {}}};\n      }\n    },\n  },\n  methods: {\n    openModal (ref) {\n        this.$refs[ref].open();\n    },\n    \n    closeModal (ref) {\n        this.$refs[ref].close();\n    },\n    \n    onFilePathInput () {\n      this.v.schema.filePath.$touch();\n      this.pathFileData = [];\n    },\n    \n    changeFileType (tabId) {\n      this.fileTypeLocal = tabId;\n    },\n        \n    getImageQualityOptions () {\n      for ( let i = 0; i <= 100; i += 1) {\n        this.imageQualityOptions.push({\n          value: i.toString(),\n          label: `${i}%`\n        })\n      };\n    },\n    \n    generateNumericInputError (value, isRequired = false, type = '') {\n      const containsMergeField = _.isString(value) && validators.validateExpression(value);\n      const regexTextMode = /^\\`.*\\`$/;\n      let errorText = '';\n      \n      if (regexTextMode.test(value)) {\n        if (isRequired && !value.slice(1, -1).length) {\n          errorText = 'The value is required';\n        } else if (isNaN(value.slice(1, -1))) {\n          errorText = 'Invalid number';\n        } else if (type === 'pdfCustomSize' && _.toNumber(value.slice(1, -1)) < 0.1) {\n          // if (this.pdfSizeUnits === 'px' && parseInt(value.slice(1, -1)) < 10) {\n          //   errorText = 'The value should be 10 pixels or greater.';\n          // } else if (this.pdfSizeUnits === 'in' && parseInt(value.slice(1, -1)) < 0.1) {\n          //   errorText = 'The value should be 0.1 inch or greater.';\n          // } else if (this.pdfSizeUnits === 'cm' && parseInt(value.slice(1, -1)) < 0.5) {\n          //   errorText = 'The value should be 0.5 centimeters or greater.';\n          // } else if (this.pdfSizeUnits === 'mm' && parseInt(value.slice(1, -1)) < 5) {\n          //   errorText = 'The value should be 5 millimeters or greater.';\n          // }\n          errorText = 'The value should be 0.1 inch or greater.';\n        } else if (type === 'imgOffset' && _.toNumber(value.slice(1, -1)) < 0) {\n          errorText = 'The value should be 0 or greater.';\n        } else if (!type.length && _.toNumber(value.slice(1, -1)) <= 0) {\n          errorText = 'The value should be a positive number.';\n        }\n      } else {\n        if (isRequired && !value.length) {\n          errorText = 'The value is required';\n        } else if (!validators.jsExpression(value)) {\n          errorText = 'Please enter a valid JavaScript expression.'\n        } else if (isNaN(value)) {\n          errorText = 'Invalid number';\n        } else if (type === 'pdfCustomSize' && _.toNumber(value) < 0.1) {\n          errorText = 'The value should be 0.1 inch or greater.';\n        } else if (type === 'imgOffset' && _.toNumber(value) < 0) {\n          errorText = 'The value should be 0 or greater.';\n        } else if (!type.length && _.toNumber(value) <= 0) {\n          errorText = 'The value should be a positive number.';\n        }\n      }\n\n      return errorText;\n    }\n  },\n  \n  watch: {\n    pathFileData (pathFileData) {\n      if (!pathFileData || !pathFileData.length) return;\n      const path =  _.get(pathFileData, '[0].key', '');\n      this.filePathLocal = '`' + path + '`';\n    }\n    // filePathComp(newPath) {\n    //   this.$emit('update:filePath', newPath);\n    // }\n  }\n}",
                "componentTemplate": "<or-collapsible title=\"Input options\"\r\n                :invalid=\"v.schema.urlSource.$error || v.schema.htmlSource.$error\"\r\n                open\r\n>  \r\n  <div class=\"header-with-dropdown source-header\">\r\n    <div class=\"source-header__label\">Source</div> \r\n    <or-select\r\n      name=\"fileSourceType\"\r\n      placeholder=\"Select source\"\r\n      :options=\"fileSourceTypeOptions\"\r\n      v-model=\"fileSourceTypeLocal\"\r\n      :disabled=\"readonly\"\r\n      class=\"source-header__type-select\"\r\n    >\r\n    </or-select>\r\n  </div>\r\n  <or-text-expression v-if=\"fileSourceType === 'url'\"\r\n    v-model=\"urlSourceLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"!urlSourceLocal.slice(1, -1).length ? 'The source is required.' : 'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.urlSource.$error\"\r\n    @input=\"v.schema.urlSource.$touch()\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  <or-code v-else\r\n    v-model=\"htmlSourceLocal\"\r\n    :readonly=\"readonly\"\r\n    mode=\"html\"\r\n    :error=\"!htmlSourceLocal.slice(1, -1).length ? 'The source is required.' : 'The value is not a valid HTML code.'\"\r\n    :invalid=\"v.schema.htmlSource.$error\"\r\n    @input=\"v.schema.htmlSource.$touch()\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-code>\r\n</or-collapsible>\r\n\r\n<or-collapsible title=\"Output options\"\r\n                :invalid=\"v.schema.newName.$error || v.schema.pdfCustomWidth.$error || v.schema.pdfCustomHeight.$error || v.schema.imageSizeCustomWidth.$error || v.schema.imageSizeCustomHeight.$error || v.schema.imageSizeClipWidth.$error || v.schema.imageSizeClipHeight.$error || v.schema.imageSizeClipXOffset.$error || v.schema.imageSizeClipYOffset.$error\"\r\n                open\r\n>\r\n  <or-text-expression \r\n    label=\"Name of result file\"\r\n    v-model=\"newNameLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"!newNameLocal.slice(1, -1).replace(/\\s/g, '').length? 'Name is required.' : 'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.newName.$error\"\r\n    @input=\"v.schema.newName.$touch()\"\r\n    :help-text=\"fileNameHelpText\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  \r\n  <or-text-expression \r\n    label=\"Upload to\"\r\n    v-model=\"filePathLocal\"\r\n    :readonly=\"readonly\"\r\n    placeholder=\"/folder-name/\"\r\n    :help-text=\"filePathHelpText\"\r\n    :error=\"!filePathLocal.slice(1, -1).length ? 'Value is required.' : 'Value is not a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.filePath.$error\"\r\n    @input=\"onFilePathInput\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  >  </or-text-expression>\r\n  \r\n  <!--<div class=\"path-helptext\"> {{filePathHelpText}} </div>-->\r\n  \r\n  <div class=\"upload-file\">\r\n    <!--<div class=\"upload-file__folder\"><b class=\"upload-file__text\">Upload to</b> ...<span class=\"upload-file__path\">{{ filePath }}</span></div>-->\r\n    <or-button\r\n      @click=\"openModal('assetPickerModal')\"\r\n      type=\"secondary\"\r\n      color=\"primary\"\r\n      class=\"upload-file__button-upload\"\r\n      :disabled=\"readonly\"\r\n    >\r\n      Choose folder\r\n    </or-button>\r\n  </div>\r\n  <or-modal \r\n    ref=\"assetPickerModal\" \r\n    class=\"or-ui-modal-container\" \r\n    title=\"Choose folder\" \r\n    size=\"large\">\r\n    <div slot=\"default\">\r\n        <div \r\n          class=\"Assets\" \r\n          v-if=\"assetsUrl\"\r\n        >\r\n          <p>Click on an file to use it.</p>\r\n          <or-asset-manager \r\n              :auth-token=\"$settings.token\" \r\n              :assets-url=\"`${this.$flow.customDataApiUrl}/api/v1/assets`\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              folder-mode\r\n              :allow-files-and-data=\"false\"\r\n              v-model=\"pathFileData\"\r\n          ></or-asset-manager>\r\n        </div>\r\n        <div class=\"EndpointSetup\" v-if=\"!assetsUrl\">\r\n            <span class=\"AuthTokenFound\">{{authToken\r\n                ? 'Authorization token found'\r\n                : 'Could not find authorization token'}}</span>\r\n            <or-button :disabled=\"!assetsUrl\" icon=\"refresh\"\r\n                       @click.stop.prevent=\"GetAssets\">Retry\r\n            </or-button>\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\">\r\n        <or-button type=\"primary\" @click=\"closeModal('assetPickerModal')\">Done</or-button>\r\n    </div>\r\n  </or-modal>\r\n  \r\n  <or-tabs\r\n    fullwidth\r\n    @tab-change=\"changeFileType\" \r\n    class=\"file-type-tabs flex-box\"\r\n  >\r\n    <or-tab \r\n      title=\"PDF\"\r\n      id=\"pdf\"\r\n      :selected=\"fileType === 'pdf'\"\r\n    >\r\n      <div class=\"file-options\">\r\n          <div class=\"header-with-dropdown file-options__header-with-dropdown\">\r\n            <div>Select size and format: </div>\r\n            <!--<or-select-->\r\n            <!--  v-if=\"pdfViewType === 'custom'\"-->\r\n            <!--  name=\"pdfSizeUnits\"-->\r\n            <!--  placeholder=\"Select units\"-->\r\n            <!--  :options=\"measurementUnitsOptions\"-->\r\n            <!--  v-model=\"pdfSizeUnitsLocal\"-->\r\n            <!--  :disabled=\"readonly\">-->\r\n            <!--</or-select>-->\r\n          </div>\r\n          \r\n          <div class=\"file-options__customize\">\r\n            <or-select\r\n              name=\"pdfViewType\"\r\n              placeholder=\"Select format type\"\r\n              label=\"View\"\r\n              :options=\"pdfViewTypeOptions\"\r\n              v-model=\"pdfViewTypeLocal\"\r\n              :disabled=\"readonly\"\r\n              class=\"file-format\"\r\n            >\r\n            </or-select>\r\n\r\n            <or-select-expression\r\n              v-if=\"pdfViewType === 'predefined'\"\r\n              placeholder=\"Select format\"\r\n              label=\"Size\"\r\n              :options.sync=\"pdfPredefinedSizeOptions\"\r\n              v-model=\"pdfPredefinedSizeLocal\"\r\n              has-search extendable-options only-merge-field\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" :step-id=\"stepId\"\r\n              :disabled=\"readonly\"\r\n              class=\"predefined-format-dropdown\"\r\n            ></or-select-expression>\r\n            \r\n            <or-select-expression\r\n              v-if=\"pdfViewType === 'predefined'\"\r\n              placeholder=\"Select orientation\"\r\n              label=\"Orientation\"\r\n              :options.sync=\"pdfPredefinedOrientationOptions\"\r\n              v-model=\"pdfPredefinedOrientationLocal\"\r\n              has-search extendable-options only-merge-field\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" :step-id=\"stepId\"\r\n              :disabled=\"readonly\"\r\n              class=\"predefined-orientation-dropdown\"\r\n            ></or-select-expression>\r\n            \r\n            <or-text-expression \r\n              v-if=\"pdfViewType === 'custom'\"\r\n              label=\"Width\"\r\n              v-model=\"pdfCustomWidthLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"pdfCustomWidthError\"\r\n              :invalid=\"v.schema.pdfCustomWidth.$error\"\r\n              @input=\"v.schema.pdfCustomWidth.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              v-if=\"pdfViewType === 'custom'\"\r\n              label=\"Height\"\r\n              v-model=\"pdfCustomHeightLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"pdfCustomHeightError\"\r\n              :invalid=\"v.schema.pdfCustomHeight.$error\"\r\n              @input=\"v.schema.pdfCustomHeight.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n            ></or-text-expression>\r\n          </div>\r\n          \r\n          <or-checkbox\r\n            v-model=\"backgroundToPdfLocal\"\r\n            :disabled=\"readonly\"\r\n          >Save background to pdf\r\n          </or-checkbox>\r\n      </div>  \r\n      \r\n      \r\n    </or-tab>\r\n    \r\n    <or-tab \r\n      title=\"Image\"\r\n      id=\"image\"\r\n      :selected=\"fileType === 'image'\"\r\n    >\r\n      <div class=\"file-options\">\r\n        <div class=\"header-with-dropdown file-options__header-with-dropdown\">\r\n          <div>Image settings: </div>\r\n        </div>\r\n        \r\n        <div class=\"file-options__customize\">\r\n          <or-select\r\n            name=\"imageFileType\"\r\n            label=\"Type:\"\r\n            placeholder=\"Select type\"\r\n            :options=\"imageFileTypeOptions\"\r\n            v-model=\"imageFileTypeLocal\"\r\n            :disabled=\"readonly\"\r\n            class=\"image-file-type\"\r\n          >\r\n          </or-select>\r\n          \r\n          <or-select\r\n            name=\"imageSize\"\r\n            label=\"Size:\"\r\n            placeholder=\"Select size\"\r\n            :options=\"imageSizeOptions\"\r\n            v-model=\"imageSizeLocal\"\r\n            :disabled=\"readonly\"\r\n            class=\"picture-size-dropdown\"\r\n          ></or-select>\r\n          \r\n          <or-select\r\n            name=\"imageQuality\"\r\n            label=\"Quality\"\r\n            :options=\"imageQualityOptions\"\r\n            v-model=\"imageQualityLocal\"\r\n            :disabled=\"readonly || (imageFileTypeLocal === 'png')\"\r\n            :steps=\"steps\" \r\n            :step-id=\"stepId\"\r\n            has-search\r\n          ></or-select>\r\n        </div>\r\n        \r\n        <!--<div v-if=\"imageSize === 'custom'\"-->\r\n        <!--     class=\"file-options__image-size\">-->\r\n        <!--  <or-text-expression -->\r\n        <!--    label=\"Width\"-->\r\n        <!--    v-model=\"imageSizeCustomWidthLocal\"-->\r\n        <!--    :readonly=\"readonly\"-->\r\n        <!--    :error=\"imageSizeCustomWidthError\"-->\r\n        <!--    :invalid=\"v.schema.imageSizeCustomWidth.$error\"-->\r\n        <!--    @input=\"v.schema.imageSizeCustomWidth.$touch()\"-->\r\n        <!--    :steps=\"steps\" -->\r\n        <!--    :step-id=\"stepId\">-->\r\n        <!--  </or-text-expression>-->\r\n          \r\n        <!--  <or-text-expression -->\r\n        <!--    label=\"Height\"-->\r\n        <!--    v-model=\"imageSizeCustomHeightLocal\"-->\r\n        <!--    :readonly=\"readonly\"-->\r\n        <!--    :error=\"imageSizeCustomHeightError\"-->\r\n        <!--    :invalid=\"v.schema.imageSizeCustomHeight.$error\"-->\r\n        <!--    @input=\"v.schema.imageSizeCustomHeight.$touch()\"-->\r\n        <!--    :steps=\"steps\" -->\r\n        <!--    :step-id=\"stepId\">-->\r\n        <!--  </or-text-expression>-->\r\n        <!--</div>-->\r\n        \r\n        <div v-if=\"imageSize === 'clip'\"\r\n             class=\"file-options__image-size\"\r\n        >\r\n          <div class=\"two-in-a-row\">\r\n            <or-text-expression \r\n              label=\"Width\"\r\n              v-model=\"imageSizeClipWidthLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipWidthError\"\r\n              :invalid=\"v.schema.imageSizeClipWidth.$error\"\r\n              @input=\"v.schema.imageSizeClipWidth.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n              class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              label=\"Height\"\r\n              v-model=\"imageSizeClipHeightLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipHeightError\"\r\n              :invalid=\"v.schema.imageSizeClipHeight.$error\"\r\n              @input=\"v.schema.imageSizeClipHeight.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n              class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n          </div>\r\n          \r\n          <div class=\"two-in-a-row\">\r\n            <or-text-expression \r\n              label=\"X-offset\"\r\n              v-model=\"imageSizeClipXOffsetLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipXOffsetError\"\r\n              :invalid=\"v.schema.imageSizeClipXOffset.$error\"\r\n              @input=\"v.schema.imageSizeClipXOffset.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n               class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              label=\"Y-offset\"\r\n              v-model=\"imageSizeClipYOffsetLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipYOffsetError\"\r\n              :invalid=\"v.schema.imageSizeClipYOffset.$error\"\r\n              @input=\"v.schema.imageSizeClipYOffset.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n               class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n          </div>\r\n        </div>\r\n        \r\n        <!--<or-checkbox-->\r\n        <!--  v-model=\"backgroundToImageLocal\"-->\r\n        <!--  :disabled=\"readonly\">-->\r\n        <!--  Omit background-->\r\n        <!--</or-checkbox>-->\r\n      </div>\r\n    </or-tab>\r\n  </or-tabs>\r\n</or-collapsible>\r\n\r\n<!--<or-collapsible title=\"Header & footer templates\"   -->\r\n<!--                v-if=\"fileType === 'pdf'\"-->\r\n<!--                :invalid=\"v.schema.headerTemplate.$error || v.schema.footerTemplate.$error\"-->\r\n<!--                open></or-collapsible>-->\r\n\r\n\r\n<!--  <or-text-expression -->\r\n<!--    label=\"Header\"-->\r\n<!--    v-model=\"headerTemplateLocal\"-->\r\n<!--    :readonly=\"readonly\"-->\r\n<!--    :error=\"'Please enter a valid JavaScript expression.'\"-->\r\n<!--    :invalid=\"v.schema.headerTemplate.$error\"-->\r\n<!--    @input=\"v.schema.headerTemplate.$touch()\"-->\r\n<!--    :steps=\"steps\" -->\r\n<!--    :step-id=\"stepId\">-->\r\n<!--  </or-text-expression>-->\r\n  \r\n<!--  <or-text-expression -->\r\n<!--    label=\"Footer\"-->\r\n<!--    v-model=\"footerTemplateLocal\"-->\r\n<!--    :readonly=\"readonly\"-->\r\n<!--    :error=\"'Please enter a valid JavaScript expression.'\"-->\r\n<!--    :invalid=\"v.schema.footerTemplate.$error\"-->\r\n<!--    @input=\"v.schema.footerTemplate.$touch()\"-->\r\n<!--    :steps=\"steps\" -->\r\n<!--    :step-id=\"stepId\">-->\r\n<!--  </or-text-expression>-->\r\n  \r\n<!--</or-collapsible>-->\r\n\r\n<or-collapsible\r\n                title=\"Extended settings\" \r\n                :invalid=\"v.schema.topMargin.$error || v.schema.bottomMargin.$error || v.schema.leftMargin.$error || v.schema.rightMargin.$error || v.schema.customResolutionWidth.$error || v.schema.customResolutionHeight.$error\"\r\n                open\r\n>\r\n  <!--<or-checkbox v-if=\"fileType === 'pdf'\"-->\r\n  <!--  v-model=\"websitePrintVersionLocal\"-->\r\n  <!--  :disabled=\"readonly\"-->\r\n  <!--  class=\"mt-1 mb-1\">-->\r\n  <!--Website print version</or-checkbox>-->\r\n\r\n  <or-text-expression v-if=\"fileType === 'pdf'\"\r\n    label=\"Header\"\r\n    v-model=\"headerTemplateLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.headerTemplate.$error\"\r\n    @input=\"v.schema.headerTemplate.$touch()\"\r\n    helpText=\"Make sure to set enough top margin to fit header content above the website content\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  \r\n  <or-text-expression v-if=\"fileType === 'pdf'\"\r\n    label=\"Footer\"\r\n    v-model=\"footerTemplateLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.footerTemplate.$error\"\r\n    @input=\"v.schema.footerTemplate.$touch()\"\r\n    helpText=\"Make sure to set enough bottom margin to fit header content under the website content\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n    \r\n  <!--<or-checkbox v-if=\"fileType === 'image' && imageSize !== 'clip'\"-->\r\n  <!--  v-model=\"fullPageScreenShotLocal\"-->\r\n  <!--  :disabled=\"readonly\"-->\r\n  <!--  class=\"mt-1 mb-1\">-->\r\n  <!--  Full page screenshot-->\r\n  <!--</or-checkbox>-->\r\n  \r\n  <div v-if=\"fileType === 'pdf'\">\r\n    <div class=\"header-with-dropdown\">\r\n      <div>Margin: </div>\r\n      <!--<or-select-->\r\n      <!--  name=\"marginUnits\"-->\r\n      <!--  placeholder=\"Select units\"-->\r\n      <!--  :options=\"measurementUnitsOptions\"-->\r\n      <!--  v-model=\"marginUnitsLocal\"-->\r\n      <!--  :disabled=\"readonly\"      ></or-select>-->\r\n    </div>\r\n    \r\n    <div class=\"two-in-a-row\">\r\n      <or-text-expression \r\n        label=\"Top\"\r\n        v-model=\"topMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"topMarginError\"\r\n        :invalid=\"v.schema.topMargin.$error\"\r\n        @input=\"v.schema.topMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Bottom\"\r\n        v-model=\"bottomMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"bottomMarginError\"\r\n        :invalid=\"v.schema.bottomMargin.$error\"\r\n        @input=\"v.schema.bottomMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n    <div class=\"two-in-a-row\">\r\n      <or-text-expression \r\n        label=\"Left\"\r\n        v-model=\"leftMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"leftMarginError\"\r\n        :invalid=\"v.schema.leftMargin.$error\"\r\n        @input=\"v.schema.leftMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Right\"\r\n        v-model=\"rightMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"rightMarginError\"\r\n        :invalid=\"v.schema.rightMargin.$error\"\r\n        @input=\"v.schema.rightMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n  </div>\r\n\r\n  <div v-if=\"fileType === 'image'\">\r\n    <div>\r\n      <div class=\"normal-header\">Website resolution: </div>\r\n      <or-select\r\n        name=\"websiteResolution\"\r\n        placeholder=\"Select resolution\"\r\n        :options=\"websiteResolutionOptions\"\r\n        v-model=\"websiteResolutionLocal\"\r\n        :disabled=\"readonly\"\r\n        class=\"full-size-dropdown\"\r\n      >\r\n      </or-select>\r\n    </div>\r\n    \r\n    <div v-if=\"websiteResolution === 'custom'\" \r\n      class=\"two-in-a-row\"\r\n    >\r\n      <or-text-expression \r\n        label=\"Width\"\r\n        v-model=\"customResolutionWidthLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"customResolutionWidthError\"\r\n        :invalid=\"v.schema.customResolutionWidth.$error\"\r\n        @input=\"v.schema.customResolutionWidth.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Height\"\r\n        v-model=\"customResolutionHeightLocal\"\r\n        :readonly=\"readonly || fullPageScreenShotLocal\"\r\n        :error=\"customResolutionHeightError\"\r\n        :invalid=\"v.schema.customResolutionHeight.$error\"\r\n        @input=\"v.schema.customResolutionHeight.$touch()\"\r\n        :placeholder=\"fullPageScreenShotLocal ? 'Max height' : null\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n    \r\n    <or-checkbox v-if=\"websiteResolution === 'custom'\" \r\n      v-model=\"isMobileVersionLocal\"\r\n      :disabled=\"readonly\"\r\n    >Mobile version of website\r\n    </or-checkbox>\r\n  </div>\r\n</or-collapsible>\r\n\r\n\r\n",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".or-collapsible {\n  > .header {\n      \n    .or-collapsible__description {\n      padding-bottom: 0;\n    }\n  }\n  \n  > .body-wrapper {\n    margin-top: -0.5rem;\n    padding-bottom: 0.5rem;\n    \n    > .body {\n      padding: 0 0 0 16px;\n    }\n  }\n}\n\n.ui-select:not(.full-size-dropdown) {\n  .ui-select__dropdown {\n    min-width: 100%;\n    width: auto;\n  }\n  \n  &.or-select-expression .ui-select__dropdown {\n    width: 100%;\n  }\n}\n\n.predefined-format-dropdown.ui-select,\n.predefined-orientation-dropdown.ui-select {\n  .ui-select__dropdown {\n    min-width: 120px;\n    \n    .ui-select__content .ui-select__add {\n      padding: 0 5px;\n    }\n    \n    .ui-select__search .or-text-expression .input-wrapper {\n      padding-right: 5px;\n    }\n    \n    .ui-select__search-input {\n      padding-right: 5px;\n    }\n  }\n}\n\n\n\n.mt-1 {\n  margin-top: 1rem;\n}\n\n.mb-1 {\n  margin-bottom: 1rem;\n}\n\n.file-type-tabs.ui-tabs.flex-box.ui-tabs--type-text {\n  .ui-tabs__header .ui-tabs__header-items {\n    padding: 0;\n  }\n  \n  &.flex-box>.ui-tabs__body>.ui-tab {\n    overflow: visible;\n  }\n  \n  .ui-select .ui-select__content .ui-select__label .ui-select__display {\n    padding: 2px 0 2px 7px;\n    \n    .ui-select__dropdown-button {\n      width: .7em;\n      height: .7em;\n      line-height: 0;\n      \n      svg {\n        width: .7em;\n        height: .7em;\n      }\n    }\n  }\n}\n\n.header-with-dropdown {\n  display: flex;\n  margin-top: 0.5rem;\n  \n  & > div {\n    font-size: 14px;\n    line-height: 27px;\n  }\n  \n  .ui-select {\n    margin-left: 1rem;\n    margin-bottom: 0;\n    \n    .ui-icon {\n      display: flex;\n      height: .6em;\n      width: .6em;\n      \n      svg {\n        height: .6em;\n        width: .6em;\n      }\n    }\n    \n    // &__options {\n    //   min-width: 50px;\n    // }\n    \n    &__content .ui-select__label .ui-select__display {\n      min-height: auto;\n      padding: 2px 5px;\n    }\n    \n    &:not(.is-multiple) .ui-select__display {\n      height: auto;\n    }\n  }\n  \n  &.source-header {\n    margin-bottom: -2rem;\n    \n    .source-header__label {\n      display: flex;\n      align-items: center;\n      font-size: 12px;\n      line-height: 1.3;\n      color: #91969d;\n    }\n    \n    .source-header__type-select.ui-select {\n      .ui-select__display {\n        border: none;\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n.normal-header {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 14px;\n}\n\n.pathFileData {\n  font-size: 12px;\n}\n\n.preview {\n  max-width: 100%;\n  padding-bottom: 15px;\n}\n\n.hide {\n  display: none;\n}\n\n.upload-file {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n  \n  &__text {\n    color: #0F232E;\n    padding-right: 15px;\n    font-weight: normal;\n  }\n  \n  &__folder {\n    white-space: nowrap;\n    overflow: hidden;\n    padding-right: 5px;\n    text-overflow: ellipsis;\n    display: inline-block;\n  }\n  \n  &__button-upload.ui-button.ui-button--size-normal {\n    white-space: nowrap;\n    min-width: 95px;\n    // padding: 0;\n    // border: none;\n  }\n}\n\n.file-type {\n  margin-top: 0.6rem;\n  margin-bottom: 0.6rem;\n}\n\n.ui-radio-group {\n  &__label-text {\n    color: rgb(0, 0, 0);\n  }\n  \n  &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n  &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n    color: rgb(0, 0, 0);\n  }\n}\n\n.file-options {\n  background-color: #f6f6f6;\n  padding: 10px;\n  margin-bottom: 1rem;\n  \n  &__customize {\n    display: flex;\n    justify-content: space-between;\n    \n    > div,\n    > form{\n      width: 33%;\n    }\n    \n    > div:not(:last-child),\n    > form:not(:last-child){\n      margin-right: 5px;\n    }\n    \n    .ui-select:not(.is-disabled) .ui-select__content .ui-select__label .ui-select__display,\n    .or-editable-wrapper {\n      background-color: #fff;\n    }\n  }\n  \n  .file-options__header-with-dropdown,\n  .file-options__image-size {\n    .ui-select:not(.is-disabled) .ui-select__content .ui-select__label .ui-select__display,\n    .or-editable-wrapper {\n      background-color: #fff;\n    }\n  }\n}\n\n.two-in-a-row {\n  display: flex;\n  \n  &__item {\n    width: 50%;\n    \n    &:first-child {\n      padding-right: 5px;\n    }\n    \n    &:nth-child(2) {\n      padding-left: 5px;\n    }\n  }\n}\n\n.image-file-type.ui-radio-group {\n  display: flex;\n  align-items: center;\n  \n  .ui-radio-group__label-text {\n    margin-right: 10px;\n  }\n}"
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "bc727ec7-af7f-43a8-9899-87cde7226c85",
              "data": {
                "open": true,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "f6f70299-b3a4-4864-9396-c1059d19f7bf",
                    "data": {
                      "data": "{\n  \"makeFilePrivate\": false,\n  \"maxNavigationTimeout\": \"`10 sec`\",\n  \"loadWaitingTime\": \"`3 sec`\"\n}",
                      "toJson": "return {\n  \"maxNavigationTimeout\": data.maxNavigationTimeout,\n  \"loadWaitingTime\": data.loadWaitingTime\n}",
                      "validators": "maxNavigationTimeout : {\n  jsExpression: validators.jsExpression,\n  jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n  required: validators.required,\n  custom: (value, ctx) => {\n\t  const containsMergeField = _.isString(value) && validators.validateExpression(value)\n    const regexTextMode = /^\\`.*\\`$/;\n    \n    if (!regexTextMode.test(value)) \n      return validators.jsExpression(value);\n      \n    if (containsMergeField)\n      return true;\n    \n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    \n    if (!_.isNaN(timeoutToNumber) && timeoutToNumber < 0)\n      return false\n    \n    let parsedTimeout;\n    \n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return parsedTimeout >= 1000 && parsedTimeout <= 30*1000;\n    } catch(e) {\n      return false;\n    }\n  }\n},\nloadWaitingTime : {\n  jsExpression: validators.jsExpression,\n  jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n  required: validators.required,\n  custom: (value, ctx) => {\n\t  const containsMergeField = _.isString(value) && validators.validateExpression(value)\n    const regexTextMode = /^\\`.*\\`$/;\n    \n    if (!regexTextMode.test(value)) \n      return validators.jsExpression(value);\n      \n    if (containsMergeField)\n      return true;\n    \n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    \n    if (!_.isNaN(timeoutToNumber) && timeoutToNumber < 0)\n      return false\n    \n    let parsedTimeout;\n    \n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return parsedTimeout >= 1000 && parsedTimeout <= 20*1000;\n    } catch(e) {\n      return false;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :make-file-private.sync=\"schema.makeFilePrivate\"\n  :max-navigation-timeout.sync=\"schema.maxNavigationTimeout\" \n  :load-waiting-time.sync=\"schema.loadWaitingTime\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"   \n  :steps=\"steps\"   \n  :readonly=\"readonly\"   \n  :v=\"$v\"\n></wildcard>",
                      "componentName": "or-wildcard-fsadwrzeoixjbtyvkhqpcglunm",
                      "componentLogic": "{\n  computed : {\n    makeFilePrivateLocal : {\n      get () { return this.makeFilePrivate; },\n      set (value) { this.$emit('update:makeFilePrivate', value); }\n    },\n    maxNavigationTimeoutLocal : {\n      get () { return this.maxNavigationTimeout; },\n      set (value) { this.$emit('update:maxNavigationTimeout', value); }\n    },\n    loadWaitingTimeLocal : {\n      get () { return this.loadWaitingTime; },\n      set (value) { this.$emit('update:loadWaitingTime', value); }\n    },\n  },\n  props : {\n    makeFilePrivate : {\n      type : Boolean,\n      default : false\n    },\n    maxNavigationTimeout: {\n      type: String,\n      default : '`10 sec`'\n    },\n    loadWaitingTime: {\n      type: String,\n      default : '`3 sec`'\n    },\n    mergeFields: Object,\n    stepId : '',\n    steps : '',\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema:{maxNavigationTimeout : {}}}\n      }\n    }\n  }\n}",
                      "componentTemplate": "<!--<or-checkbox -->\n<!--  :disabled=\"readonly\" -->\n<!--  v-model=\"makeFilePrivateLocal\">Encrypt URL to uploaded file-->\n<!--</or-checkbox>-->\n\n<or-text-expression \n  name=\"Timeout\"\n  label=\"Maximum navigation timeout\"\n  help-text=\"Min 1 sec, max 30 sec\" \n  placeholder=\"10 sec\"\n  v-model=\"maxNavigationTimeoutLocal\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :merge-fields=\"mergeFields\"\n  :invalid=\"v.schema.maxNavigationTimeout.$invalid\"\n  @input=\"v.schema.maxNavigationTimeout.$touch()\"\n  :error=\"!v.schema.maxNavigationTimeout.jsExpression ? 'The Timeout must be a valid Javascript code.' : 'Enter a valid timeout.'\" \n  :readonly=\"readonly\"\n></or-text-expression>\n\n<or-text-expression \n  name=\"Load waiting time\"\n  label=\"Time to wait for webpage to load\"\n  help-text=\"Min 1 sec, max 20 sec\" \n  placeholder=\"3 sec\"\n  v-model=\"loadWaitingTimeLocal\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :merge-fields=\"mergeFields\"\n  :invalid=\"v.schema.loadWaitingTime.$invalid\"\n  @input=\"v.schema.loadWaitingTime.$touch()\"\n  :error=\"!v.schema.loadWaitingTime.jsExpression ? 'The time must be a valid Javascript code.' : 'Enter a valid time.'\" \n  :readonly=\"readonly\"\n></or-text-expression>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "d7ee7229-c3e6-4595-a9c3-3da009d6c964",
                    "data": {
                      "label": "Merge field",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "defaultName": "htmlToPdf",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": false
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"url\": \"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  },
                  {
                    "id": "__error__",
                    "label": "error"
                  }
                ],
                "dataOut": "htmlToPdf",
                "newName": "``",
                "filePath": "``",
                "fileType": "pdf",
                "assetsUrl": "",
                "authToken": "",
                "imageSize": "full",
                "topMargin": "``",
                "urlSource": "``",
                "htmlSource": "",
                "leftMargin": "``",
                "marginUnits": "px",
                "pdfViewType": "predefined",
                "rightMargin": "``",
                "bottomMargin": "``",
                "imageQuality": "80",
                "pdfSizeUnits": "px",
                "processError": true,
                "imageFileType": "jpeg",
                "fileSourceType": "url",
                "footerTemplate": "``",
                "headerTemplate": "``",
                "pdfCustomWidth": "``",
                "backgroundToPdf": true,
                "makeFilePrivate": false,
                "pdfCustomHeight": "``",
                "backgroundToImage": false,
                "pdfPredefinedSize": "Letter",
                "websiteResolution": "screen",
                "fullPageScreenShot": false,
                "imageSizeClipWidth": "``",
                "imageSizeClipHeight": "``",
                "websitePrintVersion": false,
                "imageSizeClipXOffset": "``",
                "imageSizeClipYOffset": "``",
                "imageSizeCustomWidth": "``",
                "customResolutionWidth": "``",
                "imageSizeCustomHeight": "``",
                "customResolutionHeight": "``",
                "pdfPredefinedOrientation": "landscape"
              },
              "rawMode": false,
              "version": "08b9f7c2-e673-4e0b-bd2d-eda2fe950f87",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "dbaccacc-ecca-4e19-8443-2cddd33055c0",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": true
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.isMobileVersion = false",
            "version": "0.5.14"
          },
          {
            "sample": null,
            "script": "step.data['loadWaitingTime'] = \"`3 sec`\";\n",
            "version": "0.5.16"
          },
          {
            "sample": null,
            "script": "step.data['pdfPredefinedSize'] = \"`Letter`\";\n",
            "version": "0.5.18"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.19"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.20"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.21"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.22"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.23"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.24"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.25"
          },
          {
            "sample": null,
            "script": "step.data.useFiles = true;",
            "version": "0.5.26"
          }
        ],
        "dateModified": 1602087433390
      },
      {
        "id": "066d6b8c-04ec-4b25-9b3d-ccaa191a8d4e",
        "version": "1.0.2",
        "cacheVersion": "a5215857-942b-417f-9e50-8b23603a98cc",
        "label": "Combine Text",
        "icon": "combine_text",
        "iconType": "default",
        "iconUrl": "",
        "shape": "hexagon",
        "description": "Use this step to combine separate strings or array elements into a single text divided by defined separators.",
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "template": "let theText = startingText || '';\n\nif (method === 'inputs') { \n  _.forEach(inputData, section => {\n    theText += section.separator.replace(/`/g, '') + section.data.replace(/`/g, '');\n  });\n} else {\n  let arrayInput = [];\n  \n  if (arrayData.jsonTable) {\n    if (!Array.isArray(arrayData.jsonTable)) {\n      arrayInput.push(arrayData.jsonTable);\n      arrayInput = JSON.parse(arrayData.jsonTable.replace(/'|`/g, '\"'));\n    } else {\n      arrayInput = arrayData.jsonTable;\n    }\n  } else {\n    arrayInput = '';\n  }\n  \n  _.forEach(arrayInput, item => {\n    theText += arrayData.separator.replace(/`/g, '') + item;\n  });\n}\n\nreturn this.exitStep('next', {value: theText});",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "method": "inputs",
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "arrayData": {
            "jsonTable": "[]",
            "separator": "``"
          },
          "inputData": [
            {
              "data": "``",
              "separator": "``"
            }
          ],
          "separators": [
            {
              "label": "None",
              "value": "``"
            },
            {
              "label": "New line",
              "value": "`\n`"
            },
            {
              "label": "Comma",
              "value": "`,`"
            },
            {
              "label": "Tab",
              "value": "`\t`"
            },
            {
              "label": "Break tag (HTML)",
              "value": "`<br />`"
            },
            {
              "label": "Space",
              "value": "` `"
            }
          ],
          "processError": true,
          "startingText": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "value": ""
        },
        "help": "Use this step to combine separate strings or array elements into a single text divided by defined separators. Multiple *Combine Text* steps can be used but none should be placed as the first step of a flow.\n\n### Combine settings\nYou can define the *start text* input manually, with a *merge field value* (click on the `{x}` icon) or in *code mode*, or leave it empty.\n\nChoose the *text input* option to combine *start text* with text from inputs divided by selected separators. *Text* can be added manually and with a *merge field value*. Any additional text input can be created via *Add new section* button. You can choose the *separator* from a predefined list or create a custom one for each section individually. For example:\n```\nInput values:\nStart text: Name:\nSeparator before: Break Tag (HTML)\nText: Andrew\nSeparator before: Tab\nText: John\n```\nwill result to:\n```\n\"Name:<br />Andrew\\tJohn\"\n```\nChoose the *array input* option to combine the *start text* with a JSON array of values, where each value will be divided by a selected separator. *Array* can be added manually and using a *merge field value*. For example:\n```\nInput values:\nStart text: Name:\nSeparator between: New line\nArray of text values: [Andrew,John,Carl]\n```\nwill result to:\n```\n\"Name:\\nAndrew\\nJohn\\nCarl\"\n```\nNote, JSON object cannot be used as an appropriate data type for text combining.\n\n### Advanced settings\nThe output data of the step will be stored under the name provided in the *merge field name*. If you use the same step multiple times in a flow, please customize the *merge field name* for each step; otherwise the last instance of a step will overwrite the data of the previous instances. \n\n### Error handling\n*Process error* is on by default and adds an *error* leg to the step. The flow will exit through this leg if any error was encountered during the execution of the step.\n\n### Reporting Events\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n",
        "formBuilder": {
          "stepExits": [
            {
              "id": "f77fa904-99c7-4276-823c-42b5a2f27fd6",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "a1f69bc2-65d5-43ed-8bc9-e35d1fec7abd",
              "data": {
                "open": true,
                "header": "Combine settings",
                "inputs": [
                  {
                    "id": "7b962f4d-bee0-4256-ab11-f1f0af64255d",
                    "data": {
                      "label": "Start text",
                      "helpText": "",
                      "variable": "startingText",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "renderCondition": "",
                      "trimWhitespaces": false,
                      "validateRequired": false
                    },
                    "compiled": {},
                    "component": "formTextBox"
                  },
                  {
                    "id": "a71ec561-f85f-4615-b4f4-c2c98e868327",
                    "data": {
                      "data": "{\n  \"arrayData\": {\n    \"separator\": \"``\",\n    \"jsonTable\" : \"[]\"\n  },\n  \"inputData\": [\n    {\n      \"separator\": \"``\",\n      \"data\": \"``\"\n    }\n  ],\n  \"method\": \"inputs\",\n  \"separators\": [\n    {\n      \"label\": \"None\",\n      \"value\": \"``\"\n    },\n    {\n      \"label\": \"New line\",\n      \"value\": \"`\\n`\"\n    },\n    {\n      \"label\": \"Comma\",\n      \"value\": \"`,`\"\n    },\n    {\n      \"label\": \"Tab\",\n      \"value\": \"`\\t`\"\n    },\n    {\n      \"label\": \"Break tag (HTML)\",\n      \"value\": \"`<br />`\"\n    },\n    {\n      \"label\": \"Space\",\n      \"value\": \"` `\"\n    }\n  ]\n}",
                      "toJson": "function toJson(data, key) { \r\n    const hasMergeField = value => {\r\n      const mergeFieldRegex = [\r\n        /await\\s+this\\.mergeFields\\['(#?\\w*?)'\\]\\.get\\((?:\\{path:\\s+'([\\w\\.]+)'\\})?\\)/g,\r\n        /\\$\\{[^\\}]*\\}|this(\\.session)?\\.get(Shared|Global)?\\(['\"`].*?['\"`]\\)/g,\r\n        /this\\.(helpers|config|error)(\\.[a-zA-Z_\\$][\\w\\$])?/g\r\n      ]\r\n      return (typeof value === 'string') && !!mergeFieldRegex.find(re => re.test(value)); \r\n    };\r\n    \r\n    if (_.isArray(data)) { \r\n        return `[${_.map(data, toJson).join(',')}]`;\r\n    }\r\n    if (_.isObject(data)) {\r\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key)}`).join(',')}}`;\r\n    }\r\n    \r\n    if(key === 'jsonTable') return data;\r\n    \r\n    if (typeof data === 'string') return (data.startsWith(\"`\") && data.endsWith(\"`\") \r\n                                          || data.startsWith(\"'\") && data.endsWith(\"'\") \r\n                                          || hasMergeField(data)) \r\n                                          ? `${data}` : JSON.stringify(data);\r\n    return JSON.stringify(data);\r\n}\r\n \r\nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard :array-data.sync=\"schema.arrayData\" :input-data.sync=\"schema.inputData\" :method.sync=\"schema.method\" :separators.sync=\"schema.separators\" :steps=\"steps\" :step-id=\"stepId\" :readonly=\"readonly\" :merge-fields=\"mergeFields\"></wildcard>",
                      "componentName": "or-wildcard-lzifucanbdhwkyxqrtvjompsge",
                      "componentLogic": "{\n  props: {\n    arrayData: {\n      type: Object,\n      default() {\n        return {\n          separator: '``',\n          jsonTable: ''\n        }\n      }\n    },\n    inputData: {\n      type: Array,\n      default() {\n        return [\n          {\n            separator: '``',\n            data: '``'\n          }\n        ]\n      }\n    },\n    method: {\n      type: String,\n      default() {\n        return 'inputs'\n      }\n    },\n    readonly: {\n      type : Boolean, \n      default: false\n    },\n    separators: {\n      type: Array,\n      default() {\n        return [\n          {\n            label: 'None',\n            value: \"``\"\n          },\n          {\n            label: 'New line',\n            value: '`\\n`'\n          },\n          {\n            label: 'Comma',\n            value: '`,`'\n          },\n          {\n            label: 'Tab',\n            value: '`\\t`'\n          },\n          {\n            label: 'Break tag (HTML)',\n            value: '`<br />`'\n          },\n          {\n            label: 'Space',\n            value: '` `'\n          }\n        ]\n      }\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    steps: {\n      type: Array,\n      default: []\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n    }\n    }\n  },\n  data() {\n    return {\n      localArrayData: _.cloneDeep(this.arrayData),\n      localInputData: _.cloneDeep(this.inputData),\n      separatorsList: _.cloneDeep(this.separators)\n    }\n  },\n  methods: {\n    addNewItem() {\n      return {\n        separator: \"``\",\n        data: '``'\n      }\n    },\n    changeMethod(value) {\n      this.$emit('update:method', value)\n    }\n  },\n  watch: {\n    localArrayData: {\n      handler() {\n        this.$emit('update:arrayData', this.localArrayData);\n      },\n      deep: true\n    },\n    localInputData: {\n      handler() {\n        this.$emit('update:inputData', this.localInputData);\n      },\n      deep: true\n    },\n    separatorsList: {\n      handler() {\n        this.$emit('update:separators', this.separatorsList);\n      },\n      deep: true\n    }\n  }\n}",
                      "componentTemplate": "<div>\n  <p class=\"tabs__label\">Combine with</p>\n  <or-tabs class=\"flex-box\" fullwidth>\n    <or-tab @select=\"changeMethod\" :selected=\"method === 'inputs'\" title=\"Text input\" id=\"inputs\">\n      <or-list \n        v-model=\"localInputData\"\n      \n        :new-item-method=\"addNewItem\"\n        :readonly=\"readonly\"\n        :steps=\"steps\"\n        :step-id=\"stepId\"\n        :merge-fields=\"mergeFields\"\n        addButtonLabel=\"Add new section\" \n        label=\"\"\n        ref=\"list\"\n        single-line\n      >\n        <template slot-scope=\"item\" :index=index>\n          <div class=\"input-data\" :class=\"{'more-items': item.index >= 1}\">\n            <or-select-expression\n              v-model=\"item.item.separator\"\n              \n              :disabled=\"readonly\"\n              :label=\"item.index >= 1 ? '' : 'Separator before'\"\n              :options.sync=\"separatorsList\"\n              :steps=\"steps\" \n              :step-id=\"stepId\" \n              :merge-fields=\"mergeFields\"\n              extendable-options \n              has-search \n              placeholder=\"Select\" \n            ></or-select-expression>\n\n            <or-text-expression\n              v-model=\"item.item.data\"\n            \n              :label=\"item.index >= 1 ? '' : 'Text'\" \n              :readonly=\"readonly\"\n              :steps=\"steps\" \n              :step-id=\"stepId\" \n              :merge-fields=\"mergeFields\"\n              disableCodeMode\n              class=\"item--data\"\n            ></or-text-expression>\n          </div>\n        </template>\n      </or-list>\n    </or-tab>\n  \n    <or-tab @select=\"changeMethod\" :selected=\"method === 'array'\" title=\"Array input\" id=\"array\">\n      <div class=\"array-data\">\n        <or-select-expression \n          v-model=\"localArrayData.separator\"\n          \n          :disabled=\"readonly\"\n          :steps=\"steps\" \n          :step-id=\"stepId\" \n          :merge-fields=\"mergeFields\"\n          :options.sync=\"separatorsList\" \n          class=\"array-data__item\"\n          extendable-options \n          has-search \n          label=\"Separator between\"\n          placeholder=\"Select\" \n        ></or-select-expression>\n        <or-text-expression \n          v-model=\"localArrayData.jsonTable\"\n          \n          :readonly=\"readonly\"\n          :steps=\"steps\" \n          :step-id=\"stepId\" \n          :merge-fields=\"mergeFields\"\n          label=\"Array of text values\" \n        ></or-text-expression>\n      </div>\n    </or-tab>\n  </or-tabs>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ace_scroller{\n  margin-right: 30px;\n}\n.tabs__label {\n  margin-bottom: 0;\n    \n  font-size: 12px;\n  color: #91969d;\n  line-height: 36px;\n}\n.ui-tabs.flex-box {\n .ui-tabs__header {\n    padding: 0 0 15px;\n   \n    .ui-tabs__header-items {\n      padding: 0;\n    }\n }\n  \n  .ui-tab-header-item__text {\n    text-transform: none;\n  }\n    \n  .ui-tab {\n    overflow: inherit;\n  }\n  \n  .array-data {\n    display: flex;\n    flex-grow: 1;\n    \n    .ui-select {\n      width: 150px;\n      margin-right: 20px;\n      \n      &__dropdown {\n        min-width: 150px;\n      }\n    }\n    \n    .ui-textbox {\n      width: 40px;\n      margin-top: 36px;\n      margin-right: 20px;\n    }\n    \n    & > .or-text-expression {\n      position: relative;\n      \n      flex-grow: 1;\n      \n      .header {\n        position: static;\n        \n        .ui-icon-button {\n          position: absolute;\n          right: 0;\n          \n           z-index: 20;\n          \n          &.full-screen {\n            top: 30px;\n          }\n          \n          &.add-variable {\n            top: 55px;\n          }\n        }\n        \n        .label {\n          white-space: inherit;\n        }\n        \n        .js-mode-btn {\n          display: none;\n        }\n      }\n      \n      .input-wrapper {\n        .ace-wrapper {\n          min-height: 65px;\n        }\n      }\n    }\n  }\n  \n  .input-data {\n    display: flex;\n    flex-grow: 1;\n    max-width: calc(100% - 60px);\n    \n    .ui-select {\n      margin-right: 20px;\n      margin-bottom: 0;\n      max-width: 160px;\n      width: 42%;\n      min-width: 110px;\n      \n      &__content {\n        width: 110px;\n      }\n    }\n    \n    .item--data {\n      position: relative;\n    \n      flex-grow: 1;\n      min-width: 0;\n      width: 60%;\n      margin-bottom: 0;\n      \n      .add-variable {\n        position: absolute;\n        top: 37px;\n        right: 0;\n        z-index: 10;\n      }\n      \n      .editable {\n        width: calc(100% - 30px);\n      }\n    }\n    \n    &.more-items {\n      .ui-textbox {\n        margin-top: 0;\n      }\n      \n      .item--data {\n        .header {\n          position: absolute;\n          right: 0;\n            \n          z-index: 10;\n          \n          .add-variable {\n            top: 2px;\n          }\n          \n          .label,\n          .js-mode-btn {\n            display: none;\n          }\n        }\n      }\n    }\n  }  \n\n  .or-list {\n    .or-list-items_single-line {\n      overflow: initial;\n    }\n    \n    .list-item {\n      .sortable-handle {\n        align-self: center;\n        margin-bottom: 0;\n      }\n      \n      &:first-child {\n        padding-top: 0;\n        \n        .remove-button {\n          align-self: flex-end;\n        }\n        \n        .sortable-handle {\n          align-self: flex-end;\n          margin-bottom: 9px;\n        }\n      }\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "rememberedState": true,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "551ed87a-1606-4302-b384-08ae1d95f74b",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "72109023-b8e8-4cd2-a996-1bb6d802dc96",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step's result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "combinedText",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "rememberedState": true,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            }
          ],
          "outputExample": "{\n  \"value\": \"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": null,
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{}};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.2"
          }
        ]
      },
      {
        "id": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
        "version": "1.1.2",
        "cacheVersion": "46755963-6df5-480b-a64f-5f1bec548c96",
        "label": "Go to a Step in Current Flow",
        "icon": "goto",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-down",
        "description": "Use this step to go to any other step on the tree during the flow execution.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "if (!gotoStepId) {\n  throw new Error('no goto step id');\n}\n\nif (loopDetection) {\n  const stepId = this.currentStepId;\n  let limit = this.get(`limit_${stepId}`, numberOfPasses);\n  let parsedLimit;\n  \n  let firstEnterLocal = this.get(`firstEnter_${stepId}`, firstEnter);\n  this.set(`firstEnter_${stepId}`, false);\n  \n  if (!_.isNumber(limit) && !_.isString(limit)) {\n    if (handleLimit) {\n      this.log.error(`The Limit is invalid: ${limit}`);\n      return this.exitStep('limit');  \n    }\n    throw new Error(`The Limit is invalid: ${limit}`);\n  }\n  \n  parsedLimit = _.parseInt(limit);\n  \n  if ((_.isNaN(parsedLimit) || parsedLimit < 1) && firstEnterLocal) {\n    if (handleLimit) {\n      this.log.error(`The Limit is invalid: ${limit}`);\n      return this.exitStep('limit');\n    }\n    throw new Error(`The Limit is invalid: ${limit}`);\n  }\n  \n  if (parsedLimit >= 1) {\n    parsedLimit -= 1;\n    this.set(`limit_${stepId}`, parsedLimit);\n    return this.jumpTo(gotoStepId);\n  } else if (handleLimit) {\n    return this.exitStep('limit');\n  } else {\n    throw new Error(`Limit of Go To step is exceeded.`);\n  }\n} else {\n  return this.jumpTo(gotoStepId);\n}",
        "form": {
          "component": null
        },
        "data": {
          "exits": [],
          "firstEnter": true,
          "gotoStepId": "``",
          "handleLimit": false,
          "selectedStep": {},
          "loopDetection": true,
          "numberOfPasses": "`10`",
          "textExpressionMode": "text"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Use this step to forward the end user to any step on the tree during the flow execution.\n\n**Destination step**\nSelect the step user needs to go to from the list in dropdown. The icon of that step will be highlighted on the flow tree. When the destination step is splitted from the tree, Go to step remembers the destination path and is validated. And after the splitted step is back to the tree the Go to step directs user correctly to it.\n\n**Loop handling**\n*Loop handling* toggle is on by default and lets you specify the number of returns to the selected step in the single session in the *Limit of redirects* field. This can be useful in a case where flow has a lot of loops and iterations and additional control is needed on the number of redirects. The field can be filled in manually or using a merge field. Only positive numbers can be used. If a decimal value was entered an integer part of it will be used as limit.\n*Process limit* toggle adds an exit leg to the step to route the flow if the number of redirects exceeds limit or incorrect value was used.\n\n**Reporting events**\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n**Release notes**\n#### 1.1.12\n- add mergeFields property to the `Limit of redirects` field\n",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "ab6241e1-9df2-482f-a2f3-487e89539ad1",
              "data": {
                "data": "{\n  \"selectedStep\": {},\n  \"gotoStepId\": \"``\"\n}",
                "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data, key) { \n    if (_.isEqual(key, 'gotoStepId')) {\n      return data;\n    }\n    if (_.isArray(data)) { \n      return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n      return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "gotoStepId: {\n  custom (value) {\n    const stepId = value.slice(1, -1);\n    if (_.isEmpty(stepId)) return true;\n    let steps = _.filter(this.steps, step => step.type != 'empty');\n    return  Boolean(_.find(steps, {id : stepId}));\n  }\n},\n\nselectedStep: {\n  custom (value) {\n    return !_.isEmpty(value);\n  }\n}",
                "applyToJson": true,
                "formTemplate": "<wildcard \n  :selected-step.sync=\"schema.selectedStep\"\n  :goto-step-id.sync=\"schema.gotoStepId\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :v=\"$v\">\n</wildcard>",
                "allowCodeMode": true,
                "componentName": "or-wildcard-fyivjntzxbgwqupmlhkaescrod",
                "componentLogic": "{ \n  props : {\n    gotoStepId : {\n      type : String,\n      default : '``'\n    },\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    selectedStep : {\n      type : Object,\n      default () {\n        return {};\n      }\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            gotoStepId: {},\n            selectedStep: {}\n          }\n        };\n      }\n    }\n  },\n  \n  data() {\n    return {\n      options : this.fillOptions(),\n      query : '',\n      brokenRefernceError: 'Broken reference: the selected step is detached from the main flow tree.',\n      requiredFieldError: 'Destination step is required.'\n    }\n  },\n  \n  computed: {\n    selectedStepId: {\n      get() {\n        this.highlightDestinationOn(this.gotoStepId);\n        return this.gotoStepId;\n      },\n      \n      set(selectedStepId) {\n        this.highlightDestinationOff(this.selectedStepId);\n        const selectedStep = _.find(this.options, { value: selectedStepId });\n        this.$emit('update:gotoStepId', selectedStepId);\n        if (selectedStep) {\n          this.$emit('update:selectedStep', selectedStep);\n        }\n        this.highlightDestinationOn(selectedStepId);\n      }\n    },\n    errorMessage() {\n      let errorMessage = '';\n      if (this.v.schema.gotoStepId.$error) {\n        errorMessage = this.brokenRefernceError;\n      }\n      \n      if (this.v.schema.selectedStep.$error) {\n        errorMessage = this.requiredFieldError;\n      }\n      return errorMessage;\n    }\n  },\n  \n  methods : {\n    highlightDestinationOn(stepId) {\n      stepId = stepId.slice(1, -1);\n      this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n    },\n    \n    highlightDestinationOff(stepId) {\n      stepId = stepId.slice(1, -1);\n      this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});  \n    },\n    \n    highlightDestinationOffOnMouseout(stepId) {\n      if (stepId !== this.selectedStepId) {\n        stepId = stepId.slice(1, -1);\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});  \n      }\n    },\n    \n    zoomInOnStep () {\n      const stepId = this.selectedStepId.slice(1, -1);\n      this.$flow.zoomInOnStep(stepId);\n    },\n    \n    fillOptions() {\n      const thisStep = _.find(this.steps, {id : this.stepId}) || {};\n      const steps =  _.chain(this.steps)\n        .filter(step => step.id !== thisStep.id && step.type !== 'empty' && step.type !== thisStep.type)\n        .map(step => ({ value: `\\`${step.id}\\``, label : step.label || 'No name' }))\n        .value();\n      const rememberedStep = _.clone(this.selectedStep);\n      const selectedStep = _.find(steps, {value : rememberedStep.value});\n      \n      if (rememberedStep.label && !selectedStep) {\n        steps.push(rememberedStep);\n      } else if (rememberedStep && selectedStep && rememberedStep.label !== selectedStep.label){\n        this.$emit('update:selectedStep', selectedStep);\n      }\n      \n      return _.sortBy(steps, step => step.label.toLowerCase());\n    }\n  },\n  \n  watch : {\n    steps : {\n      handler() {\n        this.options = this.fillOptions();\n      }, \n      deep : true\n    }\n  },\n  \n  beforeDestroy () {\n    this.highlightDestinationOff(this.selectedStepId);\n  },\n  \n  created () {\n    const selectedStep = _.find(this.options, {value : this.selectedStepId});\n    if (!selectedStep) {\n      this.selectedStepId = '``';\n    } else {\n      this.highlightDestinationOn(this.selectedStepId);\n    }\n  }\n}",
                "renderCondition": "",
                "componentTemplate": "<h4>Destination step</h4>\n<div class=\"select-destination-wr\">\n  <or-select has-search \n    class=\"select-destination\"\n    placeholder=\"Select a step\"\n    search-placeholder=\"Type to search\"\n    :options=\"options\" \n    v-model=\"selectedStepId\"\n    :invalid=\"v.schema.gotoStepId.$error || v.schema.selectedStep.$error\"\n    :error=\"errorMessage\"\n    :disabled=\"readonly\">\n    <template slot-scope=\"props\" slot=\"option\">\n      <div \n        class=\"ui-select-option__basic\"\n        @mouseenter=\"highlightDestinationOn(props.option.value)\"\n        @mouseout=\"highlightDestinationOffOnMouseout(props.option.value)\"\n        @click=\"highlightDestinationOn(props.option.value)\">\n        {{props.option.label}}\n      </div>\n    </template>\n  </or-select>\n  <or-icon-button \n    class=\"zoom-in-button\" \n    icon=\"zoom_in\" \n    type=\"secondary\" \n    color=\"primary\" \n    @click=\"zoomInOnStep\" \n    tooltip=\"Show destination\" \n    tooltip-position=\"top right\">\n  </or-icon-button>\n</div>\n",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".select-destination-wr {\n  position: relative;\n}\n\n.select-destination {\n  width: calc(100% - 36px);\n}\n\n.zoom-in-button {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 1;\n}"
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "fd795075-4347-491a-ac6e-ac35a4376c5e",
              "data": {
                "open": false,
                "header": "Loop handling",
                "inputs": [
                  {
                    "id": "eefc0deb-b58d-461d-ae71-eb086900a6f9",
                    "data": {
                      "data": "{\n  \"loopDetection\": true,\n  \"handleLimit\": false,\n  \"numberOfPasses\": \"`10`\",\n  \"textExpressionMode\": \"text\",\n  \"firstEnter\": true\n}",
                      "toJson": "return {\n  \"handleLimit\": data.handleLimit,\n  \"loopDetection\": data.loopDetection,\n  \"numberOfPasses\": data.numberOfPasses,\n  \"firstEnter\": data.firstEnter\n}",
                      "validators": "{\n  numberOfPasses: {\n    required: validators.required,\n    jsExpression: validators.jsExpression,\n    jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n    custom(value) {\n      if (/this./.test(value)) return true;\n      value = Number(value.replace(/`/g, ''));\n      if (isNaN(value)) return false;\n      if (value < 1) return false;\n      return true;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :loop-detection.sync=\"schema.loopDetection\" \n  :handle-limit.sync=\"schema.handleLimit\"\n  :number-of-passes.sync=\"schema.numberOfPasses\" \n  :text-expression-mode.sync=\"schema.textExpressionMode\" \n  :exits.sync=\"schema.exits\" \n  :v=\"$v\"\n  :is-new=\"isNew\" \n  :steps=\"steps\" \n  :step-id=\"stepId\" \n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"  \n  :goto-step-id=\"schema.gotoStepId\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ymdqxgtwcbjuhsolrezviaknfp",
                      "componentLogic": "{\n  data() {\n    return {\n      exitsLocal: _.clone(this.exits),\n      errorMessageInCodeMode: 'The Limit of redirects is not a valid JavaScript expression.',\n      errorMessageRequired: 'The Limit of redirects is required.',\n      errorMessageInTextMode: 'Only positive number can be used as a value.'\n    }\n  },\n  computed: {\n    errorMessage() {\n      let message = '';\n      switch (this.textExpressionMode) {\n        case 'text': \n          const mergfieldRegex = /\\$\\{this.get\\('.{1,}'\\)\\}/g;\n          let num = this.numberOfPassesLocal.slice(1, -1);\n          if (_.isEmpty(num)) {\n            message = this.errorMessageRequired;\n          } else if (!mergfieldRegex.test(num) || _.isNaN(parseInt(num))) {\n            message = this.errorMessageInTextMode;\n          }\n          break;\n        case 'code': \n          if (_.isEmpty(this.numberOfPassesLocal)) {\n            message = this.errorMessageRequired;\n          } else if (!validators.jsExpression(this.numberOfPassesLocal)) {\n            message = this.errorMessageInCodeMode;\n          }\n          break;\n      }\n      \n      return message;\n    },\n    loopDetectionLocal: {\n      get () { \n        return this.loopDetection; \n      },\n      set (value) {\n        if (!value) {\n          this.handleLimitLocal = false;\n        }\n        this.$emit('update:loopDetection', value);\n      }\n    },\n    handleLimitLocal: {\n      get () { \n        return this.handleLimit;\n      },\n      set (value) {\n        if (!_.isEmpty(this.stepId)) {\n          const limitLegIndex =  _.findIndex(this.exitsLocal, { label : 'limit' });\n          if (!value && limitLegIndex >= 0) {\n            this.exitsLocal.splice(limitLegIndex, 1);\n          } else if (value && limitLegIndex === -1) {\n            this.exitsLocal.splice(0, 0, {\n              id : uuid.v4(),\n              label : 'limit',\n              stepId : '',\n              dynamic : true\n            });\n          }\n        }\n        \n        this.$emit('update:handleLimit', value);\n      }\n    },\n    numberOfPassesLocal: {\n      get () { return this.numberOfPasses; },\n      set (value) { this.$emit('update:numberOfPasses', value); }\n    }\n  },\n  methods: {\n    setTextExpressionMode(mode) {\n      this.$emit('update:textExpressionMode', mode)\n    },\n    highlightDestinationOn() {\n      const stepId = this.gotoStepId.slice(1, -1);\n      this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n    }\n  },\n  watch : {\n    exitsLocal : {\n      handler (value) {\n        this.$emit('update:exits', value);\n      }\n    }\n  },\n  props: {\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    loopDetection: {\n      type: Boolean,\n      default: true\n    },\n    handleLimit: {\n      type: Boolean,\n      default: true\n    },\n    numberOfPasses: {\n      type: String,\n      default: '`10`'\n    },\n    textExpressionMode: {\n      type: String,\n      default: 'text'\n    },\n    gotoStepId: {\n      type: String,\n      default: 'text'\n    },\n    exits : {\n      type : Array,\n      default () {\n        return []\n      }\n    },\n    v: {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            numberOfPasses: {}\n          }\n        }\n      }\n    },\n    isNew: Boolean,\n    readonly: {\n      type: Boolean \n    },\n    steps: {},\n    stepId: ''\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch v-model=\"loopDetectionLocal\"\n    :disabled=\"readonly\">\n    Set the limit of redirects\n  </or-switch>\n  <or-text-expression v-if=\"loopDetectionLocal\"\n    label=\"Limit of redirects\"\n    ref=\"numberOfPasses\"\n    v-model=\"numberOfPassesLocal\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    help-text=\"Only positive number can be used as value.\"\n    :readonly=\"readonly\"\n    :invalid=\"v.schema.numberOfPasses.$error\"\n    :error=\"errorMessage\"\n    :merge-fields=\"mergeFields\"\n    @mode-changed=\"setTextExpressionMode\">\n  </or-text-expression>\n  <or-switch v-if=\"loopDetectionLocal\"\n    v-model=\"handleLimitLocal\"\n    :disabled=\"readonly\">\n    Process limit\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "hasProcessError": false,
          "hasProcessTimeout": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [],
                "gotoStepId": "",
                "selectedStep": {}
              },
              "rawMode": false,
              "version": "816c79a4-624f-4de8-bfcc-f64dfd488d60",
              "formBuilder": {
                "stepExits": [],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.handleLimit = false;\nstep.data.loopDetection = false;\nstep.data.numberOfPasses = \"`10`\";\nstep.data.stepId = \"\";\nstep.data.textExpressionMode = \"text\";\nstep.data.firstEnter = true;",
            "version": "1.1.0"
          },
          {
            "script": "",
            "version": "1.1.2"
          }
        ],
        "dateModified": 1613053822975
      },
      {
        "id": "05686b75-9048-4162-808e-e1153fe76b79",
        "version": "3.0.0",
        "cacheVersion": "e858ab82-ac88-48cb-8d43-1cb4ac761d90",
        "label": "Trigger Another Flow and Wait for Result",
        "icon": "flow",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-right",
        "description": "Starts another flow and waits for its result before proceeding with current flow's execution.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Trigger"
        ],
        "recommended": [],
        "tags": [],
        "template": "const short = require('short-uuid');\r\nconst translator = short();\r\nconst ts = require('timestring');\r\nconst TimeoutError = require('@onereach/flow-sdk/errors/timeout');\r\n\r\nflowId = isUseCustomSubflow ? customSubFlowName.toLowerCase() : flowIdToTrigger;\r\nlet timeout = isAsync ? timeoutAsync : timeoutSync;\r\ntimeout = ts(timeout.input, timeout.outputMode);\r\n\r\nif ((isAsync && (timeout < 60 * 1000 || timeout > 72 * 60 * 60 * 1000)) || (!isAsync && (timeout < 1000 || timeout > 24 * 60 * 60 * 1000))) {\r\n  throw new Error(`Invalid timeout: ${timeout}`);\r\n}\r\n\r\n\r\n\r\nif (isUseCustomSubflow && paramsProcessType === 'manually') {\r\n  flowParameters = customFlowParameters\r\n}\r\n\r\nflowParameters = _.reduce(flowParameters, (acc, {\r\n  name,\r\n  value\r\n}) => {\r\n  acc[name] = value;\r\n  return acc;\r\n}, {})\r\n\r\nconst params = {\r\n  flowId,\r\n  isSync: !isAsync\r\n};\r\n\r\n// check assigment\r\n\r\n_.assign(params, flowParameters);\r\n\r\n\r\nconst event = {\r\n  name: `try/${flowId}`,\r\n  params\r\n};\r\n\r\nif (isAsync) {\r\n  let eventId = thisStep.state.get(this, ['eventId'], false);\r\n  \r\n  // eventId will be truthy if this execution is for result/error/timeout\r\n  if (!eventId) {\r\n    eventId = translator.new();\r\n    thisStep.state.set(this, ['eventId'], eventId);\r\n  }\r\n\r\n  return this.triggers\r\n    .once(`result/${eventId}`, (event) => {\r\n      // const exitName = event.params.selectedExit || 'result';\r\n      const exitName = event.params.selectedExit;\r\n      if (exitName == 'error') throw new Error(JSON.stringify(event.params.error));\r\n      return this.exitStep(exitName, event.params.data);\r\n    })\r\n    .timeout(timeout, () => {\r\n      if (processTimeout) {\r\n        throw new TimeoutError('timeout');\r\n      }\r\n      throw new Error('Timeout appear');\r\n    })\r\n    .otherwise(async () => {\r\n      await this.triggers.flush()\r\n      event.params.eventId = eventId;\r\n      \r\n      const result = await this.emitAsync(event);\r\n\r\n      if (_.isNil(result)) {\r\n        const errorText = 'Unable to find the flow you\\'ve tried to trigger. Re-check your subflow name.';\r\n        await this.setDataOut({\r\n          errorText,\r\n          event\r\n        });\r\n        throw new Error(errorText);\r\n      }\r\n\r\n      return this.exitFlow();\r\n    })\r\n} else {\r\n  return this.emitSync(event, null, timeout)\r\n    .then(result => {\r\n      const responseResult = _.get(result, 'result', {});\r\n      // this.log.warn('SYNC RUN RESULT', responseResult)\r\n\r\n      if (_.isEmpty(responseResult) || responseResult.error) {\r\n        throw new Error(JSON.stringify(_.get(responseResult, 'error', 'Unknow error')));\r\n      } else if (responseResult === 'Invalid timeout') {\r\n        throw new Error('Invalid timeout in subflow');\r\n      }\r\n\r\n      // const exitName = responseResult.selectedExit || 'result';\r\n      const exitName = responseResult.selectedExit;\r\n      return this.exitStep(exitName, responseResult.data);\r\n    }).catch(error => {\r\n      if (processTimeout && error.message.indexOf('timeout') >= 0) {\r\n        throw new TimeoutError('timeout');\r\n      }\r\n      throw new Error(error.message);\r\n    });\r\n}",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "__timeout__",
              "label": "timeout",
              "condition": "processTimeout"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "flowId": "",
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "isAsync": true,
          "resultExits": [],
          "timeoutSync": {
            "input": "`30 sec`",
            "outputMode": "ms"
          },
          "processError": true,
          "timeoutAsync": {
            "input": "`1 h`",
            "outputMode": "ms"
          },
          "flowParameters": [],
          "processTimeout": true,
          "flowIdToTrigger": "",
          "timeoutDuration": "`30 sec`",
          "customResultExits": [
            {
              "name": "result",
              "vforkey": "b5fc343c-7d7e-4aad-a514-9dddade9838f"
            }
          ],
          "customSubFlowName": "``",
          "paramsProcessType": "manually",
          "isUseCustomSubflow": false,
          "flowToGetParamsFrom": "",
          "customFlowParameters": [],
          "cachedFlowListOptions": [],
          "dynamicExitsArrayStart": 0
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Use this step to start another flow (*subflow*) and wait for its result before proceeding with current flow's (*main flow*) execution. Step works together with `Wait for Trigger from Another Flow`, `Return Result to Another Flow` and `Return Error to Another Flow` steps. \n\nTo execute this step properly, please follow these instructions:\n1. Build and activate a *subflow* using `Wait for Trigger from Another Flow` and either one or both `Return Result to Another Flow` and `Return Error to Another Flow` steps.\n2. Build a separate, *main flow*, using a `Trigger Another Flow and Wait for Result` step; connect both the main flow and the subflow by choosing the subflow to trigger from the dropdown or using a *custom trigger name*.\n3. Activate the main flow. When the connected Trigger Another Flow and Wait for Result step is reached in the main flow, the subflow is triggered.\n4. If the result of the subflow's execution is received from the Return Result to Another Flow step, the main flow will proceed down the exit chosen in that step. It will proceed down the *error* exit in case Return Error to Another Flow step returns the result or if any error was encountered during the execution of the step (e.g. the subflow wasn't found).\n\n### Flow to trigger\nThe name of the bot and each activated subflow within that bot that contains a Wait for Trigger from Another Flow step will be listed in the *Flow to trigger* dropdown.\n\nTo trigger a subflow using a *custom trigger name*, turn on the respective option, then specify the name. Note that this option must also be selected in the Wait for Trigger from Another Flow step of the subflow, and set names must be identical in both flows. *Custom trigger name* is case insensitive.\n\nTo create a new subflow, press `+`, then choose the bot and define the subflow name. The settings of the Wait for Trigger from Another Flow step template, such as option to set a custom trigger name or to add parameters and exits expected from the triggering flow, can also be defined. The description of its limits can be found in the help text of the Wait for Trigger from Another Flow step. After subflow is created, you can choose to immideately activate and select it as the *flow to trigger*, or to open the subflow in a new tab. \n\n### Parameters and exits\nEach subflow may have one or several predefined parameters, the values of which can be passed on from the main flow, as well as exits, down which the main flow could proceed. These parameters and exits are listed in this section. \n\nIf the *custom trigger name* option is used, additional parameters and exits can be either specified manually or inherited from an existing subflow.\n\n### Advanced settings\n*Shut down the flow while waiting* option stops the main flow execution until the results from the subflow are received. The option is on by default with *timeout* set at 1h, its limits are between 1m to 72h. Examples of acceptable time formats: `26h 33m` or `126min`.\n\nIf you need your flow to stay awake while waiting for the result, turn the option off. In this case the *timeout* value can be between 1s and 5m but should not be longer than the flow's *execution time timeout* defined in the *General* tab under the *Deployment settings*.\n\n*Process timeout separately*, if on, adds a *timeout* exit to the step; the flow will proceed down this exit if the result of subflow's execution is not received in set period of time.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in the *merge field name*. It will contain the data defined in the respective *Return Result to Another Flow* or *Return Error to Another Flow* step of the subflow.\n\n### Reporting\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services dependencies\n- flow bulider v2.24.2\n- event-manager v2.0.1\n- deployer 2.3.1\n- library content 2.9.0\n\n### Release notes\n**v3.0.0**\n- Custom subflow name option was renamed to *custom trigger name* and moved to a separate toggle\n- Option to add multiple custom exits in the main flow when *custom trigger name* is implemented.\n- All subflows are available throughout the account.\n\nNote, that all next steps in the solution should be updated to work correctly:\n- Trigger Another Flow and Proceed v3.0.0\n- Trigger Another Flow and Wait for Result v3.0.0\n- Wait for Trigger from Another Flow v3.0.0\n- Fetch Result from Another Flow v3.0.0\n- Return Result to Another Flow v3.0.0\n- Return Error to Another Flow v3.0.0\n\n**v2.0.0**\n- Custom trigger name works with merge field\n- UI validation\n\nNote, that all next steps in the solution should be updated to work correctly:\n- Trigger Another Flow and Proceed v2.0.0\n- Trigger Another Flow and Wait for Result v2.0.0\n- Wait for Trigger from Another Flow v2.0.0\n- Fetch Result from Another Flow v2.0.0\n- Return Result to Another Flow v2.0.0\n- Return Error to Another Flow v2.0.0\n",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        stepId : String,\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [
            {
              "id": "6cf2af04-f52e-43be-b38f-9fd92e185158",
              "data": {
                "index": 0
              },
              "component": "exitDynamic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "2273c814-c40d-4c17-9ca3-6091916fd2c8",
              "data": {
                "stepName": "TAFAWFR"
              },
              "meta": {
                "name": "ui-triggers-steps-component",
                "type": "onereach-studio-form-input"
              },
              "label": "Trigger step UI",
              "compiled": {},
              "component": [
                "ui-triggers-steps-component",
                "https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.0.0/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.0.0/index.js\"][\"ui-triggers-steps-component\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/ui-triggers-steps-component/1.0.0/index.js\"][\"ui-triggers-steps-component\"]"
              ]
            },
            {
              "id": "9fada076-3d49-46ae-8636-743a98246168",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "1eb6ca32-af7e-4edb-8fbf-9d650307dddc",
                    "data": {
                      "label": "Shut down the flow while waiting",
                      "helpText": "",
                      "variable": "isAsync",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch"
                  },
                  {
                    "id": "e647b006-cb87-49fe-b2ab-b0190e4ac9c1",
                    "data": {
                      "label": "Timeout",
                      "helpText": "Min 1 sec, max 5 min.",
                      "variable": "timeoutSync",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`30 sec`",
                      "errorMessage": "Must be a valid duration using timestring ('30 seconds', '1d 12h', etc.) format.",
                      "variableName": "timeout",
                      "maxTimeoutValue": "`5 min`",
                      "minTimeoutValue": "`1 sec`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0c4ce580-97f8-4d63-b9d7-b72e1ad8250b",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": true,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Must be a valid duration using timestring ('30 seconds', '1d 12h', etc.) format.",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0c4ce580-97f8-4d63-b9d7-b72e1ad8250b",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "validated_timestring"
                  },
                  {
                    "id": "d74ce850-d427-431b-9f30-d4578d350d9c",
                    "data": {
                      "label": "Timeout",
                      "helpText": "Min 1 min, max 72 h.",
                      "variable": "timeoutAsync",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`1 h`",
                      "errorMessage": "Value must be great than 1 min",
                      "variableName": "timeout",
                      "maxTimeoutValue": "`72 h`",
                      "minTimeoutValue": "`1 min`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b33189f-d443-4494-83a4-53225d1d7ad2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": true,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Value must be great than 1 min",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b33189f-d443-4494-83a4-53225d1d7ad2",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.isAsync",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "validated_timestring"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "8a5c82b5-5ce3-442d-8151-9a32e97c1040",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "d6bd10ef-c8a0-4837-bb85-18f5f336a3ab",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  },
                  {
                    "id": "f8036b7e-afeb-4436-990a-3e938fd61a8e",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :output-example.sync=\"step.outputExample\"\n  :schema-output-example.sync=\"schema.schemaOutputExample\"\n  >\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-nezjikolyhagsqrvwbupcxtdfm",
                      "componentLogic": "{ \n  data(){\n    return {\n      invalidJSON: false\n    }\n  },\n    computed : {\n      outputExampleLocal:{\n        get(){\n          return this.outputExample ? JSON.stringify(this.outputExample, null, 2) : '{}'\n        },\n        set(val){\n          try{\n            this.$emit('update:outputExample', JSON.parse(val));\n          }\n          catch(e){}\n          this.invalidJSON = !this.validJsExp(val);\n        }\n      },\n    },\n    methods: {\n     validJsExp(exp) {\n        let res;\n        try {\n          res = !!JSON.parse(exp);\n        } catch(e) {\n          res = false;\n        }\n        return res;\n      },\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        outputExample: Object\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code\n  label=\"Output example\" \n  mode=\"json\"\n  v-model=\"outputExampleLocal\"\n  :readonly=\"readonly\"\n  error=\"Invalid JSON\"\n  :invalid=\"invalidJSON\"\n/>\n\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "",
          "defaultTimeout": "`30 sec`",
          "hasProcessError": true,
          "hasChangeTimeout": "hidden",
          "hasProcessTimeout": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "e84b2bb5-0281-49dd-b562-19ab9c4c7042",
                    "label": "result"
                  },
                  {
                    "id": "e1bed11d-a6d9-4a72-9b89-2bc6b5bc7d67",
                    "label": "error"
                  }
                ],
                "flowId": "",
                "dataOut": "flowResult",
                "isAsync": true,
                "timeout": "`1h`",
                "isProceed": true,
                "isTimeout": false,
                "flowParameters": [],
                "customSubFlowName": "``",
                "flowToGetParamsFrom": "",
                "customflowParameters": [],
                "dynamicExitsArrayStart": 2
              },
              "rawMode": false,
              "version": "154fb8dd-a1ac-4e82-8ba0-f162f8d22ca2",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "bff34f9a-fa2c-47ea-a1fd-503ef0bd14ad",
                    "data": {
                      "id": "e84b2bb5-0281-49dd-b562-19ab9c4c7042",
                      "label": "result"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "34021f8a-dd41-4503-a46b-841a228173c4",
                    "data": {
                      "id": "e1bed11d-a6d9-4a72-9b89-2bc6b5bc7d67",
                      "label": "error"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "6cf2af04-f52e-43be-b38f-9fd92e185158",
                    "data": {
                      "index": 2
                    },
                    "component": "exitDynamic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.waitForResultForFecthResultStep = true;",
            "version": "1.1.8"
          },
          {
            "sample": null,
            "script": "step.data.flowIdToTrigger = ''",
            "version": "2.5.1"
          },
          {
            "sample": null,
            "script": "step.data.isUseCustomSubflow =  false\n\nif(typeof step.data.processError === 'undefined') step.data.processError = true\n\nif (step.data.flowId === 'customSubFlowName') {\n  step.data.isUseCustomSubflow =  true\n} else {\n  step.data.flowIdToTrigger = step.data.flowId\n}\n\nif (typeof step.data.timeout === 'string') {\n  const timeout = {\n    input: step.data.timeout,\n    outputMode: \"'ms'\"\n  }\n  \n  step.data.timeout = timeout\n}\n\nif (step.data.flowToGetParamsFrom === 'paramsListManualy') {\n  step.data.paramsProcessType = 'manually'\n} else {\n  step.data.paramsProcessType = 'inherit'\n}\n\n// migrate exits\n\nconst timeOutExit = _.find(step.data.exits, {id: 'timeout'})\nif(timeOutExit) {\n  delete timeOutExit.dynamic;\n  timeOutExit.condition = 'schema.isTimeout'\n}\n\n\nconst errorExit = _.find(step.data.exits, {label: 'error'})\nif (errorExit) errorExit.condition = 'processError'\n",
            "version": "2.6.0"
          },
          {
            "sample": null,
            "script": "const isAsync = step.data.isAsync\nconst oldTimeOut = _.get(step.data.timeout, 'input')\n\nif(_.isUndefined(step.data.timeoutAsync)) {\n  step.data.timeoutAsync = {\n    input: isAsync ? oldTimeOut : '`1 h`',\n    outputMode: 'ms'\n  }\n}\n\nif(_.isUndefined(step.data.timeoutSync)) {\n  step.data.timeoutSync = {\n    input: !isAsync ? oldTimeOut : '`30 sec`',\n    outputMode: 'ms'\n  }\n}\n\nif(_.isUndefined(step.data.customFlowParameters))\n  step.data.customFlowParameters = []\n",
            "version": "2.6.7"
          },
          {
            "sample": null,
            "script": "const errorExit = _.find(step.data.exits, {label: 'error'})\nif (errorExit) {\n  errorExit.id = '__error__';\n}\n\nconst timeOutExit = _.find(step.data.exits, {label: 'timeout'})\nif (timeOutExit) {\n  if (timeOutExit.id === 'timeout') {\n    timeOutExit.id = 'cf35bd61-9914-4443-b958-35c1ac8c5a9c';\n  }\n}\n",
            "version": "2.6.8"
          },
          {
            "script": "if(_.isUndefined(step.data['processTimeout'])) step.data['processTimeout'] = step.data.isTimeout;\nif(_.isUndefined(step.data['timeoutDuration'])) step.data['timeoutDuration'] = \"`1 hour`\";\n\nstep.data['dynamicExitsArrayStart'] = 0;\n\nconst timeout = _.find(step.data.exits, (exit) => {\n  return exit.label === 'timeout' && exit.id !== '__timeout__'\n})\n\nif (!_.isEmpty(timeout)) {\n  timeout.id = '__timeout__'\n  timeout.condition = 'processTimeout'\n}\n\nconst resultExit = _.find(step.data.exits, (exit) => {\n  return exit.label === 'result' && !exit.dynamic\n})\n\nif (!_.isEmpty(resultExit)) {\n  resultExit.id = 'result'\n  resultExit.dynamic = true\n  delete resultExit.condition\n}\n\n\nconst isUseCustomSubflow = _.get(step, 'data.isUseCustomSubflow');\nconst paramsProcessType = _.get(step, 'data.paramsProcessType');\n\nif (isUseCustomSubflow && paramsProcessType === 'manually') {\n  const customResultExits = _.get(step, 'data.customResultExits', []);\n  const resultExist = _.find(customResultExits, { name: 'result' })\n  if (_.isEmpty(resultExist)) {\n    const exitId = uuid.v4()\n    customResultExits.unshift({\n      vforkey: exitId,\n      name: 'result'\n    })\n    \n    resultExit.id = exitId;\n  }\n}\n\n\ndelete step.data.isTimeout\n",
            "version": "2.6.10"
          },
          {
            "version": "3.0.0"
          }
        ],
        "modules": [
          {
            "name": "short-uuid",
            "version": "",
            "vforkey": "bb68a060-cba0-4a9f-8007-d1b76a2ee9a1"
          },
          {
            "name": "timestring",
            "version": "",
            "vforkey": "d8ef24a5-17ce-4dc3-b1b2-d2e203740555"
          }
        ],
        "dateModified": 1631098155687
      },
      {
        "id": "e3fa20e5-b840-4942-b31a-8f37005f35e0",
        "version": "4.4.21",
        "cacheVersion": "b184c408-8f24-4401-bff6-094196a8ebfc",
        "originalSource": "13d55d72-7e10-42da-b962-8be39d535b03",
        "label": "Send Message (RWC) - TODO: DELETE THIS",
        "icon": "rwc",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-left",
        "description": "Sends a message to an end user in a specified Rich Web Chat conversation.",
        "isGatewayStep": false,
        "publishedBy": "OneReach.ai",
        "categories": [
          "Rich Web Chat"
        ],
        "recommended": [],
        "tags": [],
        "template": "const flowHelpers = require('@onereach/flow-helpers');\nconst timestring = require('timestring');\n\nconst PROVIDER_VERSION = '2020'\nconst PUSH_REPLY_TYPE_TEXT = 'text'\nconst PUSH_RESULT_ERROR = 'error'\nconst STEP_EXIT_NEXT = 'next'\nconst NOTIFICATION_TITLE = 'Onereach.ai Chat'\nconst NOTIFICATION_CTX_TYPE = 'send_message'\nconst NOTIFICATION_DEFAULT_TEXT = 'You have a new message'\n\n//---------------- report Transcript Event ----------------\nconst report = ({\n  message, \n  medias, \n  transcriptId, \n  previousTranscriptId, \n  botIdentifier, \n  endUserIdentifier\n}) => {\n  const reportingObject = {\n    botIdentifier,\n    message,\n    previousTranscriptId,\n    eventId              : transcriptId,\n    channel              : 'RWC',\n    reportingSettingsKey : 'transcript',\n    media                : _.map(medias, fileObj => ({fileUrl: fileObj.location || fileObj.linkUrl, fileType : 'File'})),\n    fromId               : this.config.flowId,\n    fromType             : 'Bot',\n    fromIdentifierType   : 'RWCChatId',\n    toType               : 'Visitor',\n    toIdentifier         : endUserIdentifier,\n    toIdentifierType     : 'BrowserFingerprint',\n    fromIdentifier       : botIdentifier\n  };\n\n  this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\nconst conversation = await rwcContext.resolve();\nconst conversationData = await this.mergeFieldsInstance.get({\n  botId: conversation.botId,\n  name: conversation.value.name,\n  type: conversation.type,\n  path: 'rwc_conversation'\n});\n\nif (!conversationData) throw new Error('The conversation is empty. Most possible that invalid conversation selected')\n\nconst {\n  callback,\n  sessionId,\n  chatName,\n  userId,\n  deviceId,\n  appId\n} = conversationData\n\nconst uuid = require('uuid');\n// const SEND_DELAY = 200; // to prevent event manager sending new message before sending currect\nconst UPDATE_CALLBACK = 'UPDATE_CALLBACK'\n\n// transcript id\nlet lastTranscriptId\nif (this.config.botId === conversation.botId) {\n  lastTranscriptId = await this.mergeFields[conversation.value.name].get({path: 'rwc_conversation.transcriptId'});\n} else {\n  lastTranscriptId = await this.mergeFieldsInstance.get({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.transcriptId'});\n}\n// const lastTranscriptId = await this.mergeFields[conversation.value.name].get({path: 'rwc_conversation.transcriptId'});\n// const lastTranscriptId = await this.mergeFieldsInstance.get({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.transcriptId'});\n\nconst transcriptId = uuid.v4();\n\nif (this.config.botId === conversation.botId) {\n  this.mergeFields[conversation.value.name].set(transcriptId, 'rwc_conversation.transcriptId')\n} else {\n  this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.transcriptId'}, transcriptId);\n}\n// this.mergeFields[conversation.value.name].set(transcriptId, 'rwc_conversation.transcriptId')\n// this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.transcriptId'}, transcriptId);\n\nconst sendNotification = async ({ id, message }) => {\n  const target = this.helpers.providersAccountId;\n  let body\n  if (message) {\n    body = message.length > 200 ? message.substring(0, 197) + '...' : message\n  } else {\n    body = NOTIFICATION_DEFAULT_TEXT\n  }\n  \n  this.emitSync({\n    name: `${PROVIDER_VERSION}/app/push/send`,\n    target,\n    params: {\n      appId: appId,\n      accountDeviceId: deviceId,\n      body,\n      context: {\n        type: NOTIFICATION_CTX_TYPE,\n        messageId: id\n      },\n      title: NOTIFICATION_TITLE,\n      type: PUSH_REPLY_TYPE_TEXT,\n    }\n  })\n  .then(({result}) => {\n    if (_.has(result, PUSH_RESULT_ERROR)) {\n      throw result.error\n    }\n    \n    return this.exitStep(STEP_EXIT_NEXT, {\n      notificationId: result.id\n    })\n  })\n  .catch(e => {\n    this.log.warn(e)\n  })\n}\n\nconst sendMessage = async (message) => {\n  if (_.get(message, 'answer.notSendMessage')) return;\n  message.time = Date.now();\n  message.sessionId = sessionId;\n  message.hasInnerDelay = true;\n  \n  if(overrideBotAnswerDelayDuration) {\n   message.answerDelayDuration = timestring(answerDelayDuration.input, 'ms'); \n  }\n  \n  const isFilesNotEmpty = !_.isEmpty(_.get(message, 'medias', [])) && _.get(message, 'medias', []).some(el => el.location || el.linkUrl)\n  if (!Boolean(isFilesNotEmpty || message.message)) {\n    throw new Error('Message should include text or an attachment')\n  }\n      \n  try {\n    await this.eventManager.callbackResolve(callback, message);\n  } catch (e) {\n    throw new Error('Error on send message')\n  }\n  \n  delete callback.used;\n}\n\nconst messageItem = flowHelpers.messengerHelpers.getMessage(message, conditionGroups, elseConditionMessage);\n\nconst parseMedias = (medias) => {\n  try { return eval(`(${medias})`); }\n  catch(e) { return []; }\n}\n\nconst rwcThreadId = `rwc__${this.session.key}`\nif (this.id === rwcThreadId) {\n  \n  this.triggers\n    .on({\n      name: `ws/chat/${UPDATE_CALLBACK}/${sessionId}`,\n    }, async ({params}) => {\n      \n      if (params.callback) {\n        if (this.config.botId === conversation.botId) {\n          await this.mergeFields[conversation.value.name].set(params.callback, 'rwc_conversation.callback')\n        } else {\n          await this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.callback'}, params.callback);\n        }\n\n        return this.triggers.otherwise(() => this.exitFlow())\n      }\n      \n      const resultQueue = await this.emitSync({\n        name : 'rwc/queue_provider',\n        target: this.helpers.providersAccountId,\n        params : {\n          sessionId: params.sessionId,\n          type: 'sync',\n          method: 'get'\n        }\n      })\n      \n      const resultHistory = await this.emitSync({\n        name : 'rwc/history_provider',\n        target: this.helpers.providersAccountId,\n        params : {\n          sessionId: params.sessionId,\n          type: 'sync',\n          method: 'get',\n          lastMessageId: params.lastMessageId\n        }\n      })\n      \n      await this.eventManager.callbackResolve(\n        this.takeCallback(), \n        {\n          status: 'OK', \n          messagesFromQueue: resultQueue,\n          messagesFromHistory: resultHistory\n        })\n    })\n  \n  return this.triggers.otherwise(() => this.exitFlow())\n}\n\nthis.process.newThread(rwcThreadId, thread => {\n  thread.currentStep = this.currentStep\n  thread.local.background = true\n  thread.activate()\n})\n\nthis.triggers\n  .once({\n    name: `ws/chat/received/${sessionId}`,\n  }, async ({params}) => {\n    \n  rwcContext.set('last', conversation);\n  await rwcContext.save();\n  \n  const conversationStyle = await this.mergeFieldsInstance.get({\n    botId: conversation.botId,\n    name: conversation.value.name,\n    type: conversation.type,\n    path: 'chatStyle'\n  });\n  \n  const { skipDelay = false } = params;\n  \n  const typingIndicatorDefaultDelay = _.get(conversationStyle, 'typingIndicatorTime') || '0s';\n  \n  let typingDelayInMS = timestring(typingIndicatorDefaultDelay, 'ms');\n  \n  if (overrideBotAnswerDelayDuration) {\n    let newDelay = timestring(answerDelayDuration.input, 'ms');\n    typingDelayInMS = newDelay > 100 ? newDelay : 100;\n  } else {\n    typingDelayInMS = typingDelayInMS > 100 ? typingDelayInMS : 100;\n  }\n    \n  if(!skipDelay) {\n    await new Promise(r => setTimeout(r, typingDelayInMS)); \n  }\n  \n  return this.exitStep('next', {\n    messageId: transcriptId\n  })\n})\n\nreturn this.triggers.otherwise(async () => {\n  const codeModeMedias = _.get(messageItem, '__codeModes.medias');\n  const codeModeMessageText = _.get(messageItem, '__codeModes.text')\n  \n  const parsedMedias = _.isUndefined(codeModeMedias) ? messageItem.media.medias : parseMedias(codeModeMedias);\n  const parsedMessageText = _.isUndefined(codeModeMessageText) ? messageItem.text : codeModeMessageText;\n  \n  const event = {}\n  event.message = parsedMessageText;\n  event.stepId = exactStepId;\n  event.id = uuid.v4()\n  \n  if(isOverrideBotIconAllowed)\n    event.overrideBotIcon = overrideBotIcon;\n  \n  if (!_.isEmpty(parsedMedias)) {\n    event.medias = parsedMedias;\n    event.renderAttachmentsAs = _.get(messageItem, 'media.renderAttachmentsAs') || 'media';\n  }\n  \n  // add message to queue\n await this.emitAsync({\n    name : 'rwc/queue_provider',\n    target: this.helpers.providersAccountId,\n    params : {\n      sessionId: sessionId,\n      type: 'async',\n      method: 'post',\n      message: {\n        message: parsedMessageText,\n        id: event.id,\n        stepId: event.stepId,\n        medias: parsedMedias,\n        renderAttachmentsAs: _.get(messageItem, 'media.renderAttachmentsAs') || 'media',\n        time: Date.now(),\n        ...(isOverrideBotIconAllowed && { overrideBotIcon })\n      }\n    }\n  })\n  \n  await sendMessage(event)\n  \n  if (deviceId) {\n    await sendNotification(event);\n  }\n    \n  report({\n    ...event,\n    message: event.message,\n    transcriptId, \n    previousTranscriptId : lastTranscriptId, \n    botIdentifier        : chatName, \n    endUserIdentifier    : userId\n  });\n  \n});",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {
              "type": "rwc-send-message"
            },
            "name": "",
            "type": "session"
          },
          "message": {
            "messageType": "single",
            "randomMessage": [
              {
                "text": "``",
                "media": {
                  "medias": [],
                  "renderAttachmentsAs": "media"
                },
                "weight": "`1`"
              }
            ],
            "singleMessage": {
              "text": "``",
              "media": {
                "medias": [],
                "renderAttachmentsAs": "media"
              }
            },
            "messageHelpText": "",
            "messageLimitCharter": 4000,
            "messageTemplateType": "custom",
            "messageTypeHelpText": "<h3 id=\"message-types\">Message types</h3>\n<p>By default, you can send a <code>Single</code> message by defining it via a text and/or media file(s).</p>\n<p>Choose the <code>Random</code> option to send one message from a list depending on probability. To create multiple messages use <em>add new message</em> option. Each message is defined by a text and/or media, as well as its individual weight. The weight is used to calculate the probability of that message being chosen from the list. It is expected as a positive number with point or comma used for decimals; its range is <code>&gt; 0</code> and <code>&lt; (2^53-1)</code>. If the weights are defined manually, the probabilities of each message being sent are calculated automatically and displayed next to each <em>weight</em>. When step is reached in the flow, it chooses one of the messages randomly and sends it to the end user.</p>\n<p>Use the <code>Condition</code> option to select the outgoing message depending on set conditions. To set up multiple messages use <em>add condition</em> option. Each message is defined by a text and/or media, as well as conditions that should be met for the step to select that message. There is no limit on the number of condition groups, but the step will choose only one during an execution. When step is reached in the flow, each group will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. If none of the rules were met, the step will send the message defined in the <em>If no condition is met</em> section. Additional information about condition builder can be found in the <em>Conditional Selection</em> step under the <em>Info</em> icon.</p>\n"
          },
          "rwcContext": {
            "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
            "output": {
              "selectStyle": "inherited"
            },
            "contextKey": "__rwc_context"
          },
          "exactStepId": "",
          "conversation": {},
          "isSingleExit": true,
          "processError": true,
          "conditionGroups": [
            {
              "label": "`New condition 1`",
              "rules": [
                {
                  "vforkey": "582b2577-34b1-4791-b5a0-26b2df9ff082",
                  "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                  "codeValue": "``",
                  "valueType": "string",
                  "firstValue": "``",
                  "secondValue": "``",
                  "isDisabledSecondValue": false
                }
              ],
              "dataOut": "``",
              "trueValue": "any",
              "description": "``",
              "isNotCollapsed": true,
              "conditionMessage": {
                "text": "``",
                "media": {
                  "medias": [],
                  "renderAttachmentsAs": "media"
                }
              },
              "isEditableHeader": false
            }
          ],
          "overrideBotIcon": {},
          "answerDelayDuration": {
            "input": "``",
            "outputMode": "ms"
          },
          "elseConditionMessage": {
            "text": "``",
            "media": {
              "medias": [],
              "renderAttachmentsAs": "media"
            }
          },
          "hasNoConditionDataOut": true,
          "conditionRuleHasDataOut": false,
          "noConditionDataOutValue": "``",
          "isOverrideBotIconAllowed": false,
          "overrideBotAnswerDelayDuration": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "transcript": {
            "tags": [],
            "type": "transcript",
            "label": "Transcript",
            "enabled": true
          }
        },
        "help": "Use this step to send a message to an end user in a specified Rich Web Chat conversation. Step works together with the *Wait for Chat (RWC)* step template. When step is reached during flow execution, it sends the message to the chosen conversation and proceeds down the *next* exit without waiting for user's reply.\n\n### Message content\nYou have options to send a single message, a random message that depends on probability or a message that is chosen depends on defined conditions. Each type of message has its own settings, all of which are described in the *message type* dropdown's *Info* icon.\n\nThe outgoing message should contain a text and/or attachment(s). Attachments can be chosen either from OneReach.ai's storage or set as URLs. All message settings and limits are described in the Text Message field under the *Info* icon.\n\nThe *preview message* button allows you to see how the user will see the message in the chat.\n\n### Conversation\nOption to continue conversation is on by default and allows to select a merge field name of a step, where the conversation you want to follow has been started. If the option is off, bot and the merge field names of available *Wait for Chat (RWC)* step should be defined, so the message will be sent to the chosen conversation.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in *merge field name*. It includes the unique identifier of the sent message and may be used by advanced users.\n\n### Error handling\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit it if any error was encountered during the execution of the step (e.g. if message content is empty or the chosen conversation no longer exists).\n\n### Reporting events\n*Step* and *Transcript* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services dependencies:\n- flow builder - v2.4.0\n- event-manager - v2.0.1\n- deployer - v2.0.0\n\n### Release notes\nv.4.0.0\n- Step sends a message to a visitor and does not expect any reply.\n- Only text messages and file attachments can be sent. Files can be added via URL or selected from your Onereach.ai storage.\n- HTML, merge field variables are supported.\n- You can check step content via Preview, that reflects step changes in real-time in a separate tab.\n- Step can inherit conversation from gateway step of the current or shared flow.\n\nv4.4.0\n- Implemented improved random/conditional component.\n- Added web socket anonymization.\n- Added ability to continue conversation, that is inherited from RWC gateway step.\n\nv4.4.9\n- Added fix for components validations\n",
        "formBuilder": {
          "stepExits": [
            {
              "id": "e30ec863-9ee8-4aa4-ae77-5b9ce4819194",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "e6d17615-30d8-4bad-bdd1-eabed4369338",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "5eff8357-2db1-4aaa-92ce-8d672ce70dcd",
                    "major": "4",
                    "minor": "5",
                    "patch": "19",
                    "vforkey": "8e75bd70-2f7b-4b5e-80a6-de39853cb635",
                    "stepLabel": "Wait for chat (RWC) v4.2.x",
                    "allowUpdate": true
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "3c5f3034-a9cd-462b-9c73-bccd4ca985a4",
              "data": {
                "open": true,
                "header": "Message content",
                "inputs": [
                  {
                    "id": "0f232ee4-1883-4596-8079-1fedca23bc02",
                    "data": {
                      "inputs": [
                        {
                          "id": "1d19d478-4d36-4dc2-8bba-9c09ab366dc2",
                          "data": {
                            "data": "{\"text\": \"``\"}",
                            "toJson": "return data;",
                            "validators": "{\n  value: {\n    required (obj, schema) {\n      const codeModeValue = _.get(schema, '__codeModes.text');\n      \n      if(!_.isUndefined(codeModeValue)) return true;\n      \n      const codeModeMedias = _.get(schema, '__codeModes.medias');\n      const medias = _.get(schema, 'media.medias') || [];\n      const text = _.get(schema, '__codeModes.text', '') || schema.text || '``';\n    \n      if(_.isUndefined(codeModeMedias) || _.isEmpty(codeModeMedias)) {\n        const isMediasNotEmpty = _.size(medias) && medias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''));\n        \n        if(isMediasNotEmpty) return true;\n      } else {\n        let parsedCodeModeMedias\n        try {\n          parsedCodeModeMedias = eval('(' + codeModeMedias + ')');\n        } catch (e) {\n          console.warn(e)\n        }\n        \n        if(parsedCodeModeMedias && parsedCodeModeMedias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''))) return true;\n      }\n    \n      return _.trim(text, ' `\"\\'');\n    }\n  },\n  \n  __codeModes: {\n    text: {\n      nonEmptyJsExpression(value) {\n        return validators.jsExpression(value);\n      }\n    }\n  }\n}",
                            "applyToJson": true,
                            "formTemplate": "<wildcard v-model=\"schema.text\" :medias=\"schema.media ? schema.media.medias : []\" :v=\"$v\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-ucndxvgoemfqikjstbzwahpryl",
                            "componentLogic": "{\n    computed : {\n        text : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        advancedHelp() {\n          return {\n            modal: {\n              icon: 'info',\n              iconHelp: '',\n              tooltipPosition: 'top center',\n              title: 'Help',\n              content: `<p><strong>Text message</strong></p>\n                <p>A text message has no limit on the amount of characters and will not be truncated. However, for user-friendly purposes the suggested limit is 320 characters. The field can be defined manually and using merge fields (click on the <code>{x}</code> icon). Note that using <em>merge field values</em> makes the length of a message unknown.</p>\n                <p>You can format the text inserting HTML into the message, for example:</p>\n                <pre><code>Look it up on &lt;a href='https://onereach.ai/'&gt; OneReach.ai&lt;/a&gt;!\n                </code></pre>\n                <p>will create a link for \"OneReach.ai\".</p>\n                <p>To insert an active URL in the text, use <code>http://</code> or <code>https://</code>.</p>\n                <p><strong>Attachments and URLs</strong></p>\n                <p>There is no limit on the amount or size of attachments. Each attachment will be added to the message in the order from top to bottom. Any file type can be added, and images and <code>.gif</code> files should show a preview.</p>\n                <p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary attachments in the modal window of <code>Files</code>. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To add files using links, click <em>URL</em> and specify it manually or declare it with a merge field.</p>\n                <p>Multiple files or links can be chosen via <em>add file</em> button or removed by a click on the bin icon next to it in the step details panel.</p>\n              `\n            }\n          }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        medias: {\n          type: Array,\n          default: () => []\n        },\n        v: {\n          type: Object,\n          default: () => {}\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                            "renderCondition": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentTemplate": "<or-alert type=\"error\" :dismissible=\"false\" v-show=\"(!isNew || v.schema.value.$dirty) && v.schema.value.$invalid\">\r\n  Message should include text or an attachment\r\n</or-alert>\r\n\r\n<or-text-message\r\n  :readonly=\"readonly\"\r\n  v-model=\"text\"\r\n  placeholder=\"Add text here\"\r\n  max-char-length=\"320\"\r\n  disablePopover\r\n  :steps=\"steps\"\r\n  :merge-fields=\"mergeFields\"\r\n  removeBubble\r\n  :advancedHelp=\"advancedHelp\"\r\n  :invalid=\"(!isNew || v.schema.value.$dirty) && v.schema.value.$invalid\"\r\n  @input=\"v.schema.value.$touch\"\r\n>\r\n  <div slot=\"label\">Text Message</div>\r\n  <div slot=\"help\">Suggested length is up to 320 chars</div>\r\n</or-text-message>",
                            "wildcardTemplates": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ""
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                          ]
                        },
                        {
                          "id": "111dab2e-ca02-46b4-a103-a272867bf182",
                          "data": {
                            "data": "{\n \"media\": { \"medias\": [], \"renderAttachmentsAs\": \"media\" } \n}",
                            "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `{}`;\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    \n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                            "validators": "{\n  media: {\n    medias: {\n      $each: {\n        required (obj, schema) {\n          const messageType = _.get(this.schema, 'message.messageType');\n          \n          // if(!messageType) return true;\n          // For some reason this validation is called a number of times on each change and sometimes gets the wrong \"this\" during that call.\n          // Which means that we sometimes receive no message type and \"return true\" becomes the final validation result, thus not allowing to adequately validate the field.\n          // I don't know why it was added and I comment it out hoping that it'll work properly (as it seems to)\n          // Apparently the logic below is not needed as it works without it\n          \n          // if(messageType === 'single') {\n          //   const codeModeValue = _.get(this.schema, 'message.singleMessage.__codeModes.medias');\n          //   if(!_.isUndefined(codeModeValue)) return true;\n          // } \n          // if (messageType === 'random') {\n          //   const randomMessages = _.get(this.schema, 'message.randomMessage');\n            \n          //   const currentVForKey = _.get(obj, 'vforkey');\n            \n          //   const currentMessage = _.find(randomMessages, (message) => {\n          //     const messageMedias = _.get(message, 'media.medias');\n              \n          //     if(!messageMedias) return false;\n              \n          //     return _.find(messageMedias, { vforkey: currentVForKey });\n          //   });\n            \n          //   if(currentMessage) {\n          //     const messageMediaCodeMode = _.get(currentMessage, '__codeModes.medias');\n              \n          //     if(!_.isUndefined(messageMediaCodeMode)) return true;\n          //   }\n            \n          //   const codeModeValue = _.get(this.schema, 'message.randomMessage.__codeModes.medias');\n          //   if(!_.isUndefined(codeModeValue)) return true;\n          // }\n          \n          return obj.linkUrl ? (obj.linkUrl && _.trim(obj.linkUrl, ' `\"\\'')) : true\n        }\n      }\n    }\n  },\n  messageText: {\n    required (obj, schema) {\n      const codeModeMedias = _.get(schema, '__codeModes.medias');\n      const medias = _.get(schema, 'media.medias') || [];\n      \n      const text = _.get(schema, '__codeModes.text', '') || schema.text || '``';\n    \n      if(_.isUndefined(codeModeMedias)) {\n        const isMediasNotEmpty = _.size(medias) && medias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''));\n        \n        if(isMediasNotEmpty) return true;\n      } else {\n        if(codeModeMedias) return true;\n      }\n    \n      return _.trim(text, ' `\"\\'');\n    }\n  },\n  __codeModes: {\n    medias: {\n      nonEmptyJsExpression(value, schema) {\n        return validators.jsExpression(value);\n      }\n    }\n  }\n}",
                            "applyToJson": true,
                            "formTemplate": "<wildcard \n  v-model=\"schema.media.medias\" \n  :renderAttachmentsAs.sync=\"schema.media.renderAttachmentsAs\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :messageText=\"schema.text\"\n  :codeModes=\"schema.__codeModes\"\n></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-vupjlinmzfxrewhdgksbaoqcyt",
                            "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: [],\n        maxFiles: 10,\n        imagesUrls: []\n      };\n    },\n    computed : {\n      renderAttachmentsAsLocal: {\n          get() {\n            return this.renderAttachmentsAs;\n          },\n          set(value) {\n            this.$emit('update:renderAttachmentsAs', value);\n          }\n        },\n        \n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.size(this.medias)) return false;\n          \n          return this.medias.every(el => el.linkUrl);\n        },\n        codeModeText() {\n          return _.get(this.codeModes, 'text');\n        },\n        codeModeMedia() {\n          return _.get(this.codeModes, 'media');\n        },\n        messageValid() {\n          return Boolean(_.isUndefined(this.codeModeText) ? _.trim(this.messageText, \" `'\\\"\") : validators.jsExpression(this.codeModeText) && _.trim(this.codeModeText, \" `'\\\"\"));\n        },\n        mediasValid() {\n          const medias = _.get(this.media, 'medias', []);\n          return Boolean(_.isUndefined(this.codeModeMedia) ? _.size(medias) && medias.some(el => el.key || _.trim(el.linkUrl, \" `'\\\"\")) : validators.jsExpression(this.codeModeMedia));\n        },\n        isEmpty () {\n          return !this.mediasValid && !this.messageValid;\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        renderAttachmentsAs: {\n          type: String,\n          default: 'media'\n        },\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        isNew : Boolean,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        \n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                            "renderCondition": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentTemplate": "<div :class=\"['rwc__media', {'has-error': getValue(`schema.messageText.$invalid`, v) && getValue(`schema.messageText.$dirty`, v)}]\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <b v-if=\"value.length\" style=\"margin-bottom:8px;font-size:14px;\">Attachments</b>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <div class=\"file-preview\">\n            <img v-show=\"imagesUrls.includes(item.item.location)\" :src=\"item.item.location\" @load=\"imagesUrls = [...imagesUrls, item.item.location]\" />\n            <div v-show=\"!imagesUrls.includes(item.item.location)\">\n              <or-icon :size=\"10\">attach_file</or-icon>\n            </div>\n          </div>\n          <span>{{ item.item.name }}</span>\n          <div class=\"file-controls\">\n            <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n            <div v-if=\"value.length > 1\" class=\"sortable-handle item-control-btn drag-btn\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"16px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n            </div>\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n          </div>\n      </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" :class=\"['rwc-media__item', 'rwc-media__item--url', { 'rwc-media__item--can-drag': value.length > 1 }]\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.media.medias.$each[${item.index}].$invalid`, v) && getValue(`schema.media.medias.$each[${item.index}].$dirty`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => {updateMedias(item.item, val); v.schema.media.medias.$each[item.index].$touch()}\"\n          />\n           <div class=\"controls\">\n              <div v-if=\"value.length > 1\" class=\"sortable-handle item-control-btn drag-btn\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"16px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n              </div>\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n            </div>\n      </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add file</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add attachment from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': isEmpty && !isNew }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': isEmpty && !isNew }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n  \n  <or-radio-group v-if=\"medias.length\" style=\"margin-top: 8px;margin-bottom:16px;\" :options=\"[{ label: 'media', value: 'media' }, { label: 'files', value: 'files' }]\" v-model=\"renderAttachmentsAsLocal\">Render attachments as</or-radio-group>\n\n</div>",
                            "wildcardTemplates": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-preview {\n  width: 36px;\n  height: 36px;\n  margin-right: 8px;\n  border-radius: 4px;\n  background: #fff;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  \n  .ui-icon {\n    font-size: 16px;\n    color: #000;\n    opacity: 0.8;\n  }\n  \n  img {\n    width: 36px;\n    height: 36px;\n    object-fit: cover;\n  }\n}\n\n\n.item-control-btn {\n  background-color: transparent;\n  border: none;\n  cursor: drag;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  svg {\n    fill: #c6c6c6;\n  }\n  \n  &:hover {\n    svg {\n      fill: #000;\n    }\n  }\n}\n\n.or-list.rwc-media__list > .or-list-items > .list-item > .sortable-handle {\n  position: absolute;\n  display: none;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: auto;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    .medias-wrapper {\n      width: 100%;\n      background: #f2f2f2;\n      border-radius: 4px;\n      border: 1px solid #dfdfdf;\n      padding: 8px;\n    }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    align-items: center;\n    font-size: 14px;\n    line-height: 16px;\n    \n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n    \n    .or-text-expression {\n      margin-right: 8px;\n      margin-top: -8px;\n      margin-left: 8px;\n      \n      .or-editable-wrapper.single-line {\n        background: #fff;\n      }\n      \n      &.invalid {\n        margin-bottom: 0;\n      }\n    }\n    \n    &--url {\n      align-items: flex-start;\n      \n      .controls {\n        margin-top: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-top: 34px;\n      }\n      \n      padding-right: 16px;\n      .or-text-expression {\n        width: calc(100% - 36px);\n        max-width: calc(100% - 36px);\n        min-width: calc(100% - 36px);\n      }\n    }\n    \n    &--can-drag {\n      .or-text-expression {\n        width: calc(100% - 48px);\n        max-width: calc(100% - 48px);\n        min-width: calc(100% - 48px);\n      }\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                          ]
                        },
                        {
                          "id": "527c983a-f5df-4e31-8b0c-bf6040fbce86",
                          "data": {
                            "data": "{}",
                            "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                            "validators": "",
                            "applyToJson": true,
                            "formTemplate": "<wildcard :text=\"schema.text\" :media=\"schema.media\" :codeModes=\"schema.__codeModes\" :schema=\"schema\" :readonly=\"readonly\"></wildcard>",
                            "allowCodeMode": false,
                            "componentName": "or-wildcard-hgnjkbzdifmlrvueqtwaoyxscp",
                            "componentLogic": "{\n    computed : {\n        noTextOrMedia() {\n          return !this.mediasValid && !this.messageValid\n        },\n        codeModeText() {\n          return _.get(this.codeModes, 'text');\n        },\n        codeModeMedia() {\n          return _.get(this.codeModes, 'medias');\n        },\n        messageValid() {\n          return Boolean(_.isUndefined(this.codeModeText) ? (this.text || '``').slice(1, -1) : validators.jsExpression(this.codeModeText) && _.trim(this.codeModeText, \" `'\\\"\"));\n        },\n        mediasValid() {\n          const medias = _.get(this.media, 'medias', []);\n          return Boolean(_.isUndefined(this.codeModeMedia) ? _.size(medias) && medias.some(el => el.key || el.linkUrl.slice(1, -1)) : validators.jsExpression(this.codeModeMedia));\n        },\n        messageData() {\n          return {\n            text: _.isUndefined(this.codeModeText) ? this.text : this.codeModeText,\n            medias: _.isUndefined(this.codeModeMedia) ? this.media.medias : this.codeModeMedia,\n            renderAttachmentsAs: _.get(this.media, 'renderAttachmentsAs', 'media')\n          }\n        }\n    },\n    \n    methods: {\n      previewMessage() {\n        eventHub.$emit('message-preview::open', this.messageData);\n      },\n      updateData() {\n        eventHub.$emit('message-preview::update', this.messageData);\n      },\n    },\n    watch: {\n      text(value) {\n        this.updateData();\n      },\n      media: {\n        deep: true,\n        handler(value) {\n          this.updateData();\n        }\n      },\n      codeModes: {\n        deep: true,\n        handler(newVal, oldVal) {\n          this.updateData();\n        }\n      }\n    },\n    props : {\n        text: String,\n        media: Object,\n        readonly: Boolean,\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        schema: {\n          type: Object,\n          default: () => ({})\n        }\n    }\n}",
                            "renderCondition": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentTemplate": "<or-button \n  color=\"primary\"\n  type=\"secondary\"\n  @click=\"previewMessage\"\n  :disabled=\"noTextOrMedia\"\n>\n  Preview message\n</or-button>\n",
                            "wildcardTemplates": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ""
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                          ]
                        }
                      ],
                      "variable": "message",
                      "defaultValue": {
                        "messageType": "single",
                        "randomMessage": [
                          {
                            "text": "``",
                            "media": {
                              "medias": [],
                              "renderAttachmentsAs": "media"
                            },
                            "weight": "`1`"
                          }
                        ],
                        "singleMessage": {
                          "text": "``",
                          "media": {
                            "medias": [],
                            "renderAttachmentsAs": "media"
                          }
                        },
                        "messageHelpText": "",
                        "messageLimitCharter": 4000,
                        "messageTemplateType": "custom",
                        "messageTypeHelpText": "<h3 id=\"message-types\">Message types</h3>\n<p>By default, you can send a <code>Single</code> message by defining it via a text and/or media file(s).</p>\n<p>Choose the <code>Random</code> option to send one message from a list depending on probability. To create multiple messages use <em>add new message</em> option. Each message is defined by a text and/or media, as well as its individual weight. The weight is used to calculate the probability of that message being chosen from the list. It is expected as a positive number with point or comma used for decimals; its range is <code>&gt; 0</code> and <code>&lt; (2^53-1)</code>. If the weights are defined manually, the probabilities of each message being sent are calculated automatically and displayed next to each <em>weight</em>. When step is reached in the flow, it chooses one of the messages randomly and sends it to the end user.</p>\n<p>Use the <code>Condition</code> option to select the outgoing message depending on set conditions. To set up multiple messages use <em>add condition</em> option. Each message is defined by a text and/or media, as well as conditions that should be met for the step to select that message. There is no limit on the number of condition groups, but the step will choose only one during an execution. When step is reached in the flow, each group will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. If none of the rules were met, the step will send the message defined in the <em>If no condition is met</em> section. Additional information about condition builder can be found in the <em>Conditional Selection</em> step under the <em>Info</em> icon.</p>\n"
                      }
                    },
                    "meta": {
                      "name": "base-message-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Base message builders",
                    "compiled": {},
                    "component": [
                      "base-message-builder-component",
                      "https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/base-message-builder/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/base-message-builder/index.js\"][\"base-message-builder-component\"]",
                      "onereach-studio-form-input[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/base-message-builder/index.js\"][\"base-message-builder-component\"]"
                    ]
                  },
                  {
                    "id": "9f5423f5-bd85-4d92-b3a1-288a36cc39e3",
                    "data": {
                      "inputs": [
                        {
                          "id": "6dbd5f2c-e3e8-43b5-85c0-93a544615bb6",
                          "data": {
                            "inputs": [
                              {
                                "id": "d93be2fe-ab2d-4511-9820-fe15ec03f2c0",
                                "data": {
                                  "data": "{\"text\": \"``\"}",
                                  "toJson": "return data;",
                                  "validators": "{\n  value: {\n    required (obj, schema) {\n      const codeModeValue = _.get(schema, '__codeModes.text');\n      \n      if(!_.isUndefined(codeModeValue)) return true;\n      \n      const codeModeMedias = _.get(schema, '__codeModes.medias');\n      const medias = _.get(schema, 'media.medias') || [];\n      \n      const text = _.get(schema, '__codeModes.text', '') || schema.text || '``';\n    \n      if(_.isUndefined(codeModeMedias)) {\n        const isMediasNotEmpty = _.size(medias) && medias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''));\n        \n        if(isMediasNotEmpty) return true;\n      } else {\n        let parsedCodeModeMedias\n        try {\n          parsedCodeModeMedias = eval('(' + codeModeMedias + ')');\n        } catch (e) {\n          console.warn(e)\n        }\n        \n        if(parsedCodeModeMedias && parsedCodeModeMedias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''))) return true;\n      }\n    \n      return _.trim(text, ' `\"\\'');\n    }\n  },\n  \n  __codeModes: {\n    text: {\n      nonEmptyJsExpression(value) {\n        return validators.jsExpression(value);\n      }\n    }\n  }\n}",
                                  "applyToJson": true,
                                  "formTemplate": "<wildcard v-model=\"schema.text\" :medias=\"schema.media ? schema.media.medias : []\" :v=\"$v\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                                  "allowCodeMode": true,
                                  "componentName": "or-wildcard-qhxadiknwbresulvgfcpjztymo",
                                  "componentLogic": "{\n    computed : {\n        text : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        advancedHelp() {\n          return {\n            modal: {\n              icon: 'info',\n              iconHelp: '',\n              tooltipPosition: 'top center',\n              title: 'Help',\n              content: `<p><strong>Text message</strong></p>\n                <p>A text message has no limit on the amount of characters and will not be truncated. However, for user-friendly purposes the suggested limit is 320 characters. The field can be defined manually and using merge fields (click on the <code>{x}</code> icon). Note that using <em>merge field values</em> makes the length of a message unknown.</p>\n                <p>You can format the text inserting HTML into the message, for example:</p>\n                <pre><code>Look it up on &lt;a href='https://onereach.ai/'&gt; OneReach.ai&lt;/a&gt;!\n                </code></pre>\n                <p>will create a link for \"OneReach.ai\".</p>\n                <p>To insert an active URL in the text, use <code>http://</code> or <code>https://</code>.</p>\n                <p><strong>Attachments and URLs</strong></p>\n                <p>There is no limit on the amount or size of attachments. Each attachment will be added to the message in the order from top to bottom. Any file type can be added, and images and <code>.gif</code> files should show a preview.</p>\n                <p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary attachments in the modal window of <code>Files</code>. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To add files using links, click <em>URL</em> and specify it manually or declare it with a merge field.</p>\n                <p>Multiple files or links can be chosen via <em>add file</em> button or removed by a click on the bin icon next to it in the step details panel.</p>\n              `\n            }\n          }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        medias: {\n          type: Array,\n          default: () => []\n        },\n        v: {\n          type: Object,\n          default: () => {}\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                                  "renderCondition": {
                                    "label": "`Conditional visibility`",
                                    "rules": [
                                      {
                                        "modes": [],
                                        "vforkey": "ce05c4bf-2270-4cbb-b684-b89b2d4e868d",
                                        "ruleType": {
                                          "func": "{ return _.isEqual(firstValue, secondValue) }",
                                          "type": "double",
                                          "input": [
                                            "mixed",
                                            "mixed"
                                          ],
                                          "label": "exactly matches",
                                          "modes": [
                                            "strict"
                                          ],
                                          "category": "general"
                                        },
                                        "codeValue": "schema.message.messageType === 'conditional'",
                                        "valueType": "advanced",
                                        "firstValue": "``",
                                        "secondValue": "``",
                                        "caseInsensitive": true,
                                        "isDisabledSecondValue": false
                                      }
                                    ],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": true,
                                    "isEditableHeader": false
                                  },
                                  "conditionBuilder": {
                                    "label": "`Conditional visibility`",
                                    "rules": [
                                      {
                                        "modes": [],
                                        "vforkey": "ce05c4bf-2270-4cbb-b684-b89b2d4e868d",
                                        "ruleType": {
                                          "func": "{ return _.isEqual(firstValue, secondValue) }",
                                          "type": "double",
                                          "input": [
                                            "mixed",
                                            "mixed"
                                          ],
                                          "label": "exactly matches",
                                          "modes": [
                                            "strict"
                                          ],
                                          "category": "general"
                                        },
                                        "codeValue": "schema.message.messageType === 'conditional'",
                                        "valueType": "advanced",
                                        "firstValue": "``",
                                        "secondValue": "``",
                                        "caseInsensitive": true,
                                        "isDisabledSecondValue": false
                                      }
                                    ],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": true,
                                    "isEditableHeader": false
                                  },
                                  "componentTemplate": "<or-alert type=\"error\" :dismissible=\"false\" v-show=\"(!isNew || v.schema.value.$dirty) && v.schema.value.$invalid\">\r\n  Message should include text or an attachment\r\n</or-alert>\r\n\r\n<or-text-message\r\n  :readonly=\"readonly\"\r\n  v-model=\"text\"\r\n  placeholder=\"Add text here\"\r\n  max-char-length=\"320\"\r\n  disablePopover\r\n  :steps=\"steps\"\r\n  :merge-fields=\"mergeFields\"\r\n  removeBubble\r\n  :advancedHelp=\"advancedHelp\"\r\n  :invalid=\"(!isNew || v.schema.value.$dirty) && v.schema.value.$invalid\"\r\n  @input=\"v.schema.value.$touch\"\r\n>\r\n  <div slot=\"label\">Text Message</div>\r\n  <div slot=\"help\">Suggested length is up to 320 chars</div>\r\n</or-text-message>",
                                  "wildcardTemplates": [],
                                  "renderConditionBuilder": {
                                    "label": "`Conditional visibility`",
                                    "rules": [
                                      {
                                        "modes": [],
                                        "vforkey": "ce05c4bf-2270-4cbb-b684-b89b2d4e868d",
                                        "ruleType": {
                                          "func": "{ return _.isEqual(firstValue, secondValue) }",
                                          "type": "double",
                                          "input": [
                                            "mixed",
                                            "mixed"
                                          ],
                                          "label": "exactly matches",
                                          "modes": [
                                            "strict"
                                          ],
                                          "category": "general"
                                        },
                                        "codeValue": "schema.message.messageType === 'conditional'",
                                        "valueType": "advanced",
                                        "firstValue": "``",
                                        "secondValue": "``",
                                        "caseInsensitive": true,
                                        "isDisabledSecondValue": false
                                      }
                                    ],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": true,
                                    "isEditableHeader": false
                                  },
                                  "componentCompiledStyles": "",
                                  "componentOriginalStyles": ""
                                },
                                "meta": {
                                  "name": "formWildcard",
                                  "type": "onereach-studio-form-input",
                                  "version": "1.0"
                                },
                                "label": "Wildcard",
                                "component": "formWildcard",
                                "pluginRefs": [
                                  "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                                  "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                                ]
                              },
                              {
                                "id": "2bc60fb5-d591-44c0-81b9-b80d8710ce0d",
                                "data": {
                                  "data": "{\n \"media\": { \"medias\": [], \"renderAttachmentsAs\": \"media\" } \n}",
                                  "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `{}`;\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    \n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                                  "validators": "{\n  media: {\n    medias: {\n      $each: {\n        required (obj, schema) {\n          console.log(obj, this.schema);\n          const currentVForKey = _.get(obj, 'vforkey');\n          \n          const conditionGroups = _.get(this.schema, 'conditionGroups');\n          \n          const currentMessage = _.find(conditionGroups, ({ conditionMessage }) => {\n            const messageMedias = _.get(conditionMessage, 'media.medias');\n            \n            if(!messageMedias) return false;\n            \n            return _.find(messageMedias, { vforkey: currentVForKey });\n          });\n          \n          if(currentMessage) {\n            const messageMediaCodeMode = _.get(currentMessage, 'conditionMessage.__codeModes.medias');\n            \n            if(!_.isUndefined(messageMediaCodeMode)) return true;\n          }\n          \n          return obj.linkUrl ? (obj.linkUrl && _.trim(obj.linkUrl, ' `\"\\'')) : true\n        }\n      }\n    }\n  },\n  messageText: {\n    required (obj, schema) {\n      const codeModeMedias = _.get(schema, '__codeModes.medias');\n      const medias = _.get(schema, 'media.medias') || [];\n      \n      const text = _.get(schema, '__codeModes.text', '') || schema.text || '``';\n    \n      if(_.isUndefined(codeModeMedias)) {\n        const isMediasNotEmpty = _.size(medias) && medias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''));\n        \n        if(isMediasNotEmpty) return true;\n      } else {\n        if(codeModeMedias) return true;\n      }\n    \n      return _.trim(text, ' `\"\\'');\n    }\n  },\n  __codeModes: {\n    medias: {\n      nonEmptyJsExpression(value, schema) {\n        return validators.jsExpression(value);\n      }\n    }\n  }\n}",
                                  "applyToJson": true,
                                  "formTemplate": "<wildcard \n  v-model=\"schema.media.medias\" \n  :renderAttachmentsAs.sync=\"schema.media.renderAttachmentsAs\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :messageText=\"schema.text\"\n  :codeModes=\"schema.__codeModes\"\n></wildcard>",
                                  "allowCodeMode": true,
                                  "componentName": "or-wildcard-ynihtvrcdbjwefmgulkqsoaxpz",
                                  "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: [],\n        maxFiles: 10,\n        imagesUrls: []\n      };\n    },\n    computed : {\n        renderAttachmentsAsLocal: {\n          get() {\n            return this.renderAttachmentsAs;\n          },\n          set(value) {\n            this.$emit('update:renderAttachmentsAs', value);\n          }\n        },\n        \n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.size(this.medias)) return false;\n          \n          return this.medias.every(el => el.linkUrl);\n        },\n        codeModeText() {\n          return _.get(this.codeModes, 'text');\n        },\n        codeModeMedia() {\n          return _.get(this.codeModes, 'media');\n        },\n        messageValid() {\n          return Boolean(_.isUndefined(this.codeModeText) ? _.trim(this.messageText, \" `'\\\"\") : validators.jsExpression(this.codeModeText) && _.trim(this.codeModeText, \" `'\\\"\"));\n        },\n        mediasValid() {\n          const medias = _.get(this.media, 'medias', []);\n          return Boolean(_.isUndefined(this.codeModeMedia) ? _.size(medias) && medias.some(el => el.key || _.trim(el.linkUrl, \" `'\\\"\")) : validators.jsExpression(this.codeModeMedia));\n        },\n        isEmpty () {\n          return !this.mediasValid && !this.messageValid;\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        renderAttachmentsAs: {\n          type: String,\n          default: 'media'\n        },\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        isNew : Boolean,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        \n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                                  "renderCondition": {
                                    "label": "`Conditional visibility`",
                                    "rules": [
                                      {
                                        "modes": [],
                                        "vforkey": "d7e40668-1172-4020-8936-68490360ae3b",
                                        "ruleType": {
                                          "func": "{ return _.isEqual(firstValue, secondValue) }",
                                          "type": "double",
                                          "input": [
                                            "mixed",
                                            "mixed"
                                          ],
                                          "label": "exactly matches",
                                          "modes": [
                                            "strict"
                                          ],
                                          "category": "general"
                                        },
                                        "codeValue": "schema.message.messageType === 'conditional'",
                                        "valueType": "advanced",
                                        "firstValue": "``",
                                        "secondValue": "``",
                                        "caseInsensitive": true,
                                        "isDisabledSecondValue": false
                                      }
                                    ],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": true,
                                    "isEditableHeader": false
                                  },
                                  "conditionBuilder": {
                                    "label": "`Conditional visibility`",
                                    "rules": [
                                      {
                                        "modes": [],
                                        "vforkey": "d7e40668-1172-4020-8936-68490360ae3b",
                                        "ruleType": {
                                          "func": "{ return _.isEqual(firstValue, secondValue) }",
                                          "type": "double",
                                          "input": [
                                            "mixed",
                                            "mixed"
                                          ],
                                          "label": "exactly matches",
                                          "modes": [
                                            "strict"
                                          ],
                                          "category": "general"
                                        },
                                        "codeValue": "schema.message.messageType === 'conditional'",
                                        "valueType": "advanced",
                                        "firstValue": "``",
                                        "secondValue": "``",
                                        "caseInsensitive": true,
                                        "isDisabledSecondValue": false
                                      }
                                    ],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": true,
                                    "isEditableHeader": false
                                  },
                                  "componentTemplate": "<div :class=\"['rwc__media', {'has-error': getValue(`schema.messageText.$invalid`, v) && getValue(`schema.messageText.$dirty`, v)}]\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <b v-if=\"value.length\" style=\"margin-bottom:8px;font-size:14px;\">Attachments</b>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <div class=\"file-preview\">\n            <img v-show=\"imagesUrls.includes(item.item.location)\" :src=\"item.item.location\" @load=\"imagesUrls = [...imagesUrls, item.item.location]\" />\n            <div v-show=\"!imagesUrls.includes(item.item.location)\">\n              <or-icon :size=\"10\">attach_file</or-icon>\n            </div>\n          </div>\n          <span>{{ item.item.name }}</span>\n          <div class=\"file-controls\">\n            <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n            <div v-if=\"value.length > 1\" class=\"sortable-handle item-control-btn drag-btn\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"16px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n            </div>\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n          </div>\n      </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" :class=\"['rwc-media__item', 'rwc-media__item--url', { 'rwc-media__item--can-drag': value.length > 1 }]\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.media.medias.$each[${item.index}].$invalid`, v) && getValue(`schema.media.medias.$each[${item.index}].$dirty`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => {updateMedias(item.item, val); v.schema.media.medias.$each[item.index].$touch()}\"\n          />\n           <div class=\"controls\">\n              <div v-if=\"value.length > 1\" class=\"sortable-handle item-control-btn drag-btn\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"16px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n              </div>\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n            </div>\n      </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add file</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add attachment from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': isEmpty && !isNew }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': isEmpty && !isNew }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n   \n    <or-radio-group v-if=\"medias.length\" style=\"margin-top: 8px;margin-bottom:16px;\" :options=\"[{ label: 'media', value: 'media' }, { label: 'files', value: 'files' }]\" v-model=\"renderAttachmentsAsLocal\">Render attachments as</or-radio-group>\n   \n</div>",
                                  "wildcardTemplates": [],
                                  "renderConditionBuilder": {
                                    "label": "`Conditional visibility`",
                                    "rules": [
                                      {
                                        "modes": [],
                                        "vforkey": "d7e40668-1172-4020-8936-68490360ae3b",
                                        "ruleType": {
                                          "func": "{ return _.isEqual(firstValue, secondValue) }",
                                          "type": "double",
                                          "input": [
                                            "mixed",
                                            "mixed"
                                          ],
                                          "label": "exactly matches",
                                          "modes": [
                                            "strict"
                                          ],
                                          "category": "general"
                                        },
                                        "codeValue": "schema.message.messageType === 'conditional'",
                                        "valueType": "advanced",
                                        "firstValue": "``",
                                        "secondValue": "``",
                                        "caseInsensitive": true,
                                        "isDisabledSecondValue": false
                                      }
                                    ],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": true,
                                    "isEditableHeader": false
                                  },
                                  "componentCompiledStyles": "",
                                  "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-preview {\n  width: 36px;\n  height: 36px;\n  margin-right: 8px;\n  border-radius: 4px;\n  background: #fff;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  \n  .ui-icon {\n    font-size: 16px;\n    color: #000;\n    opacity: 0.8;\n  }\n  \n  img {\n    width: 36px;\n    height: 36px;\n    object-fit: cover;\n  }\n}\n\n\n.item-control-btn {\n  background-color: transparent;\n  border: none;\n  cursor: drag;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  svg {\n    fill: #c6c6c6;\n  }\n  \n  &:hover {\n    svg {\n      fill: #000;\n    }\n  }\n}\n\n.or-list.rwc-media__list > .or-list-items > .list-item > .sortable-handle {\n  position: absolute;\n  display: none;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: auto;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    .medias-wrapper {\n      width: 100%;\n      background: #f2f2f2;\n      border: 1px solid #dfdfdf;\n      border-radius: 4px;\n      padding: 8px;\n    }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    align-items: center;\n    font-size: 14px;\n    line-height: 16px;\n    \n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n    \n    .or-text-expression {\n      margin-right: 8px;\n      margin-top: -8px;\n      margin-left: 8px;\n      \n      .or-editable-wrapper.single-line {\n        background: #fff;\n      }\n      \n      &.invalid {\n        margin-bottom: 0;\n      }\n    }\n    \n    &--url {\n      align-items: flex-start;\n      \n      .controls {\n        margin-top: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-top: 34px;\n      }\n      \n      padding-right: 16px;\n      .or-text-expression {\n        width: calc(100% - 36px);\n        max-width: calc(100% - 36px);\n        min-width: calc(100% - 36px);\n      }\n    }\n    \n    &--can-drag {\n      .or-text-expression {\n        width: calc(100% - 48px);\n        max-width: calc(100% - 48px);\n        min-width: calc(100% - 48px);\n      }\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                                },
                                "meta": {
                                  "name": "formWildcard",
                                  "type": "onereach-studio-form-input",
                                  "version": "1.0"
                                },
                                "label": "Wildcard",
                                "component": "formWildcard",
                                "pluginRefs": [
                                  "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                                  "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                                ]
                              },
                              {
                                "id": "774747f1-8f57-42bb-ba45-5a7542e1bf37",
                                "data": {
                                  "data": "{}",
                                  "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                                  "validators": "",
                                  "applyToJson": false,
                                  "formTemplate": "<wildcard :text=\"schema.text\" :media=\"schema.media\" :codeModes=\"schema.__codeModes\" :schema=\"schema\" :readonly=\"readonly\"></wildcard>",
                                  "allowCodeMode": true,
                                  "componentName": "or-wildcard-wdlgryxahjtknqfpvesbciuzmo",
                                  "componentLogic": "{\n    computed : {\n        noTextOrMedia() {\n          return !this.mediasValid && !this.messageValid\n        },\n        codeModeText() {\n          return _.get(this.codeModes, 'text');\n        },\n        codeModeMedia() {\n          return _.get(this.codeModes, 'medias');\n        },\n        messageValid() {\n          return Boolean(_.isUndefined(this.codeModeText) ? (this.text || '``').slice(1, -1) : validators.jsExpression(this.codeModeText) && _.trim(this.codeModeText, \" `'\\\"\"));\n        },\n        mediasValid() {\n          const medias = _.get(this.media, 'medias', []);\n          return Boolean(_.isUndefined(this.codeModeMedia) ? _.size(medias) && medias.some(el => el.key || el.linkUrl.slice(1, -1)) : validators.jsExpression(this.codeModeMedia));\n        },\n        messageData() {\n          return {\n            text: _.isUndefined(this.codeModeText) ? this.text : this.codeModeText,\n            medias: _.isUndefined(this.codeModeMedia) ? this.media.medias : this.codeModeMedia,\n            renderAttachmentsAs: _.get(this.media, 'renderAttachmentsAs', 'media')\n          }\n        }\n    },\n    methods: {\n      previewMessage() {\n        eventHub.$emit('message-preview::open', this.messageData);\n      },\n      updateData() {\n        eventHub.$emit('message-preview::update', this.messageData);\n      },\n    },\n    watch: {\n      text(value) {\n        this.updateData();\n      },\n      media: {\n        deep: true,\n        handler(value) {\n          this.updateData();\n        }\n      },\n      codeModes: {\n        deep: true,\n        handler(newVal, oldVal) {\n          this.updateData();\n        }\n      }\n    },\n    props : {\n        text: String,\n        media: Object,\n        readonly: Boolean,\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        schema: {\n          type: Object,\n          default: () => ({})\n        }\n    }\n}",
                                  "renderCondition": {
                                    "label": "`Conditional visibility`",
                                    "rules": [],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": false,
                                    "isEditableHeader": false
                                  },
                                  "componentTemplate": "<or-button \n  color=\"primary\"\n  type=\"secondary\"\n  @click=\"previewMessage\"\n  :disabled=\"noTextOrMedia\"\n>\n  Preview message\n</or-button>\n",
                                  "wildcardTemplates": [],
                                  "renderConditionBuilder": {
                                    "label": "`Conditional visibility`",
                                    "rules": [],
                                    "trueValue": "any",
                                    "description": "``",
                                    "defaultValue": true,
                                    "isNotCollapsed": false,
                                    "isEditableHeader": false
                                  },
                                  "componentCompiledStyles": "",
                                  "componentOriginalStyles": ""
                                },
                                "meta": {
                                  "name": "formWildcard",
                                  "type": "onereach-studio-form-input",
                                  "version": "1.0"
                                },
                                "label": "Wildcard",
                                "component": "formWildcard",
                                "pluginRefs": [
                                  "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                                  "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                                ]
                              }
                            ],
                            "variable": "conditionMessage",
                            "defaultValue": {
                              "text": "``",
                              "media": {
                                "medias": [],
                                "renderAttachmentsAs": "media"
                              }
                            },
                            "messageHelpText": "",
                            "messageLimitCharter": 4000,
                            "messageTemplateType": "custom",
                            "mainComponentVariable": "message"
                          },
                          "meta": {
                            "name": "condition-message-template",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Condition message template",
                          "component": [
                            "condition-message-template",
                            "https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/condition-message-template/index.js"
                          ],
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/condition-message-template/index.js\"][\"condition-message-template\"]",
                            "onereach-studio-form-input[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/condition-message-template/index.js\"][\"condition-message-template\"]"
                          ]
                        }
                      ],
                      "isSingleExit": true,
                      "addButtonText": "Add condition",
                      "isSingleGroup": false,
                      "conditionExits": [],
                      "conditionTitle": "New condition",
                      "conditionGroups": [
                        {
                          "label": "`New condition 1`",
                          "rules": [
                            {
                              "vforkey": "582b2577-34b1-4791-b5a0-26b2df9ff082",
                              "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                              "codeValue": "``",
                              "valueType": "string",
                              "firstValue": "``",
                              "secondValue": "``",
                              "isDisabledSecondValue": false
                            }
                          ],
                          "dataOut": "``",
                          "trueValue": "any",
                          "description": "``",
                          "isNotCollapsed": true,
                          "conditionMessage": {
                            "text": "``",
                            "media": {
                              "medias": [],
                              "renderAttachmentsAs": "media"
                            }
                          },
                          "isEditableHeader": false
                        }
                      ],
                      "renderCondition": "schema.message.messageType === 'conditional'",
                      "usePredefinedValue": false,
                      "isNegativeLeftMargin": false,
                      "hasNoConditionDataOut": true,
                      "predefinedVariableName": "schema.inputData",
                      "conditionRuleHasDataOut": false,
                      "noConditionDataOutValue": "``"
                    },
                    "meta": {
                      "name": "condition-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "0.9.0"
                    },
                    "label": "Conditon builder v0.9.0",
                    "compiled": {},
                    "component": [
                      "condition-builder-component",
                      "https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/messenger-condition-builder/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                    ]
                  },
                  {
                    "id": "1bfab865-adb0-42ba-b051-af6ea679462c",
                    "data": {
                      "inputs": [
                        {
                          "id": "929d24a7-b601-48d9-8e26-0ba7c89bc7c5",
                          "data": {
                            "data": "{\"text\": \"``\"}",
                            "toJson": "return data;",
                            "validators": "{\n  value: {\n    required (obj, schema) {\n      const codeModeValue = _.get(schema, '__codeModes.text');\n      \n      if(!_.isUndefined(codeModeValue)) return true;\n      \n      const codeModeMedias = _.get(schema, '__codeModes.medias');\n      const medias = _.get(schema, 'media.medias') || [];\n      \n      const text = _.get(schema, '__codeModes.text', '') || schema.text || '``';\n    \n      if(_.isUndefined(codeModeMedias)) {\n        const isMediasNotEmpty = _.size(medias) && medias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''));\n        \n        if(isMediasNotEmpty) return true;\n      } else {\n        let parsedCodeModeMedias\n        try {\n          parsedCodeModeMedias = eval('(' + codeModeMedias + ')');\n        } catch (e) {\n          console.warn(e)\n        }\n        \n        if(parsedCodeModeMedias && parsedCodeModeMedias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''))) return true;\n      }\n    \n      return _.trim(text, ' `\"\\'');\n    }\n  },\n  \n  __codeModes: {\n    text: {\n      nonEmptyJsExpression(value) {\n        return validators.jsExpression(value);\n      }\n    }\n  }\n}",
                            "applyToJson": true,
                            "formTemplate": "<wildcard v-model=\"schema.text\" :medias=\"schema.media ? schema.media.medias : []\" :v=\"$v\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-yqfcuvpdjwbxzleotnmsrakhig",
                            "componentLogic": "{\n    computed : {\n        text : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        advancedHelp() {\n          return {\n            modal: {\n              icon: 'info',\n              iconHelp: '',\n              tooltipPosition: 'top center',\n              title: 'Help',\n              content: `<p><strong>Text message</strong></p>\n                <p>A text message has no limit on the amount of characters and will not be truncated. However, for user-friendly purposes the suggested limit is 320 characters. The field can be defined manually and using merge fields (click on the <code>{x}</code> icon). Note that using <em>merge field values</em> makes the length of a message unknown.</p>\n                <p>You can format the text inserting HTML into the message, for example:</p>\n                <pre><code>Look it up on &lt;a href='https://onereach.ai/'&gt; OneReach.ai&lt;/a&gt;!\n                </code></pre>\n                <p>will create a link for \"OneReach.ai\".</p>\n                <p>To insert an active URL in the text, use <code>http://</code> or <code>https://</code>.</p>\n                <p><strong>Attachments and URLs</strong></p>\n                <p>There is no limit on the amount or size of attachments. Each attachment will be added to the message in the order from top to bottom. Any file type can be added, and images and <code>.gif</code> files should show a preview.</p>\n                <p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary attachments in the modal window of <code>Files</code>. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To add files using links, click <em>URL</em> and specify it manually or declare it with a merge field.</p>\n                <p>Multiple files or links can be chosen via <em>add file</em> button or removed by a click on the bin icon next to it in the step details panel.</p>\n              `\n            }\n          }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        medias: {\n          type: Array,\n          default: () => []\n        },\n        v: {\n          type: Object,\n          default: () => {}\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                            "renderCondition": {
                              "label": "`Conditional visibility`",
                              "rules": [
                                {
                                  "modes": [],
                                  "vforkey": "7eef082e-726b-45c2-9daa-7dd9c86cedcf",
                                  "ruleType": {
                                    "func": "{ return _.isEqual(firstValue, secondValue) }",
                                    "type": "double",
                                    "input": [
                                      "mixed",
                                      "mixed"
                                    ],
                                    "label": "exactly matches",
                                    "modes": [
                                      "strict"
                                    ],
                                    "category": "general"
                                  },
                                  "codeValue": "schema.message.messageType === 'conditional'",
                                  "valueType": "advanced",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "caseInsensitive": true,
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            },
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [
                                {
                                  "modes": [],
                                  "vforkey": "7eef082e-726b-45c2-9daa-7dd9c86cedcf",
                                  "ruleType": {
                                    "func": "{ return _.isEqual(firstValue, secondValue) }",
                                    "type": "double",
                                    "input": [
                                      "mixed",
                                      "mixed"
                                    ],
                                    "label": "exactly matches",
                                    "modes": [
                                      "strict"
                                    ],
                                    "category": "general"
                                  },
                                  "codeValue": "schema.message.messageType === 'conditional'",
                                  "valueType": "advanced",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "caseInsensitive": true,
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            },
                            "componentTemplate": "<or-alert type=\"error\" :dismissible=\"false\" v-show=\"(!isNew || v.schema.value.$dirty) && v.schema.value.$invalid\">\r\n  Message should include text or an attachment\r\n</or-alert>\r\n\r\n<or-text-message\r\n  :readonly=\"readonly\"\r\n  v-model=\"text\"\r\n  placeholder=\"Add text here\"\r\n  max-char-length=\"320\"\r\n  disablePopover\r\n  :steps=\"steps\"\r\n  :merge-fields=\"mergeFields\"\r\n  removeBubble\r\n  :advancedHelp=\"advancedHelp\"\r\n  :invalid=\"(!isNew || v.schema.value.$dirty) && v.schema.value.$invalid\"\r\n  @input=\"v.schema.value.$touch\"\r\n>\r\n  <div slot=\"label\">Text Message</div>\r\n  <div slot=\"help\">Suggested length is up to 320 chars</div>\r\n</or-text-message>",
                            "wildcardTemplates": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [
                                {
                                  "modes": [],
                                  "vforkey": "7eef082e-726b-45c2-9daa-7dd9c86cedcf",
                                  "ruleType": {
                                    "func": "{ return _.isEqual(firstValue, secondValue) }",
                                    "type": "double",
                                    "input": [
                                      "mixed",
                                      "mixed"
                                    ],
                                    "label": "exactly matches",
                                    "modes": [
                                      "strict"
                                    ],
                                    "category": "general"
                                  },
                                  "codeValue": "schema.message.messageType === 'conditional'",
                                  "valueType": "advanced",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "caseInsensitive": true,
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            },
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ""
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                          ]
                        },
                        {
                          "id": "0aa74680-1a71-49f2-85d0-0724c1037036",
                          "data": {
                            "data": "{\n \"media\": { \"medias\": [], \"renderAttachmentsAs\": \"media\" } \n}",
                            "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `{}`;\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    \n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                            "validators": "{\n  media: {\n    medias: {\n      $each: {\n        required (obj, schema) {\n          const codeModeValue = _.get(this.schema, 'elseConditionMessage.__codeModes.medias');\n          if(!_.isUndefined(codeModeValue)) return true;\n          \n          return obj.linkUrl ? (obj.linkUrl && _.trim(obj.linkUrl, ' `\"\\'')) : true\n        }\n      }\n    }\n  },\n  messageText: {\n    required (obj, schema) {\n      const codeModeMedias = _.get(schema, '__codeModes.medias');\n      const medias = _.get(schema, 'media.medias') || [];\n      \n      const text = _.get(schema, '__codeModes.text', '') || schema.text || '``';\n    \n      if(_.isUndefined(codeModeMedias)) {\n        const isMediasNotEmpty = _.size(medias) && medias.some(obj => _.trim(obj.location || obj.linkUrl || obj.key , ' `\"\\''));\n        \n        if(isMediasNotEmpty) return true;\n      } else {\n        if(codeModeMedias) return true;\n      }\n    \n      return _.trim(text, ' `\"\\'');\n    }\n  },\n  __codeModes: {\n    medias: {\n      nonEmptyJsExpression(value, schema) {\n        return validators.jsExpression(value);\n      }\n    }\n  }\n}",
                            "applyToJson": true,
                            "formTemplate": "<wildcard \n  v-model=\"schema.media.medias\" \n  :renderAttachmentsAs.sync=\"schema.media.renderAttachmentsAs\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :messageText=\"schema.text\"\n  :codeModes=\"schema.__codeModes\"\n></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-wcnxjsbytzrguqvdfomlapkeih",
                            "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: [],\n        maxFiles: 10,\n        imagesUrls: []\n      };\n    },\n    computed : {\n     renderAttachmentsAsLocal: {\n          get() {\n            return this.renderAttachmentsAs;\n          },\n          set(value) {\n            this.$emit('update:renderAttachmentsAs', value);\n          }\n        },\n        \n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.size(this.medias)) return false;\n          \n          return this.medias.every(el => el.linkUrl);\n        },\n        codeModeText() {\n          return _.get(this.codeModes, 'text');\n        },\n        codeModeMedia() {\n          return _.get(this.codeModes, 'media');\n        },\n        messageValid() {\n          return Boolean(_.isUndefined(this.codeModeText) ? _.trim(this.messageText, \" `'\\\"\") : validators.jsExpression(this.codeModeText) && _.trim(this.codeModeText, \" `'\\\"\"));\n        },\n        mediasValid() {\n          const medias = _.get(this.media, 'medias', []);\n          return Boolean(_.isUndefined(this.codeModeMedia) ? _.size(medias) && medias.some(el => el.key || _.trim(el.linkUrl, \" `'\\\"\")) : validators.jsExpression(this.codeModeMedia));\n        },\n        isEmpty () {\n          return !this.mediasValid && !this.messageValid;\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        renderAttachmentsAs: {\n          type: String,\n          default: 'media'\n        },\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        isNew : Boolean,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        \n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                            "renderCondition": {
                              "label": "`Conditional visibility`",
                              "rules": [
                                {
                                  "modes": [],
                                  "vforkey": "46d25152-f239-4ba1-ab56-cb6b876dab91",
                                  "ruleType": {
                                    "func": "{ return _.isEqual(firstValue, secondValue) }",
                                    "type": "double",
                                    "input": [
                                      "mixed",
                                      "mixed"
                                    ],
                                    "label": "exactly matches",
                                    "modes": [
                                      "strict"
                                    ],
                                    "category": "general"
                                  },
                                  "codeValue": "schema.message.messageType === 'conditional'",
                                  "valueType": "advanced",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "caseInsensitive": true,
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            },
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [
                                {
                                  "modes": [],
                                  "vforkey": "46d25152-f239-4ba1-ab56-cb6b876dab91",
                                  "ruleType": {
                                    "func": "{ return _.isEqual(firstValue, secondValue) }",
                                    "type": "double",
                                    "input": [
                                      "mixed",
                                      "mixed"
                                    ],
                                    "label": "exactly matches",
                                    "modes": [
                                      "strict"
                                    ],
                                    "category": "general"
                                  },
                                  "codeValue": "schema.message.messageType === 'conditional'",
                                  "valueType": "advanced",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "caseInsensitive": true,
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            },
                            "componentTemplate": "<div :class=\"['rwc__media', {'has-error': getValue(`schema.messageText.$invalid`, v) && getValue(`schema.messageText.$dirty`, v)}]\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <b v-if=\"value.length\" style=\"margin-bottom:8px;font-size:14px;\">Attachments</b>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <div class=\"file-preview\">\n            <img v-show=\"imagesUrls.includes(item.item.location)\" :src=\"item.item.location\" @load=\"imagesUrls = [...imagesUrls, item.item.location]\" />\n            <div v-show=\"!imagesUrls.includes(item.item.location)\">\n              <or-icon :size=\"10\">attach_file</or-icon>\n            </div>\n          </div>\n          <span>{{ item.item.name }}</span>\n          <div class=\"file-controls\">\n            <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n            <div v-if=\"value.length > 1\" class=\"sortable-handle item-control-btn drag-btn\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"16px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n            </div>\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n          </div>\n      </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" :class=\"['rwc-media__item', 'rwc-media__item--url', { 'rwc-media__item--can-drag': value.length > 1 }]\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.media.medias.$each[${item.index}].$invalid`, v) && getValue(`schema.media.medias.$each[${item.index}].$dirty`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => {updateMedias(item.item, val); v.schema.media.medias.$each[item.index].$touch()}\"\n          />\n           <div class=\"controls\">\n              <div v-if=\"value.length > 1\" class=\"sortable-handle item-control-btn drag-btn\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16px\" viewBox=\"0 0 24 24\" width=\"16px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n              </div>\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n            </div>\n      </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add file</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add attachment from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': isEmpty && !isNew }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, 'has-error': isEmpty && !isNew }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n   \n   <or-radio-group v-if=\"medias.length\" style=\"margin-top: 8px;margin-bottom:16px;\" :options=\"[{ label: 'media', value: 'media' }, { label: 'files', value: 'files' }]\" v-model=\"renderAttachmentsAsLocal\">Render attachments as</or-radio-group>\n   \n</div>",
                            "wildcardTemplates": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [
                                {
                                  "modes": [],
                                  "vforkey": "46d25152-f239-4ba1-ab56-cb6b876dab91",
                                  "ruleType": {
                                    "func": "{ return _.isEqual(firstValue, secondValue) }",
                                    "type": "double",
                                    "input": [
                                      "mixed",
                                      "mixed"
                                    ],
                                    "label": "exactly matches",
                                    "modes": [
                                      "strict"
                                    ],
                                    "category": "general"
                                  },
                                  "codeValue": "schema.message.messageType === 'conditional'",
                                  "valueType": "advanced",
                                  "firstValue": "``",
                                  "secondValue": "``",
                                  "caseInsensitive": true,
                                  "isDisabledSecondValue": false
                                }
                              ],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": true,
                              "isEditableHeader": false
                            },
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-preview {\n  width: 36px;\n  height: 36px;\n  margin-right: 8px;\n  border-radius: 4px;\n  background: #fff;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  \n  .ui-icon {\n    font-size: 16px;\n    color: #000;\n    opacity: 0.8;\n  }\n  \n  img {\n    width: 36px;\n    height: 36px;\n    object-fit: cover;\n  }\n}\n\n\n.item-control-btn {\n  background-color: transparent;\n  border: none;\n  cursor: drag;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  svg {\n    fill: #c6c6c6;\n  }\n  \n  &:hover {\n    svg {\n      fill: #000;\n    }\n  }\n}\n\n.or-list.rwc-media__list > .or-list-items > .list-item > .sortable-handle {\n  position: absolute;\n  display: none;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: auto;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    .medias-wrapper {\n      width: 100%;\n      background: #f2f2f2;\n      border: 1px solid #dfdfdf;\n      border-radius: 4px;\n      padding: 8px;\n    }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    align-items: center;\n    font-size: 14px;\n    line-height: 16px;\n    \n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n    \n    .or-text-expression {\n      margin-right: 8px;\n      margin-top: -8px;\n      margin-left: 8px;\n      \n      .or-editable-wrapper.single-line {\n        background: #fff;\n      }\n      \n      &.invalid {\n        margin-bottom: 0;\n      }\n    }\n    \n    &--url {\n      align-items: flex-start;\n      \n      .controls {\n        margin-top: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-top: 34px;\n      }\n      \n      padding-right: 16px;\n      .or-text-expression {\n        width: calc(100% - 36px);\n        max-width: calc(100% - 36px);\n        min-width: calc(100% - 36px);\n      }\n    }\n    \n    &--can-drag {\n      .or-text-expression {\n        width: calc(100% - 48px);\n        max-width: calc(100% - 48px);\n        min-width: calc(100% - 48px);\n      }\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                          ]
                        },
                        {
                          "id": "79a95dc1-bb54-47a7-8dea-3beb5528f6d4",
                          "data": {
                            "data": "{}",
                            "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                            "validators": "",
                            "applyToJson": false,
                            "formTemplate": "<wildcard \n  :text=\"schema.text\"\n  :media=\"schema.media\"\n  :codeModes=\"schema.__codeModes\"\n  :schema=\"schema\"\n  :readonly=\"readonly\"\n></wildcard>",
                            "allowCodeMode": true,
                            "componentName": "or-wildcard-yveqxpdjogrntfcwisumablhzk",
                            "componentLogic": "{\n    computed : {\n        noTextOrMedia() {\n          return !this.mediasValid && !this.messageValid\n        },\n        codeModeText() {\n          return _.get(this.codeModes, 'text');\n        },\n        codeModeMedia() {\n          return _.get(this.codeModes, 'medias');\n        },\n        messageValid() {\n          return Boolean(_.isUndefined(this.codeModeText) ? (this.text || '``').slice(1, -1) : validators.jsExpression(this.codeModeText) && _.trim(this.codeModeText, \" `'\\\"\"));\n        },\n        mediasValid() {\n          const medias = _.get(this.media, 'medias', []);\n          return Boolean(_.isUndefined(this.codeModeMedia) ? _.size(medias) && medias.some(el => el.key || el.linkUrl.slice(1, -1)) : validators.jsExpression(this.codeModeMedia));\n        },\n        messageData() {\n          return {\n            text: _.isUndefined(this.codeModeText) ? this.text : this.codeModeText,\n            medias: _.isUndefined(this.codeModeMedia) ? this.media.medias : this.codeModeMedia,\n            renderAttachmentsAs: _.get(this.media, 'renderAttachmentsAs', 'media')\n          }\n        }\n    },\n    methods: {\n      previewMessage() {\n        eventHub.$emit('message-preview::open', this.messageData);\n      },\n      updateData() {\n        eventHub.$emit('message-preview::update', this.messageData);\n      },\n    },\n    watch: {\n      text(value) {\n        this.updateData();\n      },\n      media: {\n        deep: true,\n        handler(value) {\n          this.updateData();\n        }\n      },\n      codeModes: {\n        deep: true,\n        handler(newVal, oldVal) {\n          this.updateData();\n        }\n      }\n    },\n    props : {\n        text: String,\n        media: Object,\n        readonly: Boolean,\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        schema: {\n          type: Object,\n          default: () => ({})\n        }\n    }\n}",
                            "renderCondition": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentTemplate": "<or-button \n  color=\"primary\"\n  type=\"secondary\"\n  @click=\"previewMessage\"\n  :disabled=\"noTextOrMedia\"\n>\n  Preview message\n</or-button>",
                            "wildcardTemplates": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "componentCompiledStyles": "",
                            "componentOriginalStyles": ".preview-cl {\n  display: flex;\n  flex-direction: column;\n}\n\n.preview-cl__info {\n  margin-top: 12px;\n}"
                          },
                          "meta": {
                            "name": "formWildcard",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Wildcard",
                          "component": "formWildcard",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                          ]
                        }
                      ],
                      "defaultValue": {
                        "text": "``",
                        "media": {
                          "medias": [],
                          "renderAttachmentsAs": "media"
                        }
                      },
                      "variableName": "elseConditionMessage",
                      "messageHelpText": "",
                      "renderCondition": "schema.message.messageType === 'conditional'",
                      "messageLimitCharter": 4000,
                      "messageTemplateType": "custom",
                      "mainComponentVariable": "message"
                    },
                    "meta": {
                      "name": "else-condition-message",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Else condition message",
                    "compiled": {},
                    "component": [
                      "else-condition-message",
                      "https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/else-condition-message/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/else-condition-message/index.js\"][\"else-condition-message\"]",
                      "onereach-studio-form-input[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/messengers/else-condition-message/index.js\"][\"else-condition-message\"]"
                    ]
                  },
                  {
                    "id": "0049c42f-19d8-46a3-80da-b27c8d0bee8e",
                    "data": {
                      "data": "{\n  \"exactStepId\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard\n  :is-new=\"isNew\"\n  :overrideBotIcon=\"schema.overrideBotIcon\"\n  :isOverrideBotIconAllowed=\"schema.isOverrideBotIconAllowed\"\n  :readonly=\"readonly\"\n  v-model=\"schema.exactStepId\"\n  :merge-fields=\"mergeFields\"\n  :steps=\"steps\"\n  :conversation=\"schema.conversation\"\n  :rwcContext=\"schema.rwcContext\"\n  :messageText=\"schema.messageText\"\n  :step-id=\"stepId\"\n  :medias=\"schema.media ? schema.media.medias : []\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-rxqehfkvmdagyjbswpluzioctn",
                      "componentLogic": "{\n    props : {\n        isNew : Boolean,\n        conversation: Object,\n        isOverrideBotIconAllowed: {\n          type: Boolean,\n          default: false\n        },\n        overrideBotIcon: {\n          type: Object,\n          default: () => ({})\n        },\n        rwcContext: {\n          type: Object,\n          default: () => ({})\n        },\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        value: String,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    data() {\n      return {\n        text: ``,\n        medias: [],\n        configError: false,\n        renderAttachmentsAs: 'media',\n      }\n    },\n    computed: {\n      noTextOrMedia () {\n        const isFilesNotEmpty = this.medias && this.medias.length && this.medias.some(el => el.key || el.linkUrl.slice(1, -1))\n        return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n      }\n    },\n    watch: {\n      messageText () {\n        if (this.previewWindow) {\n          this.sendMessageToPreview()\n        }\n      },\n      rwcContext: {\n        handler(nv) {\n          this.configError = false\n        },\n        deep: true\n      },\n      medias: {\n        handler() {\n          if (this.previewWindow) {\n            this.sendMessageToPreview()\n          }\n        },\n        deep: true\n      }\n    },\n    created() {\n      eventHub.$on('message-preview::open', this.openPreviewWindow);\n      eventHub.$on('message-preview::update', this.updateData);\n    },\n    mounted () {\n      window.addEventListener('message', this.previewLoadedHandler, false)\n      if (!this.value || this.value !== this.stepId) {\n        this.$emit('input', this.stepId);\n      }\n    },\n    beforeDestroy () {\n      window.removeEventListener('message', this.previewLoadedHandler, false);\n      eventHub.$off('message-preview::open', this.openPreviewWindow);\n      eventHub.$off('message-preview::update', this.updateData);\n    },\n    methods: {\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      openPreviewWindow (data) {\n        const url = `${this.$flow.chatUiUrl}/preview`\n        // const url = `http://localhost:8090/preview`\n        try {\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        } catch (e) {\n          console.warn(e);\n          this.previewWindow.close();\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        }\n        \n        this.updateData(data);\n      },\n      previewLoadedHandler (e) {\n        if (e.data === 'PREVIEW_LOADED' && this.previewWindow) {\n          this.sendMessageToPreview();\n        }\n      },\n      updateData(data) {\n        const text = _.get(data, 'text', ``);\n        const medias = _.get(data, 'medias', []);\n        \n        this.text = validators.jsExpression(text)  ? _.trim(text, ' `\"\\'') : ``;\n        \n        this.medias = _.isString(medias) ? validators.jsExpression(medias) ? this.parseCodeModeValue(medias, []) : [] : medias;\n        \n        this.renderAttachmentsAs = _.get(data, 'renderAttachmentsAs') || 'media';\n        \n        this.sendMessageToPreview();\n      },\n      async sendMessageToPreview () {\n        if (!this.previewWindow) return;\n        \n        this.previewWindow.postMessage({\n            type: 'messageData',\n            message: {\n              message: this.text,\n              medias: this.medias,\n              renderAttachmentsAs: this.renderAttachmentsAs,\n              ...(this.isOverrideBotIconAllowed && { overrideBotIcon: this.overrideBotIcon })\n            }\n          }, '*');\n          \n        const ctxHelpers = this.$flow.getCache('rwcContext.helpers');\n          \n        const config = ctxHelpers.getLastStepWithContext('manual', 'data.conversation.meta.lookAndFeel')\n         || ctxHelpers.getInitialStep('data.dataOut.meta.lookAndFeel');\n         \n         // to show warning message in template\n        if (!config) {\n          this.configError = true\n        } else {\n          this.configError = false\n        }\n        \n        this.previewWindow.postMessage({\n            type: 'chatConfig',\n            config: {\n              ...config\n            }\n          }, '*');\n      },\n      stringifyExpression(value) {\n        const stringified = _.reduce(value, (memo, item) => {\n            if (_.isString(item)) {\n                memo += _.chain(item).replace(/\\\\/g, '\\\\\\\\')\n                    .replace(/`/g, '\\\\`')\n                    .replace(/\\$\\{/g, '\\\\${')\n                    .value();\n            } else {\n                memo += this.convertItemPathToValue(item.path);\n            }\n            return memo;\n        }, '');\n        \n        value = `\\`${stringified}\\``;\n        value = orUtils.stringifyExpression(value);\n        \n        return _.reduce(value, (memo, item) => {\n          if(_.isString(item)) { \n            return `${memo}${item}` \n          };\n          return `${memo}{${item.path}}`;\n        }, '');\n      },\n      parseCodeModeValue(value, defaultValue = []) {\n        value = this.stringifyExpression(value);\n        \n        try { return eval(`(${value})`); }\n        catch(e) { return defaultValue; }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"configError\" class=\"conversation-warning\">\n  <or-alert type=\"warning\" :dismissible=\"false\">To view correct preview, please select conversation manually.</or-alert>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".conversation-warning {\n  margin-top: 12px;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "Customize a message sent to your visitors without waiting for reply",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "7d1d6002-1e96-403c-b9f8-e14bdd4bf222",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "a1abf3f9-3409-43c2-98db-8f38ae65b5f3",
                    "data": {
                      "label": "Set custom bot answer delay duration",
                      "helpText": "",
                      "variable": "overrideBotAnswerDelayDuration",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "99d7fdbf-dc74-4b5d-bd24-18a53ec134ee",
                    "data": {
                      "label": "Bot answer delay duration",
                      "helpText": "Min 0 sec, max 2 min (Example 2s, 2min)",
                      "variable": "answerDelayDuration",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "Enter answer delay duration",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "errorMessage": "Value must be less or equal than 2 min",
                      "maxTimeoutValue": "`2m`",
                      "minTimeoutValue": "`0s`",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "783d2105-4e87-4d7e-b1e4-b8bc47d99e7a",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "schema.overrideBotAnswerDelayDuration",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": true,
                      "allowDynamicValues": true,
                      "iconHelpTextOption": "none",
                      "savedUserErrorMessage": "Value must be less or equal than 2 min",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "783d2105-4e87-4d7e-b1e4-b8bc47d99e7a",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "schema.overrideBotAnswerDelayDuration",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "validated_timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.1"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": "validated_timestring",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"validated_timestring\"]"
                    ]
                  },
                  {
                    "id": "c8d6ce51-c2a3-4c14-b58f-9f2701579faf",
                    "data": {
                      "label": "Override bot icon",
                      "helpText": "",
                      "variable": "isOverrideBotIconAllowed",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "fece848c-c2b6-4511-89bb-20e348416cdb",
                    "data": {
                      "data": "{\n  \"overrideBotIcon\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `${finalMedias}` : `{}`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  overrideBotIcon: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.overrideBotIcon\" \n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-jvaowmgytkpsucdfrqlznbhexi",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              console.log('res', res);\n              if (_.isEqual(this.value, res)) return;\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c69de41d-e62e-4ed1-95e2-adb39aed44e9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.isOverrideBotIconAllowed",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c69de41d-e62e-4ed1-95e2-adb39aed44e9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.isOverrideBotIconAllowed",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\" style=\"margin-top: 16px\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span><b>Bot icon:</b> {{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Bot icon URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.overrideBotIcon.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add chat bot icon from \n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c69de41d-e62e-4ed1-95e2-adb39aed44e9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.isOverrideBotIconAllowed",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      margin-top: 2px;\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "56cfb700-0657-4e5f-aea7-c9d138e7db12",
              "data": {
                "open": false,
                "header": "Conversation",
                "inputs": [
                  {
                    "id": "c522c0eb-2250-4fef-8b97-fd4008c4fd68",
                    "data": {
                      "inputs": [
                        {
                          "component": [
                            "conversation-select",
                            "https://content-assets.onereach.ai/component/conversation-select/0.0.18/index.js"
                          ]
                        }
                      ],
                      "inherit": {
                        "from": "last",
                        "isAdvanced": false
                      },
                      "isNested": false,
                      "variable": "rwcContext",
                      "contextKey": "__rwc_context",
                      "showEditor": false,
                      "exposeConfig": false,
                      "allowCodeMode": false,
                      "contextInputs": {
                        "step": [
                          {
                            "data": {},
                            "component": "stepChooser"
                          }
                        ],
                        "manual": [
                          {
                            "id": "23af3f8e-6adb-42e3-bde9-f75ea695dd56",
                            "data": {
                              "required": true,
                              "variableName": "conversation",
                              "conversationType": "rwc-chat",
                              "validationConditions": [],
                              "renderConditionBuilder": {
                                "label": "`Conditional visibility`",
                                "rules": [],
                                "trueValue": "any",
                                "description": "``",
                                "defaultValue": true,
                                "isNotCollapsed": false,
                                "isEditableHeader": false
                              },
                              "disableConditionBuilder": {
                                "label": "`Conditional disablement`",
                                "rules": [],
                                "trueValue": "any",
                                "description": "``",
                                "defaultValue": false,
                                "isNotCollapsed": false,
                                "isEditableHeader": false
                              }
                            },
                            "compiled": {},
                            "component": [
                              "conversation-select",
                              "https://content-assets.onereach.ai/component/conversation-select/0.0.18/index.js"
                            ]
                          }
                        ],
                        "dataOut": [
                          {
                            "data": {},
                            "component": "formSelectExpression"
                          }
                        ],
                        "inherited": []
                      },
                      "selectedTypes": [
                        "inherited",
                        "manual"
                      ],
                      "contextControl": {
                        "data": {
                          "id": "7fdd6d57-5558-4f4c-be69-3584e5f6b19a",
                          "label": "Inherit context from previous step",
                          "helpText": "",
                          "variable": "selectStyle",
                          "labelLeft": false,
                          "trueLabel": "Continue conversation",
                          "trueValue": "inherited",
                          "falseLabel": "",
                          "falseValue": "manual",
                          "isHtmlLabel": false,
                          "switchColor": "primary",
                          "advancedHelp": {
                            "link": {
                              "url": "",
                              "icon": "help",
                              "iconHelp": "",
                              "tooltipPosition": "top center"
                            },
                            "modal": {
                              "icon": "help",
                              "title": "",
                              "content": "",
                              "iconHelp": "",
                              "tooltipPosition": "top center"
                            },
                            "tooltip": {
                              "icon": "help",
                              "content": "",
                              "openTooltipOn": "hover",
                              "tooltipPosition": "top center"
                            }
                          },
                          "defaultValue": "inherited",
                          "allowCodeMode": true,
                          "isHtmlHelpText": false,
                          "switchPosition": "left",
                          "isHtmlTrueLabel": false,
                          "overwriteLabels": true,
                          "overwriteValues": true,
                          "renderCondition": "",
                          "isHtmlFalseLabel": false,
                          "disabledCondition": "",
                          "helpDisplayOption": "hover",
                          "iconHelpTextOption": "none",
                          "validationConditions": [],
                          "renderConditionBuilder": {
                            "label": "`Conditional visibility`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": false,
                            "isEditableHeader": false
                          },
                          "disableConditionBuilder": {
                            "label": "`Conditional disablement`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": false,
                            "isEditableHeader": false
                          }
                        },
                        "component": "formSwitch"
                      },
                      "initEmptyStore": false,
                      "renderCondition": "",
                      "allContextOptions": [
                        {
                          "label": "Inherited",
                          "value": "inherited"
                        },
                        {
                          "label": "Target step",
                          "value": "step"
                        },
                        {
                          "label": "Merge field",
                          "value": "dataOut"
                        },
                        {
                          "label": "Manual",
                          "value": "manual"
                        }
                      ],
                      "configurationName": "rwc",
                      "disabledCondition": "",
                      "useCustomResolver": true,
                      "bufferVariableName": "__contextTtlBuffer",
                      "keyValueCollection": "___simple_context_service_rwc",
                      "initContextInstance": true,
                      "validationConditions": [],
                      "customResolveFunction": "function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n    default:\n      return this.output.value.conversation;\n  }\n}",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": [
                      "simple-context-manager",
                      "https://content-assets.onereach.ai/component/simple-context-manager/0.0.9/index.js"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "55fc0272-1160-47af-8b10-d4f90bbb820e",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "63880dbe-1ac1-46ba-9dbe-a525f00c8a82",
                    "data": {
                      "meta": {
                        "type": "rwc-send-message"
                      },
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{\n  \"type\": 'rwc-send-message'\n}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": false
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processError'])) step.data['processError'] = true;\nif(_.isUndefined(step.data['stepVariable'])) step.data['stepVariable'] = {\"sendMessage\":true,\"allowMedia\":true,\"waitForAnswer\":false,\"medias\":[],\"messageText\":\"``\"};\nif(_.isUndefined(step.data['conversation'])) step.data['conversation'] = {\"name\":\"\",\"meta\":\"\"};\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{\"type\":\"rwc-send-message\"}};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "4.0.1"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.messageText)) {\n  step.data.messageText = _.get(step.data, 'stepVariable.messageText')\n}\nif (_.isUndefined(step.data.medias)) {\n  step.data.medias = _.get(step.data, 'stepVariable.medias')\n}",
            "version": "4.1.15"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.conversation)) {\n  step.data.conversation = {}\n}",
            "version": "4.1.19"
          },
          {
            "sample": null,
            "script": "step.data.message = {\n  messageType: \"single\",\n  singleMessage: {\n    text: step.data.messageText || '``',\n    media: {\n      medias: step.data.medias || []\n    }\n  },\n  randomMessage: [{\n    weight: '`1`',\n    text: \"``\",\n    media: {\n      medias: []\n    }\n  }],\n  messageTemplateType: \"custom\",\n  messageHelpText: \"\",\n  messageTypeHelpText: \"\",\n  messageLimitCharter: 4000\n}\n\n\nstep.data.elseConditionMessage = {\n  text: \"``\",\n  media: {\n    medias: []\n  }\n};\n\nstep.data.conditionGroups = [{\n  dataOut: \"``\",\n  isNotCollapsed: true,\n  isEditableHeader: false,\n  trueValue: \"`any`\",\n  description: \"``\",\n  rules: [{\n    firstValue: \"``\",\n    secondValue: \"``\",\n    valueType: \"string\",\n    ruleType: \"function (firstValue, secondValue) {\\nreturn _.includes(firstValue, secondValue);\\n}\",\n    codeValue: \"``\",\n    isDisabledSecondValue: false\n  }],\n  label: \"`New condition 1`\",\n  conditionMessage: {\n    text: \"``\",\n    media: {\n      medias: []\n    }\n  }\n}];\n\n\nstep.data.isSingleExit = true;\nstep.data.conditionRuleHasDataOut = false;\nstep.data.hasNoConditionDataOut = false;\nstep.data.conditionExits = [];\n\ndelete step.data.messageType;\ndelete step.data.medias;",
            "version": "4.1.21"
          },
          {
            "script": "if(_.isUndefined(step.data['rwcContext'])) step.data['rwcContext'] = {\"contextKey\":\"__rwc_context\",\"store\":\"this.get('__rwc_context', await this.getShared('__rwc_context'))\",\"output\":{\"selectStyle\":\"inherited\"}};\n",
            "version": "4.3.0"
          },
          {
            "script": "if(_.isUndefined(step.data['overrideBotAnswerDelayDuration'])) step.data['overrideBotAnswerDelayDuration'] = false;\nif(_.isUndefined(step.data['answerDelayDuration'])) step.data['answerDelayDuration'] = {\"input\":\"`2s`\",\"outputMode\":\"ms\"};\n",
            "version": "4.4.10"
          },
          {
            "script": "if(_.isUndefined(step.data['overrideBotIcon'])) step.data['overrideBotIcon'] = {};\n",
            "version": "4.4.19"
          },
          {
            "script": "\nconst messageType = _.get(step, 'data.message.messageType');\n\nif(messageType === 'single') {\n  const renderAttachmentsAsFileList = _.get(step, 'data.message.singleMessage.media.renderAttachmentsAsFileList');\n\n  if(renderAttachmentsAsFileList) {\n    step.data.message.singleMessage.media.renderAttachmentsAs = 'files';\n  } else {\n    step.data.message.singleMessage.media.renderAttachmentsAs = 'media';\n  }\n}\n\nif(messageType === 'random') {\n\n  const messages = _.get(step, 'data.message.randomMessage');\n\n  step.data.message.randomMessage = _.map(messages, (message) => {\n    const renderAttachmentsAsFileList = _.get(message, 'media.renderAttachmentsAsFileList');\n\n    if(renderAttachmentsAsFileList) { message.media.renderAttachmentsAs = 'files'; } \n    else { message.media.renderAttachmentsAs = 'media'; }\n\n    return message;\n  })\n}\n\nif(messageType === 'conditional') {\n  const conditionGroups = _.get(step, 'data.conditionGroups');\n\n  step.data.conditionGroups = _.map(conditionGroups, (group) => {\n    const renderAttachmentsAsFileList = _.get(group, 'conditionMessage.media.renderAttachmentsAsFileList');\n\n    if(renderAttachmentsAsFileList) { group.conditionMessage.media.renderAttachmentsAs = 'files'; } \n    else { group.conditionMessage.media.renderAttachmentsAs = 'media'; }\n\n    return group;\n  });\n\n  const renderAttachmentsAsFileList = _.get(step, 'data.elseConditionMessage.media.renderAttachmentsAsFileList');\n\n   if(renderAttachmentsAsFileList) { step.data.elseConditionMessage.media.renderAttachmentsAs = 'files'; } \n    else { step.data.elseConditionMessage.media.renderAttachmentsAs = 'media'; }\n}\n",
            "version": "4.4.20"
          },
          {
            "script": "const overriden = _.get(step.data, 'overrideBotIcon.location');\n\nif(_.isUndefined(step.data['isOverrideBotIconAllowed'])) \n  step.data['isOverrideBotIconAllowed'] = Boolean(overriden);",
            "version": "4.4.21"
          }
        ],
        "modules": [
          {
            "name": "uuid",
            "version": "",
            "vforkey": "c829eb67-1424-4434-aaf4-1812f16a8d7e"
          },
          {
            "name": "timestring",
            "version": "",
            "vforkey": "343c855c-7e02-4a2c-a0b0-c84effddc5dc"
          }
        ],
        "dateCreated": 1571248485762,
        "dateModified": 1658495495299
      },
      {
        "id": "3a40f4a9-1968-4c0b-8380-027c14109208",
        "version": "1.0.4",
        "cacheVersion": "8000460b-341c-4c66-af07-44893149bcd2",
        "label": "Handle Flow Error",
        "icon": "error",
        "iconType": "default",
        "iconUrl": "",
        "shape": "hexagon",
        "description": "Use this step to react to an uncaught error in the flow.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "on: 'init';\r\nhook: () => {\r\n  /**\r\n   * Parse limit value as a positive number\r\n   * @param {Logger} logger instance of a flow logger\r\n   * @param {number|string} value value to parse\r\n   * @returns {number}\r\n   */\r\n  thisStep.parseLimitOfErrors = (logger, value) => {\r\n    try {\r\n      logger.debug(`Parse limit of errors value`, {value});\r\n      const number = _.parseInt(value);\r\n      \r\n      if (_.isNaN(number)) throw new Error(`Limit of errors is not a valid number: '${value}'`);\r\n      if (number < 1) throw new Error(`Limit of errors should be more than 0: ${value}`);\r\n      \r\n      return number;\r\n    } catch (error) {\r\n      if (!thisStep._warned) {\r\n        logger.warn(`${error.message}. Setting limit of errors value to: 10`);\r\n        thisStep._warned = true;\r\n      }\r\n      \r\n      return 10;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * True if given step is end step\r\n   * @param {Array} steps list of steps in a flow\r\n   * @param {string} stepId step to check\r\n   * @returns {boolean}\r\n   */\r\n  thisStep.isEndStep = (steps, stepId) => {\r\n    return _.get(steps, [stepId, 'type']) === 'empty';\r\n  }\r\n}\r\n\r\n// handling session 'error' lifecycle event in a main thread\r\non: 'before/main/error';\r\nhook: async (hookName, {action : {error}}) => {\r\n  const {URL} = require('url');\r\n  const TimeoutError = require('@onereach/flow-sdk/errors/timeout');\r\n  \r\n  const shouldSkipError = (error) => {\r\n    // TODO: replace with `instanceof TriggerNotFoundError` check here\r\n    if (_.isError(error) && error.message.match(/^session\\.trigger_not_found.*/)) return true\r\n    \r\n    const errorExitStepId = this.currentStep.getExitStepId('__error__');\r\n    const timeoutExitStepId = this.currentStep.getExitStepId('__timeout__');\r\n\r\n    // if error is TimeoutError\r\n    if (error instanceof TimeoutError) {\r\n      // skip handling of timeout error if \"Handle Timeout\" is enabled in a step with timeout\r\n      if (timeoutExitStepId) {\r\n        const isTimeoutEndStep = thisStep.isEndStep(this.steps, timeoutExitStepId);    \r\n        // skip handling of error if:\r\n        // - there are steps to process timeout in a step\r\n        // - there are no steps to process timeout in a step but we respect it\r\n        if (!isTimeoutEndStep || !ignoreEmptyTimeoutHandlers) return true;\r\n        return false\r\n      }\r\n    }\r\n\r\n    // handling rest of errors\r\n    // skip handling of error if \"Error processing\" is enabled in a step with error\r\n    if (errorExitStepId) {\r\n      const isErrorEndStep = thisStep.isEndStep(this.steps, errorExitStepId);\r\n      \r\n      // skip handling of error if:\r\n      // - there are steps to process error in a step\r\n      // - there are no steps to process error in a step but we respect it\r\n      if (!isErrorEndStep || !ignoreEmptyErrorHandlers) return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  const isSkip = shouldSkipError(error);\r\n\r\n  if (shouldSkipError(error)) return;\r\n  \r\n  // get isErrorProcessed flag from step state\r\n  let processedErrorsCounter = thisStep.get(this, ['processedErrorsCounter'], 0);\r\n  \r\n  if (loopDetection) {\r\n    // if error event was already processed then do nothing\r\n    // this prevents from infinite loop of a hook with error handler\r\n    const limitOfErrors = thisStep.parseLimitOfErrors(this.log, numberOfPasses);\r\n  \r\n    if (processedErrorsCounter >= limitOfErrors) {\r\n      this.log.warn(`Amount of processed errors exceeded the limit ${limitOfErrors}. Exiting.`);\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // mark error as processed in step state\r\n  processedErrorsCounter += 1;\r\n  thisStep.set(this, ['processedErrorsCounter'], processedErrorsCounter);\r\n\r\n  // extracting data from error\r\n  const isInstanceOfError = _.isError(error);\r\n  const errorFields = ['message', 'name', 'stack', ..._.keys(error)];\r\n  const errorData = {\r\n    ... _.pick(error, errorFields),\r\n    // use helpers if it's available (legacy envs support)\r\n    ... isInstanceOfError && _.isFunction(this.helpers.formatError)\r\n      ? {formattedStack : this.helpers.formatError(error)}\r\n      : null\r\n  };\r\n  \r\n  const stepWithError = {\r\n    id       : this.currentStep.id,\r\n    label    : this.currentStep.label,\r\n    template : this.currentStep.template || {id : this.currentStep.type}\r\n  };\r\n  \r\n  const flowUrl = new URL(`${this.helpers.flowBuilderUrl}/flows/${this.config.botId}/${this.config.flowId}`);\r\n  flowUrl.searchParams.append('selectedStep', stepWithError.id);\r\n  const flowWithError = {\r\n    id    : this.config.flowId,\r\n    label : this.config.flowLabel,\r\n    url   : flowUrl.toString(),\r\n    bot   : {\r\n      id : this.config.botId\r\n    }\r\n  }\r\n  \r\n  // set current step to be this step with hook, so we can use `this.exitStep`\r\n  this.currentStep = thisStep;\r\n  \r\n  // call error handler\r\n  const isTimeoutError = error instanceof TimeoutError;\r\n  const timestamp = Date.now();\r\n  const stepResult = {\r\n    error             : errorData,\r\n    rawError          : error,\r\n    isTimeout         : isTimeoutError,\r\n    errorsCounter     : processedErrorsCounter,\r\n    time              : (new Date(timestamp)).toISOString(),\r\n    timestamp,\r\n    isInstanceOfError,\r\n    stepWithError,\r\n    flowWithError,\r\n    sessionWithError  : {\r\n      sessionId          : this.session.get('reporting.sessionId'),\r\n      beginningSessionId : this.session.get('reporting.beginningSessionId'),\r\n      previousSessionId  : this.session.get('reporting.previousSessionId')\r\n    }\r\n  };\r\n  \r\n  // show warning with error details\r\n  const errorName = error.name || 'Error';\r\n  const errorMessage = error.message ? `: ${error.message}` : '';\r\n  this.log.warn(`There was an ${errorName}${errorMessage}`, errorData);\r\n  \r\n  if (handleTimeout && isTimeoutError) {\r\n    this.log.debug(`Exit step through 'timeout' exit`, stepResult);\r\n    return this.exitStep('timeout', stepResult);\r\n  }\r\n  \r\n  this.log.debug(`Exit step through 'error' exit`, stepResult);\r\n  return this.exitStep('error', stepResult);\r\n};\r\n\r\n// initial execution\r\n// validating limit of errors\r\nif (loopDetection) thisStep.parseLimitOfErrors(this.log, numberOfPasses);\r\n\r\nthis.log.debug(`Exit step through 'next' exit`);\r\nreturn this.exitStep('next');",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "6c91fc56-1b1d-427a-8917-2c04f4f1455a",
              "label": "timeout",
              "condition": "handleTimeout"
            },
            {
              "id": "6ca007c0-8947-4747-b6ca-14bab8412680",
              "label": "error",
              "condition": ""
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "handleTimeout": true,
          "loopDetection": true,
          "numberOfPasses": "`10`",
          "ignoreEmptyErrorHandlers": true,
          "ignoreEmptyTimeoutHandlers": true
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "time": "2011-10-05T14:48:00.000Z",
          "error": {
            "name": "Error",
            "stack": "error stack",
            "message": "error message",
            "formattedStack": []
          },
          "rawError": {
            "name": "Error",
            "stack": "error stack",
            "message": "error message"
          },
          "isTimeout": false,
          "timestamp": 1615202652220,
          "errorsCounter": 1,
          "flowWithError": {
            "id": "flow id",
            "bot": {
              "id": "bot id"
            },
            "url": "URL of the flow",
            "label": "flow label"
          },
          "stepWithError": {
            "id": "step id",
            "label": "label of a step that caused the error",
            "template": {
              "id": "step template id",
              "label": "step template label",
              "version": "step template version"
            }
          },
          "sessionWithError": {
            "sessionId": "session id",
            "previousSessionId": "previous session id",
            "beginningSessionId": "beginning session id"
          },
          "isInstanceOfError": true
        },
        "help": "The step template allows you to control and continue the flow execution in case an error happened in any step in the flow tree. Some step templates have their own _error_ exit and the flow will follow this exit if defined, but some may be stuck in the step. To prevent the flow to be suspended, add the Handle Flow Error step template before the main logic of your flow and define its settings (see below): the flow will be continued following _error_ exit of the Handle Flow Error step which, in this case, is an additional exit, like _next_.\n\n#### Error handlers in other steps settings\nBy default Handle Flow Error step will ignore errors in steps where _error_ exit is enabled so the flow will continue execution directly in the step and handle only error of the step with empty _error_ exit. The Handle Flow Error will automatically proceed any errors in the flow as many times as it’s allowed in **Loop handling** setting. Once the limit is reached, the step will not handle further errors.\n\n#### Ignore empty error handlers\nIn the case where the step has its own error handling enabled but there is no flow logic designed following _error_ exit, you can define if the step should control it or not. Enable the option if you want the step to handle empty error exits, or turn the option off to ignore it.\n\n#### Handle timeout separately from errors\nIn case of timeout errors, there is an easy way to handle them separately from other errors that happened during flow execution with an additional \"timeout\" step exit.\n\n#### Ignore empty timeout handlers\nIn the case where the step has its own timeout handling enabled but there is no flow logic designed following _timeout_ or _error_ exits, you can define if the step should control it or not. Enable the option if you want the step to handle empty timeout exits, or disable the option to ignore it.\n\n#### Loop handling\nTo limit the number of loops the step will take over the flow errors, the option to set the limit is enabled and defines 10. After the limit is reached, the flow will exit or end by timeout in the step where the error happened. Only integer and positive numbers are expected otherwise the step will use 10 as the limit.\n\n#### Merge field settings\nMerge field contains details of the error that happened, like the message of the error or a source where it occurred. See the structure below:\n```js\n{\n  error: {\n    message: 'error message',\n    name: 'Error',\n    stack: 'error stack',\n    formattedStack: []\n  },\n  rawError: {\n    message: 'error message',\n    name: 'Error',\n    stack: 'error stack'\n  },\n  isInstanceOfError: true,\n  isTimeout: false,\n  errorsCounter: 1,\n  time: '2011-10-05T14:48:00.000Z',\n  timestamp: 1615202652220,\n  stepWithError: {\n    id: 'step id',\n    label: 'label of a step that caused the error',\n    template: {\n      id: 'step template id',\n      label: 'step template label',\n      version: 'step template version'\n    }\n  },\n  flowWithError: {\n    id: 'flow id',\n    label: 'flow label',\n    url: 'URL of the flow',\n    bot: {\n      id: 'bot id'\n    }\n  },\n  sessionWithError: {\n    sessionId: 'session id',\n    beginningSessionId: 'beginning session id',\n    previousSessionId: 'previous session id'\n  }\n}\n```\n\n#### Reporting events\nThe step reports default Step event.\n\n## Release Notes\n### 1.0.4\n- fixed issue with timeout handling if timeout exit of the step is empty and error exit contains step\n### 1.0.1\n- skip creation of `formattedStack` field if an error is not instance of `Error` class\n- add a warning log when an error happened so you can it in logs similar to handled error looks like\n### 1.0.0\n- remove option _Respect error handlers_\n- remove option _Respect timeout handlers_\n- add 'timestamp' field as a number representing Unix timestamp in milliseconds\n- add 'isTimeout' field with details if the error is a timeout error\n- replace option _Respect empty error handlers_ with inverted _Ignore empty error handlers_\n- replace option _Respect empty timeout handlers_ with inverted _Ignore empty timeout handlers_\n### 0.1.1\n- add 'time' field as a string in simplified extended ISO format\n- rename field 'isError' into 'isInstanceOfError'\n### 0.1.0\n- add ability to respect 'timeout' handlers in other steps\n- add ability to ignore empty 'timeout' handlers in other steps\n- add details about session with error into merge field under 'sessionWithError' field\n### 0.0.9\n- step id was added to the flow meta information\n### 0.0.8\n- compatibility fix for session trigger not found error\n### 0.0.6\n- add details about flow where the error happened\n### 0.0.5\n- small improvements in step help\n- add debug log in case of exiting step via 'timeout' exit\n- disable switching \"handle timeout\" to code mode since it affects step exits so can't be changed dynamically \n- add 'errorsCounter' field to step result output example\n- fix: handle all errors if loop detection is disabled instead of a first one\n- fix: if the user set an invalid limit of errors to handle then assume the value is 10\n- fix: flow will work with a dynamic value of errors to handle\n- add details about step with error\n### 0.0.4\n- add the ability to handle timeout errors separately from other errors\n### 0.0.2\n- add the ability to respect \"error processing\" setting\n- add the ability to treat empty handler for \"error processing\" as disabled error processing\n- fix parsing of errors count \n### 0.0.1\n- initial release",
        "formBuilder": {
          "stepExits": [
            {
              "id": "15738781-23c1-41fb-9813-2f51b85981ce",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "ceffcc54-ab4a-465e-a826-4f0f7cd03223",
              "data": {
                "id": "6c91fc56-1b1d-427a-8917-2c04f4f1455a",
                "label": "timeout",
                "condition": "handleTimeout"
              },
              "component": "exitStatic"
            },
            {
              "id": "5792abbe-46bb-4269-af97-466e146e78ce",
              "data": {
                "id": "6ca007c0-8947-4747-b6ca-14bab8412680",
                "label": "error",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "8b93a12f-de5c-45a8-93ba-72c8303d7ed0",
              "data": {
                "data": "{}",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<wildcard :loop-detection=\"schema.loopDetection\" :number-of-passes=\"schema.numberOfPasses\"></wildcard>",
                "allowCodeMode": false,
                "componentName": "or-wildcard-ulpdkfbhmqzwsjovnecriytxga",
                "componentLogic": "{\n    props : {\n        loopDetection : Boolean,\n        numberOfPasses : String\n    }\n}",
                "renderCondition": "",
                "componentTemplate": "<div>\n  <or-alert :dismissible=\"false\" v-if=\"loopDetection\">\n    To protect against unintended endless loops handle flow error steps are limited. This may cause unexpected behavior. Check the <strong>Loop handling</strong> section for more details.\n  </or-alert>\n  <or-alert :dismissible=\"false\" v-if=\"!loopDetection\" type=\"warning\">\n    Loop detection is disabled which may cause unintended endless loop. Check the <strong>Loop handling</strong> section for more details.\n  </or-alert>\n</div>",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "meta": {
                "name": "formWildcard",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
              ]
            },
            {
              "id": "0fba77e6-4f42-42dc-80b9-ce285502f195",
              "data": {
                "open": true,
                "header": "Error handlers in other steps",
                "inputs": [
                  {
                    "id": "ef79f02b-cf9a-4739-bd84-c9b955f6dc0a",
                    "data": {
                      "label": "Ignore empty error handlers",
                      "helpText": "If enabled, will handle error of the step with empty \"error\" exit",
                      "variable": "ignoreEmptyErrorHandlers",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "7efb91c7-d7dd-4e86-9eb1-451ef5f9277f",
              "data": {
                "open": true,
                "header": "Timeout handlers in other steps",
                "inputs": [
                  {
                    "id": "982346ad-9987-471e-997b-2413fa3ed508",
                    "data": {
                      "label": "Handle timeouts separately from errors",
                      "helpText": "If enabled, in case of timeout error will use \"timeout\" exit",
                      "variable": "handleTimeout",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "formSwitch"
                  },
                  {
                    "id": "b21c233b-7a75-45a1-830a-57bbbb2c04ce",
                    "data": {
                      "label": "Ignore empty timeout handlers",
                      "helpText": "If enabled, will handle timeout of the step with empty \"timeout\" exit",
                      "variable": "ignoreEmptyTimeoutHandlers",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fc80b01b-d7cc-4a24-9c8d-fb536b02b5a4",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.handleTimeout",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fc80b01b-d7cc-4a24-9c8d-fb536b02b5a4",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.handleTimeout",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "474e6b11-a24f-4c19-8065-33d90aeee1b4",
              "data": {
                "open": false,
                "header": "Loop handling",
                "inputs": [
                  {
                    "id": "66504381-afaa-4629-bcc8-cce2cf5ca598",
                    "data": {
                      "label": "Set the limit of processed errors",
                      "helpText": "",
                      "variable": "loopDetection",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "488ad45d-724f-444d-b072-0db9cb77fc97",
                    "data": {
                      "label": "Limit of errors to process",
                      "helpText": "",
                      "variable": "numberOfPasses",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "`10`",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "ec6d5494-44c1-4a40-bba7-4baf39f4d421",
                          "errorMessage": "The Limit of errors to process is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "3aca14ce-2bb1-4ce2-9dcc-79b713151f68",
                                "ruleType": "",
                                "codeValue": "_.isEmpty(_.trim(schema.numberOfPasses, '`'))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4b4c21d9-172a-49ed-9d34-ca41802dc6a7",
                            "ruleType": "",
                            "codeValue": "schema.loopDetection",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://sh-205.components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "5de0a0fa-7284-433b-91c6-dff81dd65df9",
              "data": {
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "e7c33ac6-205d-47d1-9ac1-5d72ae9effe6",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step's result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  error: {\n    message: 'error message',\n    name: 'Error',\n    stack: 'error stack',\n    formattedStack: []\n  },\n  rawError: {\n    message: 'error message',\n    name: 'Error',\n    stack: 'error stack'\n  },\n  isInstanceOfError: true,\n  isTimeout: false,\n  errorsCounter: 1,\n  time: '2011-10-05T14:48:00.000Z',\n  timestamp: 1615202652220,\n  stepWithError: {\n    id: 'step id',\n    label: 'label of a step that caused the error',\n    template: {\n      id: 'step template id',\n      label: 'step template label',\n      version: 'step template version'\n    }\n  },\n  flowWithError: {\n    id    : 'flow id',\n    label : 'flow label',\n    url   : 'URL of the flow',\n    bot   : {\n      id : 'bot id'\n    }\n  },\n  sessionWithError: {\n    sessionId          : 'session id',\n    beginningSessionId : 'beginning session id',\n    previousSessionId  : 'previous session id'\n  }\n}",
          "hasProcessError": false,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "// add missing fields\nstep.data.respectErrorHandlers = true;\nstep.data.respectEmptyErrorHandlers = false;\n",
            "version": "0.0.2"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.handleTimeout)) step.data.handleTimeout = false;\n",
            "version": "0.0.4"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(_.get(step, ['outputExample', 'errorsCounter']))) {\n  _.set(step, ['outputExample', 'errorsCounter'], 1);\n}\n\nif (_.isUndefined(_.get(step, ['outputExample', 'stepWithError']))) {\n  _.set(step, ['outputExample', 'stepWithError'], {\n    id: 'step id',\n    label: 'label of a step that caused the error',\n    template: {\n      id: 'step template id',\n      label: 'step template label',\n      version: 'step template version'\n    }\n  });\n}\n\nif (_.isUndefined(_.get(step, ['outputExample', 'error', 'formattedStack']))) {\n  _.set(step, ['outputExample', 'error', 'formattedStack'], []);\n}\n",
            "version": "0.0.5"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(_.get(step, ['outputExample', 'flowWithError']))) {\n  _.set(step, ['outputExample', 'flowWithError'], {\n    id    : 'flow id',\n    label : 'flow label',\n    url   : 'URL of the flow',\n    bot   : {\n      id : 'bot id'\n    }\n  });\n}\n",
            "version": "0.0.6"
          },
          {
            "sample": null,
            "script": "// add respectTimeoutHandlers and respectEmptyTimeoutHandlers fields\nif(_.isUndefined(step.data.respectTimeoutHandlers))\n  step.data.respectTimeoutHandlers = false;\nif(_.isUndefined(step.data.respectEmptyTimeoutHandlers))\n  step.data.respectEmptyTimeoutHandlers = false;\n\n// add sessionWithError to output example\nif (_.isUndefined(_.get(step, ['outputExample', 'sessionWithError']))) {\n  _.set(step, ['outputExample', 'sessionWithError'], {\n    sessionId          : 'session id',\n    beginningSessionId : 'beginning session id',\n    previousSessionId  : 'previous session id'\n  });\n}\n",
            "version": "0.1.0"
          },
          {
            "sample": null,
            "script": "// add 'time' to output example\nif (_.isUndefined(_.get(step, ['outputExample', 'time']))) {\n  _.set(step, ['outputExample', 'time'], '2011-10-05T14:48:00.000Z');\n}\n\n// rename 'isError' => 'isInstanceOfError' in output example\nif (_.isUndefined(_.get(step, ['outputExample', 'isInstanceOfError']))) {\n  const isError = _.get(step, ['outputExample', 'isError']);\n  _.set(step, ['outputExample', 'isInstanceOfError'], isError);\n  delete step.outputExample.isError;\n}\n",
            "version": "0.1.1"
          },
          {
            "script": "delete step.data.respectErrorHandlers;\ndelete step.data.respectTimeoutHandlers;\n\n// add timestamp to output example\nif (_.isUndefined(_.get(step, ['outputExample', 'timestamp']))) {\n  _.set(step, ['outputExample', 'timestamp'], 1615202652220);\n}\n\n// add isTimeout to output example\nif (_.isUndefined(_.get(step, ['outputExample', 'isTimeout']))) {\n  _.set(step, ['outputExample', 'isTimeout'], false);\n}\n\n// add ignoreEmptyErrorHandlers to step data\nif (_.isUndefined(_.get(step, ['data', 'ignoreEmptyErrorHandlers']))) {\n  const respectEmptyErrorHandlers = _.get(step, ['data', 'respectEmptyErrorHandlers'])\n  _.set(step, ['data', 'ignoreEmptyErrorHandlers'], !respectEmptyErrorHandlers);\n}\n\n// add ignoreEmptyTimeoutHandlers to step data\nif (_.isUndefined(_.get(step, ['data', 'ignoreEmptyTimeoutHandlers']))) {\n  const respectEmptyTimeoutHandlers = _.get(step, ['data', 'respectEmptyTimeoutHandlers'])\n  _.set(step, ['data', 'ignoreEmptyTimeoutHandlers'], !respectEmptyTimeoutHandlers);\n}\n\ndelete step.data.respectEmptyErrorHandlers;\ndelete step.data.respectEmptyTimeoutHandlers;\n",
            "version": "0.1.2"
          },
          {
            "script": "",
            "version": "1.0.4"
          }
        ],
        "modules": [
          {
            "name": "lodash",
            "version": "*",
            "vforkey": "eeb24d2f-ff8b-4336-8fa7-a114ab8f33c5",
            "variable": "_"
          }
        ],
        "dateCreated": 1586002031116,
        "dateModified": 1659454704261,
        "hooks": {
          "step-added-to-canvas": "flowMeta.globalProcessError = true;\nflowMeta.globalTimeoutProcessing = true;\nflowMeta.globalProcessErrorStepId = step.id",
          "step-removed-from-canvas": "delete flowMeta.globalProcessError;\ndelete flowMeta.globalTimeoutProcessing;\ndelete flowMeta.globalProcessErrorStepId;"
        }
      },
      {
        "id": "e56b38fd-146f-49f3-b77a-754ca873f9b9",
        "version": "1.6.8",
        "cacheVersion": "aef7772e-7bd1-460a-b4e8-ac57e6e961ae",
        "label": "Send Message (Email)",
        "icon": "send_email",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-right",
        "description": "Sends an email to specified recipients and optionally handles delivery failure messages or end-user interaction.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Email"
        ],
        "recommended": [
          "76ffa5be-da20-4b21-9fd2-bbe746e53f8f",
          "8f424db3-543b-42ee-b2e9-b0cb9570495c"
        ],
        "tags": [],
        "template": "const axios = require('axios');\nconst htmlMinifierTerser = require('html-minifier-terser');\nconst linkCheck = require('link-check');\nconst joi = require('@hapi/joi');\nconst Storage = require('or-sdk/storage');\nconst Request = require('or-sdk/request');\nconst timestring = require('timestring');\nconst validator = require('html-validator');\nconst cheerio = require('cheerio');\nconst striptags = require('striptags');\nconst { v4: uuid } = require('uuid');\nconst moment = require('moment');\nconst planer = require('planer');\nconst { JSDOM } = require('jsdom');\nconst dom = new JSDOM();\nconst emailjs = require('emailjs');\nconst htmlToText = require('html-to-text');\nconst mimeTypes = require('mime-types');\nconst fetch = require('node-fetch');\n\nconst request = new Request(this);\nconst storage = new Storage(this);\n\nlet key = emailConfig.id;\nlet emailRecord = emailConfig;\nconst iterationCount = this.session.get(`iterations_${this.currentStepId}${this.config.flowId}`) || 0;\nconst iterationDepth = 1;\n\nconst emailRegex = /(mailto:)|[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/i;\nconst linkRegex = /(?:(?:https?|ftp):\\/\\/|\\b(?:[a-z\\d]+\\.))(?:(?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))?\\))+(?:\\((?:[^\\s()<>]+|(?:\\(?:[^\\s()<>]+\\)))?\\)|[^\\d\\s`!()\\[\\]{};:'\".,<>?«»\"\"'']))?/i;\nconst plainLinkRegex = /((((((http|ftp|https):\\/{2})|www\\.)+(([0-9a-z_-]+\\.))|([0-9a-z_-]+@[0-9a-z_-]+\\.)|([0-9a-z_-]+\\.))+(aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mn|mo|mp|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|nom|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ra|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw|arpa)(:[0-9]+)?((\\/([~0-9a-zA-Z\\#\\+\\%@\\.\\/_-]+))?(\\?[0-9a-zA-Z\\+\\%@\\/&\\[\\];=_-]+)?)?))\\b/gi\nconst wysiwygRegex = /<span class=\"or-mf\">((((((http|ftp|https):\\/{2})|www\\.)+(([0-9a-z_-]+\\.))|([0-9a-z_-]+@[0-9a-z_-]+\\.)|([0-9a-z_-]+\\.))+(aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mn|mo|mp|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|nom|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ra|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw|arpa)(:[0-9]+)?((\\/([~0-9a-zA-Z\\#\\+\\%@\\.\\/_-]+))?(\\?[0-9a-zA-Z\\+\\%@\\/&\\[\\];=_-]+)?)?))\\b<\\/span>/gmi\n\n//---------------- report Transcript Event ----------------\n// generate / read transcript id\nconst transcriptId = this.get(`${this.currentStepId}.transcriptId`) || uuid();\nthis.set(`${this.currentStepId}.transcriptId`, transcriptId);\n\nconst report = (direction, params) => {\n  const { transcriptId, previousTranscriptId, botIdentifier, endUserIdentifier } = params;\n  const mediaUrl = _.get(params, 'attachements');\n\n  let reportingObject = {\n    eventId            : transcriptId,\n    botIdentifier      : botIdentifier,\n    channel            : 'Email',\n    toIdentifier         : endUserIdentifier,\n    fromIdentifier       : botIdentifier,\n    fromIdentifierType   : 'Email',\n    fromId               : this.config.flowId,\n    fromType             : 'Bot',\n    toType               : 'Visitor',\n    toIdentifierType     : 'Email',\n    reportingSettingsKey : 'transcript',\n    message            : _.get(params, 'message.text'),\n    media              : _.map(mediaUrl, file => ({\n      fileUrl  : file.location,\n      fileType : 'File'\n    })),\n    previousTranscriptId\n  };\n  \n  return this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\nconst getCurrentMode = () => {\n  if (mode.value) {\n    return mode.value;\n  } else {\n    return mode;\n  }\n}\n\nconst getStepTimeout = () => {\n  try {\n    const timeout = _.isObject(timeoutLeng) ? timestring(_.get(timeoutLeng, 'input'), _.get(timeoutLeng, 'outputMode')) : timeofutLeng;\n    \n    const ranges = {\n        low: 10000,\n        up: 2629800000\n    }\n    \n    if (timeout > ranges.up || timeout < ranges.low) {\n        throw 'invalid timeout: Must be a timestring duration value between 10 s and 1 month'\n    }\n    \n    return timeout;\n  } catch (error) {\n    const err = {\n      name: \"Invalid timeout duration\",\n      code: null,\n      message: `${error}`\n    }\n    throw err\n  }\n}\n\nconst getRemainingTimeout = () => {\n  const stepTimeout = getStepTimeout()\n  \n  if (this.session.timeout >= stepTimeout) {\n    return stepTimeout - (new Date().getTime() - new Date(this.session.startDate).getTime());\n  } else {\n    return this.session.timeout - (new Date().getTime() - new Date(this.session.startDate).getTime());\n  }\n}\n\nconst getSenderAddress = () => {\n  const subDomain = senderSubDomain ? `${senderSubDomain}.` : '';\n  if (emailConfig.type !== 'advanced') return emailConfig.address;\n  return `${senderAddress}@${subDomain}${emailConfig.domain}`;\n};\n\nconst getReplyAddress = () => {\n  const replySubDomain = replyToSubDomain ? `${replyToSubDomain}.` : '';\n  if (emailConfig.type !== 'advanced') return emailRecord.address;\n  return `${replyToAddress}@${replySubDomain}${emailConfig.domain}`;\n};\n\nconst getRecipientsArray = () => {\n  return toList.concat(ccList).concat(bccList)\n    .map(r => r.replace(/.*\\s*<(.+)>/, (match, email) => email))\n    .map(r => r.trim());\n};\n\nconst getFirstRef = () => {\n  const firstRef =  Array.isArray(references) ? references[0] : references.split(' ')[0];\n  return firstRef ? firstRef.replace(/[<>]/g, '') : null;\n};\n\nconst isHtmlContent = () => {\n  if (!mode) return;\n  if (mode.value) {\n    if (mode.value === 'plain') return false;\n  } else {\n    if (mode === 'plain') return false;\n  }\n  return true;\n};\n\nconst isTemplateString = () => {\n  if (mode.value) return mode.value === 'template';\n  return mode === 'template';\n}\n\nconst isHtmlMarkdown = () => {\n  if (mode.value) return mode.value === 'visual';\n  return mode === 'visual';\n}\n\nconst checkAtt = (arr) => {\n  if (arr) {\n    const filtered = arr.filter(el => el.alternative)\n    return filtered.length === arr.length\n  }\n  return false\n}\n\nconst checkFileExtension = (file) => {\n  var extension = file.substr((file.lastIndexOf('.') +1));\n  // blocked by amazon\n  if (!/(ade|adp|app|asp|bas|bat|cer|chm|cmd|com|cpl|crt|csh|der|exe|fxp|gadget|hlp|hta|inf|ins|isp|its|js|jse|ksh|lib|lnk|mad|maf|mag|mam|maq|mar|mas|mat|mau|mav|maw|mda|mdb|mde|mdt|mdw|mdz|msc|msh|msh1|msh2|mshxml|msh1xml|msh2xml|msi|msp|mst|ops|pcd|pif|plg|prf|prg|reg|scf|scr|sct|shb|shs|sys|ps1|ps1xml|ps2|ps2xml|psc1|psc2|tmp|url|vb|vbe|vbs|vps|vsmacros|vss|vst|vsw|vxd|ws|wsc|wsf|wsh|xnk)$/ig.test(extension)) {\n    return {\n      isValid: true,\n      message: file\n    }\n  } else {\n    return {\n      isValid: false,\n      message: \"Invalid file type: \" + extension + \" please use allowed file type\"\n    }\n  }\n}\n\nconst withHttp = url => !/^https?:\\/\\//i.test(url) ? `http://${url}` : url;\n\nconst validateAttachments = async (arrOfAttachments) => {\n  const isOutlookAtt = checkAtt(arrOfAttachments)\n  if (arrOfAttachments && arrOfAttachments.length && !isOutlookAtt) {\n      return new Promise( async function (res, rej) {\n        for (const att of arrOfAttachments) {\n          if(!att.alternative) {\n            \n            const file = att.filename || att.name\n            const path = withHttp(att.path || att.href || att.location)\n            \n            const validationRes = checkFileExtension(file)\n            \n            if (validationRes.isValid) {\n              linkCheck(path, function (err, result) {\n                if (err) {\n                    rej({\n                        message: 'cant check attachment link health',\n                    })\n                } else {\n                  if (result.status === 'dead') {\n                    rej({\n                      message: 'invalid attachment link',\n                      code: '404',\n                      url: path\n                    })\n                  }\n                  if(result.err){\n                    rej({\n                      message: 'invalid attachment link',\n                      code: 'ENOTFOUND',\n                      url: path\n                    })\n                  }\n                  res(result)\n                }\n            });\n            } else {\n              rej({\n                message: validationRes.message,\n              })\n            }\n          }\n        }\n    })\n  }\n}\n\nconst pipeLine = pipes => {\n  const _pipes = pipes || [];\n  const execute = async (data) => {\n    let result = data;\n    for (let p of _pipes) {\n      result = await p(result)\n    }\n    return result;\n  };\n  return { execute };\n};\n\nconst emailServer = async () => {\n  if (emailRecord.type !== 'mail-server') throw new Error('Can not create email server');\n\n  const config = { user: emailRecord.address };\n  \n  const gmailConfig = async () => {\n    const url = this.helpers.gatewayUrl('email/mail-server/gmail/auth/xoauth2/v2', this.helpers.providersAccountId);\n    const options = { headers: { authorization: emailRecord.userToken }, params: { id: key, emailAddress: config.user } };\n    \n    let token;\n    try {\n      token = _.get(\n        await axios.get(url, options),\n        'data.accessToken.access_token'\n      );\n    } catch(error) {\n      this.log.error('error gmailConfig', error )\n    }\n\n    return {\n      ...config,\n      host: 'smtp.gmail.com',\n      ssl: true,\n      port: 465,\n      password: token,\n      authentication: ['XOAUTH2']\n    }\n  };\n\n  const outlookConfig = () => {\n    return {\n      ...config,\n      password: emailRecord.password,\n      host: 'smtp-mail.outlook.com',\n      port: 587,\n      tls: { ciphers: 'SSLv3' }\n    }\n  };\n\n  const customServiceConfig = () => {\n    const { address: user, password, smtp: { host, port, tls, cipher } } = emailRecord;\n    const config = { user, password, host, port: parseInt(port), ssl: parseInt(port) === 465 ? true : false };\n    const tlsConfig = cipher ? { tls: { ciphers: cipher } } : tls ? { tls: true } : {};\n    \n    return _.assign(config, tlsConfig);\n  };\n  \n  const server = config => {\n    const { SMTPClient } = emailjs;\n    const client = new SMTPClient(config);\n\n    return client;\n  }\n  \n  switch (emailRecord.service) {\n    case 'gmail-xoauth': return server(await gmailConfig());\n    //case 'outlook': return server(outlookConfig());\n    default: return server(customServiceConfig());\n  }\n};\n\nconst attachDynamicAttachments = () => {\n  if (!Array.isArray(dynamicAttachments)) { \n    return;\n  }\n  attachments.push(...dynamicAttachments\n    .map(att => {\n      if (typeof att === 'string') {\n        return { location: att };\n      } else {\n        if (!att.location) return null;\n        return { location: att.location, name: att.name }\n      }\n    })\n    .filter(item => item)\n  );\n};\n\nconst prepareAttachments = async (cb) => {\n  \n\n  if (hasDynamicAttachments) {\n    attachDynamicAttachments();\n  }\n\n  const ext = str => _.get(/\\.([a-z]+)$/.exec(str.trim()), '[1]', '');\n  const nameFromUrl = str => _.get(/\\/([^\\/]+?\\.[a-z]+)$/.exec(str.trim()), '[1]', '');\n\n  return cb(mimeTypes, fetch, ext, nameFromUrl);\n};\n\nconst emailServerMessage = async () => {\n  const { decode } = htmlEntities();\n  const dec = str => execWithTextMask(str, /(?:&lt;|&gt;)/g, str => decode(str));\n  \n  try {\n    await validateAttachments(attachments)\n  } catch(error) {\n      if (processError) {\n        this.exitStep('error', error)\n      }\n      throw error\n    }\n\n  const prepareAttachmentsMailServer = async () => {\n    return await prepareAttachments(async (mimeTypes, fetch, ext, nameFromUrl) => {\n      const promisedAttachments = attachments.map(att => new Promise(async (res, rej) => {\n        const url = att.location.trim();\n        const buffer = await fetch(url).then(resp => resp.buffer());\n        const name = (att.name || nameFromUrl(url)).trim();\n        const type = mimeTypes.lookup(ext(name) || ext(url) || 'application/octet-stream');\n        \n        return res({ name, type, data: buffer });\n      }));\n\n      return await Promise.all(promisedAttachments);\n    });\n  };\n\n  const arrayToAddressString = arr => arr\n    .filter(item => item && (item !== 'undefined'))\n    .join(',');\n\n  const message = {\n    subject: subject,\n    attachment: await prepareAttachmentsMailServer(),\n    'Message-ID': `<${uuid(51)}@onereach.ai>`, // XXX Why do we have '@onereach.ai' ? \n  };\n  \n  if (isReply) {\n    if (replyTo) message['in-reply-to'] = replyTo;\n    if (references.length) {\n      const strToReferencesHeader = rs => {\n        return rs.split(',').join(' ').split(' ').map(r => r.trim()).join(' ');\n      };\n      message.references = Array.isArray(references) ? strToReferencesHeader(references.join()) : strToReferencesHeader(references);\n    }\n  }\n\n  message.from = `${nameFrom} <${emailRecord.address}>`;\n  \n  switch(getCurrentMode()) {\n    case 'visual':\n      message.text = dec(wysiwygText);\n      message.attachment.push({ data: dec(wysiwygText), type: 'text/html', alternative: true });\n      break;\n    case 'plain':\n      message.text = yourMessage;\n      break;\n    case 'html':\n      message.text = striptags(yourMessageHtml);\n      message.attachment.push({ data: yourMessageHtml, type: 'text/html', alternative: true });\n      break;\n    case 'template':\n      message.text = await htmlMinifierTerser.minify(emailTemplateMergeFieldsStr, { maxLineLength: 20 })\n      message.attachment.push({ data: await htmlMinifierTerser.minify(emailTemplateMergeFieldsStr, { maxLineLength: 20 }), type: 'text/html', alternative: true });\n      break;\n    default:\n      break;\n  }\n  \n  message.to = arrayToAddressString(toList);\n  \n  const cc = arrayToAddressString(ccList);\n  const bcc = arrayToAddressString(bccList);\n\n  if (ccList.length > 0) message.cc = cc;\n  if (bccList.length > 0) message.bcc = bcc;\n  \n  try {\n    validateMailServerRecipients({ to: message.to,  cc: message.cc, bcc: message.bcc})\n  } catch(error) {\n    if (processError) {\n      this.exitStep('error', error)\n    }\n    throw error\n  }\n  \n  const { execute } = pipeLine([\n    addTrackableLinksSmtp,\n    addEmailOpenBeaconSmtp,\n  ]);\n  \n  return execute(message);\n};\n\nconst sendByMailServer = async () => {\n  try {\n    const message = await emailServerMessage();\n    const server = await emailServer();\n  \n    return new Promise((res, rej) => {\n      const slf = this;\n      server.send(message, function (err, data) {\n        if (err) return rej({ message: err.toString() });\n        const messageId = message['Message-ID'].replace(/<|>/g, '');\n        return res(messageId)\n      });\n    })\n  } catch(error) {\n     if (processError) {\n      this.exitStep('error', error)\n    }\n    throw error;\n  }\n};\n\nconst botmailMessage = async () => {\n  const { decode } = htmlEntities();\n  const dec = str => execWithTextMask(str, /(?:&lt;|&gt;)/g, str => decode(str));\n\n  const prepareAttachmentsBotmail = async () => {\n    let mailAttachments = [...attachments , ...dynamicAttachments]\n    return prepareAttachments((mimeTypes, fetch, ext, nameFromUrl) => {\n      return mailAttachments.map(att => {\n        const path = att.location.trim();\n        const filename = att.name && att.name !== 'undefined'? att.name : nameFromUrl(path).trim() || '';\n        return { path, filename };\n      });\n    });\n  };\n  \n  const mailOptions = {\n    from: dec(nameFrom).length && nameFrom !== 'undefined' ? `${dec(nameFrom)} <${getSenderAddress()}>` : getSenderAddress(),\n    to: toList,\n    subject: subject !== 'undefined' ?  dec(subject) : '',\n  };\n\n  if (differentReplyTo) mailOptions.replyTo = getReplyAddress();\n\n  if (isHtmlContent() && !isTemplateString() &&!isHtmlMarkdown()) {\n    \n    _.assign(mailOptions, {\n      text: striptags(dec(yourMessageHtml)),\n      html: dec(yourMessageHtml)\n    });\n\n  } else if (isTemplateString()) {\n    \n    _.assign(mailOptions, {\n      text: emailTemplateMergeFieldsStr,\n      html: dec(emailTemplateMergeFieldsStr)\n    });\n    \n  } else if (isHtmlMarkdown()) {\n    \n    _.assign(mailOptions, {\n      text: wysiwygText, \n      html: dec(wysiwygText)\n    });\n    \n  } else {\n    mailOptions.text = dec(yourMessage);\n    mailOptions.html = dec(yourMessage).replace(/\\n/gmu, \"<br>\");\n  }\n\n  if (ccList.length) mailOptions.cc = ccList;\n  if (bccList.length) mailOptions.bcc = bccList;\n\n  if (attachments.length || dynamicAttachments) mailOptions.attachments = await prepareAttachmentsBotmail();\n  \n  if (isReply) {\n    if (replyTo) mailOptions.inReplyTo = replyTo;\n    if (references.length) {\n      const strToReferencesArray = str => {\n        return str.split(' ').join().split().map(r => r.trim());\n      };\n      mailOptions.references = Array.isArray(references) ? strToReferencesArray(references.join()) : strToReferencesArray(references);\n    }\n  }\n  \n  const { execute } = pipeLine([\n    addTrackableLinksBotmail,\n    addEmailOpenBeaconBotmail,\n  ]);\n  \n  return execute(mailOptions);\n};\n\nconst validateMailServerRecipients = (recipients) => {\n  if (recipients) {\n    if ('to' in recipients && !_.isEmpty(toList)) {\n      if(!emailRegex.test(recipients.to)){\n        throw { type: 'RecipientsError', message: `recipient in 'to' expected to be a valid address but got ${recipients.to}` }\n      }\n    }\n    if ('cc' in recipients && !_.isEmpty(ccList)) {\n      if(!emailRegex.test(recipients.cc)){\n        throw { type: 'RecipientsError',  message: `recipient in 'cc' expected to be a valid address but got ${recipients.cc}` }\n      }\n    }\n    if ('bcc' in recipients && !_.isEmpty(bccList)) {\n      if(!emailRegex.test(recipients.bcc)){\n         throw { type: 'RecipientsError', message: `recipient in 'bcc' expected to be a valid address but got ${recipients.bcc}` }\n      }\n    }\n  } else {\n    throw { type: 'RecipientsError', message: `empty recipient, at least one 'to' recipient is required` }\n  }\n}\n\nconst validateRecipients = (recipients) => {\n    _.forIn(recipients, (list, key) => {\n      _.map(list, (val) => {\n        if (!emailRegex.test(val)) {\n          switch(key) {\n            case 'to':  throw { type: 'RecipientsError', message: `recipient in 'to' expected to be a valid address but got ${val}` }\n            case 'cc':  throw { type: 'RecipientsError',  message: `recipient in 'cc' expected to be a valid address but got ${val}` }\n            case 'bcc':  throw { type: 'RecipientsError', message: `recipient in 'bcc' expected to be a valid address but got ${val}` }\n            default:\n              break\n          }\n        }\n      })\n    })\n};\n\nconst outlookServerMessage = async () => {\n  const { decode } = htmlEntities();\n  const dec = str => execWithTextMask(str, /(?:&lt;|&gt;)/g, str => decode(str));\n  \n  const prepareAttachmentsMailServer = async () => {\n    return await prepareAttachments((mimeTypes, fetch, ext, nameFromUrl) => {\n      return attachments.map(att => {\n        const path = att.location.trim();\n        const filename = att.name && att.name !== 'undefined'? att.name : nameFromUrl(path).trim() || '';\n        return { href: path, filename };\n      });\n    });\n  };\n\n  const arrayToAddressString = arr => arr\n    .filter(item => item && (item !== 'undefined'))\n    .join(',');\n\n  const message = {\n    subject: subject,\n    attachment: await prepareAttachmentsMailServer(),\n    'Message-ID': `<${uuid(20)}@onereach.ai>`,\n  };\n  \n  if (isReply) {\n    if (replyTo) message['in-reply-to'] = replyTo;\n    if (references.length) {\n      const strToReferencesHeader = rs => {\n        return rs.split(',').join(' ').split(' ').map(r => r.trim()).join(' ');\n      };\n      message.references = Array.isArray(references) ? strToReferencesHeader(references.join()) : strToReferencesHeader(references);\n    }\n  }\n\n  message.from = `${nameFrom} <${emailRecord.address}>`;\n\n  switch(getCurrentMode()) {\n    case 'visual':\n      message.text = dec(wysiwygText);\n      message.attachment.push({ data: dec(wysiwygText), type: 'text/html', alternative: true });\n      break;\n    case 'plain':\n      message.text = yourMessage;\n      break;\n    case 'html':\n      message.text = striptags(yourMessageHtml);\n      message.attachment.push({ data: yourMessageHtml, type: 'text/html', alternative: true });\n      break;\n    case 'template':\n      message.text = emailTemplateMergeFieldsStr;\n      message.attachment.push({ data: emailTemplateMergeFieldsStr, type: 'text/html', alternative: true });\n      break;\n    default:\n      break;\n  }\n  \n  message.to = arrayToAddressString(toList);\n  \n  const cc = arrayToAddressString(ccList);\n  const bcc = arrayToAddressString(bccList);\n\n  if (cc) message.cc = cc;\n  if (bcc) message.bcc = bcc;\n  \n  const { execute } = pipeLine([\n    addTrackableLinksSmtp,\n    addEmailOpenBeaconSmtp,\n  ]);\n  return execute(message);\n};\n\nconst sendByOutlook = async () => {\n  try {\n    const message = await outlookServerMessage();\n    validateMailServerRecipients({ to: message.to,  cc: message.cc, bcc: message.bcc})\n    await validateAttachments(message.attachment)\n    const { data } = getHtmlAttachmentSmtp(message);\n    \n    message.html = data\n    \n    if (message.attachment[0].alternative) {\n      message.attachment.shift()\n    }\n    \n    const resp = await this.eventManager.emit({\n      target: this.config.accountId,\n      name: 'email/events/smtp/send-message-smtp',\n      params: {\n        auth: {\n          user: _.get(emailRecord, 'address'),\n          pass: _.get(emailRecord, 'password'),\n        },\n        address: getSenderAddress(),\n        token: _.get(emailRecord, 'access.token'),\n        email: message,\n      },\n      reporting: {\n          sessionId: this.session.get('reporting.sessionId')\n      }\n      }, {\n          invocationType: 'sync',\n          timeout: 30000\n      }\n    );\n    \n    \n    if (resp.error) {\n      throw resp.error\n    }\n    const messageId = _.get(resp, 'data.MessageId');\n    \n    return messageId;\n  } catch (error) {\n    if (processError) {\n      this.exitStep('error', error)\n    }\n      \n    throw error;\n  }\n}\n\nconst sendByBotmail = async () => {\n  try {\n    const message = await botmailMessage();\n    \n    await validateAttachments(message.attachments)\n    validateRecipients({ to: message.to,  cc: message.cc, bcc: message.bcc})\n\n    const resp = await this.eventManager.emit({\n      target: this.helpers.providersAccountId,\n      name: 'email/events/botmail/send',\n      params: {\n        address: getSenderAddress(),\n        token: _.get(emailRecord, 'access.token'),\n        email: message,\n        ignoreOtherBounces: ignoreOtherBounces,\n        customMessageId: customMessageId,\n        iterationKey: this.currentStepId,\n        iterationCount: iterationCount\n      },\n      reporting: {\n          sessionId: this.session.get('reporting.sessionId')\n      }\n      }, {\n          invocationType: 'sync',\n          timeout: 30000\n      }\n    );\n    \n    if (resp.error) {\n      throw resp.error\n    }\n    \n    if ( !resp.data || !resp.data.MessageId) {\n      this.log.warn(\"can't send message: can't genereate messageId or there is unhadled bounce\")\n    }\n    \n    return resp.data.MessageId\n    \n  } catch (error) {\n    \n    if (error.details && _.isArray(error.details) && error.details[0]) {\n      throw {\n        type: \"invalid address\",\n        message: error.details[0].message\n      }\n    }\n    \n    if (processError) {\n      if (error.syscall) {\n        const message = {\n          message: `${error.syscall} ${error.hostname}`,\n          code: error.code,\n          stack: error.syscall\n        }\n        \n        throw message\n\n      }\n      \n      throw error;\n    }\n      \n    throw error\n  }\n};\n\nconst sendMessage = async () => {\n  if (emailRecord.service === 'outlook') return sendByOutlook();\n  if (emailRecord.type === 'mail-server') {\n    const res = await sendByMailServer();\n    return res\n  }\n  return await sendByBotmail();\n};\n\nconst registerBeacons = async (messageId) => {\n \n  const beacons = thisStep.get(this.process.main, 'beacons')\n  const recipient = _.get(getRecipientsArray(), '[0]', 'unknown');\n  \n  const payload = {\n    messageId,\n    accountId: this.config.accountId,\n    stepId: this.currentStepId,\n    iterationKey: this.currentStepId,\n    iterationCount,\n    email: differentReplyTo ? getReplyAddress() : getSenderAddress(),\n    recipient,\n    expire: Date.now() + 604800000,\n    beacons\n  };\n  \n  try {\n    const registeredBeacons = await this.eventManager.emit({\n      target: this.helpers.providersAccountId,\n      name: 'email/events/beacons/register',\n      params: payload,\n      reporting: {\n          sessionId: this.session.get('reporting.sessionId')\n      }\n      }, {\n          invocationType: 'sync',\n          timeout: 30000\n      }\n    );\n\n    return registeredBeacons;\n    \n  } catch (error) {\n    this.log.error('registerBeacons error', error)\n    throw error;\n  }\n};\n\nconst generateShortUrl = async (url) => {\n  try {\n    \n    const request = new Request(this);\n    const req = await request.post({\n      uri: `${this.helpers.urlShortenerUrl}/acc/${this.config.accountId}/link`,\n      headers: {\n        Authorization: `FLOW ${this.config.flowToken}`,\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      body: {\n        url,\n        deepLink: false\n      },\n      json: true\n    })\n    \n    return req.shortUrl;\n    \n  } catch (e) {\n    this.log.error('Error generating short URL: ', e);\n    return url;\n  } \n}\n\nconst createEmailBeacon = async (id, payload) => {\n  try {\n    const url = this.helpers.gatewayUrl('email/beacon', this.helpers.providersAccountId);\n    const key = 'beacons';\n    let beaconLink;\n    \n    if (!url) {\n      this.log.error('cant get url for open beacon generation');\n      throw {\n        name: \"open beacon link generation failed\",\n        message: \"can't get gateway url\"\n      }\n    }\n    \n    if (hasShortUrl) {\n      beaconLink = await generateShortUrl(`${url}?id=${id}`)\n    } else {\n      beaconLink = `${url}?id=${id}`\n    }\n    \n    const beacon = {\n      id,\n      beaconLink,\n      ...payload\n    };\n    \n    const beacons = thisStep.get(this.process.main, key)\n    \n    if (beacons) {\n       thisStep.set(this.process.main, key, [...beacons, beacon])\n    } else {\n       thisStep.set(this.process.main, 'beacons', [ beacon ])\n    }\n    \n    return beacon;\n  } catch (error) {\n    this.log.error('createEmailBeacon error', error)\n  }\n};\n\nconst beaconImage = (link) => {\n  return `<img style=\"display: none !important;\" src=\"${link}\" />`\n};\n\nconst getHtmlAttachmentSmtp = (message) => {\n  const htmlAttQuery = { type: 'text/html', alternative: true };\n  const att = _.chain(message)\n    .get('attachment')\n    .find(htmlAttQuery)\n    .value();\n  return _.cloneDeep(att) || _.assign({}, htmlAttQuery, { data: _.get(message, 'text') });\n};\n\nconst addHtmlAttachmentSmtp = (message, htmlAttachment) => {\n  const m = _.cloneDeep(message);\n  const attachments = _.filter((m.attachment || []), item => !_.isMatch(item, { type: 'text/html', alternative: true }));\n  m.attachment = [htmlAttachment, ...attachments];\n  return m;\n};\n\nconst addEmailOpenBeaconSmtp = async message => {\n  const id = uuid();\n  const beacon = await createEmailBeacon(id, { type: 'open' });\n  const htmlAtt = getHtmlAttachmentSmtp(message);\n  htmlAtt.data = `\n    ${htmlAtt.data || message.text}\n    ${beaconImage(beacon.beaconLink)}\n  `;\n  return addHtmlAttachmentSmtp(message, htmlAtt);\n};\n\nconst addEmailOpenBeaconBotmail = async opts => {\n  if (useThreads) {\n    const id = uuid();\n    const beacon = await createEmailBeacon(id, { type: 'open' });\n    const html = `\n      ${opts.html || opts.text}\n      ${beaconImage(beacon.beaconLink)}\n    `;\n    return _.assign({}, opts, { html });\n  }\n  return _.assign({}, opts, { html: opts.html || opts.text });\n};\n\nconst addTrackableLinks = async mailBody => {\n  let beaconsAnchors = []\n  let bodyWithBeaconsAnchors = ''\n  \n  const validateHtml = async (options) => {\n    try {\n      const result = await validator(options)\n      return result\n    } catch (error) {\n      this.log.error('addTrackableLinks html validation error', error)\n    }\n  }\n  \n  const validateUrl = (url) => {\n    return linkRegex.test(url)\n  }\n  \n  const validateEmailAddress = (address) => {\n    return emailRegex.test(address)\n  }\n  \n  const parseHtml = (html) => {\n    try {\n      const result = cheerio.load(html, { xmlMode: true })\n      return result\n    } catch (error) {\n      this.log.error('addTrackableLinks html parse error', error)\n    }\n  }\n  \n  const createUrl = (url) => {\n    try {\n     const link = new URL(url)\n     return link\n    } catch(error) {\n      try {\n        const link = new URL(`http://${url}`)\n        return link\n      } catch(error) {\n        throw error\n      }\n    }\n  }\n  \n  const getDomainNameFromURL = (url)=> {\n    const hostNameArr = url.host.split('.')\n    return _.last(hostNameArr)\n  }\n  \n  const validateDomainName = (name) => {\n\n    const schema = joi.string().domain({ minDomainSegments: 1 })\n    const res = schema.validate(name)\n    \n    if (res.error) {\n      const { details } = res.error\n      throw {\n        name: details.type,\n        code: null,\n        message: details.message\n      }\n    }\n  }\n  \n  const processLinks = async (parsed) => {\n    try{\n    const self = this;\n    parsed('a').each(function() {\n      const hrefVal = parsed(this).attr('href') || '#'\n      const isEmailAddr = validateEmailAddress(hrefVal)\n      const isTrackable = validateUrl(hrefVal)\n      \n      if (!isEmailAddr && isTrackable) {\n        const url = createUrl(hrefVal)\n        parsed(this).attr('href', url.href)\n        \n        const domainName = getDomainNameFromURL(url)\n        validateDomainName(domainName)\n        const anchor = uuid();\n        \n        const tagData = {\n          attributes: _.omit(parsed(this)[0].attribs, ['style']),\n          children: _.pick(parsed(this)[0].children[0], ['type', 'data', 'name'])\n        }\n        \n        beaconsAnchors = [...beaconsAnchors, { link: parsed(this).attr('href'), value: anchor, tagData }]\n        parsed(this).attr('href', anchor)\n      }\n    })\n    return parsed\n    } catch (err) {\n        err = {\n          name: \"Link processing error\",\n          code: null,\n          message: \"Invalid href value in html template\"\n        }\n      throw err\n    }\n  }\n  \n  const processWysiwygLinks = (html) => {\n    const res = html.replace( wysiwygRegex, (link) => {\n      const plainLink = link.match(plainLinkRegex)\n      const processedLink = processPlain(plainLink[0])\n      return processedLink\n    })\n    return res\n  }\n  \n  const processHtml = async (html) => {\n   // empty messsage\n   if (!html) return ''\n    \n    const processedHtml = await validateHtml({\n      data: html,\n      validator: 'WHATWG',\n      isFragment: true\n    })\n    \n    if (!processedHtml.isValid) {\n      this.log.info('ivalid html template', processedHtml)\n    }\n  \n    try {\n      const parsedHtml = parseHtml(html)\n      const processedLinks = await processLinks(parsedHtml)\n      return processedLinks.html()\n    } catch (error) {\n      throw error\n    }\n  }\n  \n  const processWysiwygHtml = async (html) => {\n   if (!html) return ''\n    \n    const processedHtml = await validateHtml({\n      data: html,\n      validator: 'WHATWG',\n      isFragment: true\n    })\n    \n    if (!processedHtml.isValid) {\n      this.log.info('ivalid html template', processedHtml)\n    }\n  \n    try {\n      const processedWysiwygLinks = processWysiwygLinks(html);\n      const parsedHtml = parseHtml(processedWysiwygLinks)\n      const processedLinks = await processLinks(parsedHtml)\n      return processedLinks.html()\n    } catch (error) {\n      throw error\n    }\n  }\n  \n  const processPlain = (plain) => {\n    const processed = plain.replace(plainLinkRegex, (link) => {\n      const isEmailAddress = validateEmailAddress(link)\n      if (isEmailAddress) {\n        return `<a href=\"mailto:${link}\">${link}</a>`\n      }\n      return `<a href=\"${link}\">${link}</a>`\n    })\n    return processed\n  }\n  \n  switch(getCurrentMode()) {\n    case 'plain':\n      bodyWithBeaconsAnchors = await processHtml(processPlain(mailBody));\n      break;\n    case 'visual':\n      bodyWithBeaconsAnchors = await processWysiwygHtml(mailBody);\n      break;\n    default:\n      bodyWithBeaconsAnchors = await processHtml(mailBody);\n      break;\n  }\n  \n  const beacons = await beaconsAnchors.reduce((acc, anchor) => {\n    return acc.then(async beacons => { \n      const id = anchor.value;\n      const beacon = await createEmailBeacon(id, { type: 'click', link: anchor.link.trim() });\n      return [...beacons, { beacon, anchor: anchor.value }];\n      \n    });\n  }, Promise.resolve([]));\n  \n  thisStep.set(this.process.main, 'beacons_tags_data', beaconsAnchors)\n  return beacons.reduce((str, { beacon, anchor }) => str.replace(anchor, beacon.beaconLink), bodyWithBeaconsAnchors);\n};\n\nconst addTrackableLinksSmtp = async message => {\n  const htmlAtt = getHtmlAttachmentSmtp(message);\n  if (useThreads) {\n    htmlAtt.data = await addTrackableLinks(htmlAtt.data || message.text);\n  }\n  return addHtmlAttachmentSmtp(message, htmlAtt);\n};\n\nconst addTrackableLinksBotmail = async opts => {\n  let html;\n  if (useThreads) {\n    html = await addTrackableLinks(opts.html || opts.text);\n  } else {\n    html = opts.html || opts.text\n  }\n  // const html = await addTrackableLinks(opts.html || opts.text);\n  return _.assign({}, opts, { html });\n};\n\nconst transformBotmailMessageContent = async (opts, callback) => {\n  return _.assign({}, opts, { html: await callback(opts.html || opts.text) });\n};\n\nconst htmlEntities = () => {\n  const Entities = require('html-entities');\n  const { encode, decode } = Entities\n  return { encode, decode };\n};\n\nconst execWithTextMask = (str, regex, callback) => {\n  const masksMap = new Map();\n  const masked = str.replace(regex, match => {\n    const mask = `_____MASK____${Math.random()}_${Math.random()}_${Math.random()}____MASK____`;\n    masksMap.set(mask, match);\n    return mask;\n  });\n  const cbResult = callback(masked);\n  return Array.from(masksMap.keys()).reduce((result, mask)=> {\n    return result.replace(mask, masksMap.get(mask));\n  }, cbResult);\n};\n\n const getCurrentBeaconTagData = (beaconId, beaconsTagsData) => {\n   return _.find(beaconsTagsData, (beaconTagsData) => { \n     return beaconTagsData.value === beaconId; \n   })\n }\n\nconst setLatestClickData = async (responseData) => {\n  const now = moment();\n  const { type, messageId, sender, link, beaconLink, id } = responseData.event.params.beacon\n  const beaconsData = thisStep.get(this.process.main, 'beacons')\n  const beaconsTagsData = thisStep.get(this.process.main, 'beacons_tags_data')\n  const currentTagData = getCurrentBeaconTagData(id, beaconsTagsData)\n  \n  if (responseData) {\n    const key = 'latest_response';\n    const latestResponse = {\n    \tmessageId,\n      timestamp: Date.now(),\n      datetime: now.format(),\n    \ttype: type,\n    \tlink,\n    \tbeaconLink,\n    \teventSender: {\n    \t\temail: sender,\n    \t},\n    \tvalue: currentTagData.tagData.children.data,\n     \ttag: {\n     \t\tattributes: currentTagData.tagData.attributes ,\n     \t\tcontents: currentTagData.tagData.children.data\n      }\n    }\n    \n    thisStep.set(this.process.main, key,latestResponse)\n    await updateAllResponsesData(latestResponse)\n  }\n}\n\nconst setLatestOpenData = async (eventData) => {\n  const now = moment();\n  const { type, messageId, sender, link } = eventData.params.beacon\n\n  if (eventData) {\n    const key = 'latest_response';\n    const latestResponse = {\n    \tmessageId,\n      timestamp: Date.now(),\n      datetime: now.format(),\n    \teventSender: {\n    \t\temail: sender,\n    \t},\n    \ttype: type,\n    }\n    \n    thisStep.set(this.process.main, key, latestResponse)\n    await updateAllResponsesData(latestResponse)\n  }\n}\n\nconst updateAllResponsesData = async (latestResponse) => {\n  const key = 'response_list';\n  const allResponses = thisStep.get(this.process.main, key)\n  if (allResponses) {\n     thisStep.set(this.process.main, key, [...allResponses, latestResponse])\n  } else {\n     thisStep.set(this.process.main, key, [ latestResponse ])\n  }\n}\n\nconst resolveReponseData = async (responseData) => {\n  const { type } = responseData.event.params.beacon\n  switch(type) {\n    case 'click': return setLatestClickData(responseData)\n    case 'open': return setLatestOpenData(responseData.event)\n  }\n}\n\n// Get outgoing message fields content helpers\n\nconst replaceBreakLinesHtml = (html) => {\n  return html.replace(/\\n/gmu, \"<br>\");\n}\n\nconst processHtmlToPlain = (html) => {\n  const params = {\n    wordwrap: 130\n  }\n  return htmlToText.fromString(html, params)\n}\n\nconst convert = {\n  html: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return replaceBreakLinesHtml(yourMessageHtml)\n      case 'plain':\n        return processHtmlToPlain(yourMessageHtml)\n      case 'trimmedHtml':\n        return planer.extractFrom(yourMessageHtml, 'text/html', dom.window.document)\n      case 'trimmedText':\n        return planer.extractFrom(processHtmlToPlain(yourMessageHtml), 'text/plain')\n    }\n  },\n  plain: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return replaceBreakLinesHtml(yourMessage)\n      case 'plain':\n        return yourMessage\n      case 'trimmedHtml':\n        return replaceBreakLinesHtml(planer.extractFrom(yourMessage, 'text/plain'))\n      case 'trimmedText':\n        return planer.extractFrom(yourMessage, 'text/plain')\n    }\n  },\n  visual: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return wysiwygText\n      case 'plain':\n        return processHtmlToPlain(wysiwygText)\n      case 'trimmedHtml':\n        return planer.extractFrom(wysiwygText, 'text/html', dom.window.document)\n      case 'trimmedText':\n        return planer.extractFrom(processHtmlToPlain(wysiwygText), 'text/plain')\n    }\n  },\n  template: (targetType) => {\n    switch(targetType) {\n      case 'html':\n        return emailTemplateMergeFieldsStr\n      case 'plain':\n        return  processHtmlToPlain(emailTemplateMergeFieldsStr)\n      case 'trimmedHtml':\n        return planer.extractFrom(emailTemplateMergeFieldsStr, 'text/html', dom.window.document)\n      case 'trimmedText':\n        return planer.extractFrom(processHtmlToPlain(emailTemplateMergeFieldsStr), 'text/plain')\n    }\n  }\n}\n\nconst getMessageContent = (mode, type) => {\n  const _mode = mode.value || mode\n  return convert[_mode](type)\n}\n\nconst messageToOutput = async () => {\n  try {\n    const now = moment();\n    const subjectRegex = /^([rR][eE]|[fF][wW][dD]|[fF][wW]):\\s/;\n    const currentMessageMode = mode\n    \n    const messageId = thisStep.get(this.process.main, 'messageId')\n    const latestResponse = thisStep.get(this.process.main, 'latest_response') || {}\n    const allResponses = thisStep.get(this.process.main, 'response_list') || []\n    const beacons = thisStep.get(this.process.main, 'beacons')\n    \n    \n    const message = {\n      latestResponse: latestResponse,\n      allResponses: allResponses,\n      outgoingMessage: {\n        messageId,\n        timestamp: Date.now(),\n        datetime: now.format(),\n        sender: {\n          name: nameFrom,\n          address: getSenderAddress()\n        },\n      \tsubject: {\n    \t\t\ttext: subject,\n    \t\t\ttrimmed: subject.replace(subjectRegex,'')\n    \t\t},\n    \t\trecipients: {\n    \t\t\tto: toList,\n    \t\t\tcc: ccList,\n    \t\t\tbcc: bccList\n    \t\t},\n    \t\tcontent: {\n    \t\t\tplain: getMessageContent(currentMessageMode, 'plain'),\n    \t\t\thtml: getMessageContent(currentMessageMode, 'html'),\n\t   \t\t\ttrimmedText: getMessageContent(currentMessageMode, 'trimmedText'),\n    \t\t\ttrimmedHtml: getMessageContent(currentMessageMode, 'trimmedHtml')\n    \t\t},\n    \t\tinReplyTo: replyTo,\n\t      references: Array.isArray(references) ? references : [],\n        attachments,\n        beacons\n      }\n    }\n\n    return message\n  } catch (error) {\n    this.log.error('messageToOutput error', error)\n  }\n};\n\nconst attachDynamicRecipients = () => {\n  if (!Array.isArray(dynamicRecipients)) return;\n\n  dynamicRecipients.forEach(r => {\n    if (typeof r === 'string') {\n      toList.push(r);\n      return;\n    }\n\n    if (typeof r === 'object') {\n      switch (_.get(r, 'type', '').toLowerCase()) {\n        case 'to': toList.push(r.recipient); break;\n        case 'cc': ccList.push(r.recipient); break;\n        case 'bcc': bccList.push(r.recipient); break;\n      }\n    }\n  });\n};\n\n// EVENTS HANDLERS\n\nconst updateSessionTimeout = () => {\n  const remainingTime = this.session.timeout - (new Date().getTime() - new Date(this.session.startDate).getTime());\n  const neededTime = getStepTimeout();\n  if (neededTime > remainingTime) this.session.set('timeout', neededTime);\n};\n\nconst eventsTriggersNames = (email, inReplyTo, firstRef, sender) => {\n  return [\n    `in/email/reaction/${inReplyTo}`,\n  ].filter(e => e);\n};\n\nconst exit = (data = null) => { \n  this.exitFlow(data);\n}\n\nconst exitStep = async (leg, data) => {\n  const callback = this.takeCallback();\n  const eventManagerResult = await this.eventManager.callbackResolve(callback, { caught: true });\n  // await removeStoredMessageData();\n  return this.exitStep(leg, data);\n};\n\nconst exitThread = async (type, data) => {\n  \n  const callback = this.takeCallback();\n  const eventManagerResult = await this.eventManager.callbackResolve(callback, { caught: true });\n  \n  const id = `${type}_${uuid()}`\n  \n  this.process.newThread(id, thread => {\n      thread.currentStep = thisStep.getExitStepId(type);\n      thread.activate({ type: data });\n  });\n  \n  await this.mergeFields[this.currentStep.dataOut.name].set(data);\n  return exit(data);\n}\n\nconst resolveEventHandler = ({\n  email, inReplyTo, firstRef,\n  senders, bounceHandleType,\n  ignoreOtherBounces, beacons, hasOpenEvent,\n  hasUrlClickTracking\n}) => async event => {\n  const sender = _.get(event,'params.sender');\n  const references = _.get(event, 'params.message.references', '');\n  const threadRegex = new RegExp(`${inReplyTo}|${firstRef}`, 'g');\n  const type = _.get(event, 'params.type');\n  \n  const getStringEmailFromArray = (arr) => {\n    const result = _.reduce(arr, (stringData, item) => {\n      return `${stringData ? stringData + ' | ' : ''}${item.name ? '<' + item.name + '>' : ''} ${item.address}`;\n    }, '');\n    \n    return result;\n  }\n  \n  // if (type !== 'delivery') {\n  //   let toIdentifier, fromIdentifier;\t\n    \t\n  //   if (type === 'bounce' || type === 'complaint') {\t\n  //     toIdentifier = emailConfig.label;\t\n  //     fromIdentifier = _.get(event, 'sender');\t\n  //   } else if (type === 'beacon') {\t\n  //     toIdentifier = emailConfig.label;\t\n  //     fromIdentifier = _.get(event, 'params.beacon.sender');\t\n  //   } else {\t\n  //     const toData = _.get(event, 'params.message.to.value');\t\n  //     const fromData = _.get(event, 'params.message.from.value');\t\n      \t\n  //     toIdentifier = getStringEmailFromArray(toData);\t\n  //     fromIdentifier = getStringEmailFromArray(fromData);\t\n  //   }\n    \n  //   report('in', _.assign({}, event.params, {\n  //     transcriptId         : uuid(),\n  //     previousTranscriptId : this.get(`${this.currentStepId}.transcriptId`), \n  //     botIdentifier        : toIdentifier, \n  //     endUserIdentifier    : fromIdentifier\n  //   })); \n  // }\n  \n  const messageEventHandler = async event => {\n    const handleOmitCondition = async condition => {\n      if (condition) return exit();\n      return exitStep('next', await messageToOutput());\n    };\n    \n    switch (event) {\n      case 'thread': return handleOmitCondition(!threadRegex.test(references));\n      case 'to': return handleOmitCondition(false);\n      case 'recipient': return handleOmitCondition(!_.includes(senders, sender));\n      default: throw new Error('Wrong handling case in message handler')\n    }\n  };\n  \n  const bounceEventHandler = async event => {\n    try {\n      const messageId = thisStep.get(this.process.main, 'messageId')\n      const { sender } = event.params\n    \n      const now = moment()\n      const message = await messageToOutput();\n      const { type } = event.params.bounce\n      const isOptOut = event.params.isOptOut || false\n      \n      message.latestResponse = { \n        messageId,\n        timestamp: Date.now(),\n        datetime: now.format(),\n      \teventSender: {\n    \t\t  email: sender,\n    \t  },\n      \ttype: type,\n      \tisOptOut\n      }\n      \n      if (bounceHandleType === 'ignore') return exit(event);\n      \n      if (ignoreOtherBounces) {\n        if (sender !== _.get(senders, '[0]')) return exit(event);\n      }\n      \n      if (bounceHandleType === 'error') {\n        const bounceResp = messageToOutput(event)\n        \n        const message = {\n          message: bounceResp.latestResponse,\n          code: \"bounce\",\n          stack: \"sendByBotmail -> bounce\"\n        }\n        \n        throw message\n      };\n      \n      if (bounceHandleType !== 'separately') return exitStep('bounce', message);\n  \n      switch (type) {\n        case 'hard-bounce': return exitStep('hard-bounce', message);\n        case 'soft-bounce': return exitStep('soft-bounce', message);\n      }\n    } catch (error) {\n      throw error\n    }\n  };\n  \n  const beaconEventHandler = async event => {\n    const beaconData = _.get(event, 'params.beacon');\n    const type = _.get(event, 'params.beacon.type');\n    const key = 'beacons'\n    \n    const handleClick = async () => {\n      \n      if (!hasUrlClickTracking) {\n        return exit(event);\n      }\n      \n      const beacons = thisStep.get(this.process.main, key)\n      \n      const responseData = {\n        event,\n        beacons\n      }\n      \n      await resolveReponseData(responseData)\n      let message = await messageToOutput()\n      \n      return exitThread('click', message)\n    }\n    \n    const handleOpen = async  () => {\n      if (!hasOpenEvent) {\n        return exit(event);\n      }\n      \n      const responseData = {\n        event,\n        beacons: null\n      }\n      \n      await resolveReponseData(responseData)\n      let message = await messageToOutput()\n      \n      return exitThread('open', message);\n    };\n    \n    switch (type) {\n      case 'click': return handleClick();\n      case 'open': return handleOpen();\n    }\n  };\n  \n  const complaintEventHandler = async event => {\n    const messageId = thisStep.get(this.process.main, 'messageId')\n    const { type } = event.params\n    const { complainedRecipient } = event.params.complaint\n    const now = moment()\n    // const isOptOut = event.params.isOptOut || false\n    const isOptOut = _.get(event, 'params.isOptOut') || false\n    const message = await messageToOutput();\n    \n    message.latestResponse = { \n      messageId,\n      timestamp: Date.now(),\n      datetime: now.format(),\n    \teventSender: {\n  \t\t  email: complainedRecipient,\n  \t  },\n    \ttype: type,\n    \tisOptOut\n    }\n    \n    if (!handleComplaints) return exit(event);\n    if (bounceHandleType === 'ignore') return exit(event);\n    if (bounceHandleType === 'error') return exitStep('error', message);\n    if (bounceHandleType !== 'separately') return exitStep('bounce', message);\n    \n    return exitStep('hard-bounce', message)\n  };\n  \n  const eventType = _.get(event, 'params.type');\n\n  switch (eventType) {\n    case 'bounce': return bounceEventHandler(event);\n    case 'beacon': return beaconEventHandler(event);\n    case 'complaint': return complaintEventHandler(event);\n    // case 'delivery': return deliveryNotificationhandler(event);\n    default: return exit();\n  }\n};\n\nconst triggers = async (thread, messageId, timeout) => {\n  const email = differentReplyTo ? getReplyAddress() : getSenderAddress();\n  const inReplyTo = messageId;\n  const firstRef = getFirstRef();\n  const senders = getRecipientsArray();\n  const beacons = thisStep.get(this.process.main, 'beacons') || [];\n\n  const resolverOptions = {\n    email,\n    inReplyTo,\n    firstRef,\n    senders,\n    bounceHandleType,\n    ignoreOtherBounces,\n    beacons,\n    hasOpenEvent,\n    hasUrlClickTracking\n  };\n  \n  if (useThreads) {\n    thread.triggers.once(`in/email/reaction/${messageId}`, event => {\n      return resolveEventHandler(resolverOptions)(event);\n    });\n    \n    thread.triggers.timeout(timeout, async () => exitStep('timeout', await messageToOutput()))\n  }\n  \n  return thread.triggers\n    .otherwise(async () => {\n      return useThreads ?\n        exitThread('next', await messageToOutput()) :\n        exitStep('next', await messageToOutput());\n    });\n};\n\nconst validateEmailConfig = async (selectedAddress, mailOptions) => {\n  \n  let opts = _.isArray(mailOptions) ? mailOptions : mailOptions.mailOptions\n  \n  const res = opts.filter(account => {\n    if (account.type === 'mail-server' || account.type === 'botmail'){\n      return account.address === selectedAddress\n    } else {\n      return account.domain === selectedAddress\n    }\n  })\n  \n  if (!res.length) {\n    const error = {\n      name: \"invalid sender address\",\n      message: \"Unknown sender address\",\n      stack: new Error().stack\n    }\n    throw error\n  } else {\n    emailConfig = res[0]\n    key = emailConfig.id;\n    emailRecord = emailConfig;\n  }\n}\n\nconst main = async () => {\n  let messageId = thisStep.get(this.process.main, 'messageId')\n\n  if (hasDynamicRecipients) {\n    attachDynamicRecipients();\n  }\n  \n  if (iterationCount && iterationCount >= iterationDepth) {\n    return exitStep('next')\n  }\n  \n  if (useManualMode) {\n    await validateEmailConfig(manualEmailConfig, emailConfig)\n  }\n  \n  if (messageId) {\n    const timeout = getRemainingTimeout()\n    return triggers(this, messageId, timeout);\n  } else {\n    const timeout = getStepTimeout()\n    const params = {\n      message: {\n        text: yourMessage || yourMessageHtml,\n      },\n    };\n    const endUserIdentifier = _.concat(toList, ccList, bccList).join(' ');\n    report('out', _.assign({}, params, {\n      transcriptId         : uuid(),\n      previousTranscriptId : this.get(`${this.currentStepId}.transcriptId`), \n      botIdentifier        : emailConfig.label, \n      endUserIdentifier,\n    }));\n    \n    messageId = await sendMessage();\n    thisStep.set(this.process.main, 'messageId', messageId);\n    \n    if (useThreads) {\n      const beacons = await registerBeacons(messageId);\n      thisStep.set(this.process.main, 'registered_beacons', beacons);\n    }\n    \n    updateSessionTimeout()\n\n    return triggers(this, messageId, timeout);\n  }\n};\n\nreturn main();\n",
        "form": {
          "component": null
        },
        "data": {
          "mode": {
            "label": "Plain text",
            "value": "plain"
          },
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "97229878-c536-49af-9766-3eb4eeeae5bc",
              "label": "timeout",
              "condition": "schema.useThreads"
            },
            {
              "id": "c2db4ced-cb1b-4af2-8055-35c509e310ed",
              "label": "open",
              "condition": "schema.useThreads && schema.hasOpenEvent"
            },
            {
              "id": "5b4aeba1-5fd2-4331-bfc6-7a43908f722c",
              "label": "click",
              "condition": "schema.useThreads && schema.hasUrlClickTracking"
            },
            {
              "id": "682bac89-015d-485a-904a-29412cf7b316",
              "label": "bounce",
              "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode) && schema.bounceHandleType === \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType != \"separately\" && schema.bounceHandleType != \"error\""
            },
            {
              "id": "54056279-f0a6-4d51-b406-ae5070863ea8",
              "label": "soft-bounce",
              "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
            },
            {
              "id": "e96b04db-c323-41da-a4de-d45b77f39b33",
              "label": "hard-bounce",
              "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "ccList": [],
          "toList": [
            "``"
          ],
          "bccList": [],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "isReply": false,
          "replyTo": "``",
          "subject": "``",
          "nameFrom": "``",
          "useSource": false,
          "references": [],
          "useThreads": false,
          "attachments": [],
          "emailConfig": "",
          "hasShortUrl": false,
          "timeoutLeng": {
            "input": "`1 week`",
            "outputMode": "ms"
          },
          "wysiwygText": "``",
          "yourMessage": "``",
          "attachmentsF": [],
          "hasOpenEvent": false,
          "processError": true,
          "stepVariable": "defaultValue",
          "attachmentsFD": [],
          "senderAddress": "``",
          "useManualMode": false,
          "isRequestInput": false,
          "isSelectedStep": true,
          "replyToAddress": "``",
          "customMessageId": "this.get('')",
          "senderSubDomain": "``",
          "yourMessageHtml": "",
          "bounceHandleType": "ignore",
          "differentReplyTo": false,
          "emailPreviewLink": "",
          "emailTemplateStr": "",
          "handleComplaints": false,
          "replyToSubDomain": "``",
          "dynamicRecipients": "// [ \"recipient@domain.com\", \"John Doe <john@doe.com>\" ]\t// (all are 'To')\n   /* or */\n// [ { type: \"to\", recipient: \"recipient@domain.com\" }, { type: \"cc\", recipient: \"John Doe <john@doe.com>\" } ]",
          "emailTemplateData": {},
          "manualEmailConfig": "this.get('')",
          "dynamicAttachments": "",
          "ignoreOtherBounces": true,
          "hasUrlClickTracking": false,
          "hasDynamicRecipients": false,
          "hasDynamicAttachments": false,
          "dynamicExitsArrayStart": 7,
          "isEmailInheritableStep": true,
          "__replyCollapsibleState": {
            "isOpen": true
          },
          "__bounceCollapsibleState": {
            "isOpen": false
          },
          "__messageCollapsibleState": {
            "isOpen": true
          },
          "__accountsCollapsibleState": {
            "isOpen": true,
            "_schemaValidators": {
              "emailConfig": "!_.isEmpty(value)"
            }
          },
          "__responseCollapsibleState": {
            "isOpen": true
          },
          "emailTemplateMergeFieldsStr": "",
          "__recipientsCollapsibleState": {
            "isOpen": true
          }
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "transcript": {
            "tags": [],
            "type": "transcript",
            "label": "transcript",
            "enabled": true
          }
        },
        "outputExample": {
          "allResponses": [],
          "latestResponse": {
            "tag": {
              "contents": "",
              "attributes": {
                "id": "",
                "title": ""
              }
            },
            "link": "",
            "type": "",
            "value": "",
            "datetime": "",
            "messageId": "",
            "eventSender": {
              "name": "",
              "email": ""
            }
          },
          "outgoingMessage": {
            "sender": {
              "name": "",
              "address": ""
            },
            "beacons": [],
            "content": {
              "html": "",
              "plain": "",
              "trimmedHtml": "",
              "trimmedText": ""
            },
            "subject": {
              "text": "",
              "trimmed": ""
            },
            "datetime": "",
            "inReplyTo": "",
            "messageId": "",
            "timestamp": "",
            "recipients": {
              "cc": [],
              "to": [],
              "bcc": []
            },
            "references": [],
            "attachments": []
          }
        },
        "help": "To use this step you must create a Botmail or connect an external email account to your OneReach.ai account. To do this go to the *Email acсount* section, open the dropdown and follow the instructions under the *add an email account*.\n\nUse this step to send an email to specified recipients. Options to handle delivery failure messages or an end-user interaction are also available. To send any messages the step requires the bot's and recipient's email addresses.\n\n### Email acсount\nBy default, the bot email account is chosen from the list with an option to add new account. Option to define the email account via merge field is available for Botmail and IMAP accounts.\n\n*Sender name* isn't required, is limited by 78 characters and will be shown as the name next to the bot email address.\n\n### Reply options\nTo continue a conversation that has happened within current flow select the respective option, then choose the step with conversation details from the list and click the *populate this message as a reply* button. The recipients, the subject and the content of previous message exchange will be added from the chosen step.\n\n### Recipients\nThe recipient of the email is expected as an email address and can be set manually or using merge fields. Multiple recipients can be defined via the *add recipient* button, with options to add them as CC, BCC or dynamically in code mode.\n\n### Message content\nThe outgoing message can contain a subject, a body and/or media file(s). Options to define the message body in plain text, using HTLM, WYSIWYG or template builder are available. Media files can be chosen either from OneReach.ai's storage or set as URLs. All message settings and limits are described in the *Body authoring mode* field under the *Info* icon.\n\n### Event handling\nBy default, the step will proceed down the *next* exit after sending the email. To be able to process delivery failure messages and end-user interactions, turn on the *enable event handling* option. Note that `Wait for Events (Email)` step template can also be used for event handling purposes; you can find the information on the types of events in that step's help.\n\nOptions to process *hard* and *soft bounces*, as well as *open*, *click* and *complaint* events are available. In this case the step will also wait for 1 week for any chosen event to happen. The timeout limits are between 10 seconds and 1 month. Examples of acceptable time formats: `26d`, `12h`, `125m` or `530s`. If no event happens after set timeout ends, the flow will proceed down the *timeout* exit. Please note that this value extends the lifespan of the session.\n\nIf a *hard bounce* or a *complaint* was received, that email account is saved to a separate list. All future messages sent to or received from accounts in the list are handled as hard bounces or complaints, respectively. Contact OneReach.ai team to change the list. \n\n### Advanced settings\n\nAn option to override an automatically generated ID of the outgoing message with value stored in a merge field is available.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in *merge field name*. It may include the following properties: all previous responses, the latest response, as well as outgoing message data. Each response may include the time of event, the bot and recipient email addresses, the email contact and content information as well as the unique identifiers of the request and response messages. The structure of the output depends on the event that has triggered the step and is as follows:\n```json\n{\n  \"latestResponse\": {\n    \"messageId\": \"\",\n    \"datetime\": \"\",\n    \"timestamp\": 1,\n    \"type\": \"\",\n    \"link\": \"\",\n    \"beaconLink\": \"\",\n    \"eventSender\": {\n      \"email\": \"\",\n      \"name\": \"\"\n    },\n    \"value\": \"\",\n    \"tag\": {\n      \"attributes\": {\n        \"id\": \"\",\n        \"title\": \"\"\n      },\n      \"contents\": \"\"\n    }\n  },\n  \"allResponses\": [],\n  \"outgoingMessage\": {\n    \"messageId\": \"\",\n    \"timestamp\": \"\",\n    \"datetime\": \"\",\n    \"sender\": {\n      \"name\": \"\",\n      \"address\": \"\"\n    },\n    \"subject\": {\n      \"text\": \"\",\n      \"trimmed\": \"\"\n    },\n    \"recipients\": {\n      \"to\": [],\n      \"cc\": [],\n      \"bcc\": []\n    },\n    \"content\": {\n      \"plain\": \"\",\n      \"html\": \"\",\n      \"trimmedText\": \"\",\n      \"trimmedHtml\": \"\"\n    },\n    \"inReplyTo\": \"\",\n    \"references\": [],\n    \"attachments\": [],\n    \"beacons\": []\n  }\n}\n```\n\n### Error handling\n*Handle error* is on by default and adds an *error* exit to the step. The flow will exit through it if any error was encountered during the execution of the step (e.g. if recipient's email address is invalid and bounce handling is off).\n\n### Reporting\n*Step* and *Transcript* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services Dependencies:\n- flow builder - 2.4.0 or higher\n- event-manager - 2.0.1 or higher\n- deployer - 2.0.0 or higher\n- Email_SMTP adapter - the latest version\n\n### Release notes:\nv1.6.4\n- Adapters installation feature was hidden.\n- Adding an email account from the merge field was added.\n- Complaints and bounce accounts lists were added.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "c58ab054-6838-4b33-994e-d4d35c7aad49",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "eec0db72-ae6f-473c-94f3-573d183bf178",
              "data": {
                "id": "97229878-c536-49af-9766-3eb4eeeae5bc",
                "label": "timeout",
                "condition": "schema.useThreads"
              },
              "component": "exitStatic"
            },
            {
              "id": "b2bd9c68-888f-471b-89fc-cb70fd10d145",
              "data": {
                "id": "c2db4ced-cb1b-4af2-8055-35c509e310ed",
                "label": "open",
                "condition": "schema.useThreads && schema.hasOpenEvent"
              },
              "component": "exitStatic"
            },
            {
              "id": "2197c23b-6468-41f6-a081-3b5d3f08a5e9",
              "data": {
                "id": "5b4aeba1-5fd2-4331-bfc6-7a43908f722c",
                "label": "click",
                "condition": "schema.useThreads && schema.hasUrlClickTracking"
              },
              "component": "exitStatic"
            },
            {
              "id": "706e4b82-6bdf-4a6a-9de9-c8b8df37b5ef",
              "data": {
                "id": "682bac89-015d-485a-904a-29412cf7b316",
                "label": "bounce",
                "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode) && schema.bounceHandleType === \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType != \"separately\" && schema.bounceHandleType != \"error\""
              },
              "component": "exitStatic"
            },
            {
              "id": "8836a78d-226c-41be-bfea-b6603d4014df",
              "data": {
                "id": "54056279-f0a6-4d51-b406-ae5070863ea8",
                "label": "soft-bounce",
                "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
              },
              "component": "exitStatic"
            },
            {
              "id": "ee07f609-f419-429e-a985-5fb9e781c774",
              "data": {
                "id": "e96b04db-c323-41da-a4de-d45b77f39b33",
                "label": "hard-bounce",
                "condition": "(schema.useThreads && schema.emailConfig.type != 'mail-server' || schema.useManualMode ) && schema.bounceHandleType != \"bounce\" && schema.bounceHandleType != \"ignore\" && schema.bounceHandleType === \"separately\" && schema.bounceHandleType != \"error\""
              },
              "component": "exitStatic"
            },
            {
              "id": "aa984491-fe2d-4a66-91cf-531e421a884a",
              "data": {
                "index": 7
              },
              "component": "exitDynamic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "9483dbad-89de-44b8-afb4-319fecac707d",
              "data": {
                "open": true,
                "header": "Email account",
                "inputs": [
                  {
                    "id": "7dc7cad8-4352-44ec-ab39-b693f5ace322",
                    "data": {
                      "data": "{\n  \"__accountsCollapsibleState\": {\n    \"isOpen\": true,\n    \"_schemaValidators\": {\n      \"emailConfig\": \"!_.isEmpty(value)\"\n    }\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__accountsCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-dvqwfselbipmcgrzukhtanyxjo",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "3bd8c36e-8537-4d37-826f-c07ac957d124",
                    "data": {
                      "label": "Add account from merge field",
                      "helpText": "Bounce events can't be handled for Gmail, Outlook, AOL, and Yahoo accounts",
                      "variable": "useManualMode",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "a4b32421-3f29-4d8b-93c1-a29c61920817",
                    "data": {
                      "inbound": true,
                      "multiple": true,
                      "outbound": true,
                      "filterRules": [
                        {
                          "err": null,
                          "exp": "true",
                          "vforkey": "383d649c-f0bb-44a9-8d90-43162dd851c4"
                        }
                      ],
                      "variableName": "emailConfig",
                      "inboundRequired": false,
                      "renderCondition": "schema.useManualMode === false",
                      "disableCondition": "schema.useManualMode === true",
                      "outboundRequired": false
                    },
                    "meta": {
                      "name": "manage-email",
                      "type": "onereach-studio-form-input",
                      "version": "1.2.2"
                    },
                    "label": "Manage Email Accounts (1.2.2)",
                    "compiled": {},
                    "component": [
                      "manage-email",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3.us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3.us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/index.js\"][\"manage-email-accounts\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3.us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/index.js\"][\"manage-email\"]"
                    ]
                  },
                  {
                    "id": "d8f036f5-eaa9-4db5-b93f-396f5595492e",
                    "data": {
                      "label": "",
                      "helpText": "",
                      "variable": "manualEmailConfig",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a253541-43dc-4dc2-9ed9-2506e73a98af",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.useManualMode === true",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "8d21a7ee-9bc4-487f-9d37-29c15c4b8368",
                          "errorMessage": "The Email account is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "1a3f5127-6cb4-41f1-93a3-be1c69391c53",
                                "ruleType": {
                                  "func": "{ return !validators.validateMergeTagInput(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "merge tag doesn't have value",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.manualEmailConfig",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a253541-43dc-4dc2-9ed9-2506e73a98af",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.useManualMode === true",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "395c6a3d-edfc-48c8-bc1d-8962f50136c1",
                    "data": {
                      "data": "{\n  \"nameFrom\": \"``\",\n  \"differentReplyTo\": false,\n  \"senderAddress\": \"``\",\n  \"senderSubDomain\": \"``\",\n  \"replyToAddress\": \"``\",\n  \"replyToSubDomain\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n// function fromStr(str){\n//   const isNestedStrRegex = /^['\"`]([\\n]||.)*['\"`]$/;\n//   const isMergeFildRegex = /this.get\\(['\"`].*['\"`]\\)/g;\n//   if (!isNestedStrRegex.test(str) && !isMergeFildRegex.test(str)) return `\\`${str}\\``;\n//   return str;\n// }\n\nfunction toJson(data) {\n\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  replyToAddress: {\n    required(value) {\n      if (!this.schema.differentReplyTo) return true;\n      const validator = createValidatorRequired('Reply to address is required');\n      return validator.call(this, value);\n    }\n  },\n  senderAddress: {\n    required(value) {\n      if (this.schema.emailConfig.type !== 'advanced') return true;\n      \n      if (!this.schema.senderAddress) return true;\n      const validator = createValidatorRequired('The Sender email address is required.');\n      return validator.call(this, value);\n    }\n  }\n}\n\nfunction createValidatorRequired(errorMessage) {\n  return function (value = '``') {\n    if (this.isNew) return true;\n    const val = value[0] === '`' && value[value.length - 1] === '`' ? value.slice(1, -1) : value;\n    return validators.helpers.withParams(\n      { type: 'required', error: errorMessage },\n      validators.required\n    )(val);\n  }\n}\n",
                      "applyToJson": true,
                      "formTemplate": "<wildcard :schema.sync=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\" :steps=\"steps\" :step-id=\"stepId\" :v=\"$v\" :merge-fields=\"mergeFields\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bdafoigmvtucskprnzhjyelxqw",
                      "componentLogic": "{\n  components: {\n    'sender-name-input': {\n      template: `\n        <or-text-expression name=\"name\" \n        label=\"Sender name\" \n        v-model=\"name\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :readonly=\"readonly\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n      `,\n      props: {\n        emailFrom: {\n          type: String,\n          default: \"``\"\n        },\n        nameFrom: {\n          type: String,\n          default: \"``\"\n        },\n        mailClient: {\n          type: String,\n          default: \"\"\n        },\n        userEmail: {\n          type: String,\n          default: \"``\"\n        },\n        sendType: {\n          type: String,\n          default: 'smtp'\n        },\n        steps: '',\n        stepId: '',\n        readonly: {\n          type: Boolean,\n          default: false\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        }\n      },\n      computed: {\n        email: {\n          get() {return this.emailFrom},\n          set(newEmail) {this.$emit('update:emailFrom', newEmail)}\n        },\n        name: {\n          get() { return this.nameFrom },\n          set(newName) {this.$emit('update:nameFrom', newName)}\n        },\n        readonlyEmail() {return this.mailClient !== 'Other' && this.sendType == 'smtp'}\n      },\n      watch: {\n        userEmail() {\n          if (this.readonlyEmail === true) {\n            this.email = this.userEmail;\n          }\n        },\n        mailClient() {\n          this.email = this.userEmail;\n        }\n      }\n    },\n    'different-reply-addreess-toggle': {\n      template: `\n        <div class=\"different-reply-to-wrapper\">\n          <or-switch v-model=\"differentReplyTo\" :disabled=\"readonly\">\n            Use a different reply-to address\n          </or-switch>\n        </div>\n      `,\n      computed : {\n        differentReplyTo : {\n          get () { return this.value; },\n          set (value) { this.$emit('input', value); }\n        }\n      },\n      props : {\n        value : {\n          type : String,\n          default : ''\n        },\n        readonly: {\n          type : Boolean \n        },\n        stepId: '',\n      }\n    },\n    'email-domain-input': {\n      template: `\n        <div class=\"reply-to-address-wrapper\">\n          <div class=\"pac-row with-icon\">\n            <or-text-expression\n              :readonly=\"readonly\"\n              :steps=\"steps\"\n              :step-id=\"stepId\"\n              :label=\"labelTextEmail\"\n              placeholder=\"some_address\"\n              v-model=\"_address\"\n              :invalid=\"isInvalid\"\n              :error=\"errorMessage\"\n              :merge-fields=\"mergeFields\"\n            >\n            </or-text-expression>\n            <span class=\"ui-icon\">@</span>\n          </div>\n          <div class=\"pac-row\">\n            <or-text-expression\n              :readonly=\"readonly\"\n              v-static-value=\"domain\"\n              :steps=\"steps\"\n              :step-id=\"stepId\" \n              :label=\"labelTextDomain\"\n              placeholder=\"optional\"\n              :merge-fields=\"mergeFields\"\n              v-model=\"_subdomain\">\n            </or-text-expression>\n          </div>\n        </div>\n      `,\n      directives: {\n        'static-value': {\n          bind(el, binding, vnode) {\n            const listenEvents = (rootElement, eventsStrign, handler) => {\n              eventsStrign.split(' ').forEach(eventName => {\n                rootElement.addEventListener(eventName, handler);\n              });\n            };\n            \n            const appendStaticValue = () => {\n              const div = document.createElement('div');\n              div.className = 'static-value';\n              div.innerText = binding.value;\n              const wrapper = el.querySelector('.or-editable-wrapper');\n              wrapper.appendChild(div);\n            };\n            \n            el.classList.add('with-static-val');\n            const editableElement = el.querySelector('.editable');\n    \n            listenEvents(editableElement, 'focus blur', () => {\n              vnode.componentInstance.$nextTick(() => el.classList.add('with-static-val'));\n            });\n    \n            appendStaticValue();\n          },\n          componentUpdated(el, binding) {\n            const staticValueElement = el.querySelector('.static-value');\n            staticValueElement.innerText = binding.value;\n          }\n        }\n      },\n      computed: {\n        _address: {\n          get() { return this.address },\n          set(value) { this.$emit('update:address', value); }\n        },\n        _subdomain: {\n          get() { return this.subdomain },\n          set(value) { this.$emit('update:subdomain', value); }\n        },\n        labelTextEmail() {\n          return `${this.label} email address`;\n        },\n        labelTextDomain() {\n          return `${this.label} email domain`;\n        },\n        isInvalid(){\n          return _.get(this.v.schema, `${this.validatorSchemaFields[0]}.$error`);\n        },\n        errorMessage(){\n          return _.get(this.v.schema, `${this.validatorSchemaFields[0]}.$params.required.error`);\n        }\n      },\n      props: {\n        isNew: Boolean,\n        readonly: {\n          type: Boolean\n        },\n        address: {\n          type: String,\n          default: '``'\n        },\n        label: {\n          type: String,\n          default: '',\n        },\n        domain: {\n          type: String,\n          default: 'example.com'\n        },\n        subdomain: {\n          type: String,\n          default: '``'\n        },\n        steps: {\n          type: Array,\n          default: []\n        },\n        stepId: {\n          type: String,\n          default: ''\n        },\n        v: {\n          type: Object,\n          default: {}\n        },\n        validatorSchemaFields: {\n          type: Array,\n          default: []\n        },\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        }\n      }\n    }\n  },\n  computed : {\n    disabled(){\n      return this.readonly;\n    },\n    isAdvancedAccount(){\n      const accountType = _.get(this.schema, 'emailConfig.type');\n      return accountType === 'advanced';\n    },\n    accountDomain(){\n      return `.${_.get(this.schema, 'emailConfig.domain', '')}`;\n    }\n  },\n  props : {\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps: {\n      type: Array,\n      default: []\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    v: {\n      type: Object,\n      default: {}\n    },\n    schema: {\n      type: Object,\n      default: {}\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"schema\">\n  <sender-name-input :name-from.sync=\"schema.nameFrom\"\n    :email-from.sync=\"schema.emailFrom\"\n    :mail-client=\"schema.mailClient\"\n    :user-email=\"schema.userEmail\"\n    :sendType=\"schema.sendType\"\n    :step-id=\"stepId\" \n    :steps=\"steps\"\n    :readonly=\"readonly\"\n    :merge-fields=\"mergeFields\">\n  </sender-name-input>\n  <!--TODO: Render for pro account only-->\n  <email-domain-input\n    v-if=\"isAdvancedAccount\"\n    :address.sync=\"schema.senderAddress\"\n    label=\"Sender\"\n    :subdomain.sync=\"schema.senderSubDomain\"\n    :domain=\"accountDomain\"\n    :validator-schema-fields=\"['senderAddress']\"\n    :is-new=\"isNew\"\n    :readonly=\"disabled\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :v=\"v\"\n    :merge-fields=\"mergeFields\">\n  </email-domain-input>\n  <!--TODO: Render for pro account only-->\n  <different-reply-addreess-toggle\n    v-if=\"isAdvancedAccount\"\n    v-model=\"schema.differentReplyTo\"\n    :readonly=\"disabled\">\n  </different-reply-addreess-toggle>\n  <or-collapsible v-if=\"schema.differentReplyTo && isAdvancedAccount\" title=\"Reply-to address\" borderless :invalid=\"false\" open>\n    <email-domain-input\n      :address.sync=\"schema.replyToAddress\"\n      label=\"Reply-to\"\n      :subdomain.sync=\"schema.replyToSubDomain\"\n      :domain=\"accountDomain\"\n      :validator-schema-fields=\"['replyToAddress']\"\n      :is-new=\"isNew\"\n      :readonly=\"disabled\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :v=\"v\"\n      :merge-fields=\"mergeFields\">\n    </email-domain-input>\n  </or-collapsible>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".different-reply-to-wrapper {\n  // border-bottom: 1px solid #dfdfdf;\n  padding: 11px 0px 8px;\n}\n\n.pac-row {\n  position: relative;\n  display: flex;\n\n  & > .or-text-expression {\n    flex-grow: 1;\n    margin-right: 32px;\n    max-width: calc(100% - 32px);\n  }\n\n  & > .ui-icon {\n    order: 1;\n    margin-left: 0.5rem;\n    align-self: flex-end;\n    margin-bottom: 20px;\n    color: rgba(0, 0, 0, 0.54);\n    line-height: 1;\n  }\n\n  & > .or-text-expression.invalid + .ui-icon {\n    margin-bottom: 34px;\n  }\n\n  & > .or-text-expression.active + .ui-icon {\n    color: #64b2da;\n  }\n\n  &.with-icon {\n    & > .or-text-expression {\n      margin-right: 0;\n    }\n  }\n}\n\n.with-static-val {\n  .or-editable-wrapper.single-line {\n    display: flex;\n    max-width: 100%;\n    overflow: hidden;\n  }\n\n  .editable {\n    flex-grow: 1;\n  }\n\n  .static-value {\n    font-size: 14px;\n    color: #0f232e;\n    bottom: 21px;\n    line-height: 1.5;\n    padding: 7px 10px;\n    max-width: 50%;\n    min-width: 30%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    text-align: right;\n  }\n\n  .placeholder {\n    position: absolute;\n    bottom: 0px;\n  }\n}\n\n.ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}\n\n"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "41d125ed-0e8b-402b-85a4-34860d3e2492",
              "data": {
                "open": true,
                "header": "Reply options",
                "inputs": [
                  {
                    "id": "1b825895-8c7f-4691-85e6-68ca7003c5fd",
                    "data": {
                      "data": "{\n  \"__replyCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__replyCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-gokmbjhzaduyipqnsxwcrevftl",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "62f20862-2368-4580-a7db-d5e70ccdfe3f",
                    "data": {
                      "data": "{\"isRequestInput\": false, \"replyTo\": \"``\", \"nameFrom\": \"``\", \"references\": [], \"isReply\": false, \"isSelectedStep\": true}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction fromStr(str){\n  const isNestedStrRegex = /^['\"`]([\\n]||.)*['\"`]$/;\n  const isMergeFildRegex = /this.get\\(['\"`].*['\"`]\\)/g;\n  if (!isNestedStrRegex.test(str) && !isMergeFildRegex.test(str)) return `\\`${str}\\``;\n  return str;\n}\n\nfunction toJson(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "isSelectedStep:{\n  custom(val) {\n    return val\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :reply.sync=\"schema.reply\"\n  :replyTo.sync=\"schema.replyTo\"\n  :references.sync=\"schema.references\"\n  :isReply.sync=\"schema.isReply\"\n  :isSelectedStep.sync=\"schema.isSelectedStep\"\n  :nameFrom.sync=\"schema.nameFrom\"\n  :selectedStepId.sync=\"schema.selectedStepId\"\n  :subject.sync=\"schema.subject\"\n  :yourMessageHtml.sync=\"schema.yourMessageHtml\"\n  :mode.sync=\"schema.mode\"\n  :toList.sync=\"schema.toList\"\n  :is-new=\"isNew\"\n  :steps=\"steps\"\n  :stepId=\"stepId\"\n  :readonly=\"readonly\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-btwnalpeyvzdqmukigrjxhcosf",
                      "componentLogic": "{\n  props : {\n    steps: {\n      type: Array,\n      default() {\n        return [];\n      },\n    },\n    readonly: {\n      type: Boolean\n    },\n    nameFrom: {\n      type: String,\n      default: ``,\n    },\n    isSelectedStep:{\n      type:Boolean,\n      default: false\n    },\n    subject: {\n      type: String,\n    },\n    yourMessageHtml: {\n      type: String\n    },\n    selectedStepId: {\n      type: String\n    },\n    isReply: {\n      type: Boolean\n    },\n    toList: {\n      type: String\n    },\n    stepId: {\n      type: String\n    },\n    references: {\n      type: Array\n    },\n    replyTo: {\n      type: String\n    },\n    mode: {\n      type: Object\n    },\n    isNew: {\n      type: Boolean\n    }\n  },\n  computed: {\n    _isReply: {\n      get(){\n        return this.isReply;\n      },\n      set(value){\n        if (value && !this.selectedStepId) {\n          this.$emit('update:selectedStepId', _.get(this.parents, '[0].id'));\n        }\n        \n        if (!value) {\n          this._selectedStepId = null\n          this.isSelectedStepExists = true\n        }\n        \n        this.$emit('update:isReply', value);\n      }\n    },\n    _selectedStepId: {\n      get(){ return this._isReply ? this.selectedStepId : null; },\n      set(value){ this.$emit('update:selectedStepId', value); }\n    },\n    parents() {\n      const index = _.findIndex(this.steps, { id: this.stepId });\n      if (index === -1) return [];\n      const parents = id => {\n        const parent = _.find(\n          this.steps, \n          { data: { exits: [{stepId: id}] } }\n        );\n        return parent ? [parent, ...parents(parent.id)] : [];\n      };\n      \n      return parents(this.steps[index].id)\n        .filter(step => _.get(step, 'data.isEmailInheritable', false));\n    },\n    options() {\n      return _.chain(this.parents)\n        .map(step => ({ label: step.label, value: step.id }))\n        .filter(step => step.label)\n        .sort()\n        .value();\n    },\n    selectedStepMergeField() {\n      let mergeData = _.chain(this.steps)\n        .find({ id: this.selectedStepId })\n        .get('data')\n        .value();\n        \n      mergeData = Object.assign({ mfCode: 'await this.mergeFields' }, mergeData);\n      \n      return mergeData;\n    },\n    isSelectedStepExists: {\n      set(val) {\n        if (val) {\n          this.$emit('update:isSelectedStep', true)\n          return false\n        }\n      },\n      get() {\n       if (this._isReply) {\n         if (!this.selectedStepId) {\n          // this.$emit('update:errorMessage', 'Destination step is required.')\n          this.errorMsg = 'Destination step is required.'\n           this.$emit('update:isSelectedStep', false)\n          \n           return true\n         } else if (_.isEmpty(this.options)) {\n          // this.$emit('update:errorMessage', 'Broken reference: the selected step is detached from the main flow tree.')\n           this.errorMsg = 'Broken reference: the selected step is detached from the main flow tree.'\n           this.$emit('update:isSelectedStep', false)\n          \n           return true\n         } else if (this.selectedStepId && !_.isEmpty(this.options)) {\n\n           this.$emit('update:isSelectedStep', true)\n           return false\n         }\n       } else {\n\n         this.$emit('update:isSelectedStep', true)\n         return false\n       }\n      }\n    }\n  },\n  watch: {\n    _selectedStepId(stepId, oldStepId){\n      this.highlightToggle(stepId, oldStepId);\n    },\n  },\n  data(){\n    return {\n      errorMsg: 'Destination step is required.',\n      isSelectedStep: this.isSelectedStep,\n      propsToPopulate: {\n        nameFrom: mf => mf.waitForEmailStep ? \"``\" : \"`${\" + this.createMergeField(mf, 'outgoingMessage.sender.name') + \"}`\",\n        subject: mf => \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.subject.text' : 'outgoingMessage.subject.text') + \"}`\",\n        mode: mf => ({\n          \"label\": \"HTML (raw)\",\n          \"value\": \"html\",\n        }),\n        yourMessageHtml: mf => \"${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.content.html' : 'latestResponse.content.html') + \"}\",\n        toList: mf => [ \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.recipient.address' : 'outgoingMessage.recipients.to') + \"}`\"],\n        replyTo: mf => \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.messageId' : 'outgoingMessage.messageId') + \"}`\",\n        references: mf => \"`${\" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.references' : 'outgoingMessage.references') + \", \" + this.createMergeField(mf, mf.waitForEmailStep ? 'message.messageId' : 'outgoingMessage.messageId') + \"}`\",\n      }\n    }\n  },\n  methods: {\n    createMergeField(mfData, field) {\n      if (!mfData) return \"``\";\n      \n      return mfData.mfCode + \"['\" + mfData.dataOut.name + \"']\" + \".get({path: '\" + field + \"'})\";\n    },\n    highlight(stepId, state, inNextTick){\n      if (!stepId) return;\n      const opts = { stepId, highlightClass : 'hover' };\n      if (state) {\n        this.$flow.highlightStepOn(opts);\n      } else {\n        this.$flow.highlightStepOff(opts);\n      }\n    },\n    highlightToggle(stepId, oldStepId){\n      if (oldStepId) {\n        this.highlight(oldStepId, false);\n      }\n      this.highlight(stepId, true);\n    },\n    handlePopulateClick(){\n      if (this.isPropsEmpty()) {\n        return this.populate();\n      }\n      this.showConfirmation();\n    },\n    handleSelectMouseOut(stepId){\n      if (this.selectedStepId === stepId) return;\n      this.highlight(stepId, false);\n    },\n    showConfirmation(){\n      this.$refs.confirmation.open();\n    },\n    populate(){\n      if(!this.selectedStepMergeField) return;\n\n      const keys = _.keys(this.propsToPopulate);\n      _.forEach(keys, prop => {\n        this.$emit(`update:${prop}`, this.propsToPopulate[prop](this.selectedStepMergeField));\n      });\n    },\n    isPropsEmpty(){\n      return _.without(\n        _.keys(this.propsToPopulate),\n        'htmlFlag'\n      ).reduce((acc, key) => {\n        if (!acc) return acc;\n        const value = this[key];\n        \n        const checkString = val => {\n          if(!val) return true;\n          const str = (val + '').trim();\n          if(/^`.*`$/.test(str)) {\n            return !str.slice(1, -1);\n          }\n          return !str;\n        };\n        \n        if (_.isArray(value)) {\n          return checkString(value[0]);\n        }\n        \n        return checkString(value);\n      }, true);\n    },\n    setIsReply(){\n      if (this.isNew && this.parents.length) {\n        this._isReply = true;\n      }\n    },\n    validateSelected() {\n      if(!this._isReply) {\n        return true\n      } else {\n        return this.isSelectedStepExists\n      }\n    },\n    validateSelectedStep(options, selected) {\n      const found = options.filter((option) => {\n          return option.value === selected\n      })\n      return _.isEmpty(found)\n    },\n  },\n  mounted(){\n    this.highlight(this._selectedStepId, true);\n    this.setIsReply();\n  },\n  beforeDestroy(){\n    this.highlight(this._selectedStepId, false);\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch v-model=\"_isReply\" :disabled=\"readonly\">\n    Continue conversation\n  </or-switch>\n  <div v-if=\"isReply\">\n    <or-modal ref=\"confirmation\" title=\"Are you sure?\">\n      Existing message content will be discarded.\n      <div slot=\"footer\">\n        <or-button @click=\"$refs.confirmation.close()\">Cancel</or-button>\n        <or-button @click=\"() => { $refs.confirmation.close(); populate() }\" color=\"primary\">Okay</or-button>\n      </div>\n    </or-modal>\n    <div class=\"select-destination-wr\">\n      <or-select \n        has-search \n        class=\"select-destination\"\n        placeholder=\"Select a step\"\n        search-placeholder=\"Type to search\"\n        :options=\"options\"\n        v-model=\"_selectedStepId\"\n        :invalid=\"isSelectedStepExists\"\n        :error=\"errorMsg\"\n        :disabled=\"readonly\"\n      >\n        <template slot-scope=\"props\" slot=\"option\">\n          <div \n            class=\"ui-select-option__basic_full\"\n            @mouseenter=\"highlight(props.option.value, true)\"\n            @mouseout=\"handleSelectMouseOut(props.option.value)\"\n          >\n            {{props.option.label}}\n          </div>\n        </template>\n      </or-select>\n    </div>\n    <or-button :disabled=\"readonly || _.isEmpty(options)\" size=\"small\" color=\"primary\" icon=\"reply\" @click=\"handlePopulateClick\">Populate this message as a reply</or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-select-option__basic_full {\n  min-width: 100%;\n}\n\n.ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}\n\n.ui-checkbox {\n  .ui-checkbox__checkmark {\n    top: 3px;\n  }\n  \n  .ui-checkbox__label-text {\n    color: #373a3c;\n    font-size: .9375rem;\n    font-weight: 400;\n    line-height: 1.5;\n  }\n}\n\n.ui-checkbox.ui-checkbox--color-primary.is-checked,\n.ui-checkbox.ui-checkbox--color-primary.is-checked.is-active {\n  .ui-checkbox__checkmark:before {\n    background-color: #2196f3;\n    border-color: #2196f3;\n  }\n  \n  .ui-checkbox__checkmark:after {\n    border-color: #fff;\n  }\n  \n  &:hover {\n    .ui-checkbox__checkmark:before {\n      background-color: #2196f3;\n      border-color: #2196f3;\n    }\n    \n    .ui-checkbox__checkmark:after {\n      border-color: #fff;\n    }\n  }\n  \n  &.is-disabled {\n    opacity: .5;\n  }\n}\n"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "7ca1b216-9546-43b6-9d13-4ccbccf8b806",
              "data": {
                "open": true,
                "header": "Recipients",
                "inputs": [
                  {
                    "id": "84956a96-41b5-4788-8361-944306b78126",
                    "data": {
                      "data": "{\n  \"__recipientsCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__recipientsCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zaikwybtjrcvhfmdoxugpsleqn",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": "",
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "2248084b-db65-4e80-bc95-219391a641bf",
                    "data": {
                      "data": "{\n  \"toList\": [\"``\"],\n  \"ccList\": [],\n  \"bccList\": [],\n  \"hasDynamicRecipients\": false,\n  \"dynamicRecipients\": \"// [ \\\"recipient@domain.com\\\", \\\"John Doe <john@doe.com>\\\" ]\\t// (all are 'To')\\n   /* or */\\n// [ { type: \\\"to\\\", recipient: \\\"recipient@domain.com\\\" }, { type: \\\"cc\\\", recipient: \\\"John Doe <john@doe.com>\\\" } ]\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nconst replaceComments = str => str\n      .replace(/\\/\\/[\\s\\S]+?.*(\\n || $)/g, '')\n      .replace(/\\/\\*[.\\s\\S\\n]*\\*\\//g, '')\n      .trim();\n\nfunction toJson(data, key) {\n  \n  if (key === 'dynamicRecipients') {\n    return replaceComments(data) || '[]';\n  }\n  \n  if (typeof data === 'string') {\n    return data;\n  }\n  \n  if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  \n  return JSON.stringify(data);\n}\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  toList: {\n    $each: {\n      required\n    }\n  },\n  ccList: {\n    $each: {\n      required\n    }\n  },\n  bccList: {\n    $each: {\n      required\n    }\n  }\n}\n\nfunction required(model, field, type){\n  if (this.isNew) return true;\n  const val = model.replace(/^(`).*(`)$/, (m, f, s) => (f && s) ? m.slice(1, -1) : m );\n  return validators.helpers.withParams(\n    { type: 'required', error: 'The Recipient address is required.' },\n    validators.required\n  )(val);\n}\n\nfunction email(model){\n  if (this.isNew) return true;\n  const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const mergeFieldRegex = /\\$\\{[^\\}]*\\}|this\\.get\\(['\"`].*?['\"`]\\)/g;\n  const val = model\n    .replace(/^(`).*(`)$/, (m, f, s) => (f && s) ? m.slice(1, -1) : m )\n    .replace(/.*\\s*<(.+)>/, (match, email) => email)\n    .replace(mergeFieldRegex, ' ')\n    .trim();\n  return validators.helpers.withParams(\n    { type: 'email', error: 'Invalid email' },\n    v => v ? emailRegex.test(v) : true\n  )(val);\n}\n\nfunction validMergeField (value = '') {\n  if (this.isNew) return true;\n  const containMergeFields = /\\$\\{[^\\}]*\\}|this\\.get\\(['\"`].*?['\"`]\\)/g.test(value);\n  const isMergeFieldsValid = /\\$\\{this\\.get\\(['\"`][a-zA-Z0-9_.\\[\\]]+?['\"`]\\)\\}/g.test(value);\n  return validators.helpers.withParams(\n    {type: 'validMergeField', error: 'Invalid merge field.'},\n    (v) => containMergeFields ? isMergeFieldsValid : true\n  )(value);\n}\n",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-apikldxrumjoezbn\n  :to-list.sync=\"schema.toList\"\n  :cc-list.sync=\"schema.ccList\"\n  :bcc-list.sync=\"schema.bccList\"\n  :has-dynamic-recipients.sync=\"schema.hasDynamicRecipients\"\n  :dynamic-recipients.sync=\"schema.dynamicRecipients\"\n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :v=\"$v\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\">\n</or-wildcard-apikldxrumjoezbn>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-apikldxrumjoezbn",
                      "componentLogic": "{\n  props : {\n    toList: {\n      type: Array,\n      default () {\n        return ['``'];\n      }\n    },\n    ccList: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    bccList: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    dynamicRecipients: {\n      type: String,\n      default () {\n        return \"\";\n      }\n    },\n    hasDynamicRecipients: {\n      type: Boolean,\n      default () { return false; }\n    },\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v: {\n      type: Object,\n      default: {}\n    },\n    isNew: Boolean,\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  },\n  computed : {\n    toArr : {\n      get () { return this.toList; },\n      set (value) { this.$emit('update:toList', value); }\n    },\n    ccArr : {\n      get () { return this.ccList; },\n      set (value) { this.$emit('update:ccList', value); }\n    },\n    bccArr : {\n      get () { return this.bccList; },\n      set (value) { this.$emit('update:bccList', value); }\n    },\n    addRecipientOpts () {\n      return [\n        { label: \"To\", disabled: false },\n        { label: \"Cc\", disabled: false },\n        { label: \"Bcc\", disabled: false },\n        { label: \"Dynamic\", disabled: this.hasDynamicRecipients }\n      ]\n    }\n  },\n  watch: {\n    hasDynamicRecipients (newVal) {\n      this.$emit('update:hasDynamicRecipients', newVal);\n    },\n    dynamicRecipients (newVal) {\n      this.$emit('update:dynamicRecipients', newVal);\n    }\n  },\n  methods: {\n    isInvalid(index, listLabel){\n      const list = _.get(this, `v.schema.${listLabel}.$each`, []);\n      const current = list[index] || null;\n      return _.get(current, '$invalid', true);\n    },\n    errorMessage(index, listLabel) {\n      const list = _.get(this, `v.schema.${listLabel}.$each`, []);\n      const current = list[index] || {};\n      if(!current.$invalid) return '';\n      const errorsKeys = Object.getOwnPropertyNames(current).filter(p => p[0] !== '$');\n      const error = _.find(errorsKeys, key => !current[key]);\n      return _.get(current, `$params.${error}.error`, 'NO MESSAGE');\n    },\n    addField (arr) {\n      arr.push('``');\n    },\n    removeField (arr, index) {\n      arr.splice(index, 1)\n    },\n    addRecipientOptSelect(selection) {\n      switch (selection.label.toLowerCase()) {\n        case 'to': \n          this.addField(this.toArr);\n          break;\n        case 'cc':\n          this.addField(this.ccArr);\n          break;\n        case 'bcc':\n          this.addField(this.bccArr)\n          break;\n        case 'dynamic':\n          this.hasDynamicRecipients = true;\n          break;\n        default:\n          console.error('Impossible recipient menu selection!', selection);\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"!!toArr.length\" class=\"emails-section\">\n  <h4 v-if=\"!!ccArr.length || !!bccArr.length || hasDynamicRecipients\">To</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\" v-for=\"(toEmail, index) in toArr\" :key=\"index\">\n      <or-text-expression v-model=\"toArr[index]\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :invalid=\"isInvalid(index, 'toList')\"\n        :error=\"errorMessage(index, 'toList')\"\n        :readonly=\"readonly\"\n        placeholder=\"John Doe <johndoe@acme.co>\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n        <button v-if=\"(toArr.length > 1) || hasDynamicRecipients\" class=\"btn-remove-input\" :disabled=\"readonly\" @click=\"removeField(toArr, index)\"><or-icon>close</or-icon></button>\n    </div>\n  </div>\n</div>\n<div class=\"emails-section\" v-if=\"!!ccArr.length\">\n  <h4>CC</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\" v-for=\"(ccEmail, index) in ccArr\" :key=\"index\">\n      <or-text-expression v-model=\"ccArr[index]\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :invalid=\"isInvalid(index, 'ccList')\"\n        :error=\"errorMessage(index, 'ccList')\"\n        :readonly=\"readonly\"\n        placeholder=\"John Doe <johndoe@acme.co>\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n        <button class=\"btn-remove-input\" :disabled=\"readonly\" @click=\"removeField(ccArr, index)\"><or-icon>close</or-icon></button>\n    </div>\n  </div>\n</div>\n<div class=\"emails-section\" v-if=\"!!bccArr.length\">\n  <h4>BCC</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\" v-for=\"(bccEmail, index) in bccArr\" :key=\"index\">\n      <or-text-expression v-model=\"bccArr[index]\"\n        :step-id=\"stepId\" \n        :steps=\"steps\"\n        :invalid=\"isInvalid(index, 'bccList')\"\n        :error=\"errorMessage(index, 'bccList')\"\n        :readonly=\"readonly\"\n        placeholder=\"John Doe <johndoe@acme.co>\"\n        :merge-fields=\"mergeFields\"\n        ></or-text-expression>\n        <button class=\"btn-remove-input\" :disabled=\"readonly\" @click=\"removeField(bccArr, index)\"><or-icon>close</or-icon></button>\n    </div>\n  </div>\n</div>\n<div class=\"emails-section\" v-if=\"hasDynamicRecipients\">\n  <h4 style=\"margin-bottom:-24px;\">Dynamic</h4>\n  <div class=\"emails-group\">\n    <div class=\"email-field-wr\">\n      <or-code\n        v-model=\"dynamicRecipients\"\n        :readonly=\"readonly\"\n        mode=\"javascript\"\n        disableAutocomplete\n        disableWarnings\n        :steps=\"steps\"\n        :step-id=\"stepId\"\n      ></or-code>\n      <button\n        v-if=\"toList.length\"\n        class=\"btn-remove-input\"\n        :disabled=\"readonly\"\n        @click=\"hasDynamicRecipients = false;\"\n        style=\"margin-top: 42px;\"\n      >\n        <or-icon>close</or-icon>\n      </button>\n    </div>\n  </div>\n</div>\n<or-button\n  class=\"clear-btn-dropdown\"\n  ref=\"addRecipientBtn\"\n  color=\"primary\"\n  size=\"small\"\n  type=\"secondary\"\n  v-if=\"!readonly\"\n  has-dropdown\n  :disableRipple=\"true\">\n    <or-menu\n      contain-focus\n      slot=\"dropdown\"\n      :options=\"addRecipientOpts\"\n      @select=\"addRecipientOptSelect\"\n      @close=\"$refs.addRecipientBtn.closeDropdown()\"\n    ></or-menu>\n  + Add recipient\n</or-button>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".email-field-wr {\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: start;\n\tmargin-bottom: 12px;\n\t\n\t&:first-child {\n\t  margin-top: -32px;\n\t}\n\t\n\t.or-text-expression, .or-code {\n\t  width: calc(100% - 35px);\n\t  flex: 100%;\n\t  margin-bottom: 0;\n\t}\n}\n\n.btn-add-input,\n.btn-remove-input {\n\tborder: 0;\n\tbackground: none;\n  color: #64B2DA;\t\n  font-size: 14px;\t\n  line-height: 16px;\n  font-weight: normal;\n  cursor: pointer;\n  font-family: inherit;\n}\n\n.btn-remove-input {\n  height: 37px;\n  line-height: 37px;\n  display: flex;\n  width: 35px;\n  flex: 0 35px;\n  color: #91969D;\n  margin-top: 36px;\n  .ui-icon.material-icons {\n    font-size: 20px;\n  }\n}\n\n.clear-btn-dropdown {\n  border: none;\n  font-size: 15px;\n  padding: 0;\n  .ui-button__dropdown-icon {\n    display: none;\n  }\n}\n\nbutton.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  border-color: #2196f3;\n  color: #2196f3;\n  \n  &:hover:not([disabled]) {\n    border-color: #2196f3;\n    color: #2196f3;\n    \n    opacity: .5;\n  }\n}"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "fd6fa353-d71f-4e12-ab0a-e6eaffc3abba",
              "data": {
                "open": true,
                "header": "Message content",
                "inputs": [
                  {
                    "id": "08ebb9d4-afbe-458b-971f-9f3dfba49005",
                    "data": {
                      "data": "{\n  \"__messageCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__messageCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-lbhyzqrkeafucojwgsxdtnpvim",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "cab44456-a063-4d25-a9f8-dd497f7dbedc",
                    "data": {
                      "data": "{\"subject\": \"``\"}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard v-model=\"schema.subject\" :is-new=\"isNew\" :readonly=\"readonly\" :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-cmyrnibwaephofjqldzutgxkvs",
                      "componentLogic": "{\n  computed : {\n    subject : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n  },\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps: {\n      type: Array,\n      default: []\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-text-expression\n    label=\"Subject\"\n    v-model=\"subject\"\n    :readonly=\"readonly\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :merge-fields=\"mergeFields\">\n  </or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "cd4e2624-5bfb-483a-a3fa-ab5eb09ede5d",
                    "data": {
                      "data": "{\n  \"yourMessage\": \"``\",\n  \"yourMessageHtml\": \"\",\n  \"mode\": { \"label\": \"Plain text\", \"value\": \"plain\" }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction toJson(data, key) {\n  if (key === 'yourMessageHtml') {\n    return `\\`${data}\\``;\n  }\n  \n  if (key === 'mode') {\n    return JSON.stringify(data);\n  }\n  \n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-bfelpgxvidshnruz \n  :merge-fields=\"mergeFields\"\n  :mode.sync=\"schema.mode\"\n  :readonly=\"readonly\"\n  :step-id=\"stepId\" \n  :steps=\"steps\"\n  :v=\"$v\"\n  :your-message.sync=\"schema.yourMessage\"\n  :your-message-html.sync=\"schema.yourMessageHtml\">\n</or-wildcard-bfelpgxvidshnruz>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bfelpgxvidshnruz",
                      "componentLogic": "{\n  props: {\n    yourMessage: {\n      type: String,\n      default: \"``\"\n    },\n    yourMessageHtml: {\n      type: String,\n      default: \"\"\n    },\n    mode: {\n      type: String,\n      default: 'plain'\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    steps: '',\n    stepId: '',\n    v: {\n      type: Object,\n      default: {}\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      authoringOptions: [\n        { label: 'Plain text', value: 'plain' },\n        { label: 'HTML (raw)', value: 'html' },\n        { label: 'WYSIWYG', value: 'visual'},\n        { label: 'Template builder', value: 'template' },\n      ],\n      codeMode: 'html'\n    }\n  },\n  computed: {\n    message: {\n      get() { return this.yourMessage },\n      set(value) { this.$emit('update:yourMessage', value) }\n    },\n    messageHtml: {\n      get() { return this.yourMessageHtml },\n      set(value) { this.$emit('update:yourMessageHtml', value) }\n    },\n    authoringMode: {\n      get() {\n        if (this.mode.value) {\n          return this.mode.value\n        } else {\n          return this.mode\n        }\n      },\n      set(value) { this.$emit('update:mode', value) }\n    },\n    getHelpInput () {\n      return {\n        modal: {\n          icon: 'info',\n          title: 'Help',\n          content: `\n            <h3 id=\"email-message-settings\">Email message settings</h3>\n<p><strong>Text message</strong>\nA text message is limited by up to 262 Kb in size. Using merge field values makes the size of a message a variable, so make sure that it is below the limit.</p>\n<p><strong>Attachments</strong>\nMaximum cumulative size of attachments is limited by 7 MB. Each added media file is sent and will be received as a separate message. File types support depends on the recipient&#39;s email server.</p>\n<p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary media in the modal window of <code>Files</code>. Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. </p>\n<p>To use a link to a file, click <em>URL</em> and specify it manually or declare it with a merge field. The link must start with <code>http:\\\\</code> or <code>https:\\\\</code>. An option to create a name for each file added as a URL is also available.</p>\n<p>Multiple attachments and/or links can be chosen via appropriate button or removed by a click on <code>X</code> next to it in the step details panel.</p>\n          `\n        }\n      }\n    },\n  },\n} ",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-select-expression \n  :disabled=\"readonly\" \n  label=\"Body authoring mode\" \n  placeholder=\"\" \n  :options=\"authoringOptions\" \n  :advancedHelp=\"getHelpInput\" \n  v-model=\"authoringMode\"></or-select-expression>\n <div class=\"msg-field-wr\">\n   <or-code v-if=\"authoringMode === 'html'\"\n      label=\"Message body (HTML)\"\n      v-model=\"messageHtml\" \n      :mode=\"codeMode\"\n      :readonly=\"readonly\"\n\t\t  :step-id=\"stepId\"\n\t\t  :merge-fields=\"mergeFields\"\n      :steps=\"steps\"></or-code>\n    <or-text-expression v-if=\"authoringMode === 'plain'\"\n      label=\"Message body\"\n      class=\"message-content\"\n      v-model=\"message\" \n      :multi-line=\"true\" \n      :readonly=\"readonly\"\n\t\t  :step-id=\"stepId\"\n\t\t  :merge-fields=\"mergeFields\"\n      :steps=\"steps\"></or-text-expression>\n</div>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".message-content .or-editable-wrapper .editable,\n.ace-wrapper {\n  min-height: 120px;\n  padding-bottom: 30px;\n}\n\n.or-code .header .label-text {\n    font-size: 12px;\n    line-height: 1.3;\n    color: rgba(94,101,109,.55);\n    transition: color .1s ease;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.msg-field-wr {\n  position: relative;\n}"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "e75fb933-f7b0-4fd5-83b3-6ba3e319e12b",
                    "data": {
                      "data": "{\n  \"emailTemplateData\": {},\n  \"emailTemplateStr\": \"\",\n  \"emailTemplateMergeFieldsStr\": \"\",\n  \"emailPreviewLink\": \"\"\n}",
                      "toJson": "return {\n  emailTemplateMergeFieldsStr: '`' + data.emailTemplateMergeFieldsStr + '`'\n}",
                      "validators": "{}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :schema=\"schema\"\n  :email-template-data.sync=\"schema.emailTemplateData\"\n  :email-template-str.sync=\"schema.emailTemplateStr\"\n  :email-template-merge-fields-str.sync=\"schema.emailTemplateMergeFieldsStr\"\n  :email-preview-link.sync=\"schema.emailPreviewLink\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qvsrwmgxpuzckeajhindylbfot",
                      "componentLogic": "{\n  data() {\n    return {\n      iframeLoading: true,\n      emailPreviewLoading: false,\n      emailPreviewError: false,\n      emailPreviewErrorMsg: 'Can\\'t load email preview.',\n      authToken: this.$settings.token,\n      // templateBuilderSrc: `${this.$flow.sharedUrl}/#/views/25fb9c36-a269-4d77-8ef4-cf5f2d6626d7?token=AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ%2BCo8BpBdArx6mbzNYwnuD9pg%2BJgAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQML6JCDfqcBbu8pHbpAgEQgIIBG243fcwKgpzr4JcDIY%2Fotp8LsCWxeeRzjMGnW1r0Cm%2B%2F50JA0oZmyzvV%2F7fHL5yKKDb9fyJ%2BYz2Pj%2F7UM4XvW%2BKlxP39B1UHihrUACK0gH7Gz97flc9Y5KKCqbpuX9GRU0%2BM%2FuvF99HnbsOOJGgxN4Aai6UVDK4Ce2UH%2F4GaBeaV0ZxwM0J%2Bf6anPO5KQ0MEH5vKm5%2FU%2Fje0N6JgXdyVDkybwst663aG%2FU6qH6zA2UQWkYY7bPlquhssdUMxNgfkCoWDxFnO2CIRUfv1Zn4aL%2F1G3hdhMwyRF1ehHZ9706dRUwtTkmJdRJf62qW4sUUU%2B%2BJNNohs3DEaeLIXS2dzzNS3%2FCiXDFdGOT1mXD72egdhqjFwcjQbTF5HvBIAAAExZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUl6Wm1JMk9EbGlZeTA1T1dNeUxUUXdaVGd0WWpka01pMDFZakEyT1RjMVpHRm1OVElpTENKMWMyVnlTV1FpT2lJME1EZGhZV1pqTWkwMU56TXdMVFEwTm1RdE9EZ3hOeTFtTXpBMU5UWTJaalV5WldNaUxDSmhkWFJvVkc5clpXNGlPaUl5TmpFME1ESTFNeTAwTnpkaExUUTRabVV0T1dOa015MDBNVFUxWlRnNU1qZzNPV0lpTENKcFlYUWlPakUxTlRBM05UWXlPVFo5LnFlU3NfdDBzcF9kbkNXcWgyVzJJd0pqVHFOVE53c1VhaDBUVXM4OWVaQ2M%3D`\n      templateBuilderSrc: 'https://shared-staging.onereach.ai/#/views/69f8a9f7-b006-4cf0-a504-4fc1d10bd5f7?token=AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ%2BCo8BxD6wE%2F%2Bicaq1pPe%2FZVCV7wAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM8GfuAi8NW%2FzZIGJ1AgEQgIIBG%2BlEqZdar1w8JG7mOFKA4J9KPsXi12FFxK46J4EMhmRQIFtMruNEmJ4%2F6zt9fb9xF0cZuiIRT1%2BAgBFqN6dDvtVD93SwKZ4Y%2BdHqcBC8jXRI7CNurVP8BF55%2FA7NZtLcFgh09UAU2s3wvxuo%2Bbno%2B5bGimM12b%2BqamM5SyLxiUNGqN2%2ByhzZjEVRY4TtI5HbH4a5oLusA7mA2wPq0TjoEbWW5ryY24imAPyITN6m34%2F5yA45ATEVetsWI9LO9URFkFM1dMD0dLPkere1YSv1rQYkzLE86sUj71E7%2F4BdVqFk4fb%2FRzRiFDJ6vy8X6POy%2BcM52gUwBsfrVXLX3QBsKF1Zwgzq9r4p5HKi21nQgL63qhVV6rGrhzMDFIYAAAExZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTldRMU5UWTBaaTAyT0dJMUxUUmpZakl0T1daall5MDJOR1V3WVdWa1pXRm1ZV1FpTENKMWMyVnlTV1FpT2lKbU5EZzVNbUUzWmkwM1kyTmlMVFJsT1dNdE9HUXpOQzB5WWpCaU0ySTJORE0wTlRraUxDSmhkWFJvVkc5clpXNGlPaUppTTJJek1XTTBNUzAyWXpobUxUUm1Oemd0T1dVM05DMHdNR0U1TWpWalpXTXdNRFlpTENKcFlYUWlPakUxTkRjeE16a3pNalI5LnowWGhXeEdDalpGRDItMTdreE5hRGFVWGpqbUE3cURYTVhwTzdrVUo2ZkE%3D'\n      \n    };\n  },\n  \n  computed : {\n    isStepInTree() {\n      return !_.isEmpty(this.stepId);  \n    },\n    \n    localEmailTemplateData: {\n      get() {\n        return this.emailTemplateData;\n      },\n      \n      set(value) {\n        this.$emit('update:emailTemplateData', value);\n      }\n    },\n    \n    localEmailTemplateStr: {\n      get() {\n        return this.emailTemplateStr;\n      },\n      \n      set(value) {\n        this.$emit('update:emailTemplateStr', value);\n      }\n    },\n    \n    localEmailTemplateMergeFieldsStr: {\n      get() {\n        return this.emailTemplateMergeFieldsStr;\n      },\n      \n      set(value) {\n        this.$emit('update:emailTemplateMergeFieldsStr', value);\n      }\n    },\n    \n    localEmailPreviewLink: {\n      get() {\n        return this.emailPreviewLink;\n      },\n      \n      set(value) {\n        this.$emit('update:emailPreviewLink', value);\n      }\n    },\n    \n    dataOuts() {\n      const SYSTEM_PREFIX = '#';\n      const systemMergeTags = [\n        {\n          title     : 'System',\n          variables : [\n            {\n                variableName  : `${SYSTEM_PREFIX}session`\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.sessionId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.beginningSessionId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.previousSessionId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.startedBy`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.startTime`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.sessionType`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}session.reporting.groupId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}helpers`\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}helpers.providersAccountId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}helpers.sdkApiUrl`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config`\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.accountId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.flowId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.botId`,\n                subObject     : true\n            },\n            {\n                variableName  : `${SYSTEM_PREFIX}config.executionStartTime`,\n                subObject     : true\n            }\n          ]\n        }\n      ];\n      \n      const dataOutMergeTags = [\n        {\n          title     : 'Flow',\n          variables : this.convertStepsToMergeTags(this.steps, this.stepId, 'session')\n        }\n      ];\n      const additionalMergeFields = _.cloneDeep(this.mergeFields) || [];\n\n      _.forEach(additionalMergeFields, titledMergeFields => {\n        let flowAdditionalMergeTags = [];\n        switch (titledMergeFields.title) {\n          case 'Shared':\n            flowAdditionalMergeTags = this.convertStepsToMergeTags(this.steps, this.stepId, 'shared', `${SYSTEM_PREFIX}shared.`);\n            break;\n          case 'Global':\n            flowAdditionalMergeTags = this.convertStepsToMergeTags(this.steps, this.stepId, 'global', `${SYSTEM_PREFIX}global.`);\n            break;\n          default:\n            break;\n        }\n        titledMergeFields.variables = _.concat(titledMergeFields.variables, flowAdditionalMergeTags);\n      });\n\n      return _.concat(dataOutMergeTags, additionalMergeFields, systemMergeTags);\n    }\n  },\n  \n  methods: {\n    handleIframeEvents(e) {\n      const data = _.get(e, 'data') || null;\n      \n      if (data === 'get-initial-data') {\n        let htmlData = '';\n        let cssData = ''\n        \n        if (_.has(this.localEmailTemplateData, 'gjs-components')) {\n          try {\n            htmlData = JSON.parse(_.get(this.localEmailTemplateData, 'gjs-components', ''));\n            cssData = JSON.parse(_.get(this.localEmailTemplateData, 'gjs-styles', ''));\n          } catch(e) {\n            console.error('error parseing localEmailTemplateData', e)\n          }\n        }\n        \n        document.querySelector('#emailBuilderIframe').contentWindow.postMessage({\n          eventType: 'set-initial-data',\n          html: htmlData, \n          css: cssData,\n          authToken: this.authToken,\n          dataOuts: this.dataOuts,\n          mergeFields: this.mergeFields\n        }, \"*\");\n      } else {\n        _.forEach(data, item => {\n          _.set(this.schema, item.key, item.value);\n        });\n      }\n    },\n    \n    closeEmailBuilderHandler() {\n      if (this.localEmailTemplateStr) {\n        this.createEmailPreview();\n      } else {\n        this.localEmailPreviewLink = '';\n      }\n    },\n    \n    flattenSubDataOuts(data, mergeTag) {\n      const result = {};\n      const recurse = (cur, prop, root) => {\n        if (_.isArray(cur) && !_.isEmpty(cur)) {\n          result[prop] = [];\n          _.forEach(cur, (value, key) => {\n            recurse(value, prop || _.isNumber(prop) ? `${prop}[${key}]` : `[${key}]`);\n          });\n        } else if (_.isObject(cur) && !_.isEmpty(cur)) {\n          if (!root) {\n            result[prop] = cur;\n          }\n          _.forEach(cur, (value, key) => {\n            recurse(value, prop || _.isNumber(prop) ? `${prop}.${key}` : key);\n          });\n        } else if (_.isArray(cur) && _.isEmpty(cur)) {\n          result[prop] = [];\n        } else if (_.isObject(cur) && _.isEmpty(cur) && !root) {\n          result[prop] = {};\n        } else if (!root) {\n          result[prop] = cur;\n        }\n      };\n      recurse(data, mergeTag, true);\n      return result;\n    },\n    \n    async createEmailPreview() {\n      this.emailPreviewError = false;\n      this.emailPreviewLoading = true;\n      this.localEmailPreviewLink = '';\n      \n      const successCallbackUrl = await this.$http.post(`${this.$flow.toolboxUrl}/convert/html`, {\n      // const successCallbackUrl = await this.$http.post(`https://toolbox-staging.onereach.ai/convert/html`, {\n        src: this.localEmailTemplateStr,\n        filename: `emailPreview${uuid.v4()}.png`,\n        path: 'email/previews/',\n        expireTime: 2592000,\n        browser: {\n          cookies: [],\n          javaScriptEnabled: true,\n          loadWaitingTime: 3000,\n          defaultNavigationTimeout: 20000,\n          offlineMode: false,\n          userAgent: \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Mobile Safari/537.36\",\n          viewport: {\n            width: 1280,\n            height: 720,\n            deviceScaleFactor: 1,\n            mobile: false\n          }\n        },\n        screenshot: {\n          clip: {\n            x: 0,\n            y: 0,\n            width: 1280,\n            height: 720\n          }\n        },\n        resize: {\n          width: 1280,\n          height: 720\n        },\n      },\n      {\n        headers: {\n          authorization: this.authToken\n        }\n      }).then(response => {\n        return response.body.pollUrl;\n      }, err => {\n        console.error('error', err)\n        this.emailPreviewLoading = false;\n        this.emailPreviewError = true;\n      });\n      \n      let startExecution = new Date();\n      const pollingResult = (uri) => {\n        return this.$http.get(uri, {\n            headers: {\n              authorization: this.authToken\n            },\n            json: true\n        }).then(response => {\n          // this.emailPreviewLoading = false;\n          if (response.status === 202) {\n            let endExecution = new Date() - startExecution;\n            \n            if (endExecution + 3000 > 20000) {\n              this.emailPreviewLoading = false;\n              this.emailPreviewError = true;\n              console.error('Timeout error. Try again later.')\n            }\n            \n            return Promise.delay(2000)\n              .then(() => pollingResult(uri))\n          } else {\n            this.emailPreviewLoading = false;\n            return response\n          }\n        }, err => {\n          console.error('error', err)\n          // this.emailPreviewLoading = false;\n          this.emailPreviewError = true;\n          return false\n        });\n      }\n      \n      const pollResult = await pollingResult(successCallbackUrl);\n      \n      if (pollResult) \n        this.localEmailPreviewLink = _.get(pollResult, 'body.url') || '';\n        \n      this.emailPreviewLoading = false;\n    },\n    \n    openModal(ref) {\n      this.$refs[ref].open();\n    },\n    \n    iframeLoadHandler() {\n      this.iframeLoading = false;\n    },\n    \n    convertStepsToMergeTags (steps, stepId, type = 'session', variablePrefix = '') { // eslint-disable-line max-params\n      return _.chain(steps)\n      .reject({type : 'empty'})\n      .reject({id : stepId})\n      .map(step => {\n        const dataOut = _.isObject(step.data.dataOut) ? step.data.dataOut.name : step.data.dataOut;\n        return {\n          stepLabel     : step.label,\n          variableName  : dataOut ? `${variablePrefix}${dataOut}` : null,\n          type          : _.get(step, 'data.dataOut.type', 'session'),\n          outputExample : step.outputExample || null\n        };\n      })\n      .reject({variableName : null})\n      .filter({type})\n      .uniqBy('variableName')\n      .sortBy('variableName')\n      .flatMap(dataOut => {\n        let subData = [];\n        if (_.isObject(dataOut.outputExample) || _.isArray(dataOut.outputExample)) {\n          const dataOutObj = {};\n          dataOutObj[dataOut.variableName] = dataOut.outputExample;\n          const flattenedSubOuts = this.flattenSubDataOuts(dataOut.outputExample, dataOut.variableName);\n          subData = _.chain(flattenedSubOuts)\n            .keys()\n            .sortBy()\n            .map(subDataOut => ({\n              stepLabel: dataOut.stepLabel,\n              variableName: subDataOut,\n              subObject: true,\n              outputExample: flattenedSubOuts[subDataOut]\n            }))\n            .value();\n        }\n        return [dataOut].concat(subData);\n      })\n      .value();\n    },\n  },\n  \n  mounted() {\n    if (!this.isStepInTree) {\n      this.iframeLoading = false;\n    }\n    \n    window.addEventListener(\"message\", this.handleIframeEvents, false);\n    \n  },\n  \n  beforeDestroy() {\n    window.removeEventListener(\"message\", this.handleIframeEvents);\n  },\n  \n  props : {\n    schema: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    emailTemplateData: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n    emailTemplateStr: {\n      type: String,\n      default: ''\n    },\n    emailTemplateMergeFieldsStr: {\n      type: String,\n      default: ''\n    },\n    emailPreviewLink: {\n      type: String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    stepId: '',\n    steps: '',\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-if=\"schema.mode && schema.mode === 'template'\">\n  <div \n    class=\"email-preview\"\n    v-if=\"!!localEmailPreviewLink\">\n    <img :src=\"localEmailPreviewLink\">\n  </div>\n  <div v-else-if=\"emailPreviewError\">{{emailPreviewErrorMsg}}</div>\n  <or-button \n    @click=\"openModal('emailBuilder')\" \n    :loading=\"iframeLoading || emailPreviewLoading\"\n    :disabled=\"iframeLoading || readonly\"\n    icon=\"mail\" \n    icon-position=\"left\" \n    size=\"small\" \n    type=\"secondary\" \n    color=\"primary\"\n  >\n    Open template builder\n  </or-button>\n  <or-modal \n    title=\"Template builder\"\n    @close=\"closeEmailBuilderHandler\"\n    ref=\"emailBuilder\" \n    size=\"large\" \n    class=\"email-builder\">\n    <iframe \n      v-if=\"isStepInTree\"\n      allowfullscreen=\"allowfullscreen\"\n      mozallowfullscreen=\"mozallowfullscreen\" \n      msallowfullscreen=\"msallowfullscreen\" \n      oallowfullscreen=\"oallowfullscreen\" \n      webkitallowfullscreen=\"webkitallowfullscreen\"\n      id=\"emailBuilderIframe\" \n      @load=\"iframeLoadHandler\" \n      :src=\"templateBuilderSrc\"></iframe>\n  </or-modal>\n</div>\n      <!--src=\"https://shared-staging.onereach.ai/#/views/52db7ceb-b2e9-4dbd-ad72-b2c7cb6c0a9e?token=AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ%2BCo8BVX5xWS9fC4UKZxrQfd1FeAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMpslgTlnOiGrQo7vnAgEQgIIBG26ixDSSdqxPTzFojEs9uQSGAcCQpCZuFToE1cuanudO7%2FBMwpeMCzGlXOa4TzkuaiK%2F%2FQm6SafX8C3VHA8cHPLKUI1QA0yn2XorGutcYLK5OV%2BtBXsgFUOVavjWdaemcJm9LYKd5U1azP4QCe%2FIh3KoducX8APqE7KxLFa2%2F39FcVZrMctRnfLCK5tGG6EKu5azk65LujPSFNlrzu9lSos0eD%2BdQvr4lsE6rG3V6JjngZ3QHITIgwGexxLhTVD0RoNa4bY8o%2FkYEd911B33I7Gvu5sBqXUrmcBnBC3F%2BKFWcWVDgR9Sp2MXjIQiGRDgJJ7VVUHfASKpIkiraZPII9pnh4ytLjuLALmlGi6Y1cr8HczvXg6DaUNm%2Fi0AAAExZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUppTnpGbFlXUXpZeTFsWXpBMkxUUTRZVFl0T0dZeVpDMDJOekV3TkRGaFpqSTVabVVpTENKMWMyVnlTV1FpT2lJNVpESXpOV1ptTmkxa1ltVTJMVFJtTmpBdFlqQXdNUzFqWm1abE1UTTFNemxqTWpNaUxDSmhkWFJvVkc5clpXNGlPaUprWkRoaE9EWTRaaTFoWkRKaExUUTRZV1V0WVRFNFpDMDVNRE15T0RBek9HVmlPRGNpTENKcFlYUWlPakUxTkRJNE1UTTRNRFY5LkctZHlYQThYT3k3TDBvZjQ1dG56Sng1WWNZdXlrMmdaaFNZWGFfekVkMnc%3D\"></iframe>-->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".email-builder {\n  .ui-modal__container {\n    width: 100vw;\n    height: 100vh;\n  }\n  \n  &.ui-modal>.ui-modal__wrapper>.ui-modal__container>.ui-modal__body {\n    height: 100%;\n    padding: 0;\n  }\n  \n  iframe {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n}\n\n.email-preview {\n  margin-bottom: 15px;\n  \n  img {\n    max-width: 100%;\n  }\n}\n\nbutton.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  border-color: #2196f3;\n  color: #2196f3;\n  \n  &:hover:not([disabled]) {\n    border-color: #2196f3;\n    color: #2196f3;\n    \n    opacity: .5;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "2e0e41cb-4019-44a4-b83e-c44e63a27e26",
                    "data": {
                      "readonly": true,
                      "variable": "wysiwygText",
                      "defaultValue": "``",
                      "defaultControls": [
                        "heading",
                        "fontFamily",
                        "fontSize",
                        "fontColor",
                        "fontBackgroundColor",
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough",
                        "subscript",
                        "superscript",
                        "link",
                        "bulletedList",
                        "numberedList",
                        "indent",
                        "outdent",
                        "blockQuote",
                        "insertTable",
                        "alignment",
                        "undo",
                        "redo",
                        "insertMergeTag"
                      ],
                      "renderCondition": "schema.mode === 'visual'",
                      "trimWhitespaces": true,
                      "_defaultControls": [
                        "heading",
                        "fontFamily",
                        "fontSize",
                        "fontColor",
                        "fontBackgroundColor",
                        "bold",
                        "italic",
                        "underline",
                        "strikethrough",
                        "subscript",
                        "superscript",
                        "link",
                        "bulletedList",
                        "numberedList",
                        "indent",
                        "outdent",
                        "blockQuote",
                        "insertTable",
                        "alignment",
                        "undo",
                        "redo",
                        "insertMergeTag"
                      ],
                      "validateRequired": false,
                      "defaultFontSizeOptions": [
                        "default",
                        12,
                        14,
                        16,
                        18,
                        20,
                        24,
                        28,
                        32,
                        36,
                        42
                      ],
                      "_defaultFontSizeOptions": [
                        "default",
                        12,
                        14,
                        16,
                        18,
                        20,
                        24,
                        28,
                        32,
                        36,
                        42
                      ],
                      "defaultFontFamilyOptions": [
                        "Arial, Helvetica, sans-serif",
                        "Verdana, sans-serif",
                        "Arial Black, sans-serif",
                        "Avant Garde, sans-serif",
                        "Comic Sans MS, sans-serif",
                        "Trebuchet MS, sans-serif",
                        "Impact, sans-serif",
                        "Times New Roman, Times, serif",
                        "Courier New, Courier, serif",
                        "Palatino, serif",
                        "Garamond, serif",
                        "Bookman, serif",
                        "Georgia, serif"
                      ],
                      "_defaultFontFamilyOptions": [
                        "Arial, Helvetica, sans-serif",
                        "Verdana, sans-serif",
                        "Arial Black, sans-serif",
                        "Avant Garde, sans-serif",
                        "Comic Sans MS, sans-serif",
                        "Trebuchet MS, sans-serif",
                        "Impact, sans-serif",
                        "Times New Roman, Times, serif",
                        "Courier New, Courier, serif",
                        "Palatino, serif",
                        "Garamond, serif",
                        "Bookman, serif",
                        "Georgia, serif"
                      ]
                    },
                    "meta": {
                      "name": "wysiwyg-editor",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.5"
                    },
                    "label": "Wysiwyg Editor (1.0.5)",
                    "compiled": {},
                    "component": [
                      "wysiwyg-editor",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/wysiwyg-editor_v1-0-5/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/wysiwyg-editor_v1-0-5/index.js\"][\"wysiwyg-editor\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/wysiwyg-editor_v1-0-5/index.js\"][\"wysiwyg-editor\"]"
                    ]
                  },
                  {
                    "id": "f77f9b56-14ba-4945-8d64-09b9e5ebab80",
                    "data": {
                      "data": "{\n  \"mode\": { \"label\": \"Plain text\", \"value\": \"plain\" },\n  \"attachments\": [],\n  \"attachmentsFD\":[],\n  \"attachmentsF\":[],\n  \"dynamicAttachments\": \"\",\n  \"hasDynamicAttachments\": false,\n  \"useSource\": false\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nconst replaceComments = str => str\n      .replace(/\\/\\/[\\s\\S]+?.*(\\n || $)/g, '')\n      .replace(/\\/\\*[.\\s\\S\\n]*\\*\\//g, '')\n      .trim();\n\nfunction toJson(data, key) {\n  if(key === 'dynamicAttachments') {\n    return data || '[]'\n  }\n  \n  if(key === 'attachments') {\n    return `[${_.map(data, (val, index) => {\n      if (val.attType === '`link`') return toJson(val);\n      return JSON.stringify(val);\n    }).join(',')}]`;\n  }\n  \n  if(key === 'attachmentsFD') {\n    return `[${_.map(data, (val, index) => {\n      if (val.attType === '`link`') return toJson(val);\n      return JSON.stringify(val);\n    }).join(',')}]`;\n  }\n  \n  if(key === 'attachmentsF') {\n    return `[${_.map(data, (val, index) => {\n      if (val.attType === '`link`') return toJson(val);\n      return JSON.stringify(val);\n    }).join(',')}]`;\n  }\n  \n  if (key === 'yourMessageHtml') {\n    return `\\`${data}\\``;\n  }\n  \n  if (key === 'mode') {\n    return JSON.stringify(data);\n  }\n  \n  if (typeof data === 'string') {\n    return data;\n  }\n  if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n  if (_.isObject(data)) {\n    return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n  }\n  return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  attachments: {\n    isJsAttached(model){\n      return !_.find(model, { ext: 'js' });\n    },\n    $each: {\n      location: {\n        required: createValidatorRequired('file location is required')\n      },\n      ext: {\n        required: (val, model) => {\n          if (model.location.indexOf('${this.') !== -1 || !val) return true;\n          const validator = createValidatorRequired('file extension is required');\n          return validator(val);\n        }\n      } \n    }\n  }\n}\nfunction createValidatorRequired(errorMessage) {\n  return function (value = '``') {\n    if (this.isNew) return true;\n    const val = value[0] === '`' && value[value.length - 1] === '`' ? value.slice(1, -1) : value;\n    return validators.helpers.withParams(\n      { type: 'required', error: errorMessage },\n      validators.required\n    )(val);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard \n  :mode.sync=\"schema.mode\"\n  :attachments.sync=\"schema.attachments\"\n  :attachmentsFD.sync=\"schema.attachmentsFD\"\n  :attachmentsF.sync=\"schema.attachmentsF\"\n  :useSource.sync=\"schema.useSource\"\n  :dynamicAttachments.sync=\"schema.dynamicAttachments\"\n  :hasDynamicAttachments.sync=\"schema.hasDynamicAttachments\"\n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\">\n</or-wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-fxzjdboaeprhkgcwlutvqmiysn",
                      "componentLogic": "{\n  components: {\n    'link-attachment': {\n      template: `\n        <div>\n          <or-text-expression\n            label=\"link\"\n            v-model=\"item.location\"\n            :readonly=\"readonly\"\n            placeholder=\"link to file\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :invalid=\"isInvalid('location')\"\n            :error=\"errorMessage('location')\"\n            :merge-fields=\"mergeFields\"\n            disableCodeMode>example\n          </or-text-expression>\n          <or-text-expression\n            label=\"name\"\n            v-model=\"item.name\"\n            :readonly=\"readonly\"\n            placeholder=\"my_file.txt\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :invalid=\"isInvalid('ext')\"\n            :error=\"errorMessage('ext')\"\n            :merge-fields=\"mergeFields\"\n            disableCodeMode>\n          </or-text-expression>\n        </div>\n      `,\n      props: {\n        value: String,\n        readonly: Boolean,\n        steps: {\n          type: Array,\n          default: []\n        },\n        stepId: String,\n        v: {\n          type: Object,\n          default: {}\n        },\n        index: Number,\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        }\n      },\n      computed: {\n        item: {\n          get() { return this.value; },\n          set(value) { this.$emit('input', value) }\n        },\n        location() {\n          return this.item.location.slice(1, -1).trim();\n        },\n        name() {\n          return this.item.name.slice(1, -1).trim();\n        }\n      },\n      watch: {\n        'item.name'(){\n          this.updateFileExtension();\n        },\n        'item.location'() {\n          this.updateFileExtension();\n        },\n      },\n      methods: {\n        updateFileExtension() {\n          const ext = str => _.get(/\\.([a-z]+)$/.exec(str.trim()), '[1]', '');\n          const nameFromUrl = str => _.get(/\\/([^\\/]+?\\.[a-z]+)$/.exec(str.trim()), '[1]', '');\n\n          if (!this.name) {\n            this.item.name = `\\`${nameFromUrl(this.location)}\\``;\n          }\n          \n          if (this.name.indexOf('${') === -1) {\n            this.item.ext = `\\`${ext(this.name) || ext(this.location)}\\``;\n          } else {\n            this.item.ext = `\\`${this.name}\\``;\n          }\n        },\n        isInvalid(field){\n          return _.get(this.v, `schema.attachments.$each[${this.index}]['${field}'].$error`);\n        },\n        errorMessage(field){\n          const chain = _.chain(this.v).get(`schema.attachments.$each[${this.index}]['${field}']`, {});\n          return chain\n            .reduce((acc, item, key) => {\n              if(!/^\\$/.test(key) && !item) {\n                acc += `${chain.get(`$params.${key}.error`).value()}\\n`;\n              }\n              return acc;\n            }, '')\n            .value();\n        }\n      }\n    }\n  },\n  props: {\n    yourMessage: {\n      type: String,\n      default: \"``\"\n    },\n    yourMessageHtml: {\n      type: String,\n      default: \"\"\n    },\n    mode: {\n      type: Object,\n      default() {\n        return { \n          label: 'Plain text', \n          value: 'plain',\n        };\n      }\n    },\n    attachments: {\n      type: Array,\n      default: []\n    },\n    attachmentsFD: {\n      type: Array,\n      default: []\n    },\n    attachmentsF: {\n      type: Array,\n      default: []\n    },\n    dynamicAttachments: {\n      type: String,\n      default: \"\"\n    },\n    hasDynamicAttachments: {\n      type: Boolean,\n      default: false\n    },\n    useSource: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    steps: '',\n    stepId: '',\n    v: {\n      type: Object,\n      default: {}\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    }\n  },\n  watch:{\n    dynamicAttachments: function (val) {\n      return this.$emit('update:dynamicAttachments', val);\n    },\n  },\n  data() {\n    return {\n      allowedFileTypes: ['txt', 'doc', 'docx', 'xls', 'xlsx', 'csv' , 'jpg', 'jpeg', 'gif', 'bmp', 'mp3', 'wav', 'avi', 'mpg', 'mpeg', 'flv', 'pdf', 'rar', 'zip', '7z', 'htm', 'html', 'dll', 'sys'],\n      defaultAttachment: {\n        name: '``',\n        location: '``',\n        ext: '``'\n      }\n    }\n  },\n  computed: {\n    assetsUrl() { return `${this.$flow.customDataApiUrl}/api/v1/assets` },\n    authToken() { return this.$settings.token },\n    useSourceComputed : {\n      get () {\n        return true\n      }\n    },\n    attachmentLinks: {\n      get() { \n        if (this.useSourceComputed) {\n          return this.attachmentsF\n        } else {\n          return this.attachmentsFD\n        }\n        \n      },\n      set(value) {\n        let model, res;\n        const prev = this.attachmentLinks;\n\n        if (this.useSourceComputed) {\n            model = ['name', 'key', 'location', 'isPublic', 'attType']\n            res = _.map(value, item => _.pick(item, model));\n            if (prev.length && !value.length) {\n              this.$emit('update:attachmentsF', prev);\n              this.$emit('update:attachments', prev);\n            } else {\n              this.$emit('update:attachmentsF', res);\n              this.$emit('update:attachments', res);\n            }\n         } else {\n            model = ['acl', 'data','ext','id', 'location','name', 'note', 'type', 'attType' ]\n            res = _.map(value, item => _.pick(item, model));\n            if (prev.length && !value.length) {\n              this.$emit('update:attachmentsFD', prev);\n              this.$emit('update:attachments', prev);\n            } else {\n              this.$emit('update:attachmentsFD', res);\n              this.$emit('update:attachments', res);\n            }\n         }\n      }\n    },\n    attachmentsMenuOptions() {\n      return [\n        { label: 'From files', value: 'file' },\n        { label: 'From URL', value: 'link' },\n        // { label: 'Array (advanced)', value: 'array', disabled: this.hasDynamicAttachments }\n      ];\n    },\n  },\n  methods: {\n    toggleArrayOfAtt() {\n      return this.$emit('update:hasDynamicAttachments', !this.hasDynamicAttachments);\n    },\n    addFilesAtt() {\n      this.openModal('attachment-modal');\n    },\n    addUrlAtt() {\n      return this.addAttachmentLink();\n    },\n    openModal(ref) {\n      this.$refs[ref].open();\n    },\n    removeSelectedItem(key) {\n      this.attachmentLinks.splice(key, 1);\n    },\n    addAttachmentLink() {\n      const att = _.assign({ attType: '`link`' }, this.defaultAttachment);\n      this.attachmentLinks = [...this.attachments, att];\n    },\n    handleAttachmentOptionSelected(opt) {\n      const value = _.get(opt, 'value');\n      if (!value) return;\n      switch (value) {\n        case 'array': return this.$emit('update:hasDynamicAttachments', true);\n        case 'link': return this.addAttachmentLink();\n        default: this.openModal('attachment-modal');\n      }\n    },\n    deleteDynamicAttachments() {\n      const defaultValue = \"\";\n      this.$emit('update:hasDynamicAttachments', false);\n      this.$emit('update:dynamicAttachments', defaultValue);\n    }\n  }\n} ",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-modal ref=\"attachment-modal\" size=\"large\" title=\"Attachments\">\n <or-asset-manager\n    :assets-url=\"assetsUrl\"\n    :use-files.sync=\"useSourceComputed\"\n    :files-api-url=\"$flow.filesApiUrl\"\n    :auth-token=\"authToken\"\n    :multi-select=\"true\"\n    :allowed-file-types=\"allowedFileTypes\"\n    v-model=\"attachmentLinks\">\n  </or-asset-manager>\n</or-modal>\n<or-alert :dismissible=\"false\" type=\"error\" v-show=\"_.find(attachmentLinks, { ext: 'js' })\">\n  You can't send <span style=\"font-weight: 600\">.js</span> files in emails\n</or-alert>\n<div class=\"att-block\">\n  + Add attachment from\n  <or-button\n    :disabled=\"readonly\"\n    @click=\"addFilesAtt\"\n    :class=\"['btn-add-attachment', { disabled : readonly }]\"\n    disableRipple>\n    Files\n  </or-button>\n  or\n  <or-button\n    :disabled=\"readonly\"\n    @click=\"addUrlAtt\"\n    :class=\"['btn-add-attachment', { disabled : readonly }]\"\n    disableRipple>\n    URL\n  </or-button>\n<!--  or add-->\n<!--    <or-button-->\n<!--    :disabled=\"readonly\"-->\n<!--    @click=\"toggleArrayOfAtt\"-->\n<!--    :class=\"['btn-add-attachment', { disabled : readonly }]\"-->\n<!--    disableRipple>-->\n<!--    Array of attachments-->\n<!--  </or-button>-->\n<!--  <button class=\"adv_attachments_button\" @click=\"openModal('modal1')\">-->\n<!--    <or-icon>info</or-icon>-->\n<!--  </button>-->\n<!--  <or-modal ref=\"modal1\" size=\"large\" title=\"Array of attachments example\">-->\n<!--   <pre><code class=\"lang-javascript\">-->\n<!--    [-->\n<!--      { <span class=\"hljs-attr\">\"location\"</span>: <span class=\"hljs-string\">\"https://www.google.com/index.html\"</span>, <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"index.html\"</span> }, -->\n<!--      { <span class=\"hljs-attr\">\"location\"</span>: <span class=\"hljs-string\">\"https://bipbap.ru/wp-content/uploads/2017/04/3dr-19.jpg\"</span>, <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"my_file1.jpg\"</span> },-->\n<!--      { <span class=\"hljs-attr\">\"location\"</span>: <span class=\"hljs-string\">\"https://files.qa.api.onereach.ai/public/ee2427cd-5886-4dfd-b776-30e60dbd22f7/ww.doc\"</span>, <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"\"</span> }-->\n<!--    ]-->\n<!--</code></pre>-->\n\n<!--    </or-modal>-->\n</div>\n<h5 v-if=\"!_.isEmpty(attachments)\" class=\"attHead\">Attachments</h5>\n<ul class=\"attachment-items-list\">\n  <li class=\"attachment-item\" v-for=\"(item, index) in attachmentLinks\" :key=\"index\">\n    <div v-if=\"!item.attType\">\n      {{item.name}}\n      <button class=\"btn-delete-attachment\" :disabled=\"readonly\" @click=\"removeSelectedItem(index)\">\n        <or-icon>close</or-icon>\n      </button>\n    </div>\n    <div v-if=\"item.attType === '`link`'\" class=\"link-attachment-wrapper\">\n      <link-attachment v-model=\"item\" :index=\"index\" :readonly=\"readonly\" :steps=\"steps\" :step-id=\"stepId\" :v=\"v\" :merge-fields=\"mergeFields\"></link-attachment>\n      <button class=\"btn-delete-attachment\" :disabled=\"readonly\" @click=\"removeSelectedItem(index)\">\n          <or-icon>close</or-icon>\n      </button>\n    </div>\n  </li>\n  <li class=\"attachment-item\" v-if=\"hasDynamicAttachments\">\n    <or-code :steps=\"steps\" label=\"Array of attachments\" mode=\"javascipt\" :step-id=\"stepId\" v-model=\"dynamicAttachments\" :merge-fields=\"mergeFields\"></or-code>\n    <button class=\"btn-delete-attachment\" :disabled=\"readonly\" @click=\"deleteDynamicAttachments()\">\n        <or-icon>close</or-icon>\n    </button>\n  </li>\n</ul>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".attHead {\n  margin-top: .5rem;\n}\n\n\n.adv_attachments_button {\n  cursor: pointer;\n  border: none;\n  background: none;\n  padding: 0;\n  margin: 0;\n}\n\n.adv_attachments_button .ui-icon{\n  color: #d1d1d1;\n}\n\n.adv_attachments_button:hover .ui-icon{\n  color: #64b2da;\n}\n\n.dynamic-attachments-wrapper {\n  padding: 10px;\n}\n\n.att-block {\n  font-weight: bold;\n  font-size: 14px;\n}\n\n.asset-manager-wrapper .ui-switch__wrapper {\n  display:none;\n}\n\n.btn-add-attachment {\n  padding: 0 !important;\n  min-width: auto !important;\n  // margin-bottom: 10px !important;\n  background: none !important;\n  border: 0 !important;\n  font-weight: bold !important;;\n  line-height: 14px !important;\n  font-size: 14px !important;\n  color: #64b2da !important;\n  cursor: pointer !important;\n  font-family: inherit !important;\n  \n  &.outside {\n    bottom: -20px;\n  }\n}\n\n.clear-btn-dropdown {\n  border: none;\n  font-size: 15px;\n  padding: 0;\n  .ui-button__dropdown-icon {\n    display: none;\n  }\n}\n\n.attachment-items-list {\n  list-style: none;\n  margin: 0;\n  padding-left: 0;\n}\n\n.attachment-item {\n  position: relative;\n  max-width: 100%;\n  padding-right: 25px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: 20px;\n  color: #91969D;\n  font-size: 12px;\n  text-align: left;\n  \n  .btn-delete-attachment {\n    position: absolute;\n    right: 0;\n    top: 50%;\n    background: none;\n    border: 0;\n    padding: 0;\n    cursor: pointer;\n    transform: translateY(-50%);\n    \n    .ui-icon {\n      height: 20px;\n      width: 20px;\n      font-size: 20px;\n      color: #91969D;\n    }\n  }\n}\n\n.link-attachment-wrapper {\n  padding: 10px;\n  padding-top: 0;\n  background-color: #ededed;\n  border-radius: 3px;\n  margin: 5px 0;\n\n  .or-text-expression {\n    margin-bottom: 0;\n  }\n}\n\n.dynamic-attachments-wrapper {\n  background-color: #ededed;\n  border-radius: 3px;\n  margin: 5px 0;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "e24e7ad6-7f25-4f3c-9e33-37ec8f3369c8",
              "data": {
                "open": true,
                "header": "Event handling",
                "inputs": [
                  {
                    "id": "cd451ec1-caf4-45da-b4b0-909de1cd962c",
                    "data": {
                      "data": "{\n  \"__responseCollapsibleState\": {\n    \"isOpen\": true\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__responseCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-uiravnegopjlsqfcmkhwztdbxy",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "7d0f7e41-eb35-44c9-bb2f-bf286604da5e",
                    "data": {
                      "label": "Enable events handling",
                      "helpText": "",
                      "variable": "useThreads",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "11cda51a-ae27-4e7e-9a5f-45597778028e",
                    "data": {
                      "label": "Timeout",
                      "helpText": "",
                      "outputType": "ms",
                      "computeType": "logic",
                      "placeholder": "",
                      "defaultValue": "`1 week`",
                      "errorMessage": "Must be a timestring duration value between 10 s and 1 month",
                      "variableName": "timeoutLeng",
                      "maxTimeoutValue": "`1 month`",
                      "minTimeoutValue": "`10 s`",
                      "renderCondition": "schema.useThreads",
                      "validateRequired": true,
                      "allowDynamicValues": true
                    },
                    "meta": {
                      "name": "validated-timestring",
                      "type": "onereach-studio-form-input",
                      "version": "1.3.0"
                    },
                    "label": "Validated Timestring Input",
                    "compiled": {},
                    "component": [
                      "validated-timestring",
                      "https://content-assets.onereach.ai/component/validated-timestring/v1-3-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/validated-timestring/v1-3-0/index.js\"][\"validated-timestring\"]",
                      "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/validated-timestring/v1-3-0/index.js\"][\"validated-timestring\"]"
                    ]
                  },
                  {
                    "id": "f5244276-2acd-48ae-ac78-db22c2f25e95",
                    "data": {
                      "data": "{ \"hasOpenEvent\": false }",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.hasOpenEvent\" :useThreads=\"schema.useThreads\" :emailConfig=\"schema.emailConfig\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-cvojhsmxtlybpgarnuzdkwefiq",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    emailConfig: {\n      type: Object,\n      default: {},\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    hasOpenEvent: {\n      get() { \n         return this.value;\n      },\n      set(value) { this.$emit('input', value); },\n    },\n    tooltipMessage() {\n      if (!this.useThreads) return 'To enable this option, you should turn on \\'enable events handling\\' option';\n    },\n  },\n  watch: {\n    useThreads(val) {\n      if (!val) this.hasOpenEvent = false;\n    },\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch \n    v-model=\"hasOpenEvent\" \n    v-if=\"useThreads\"\n    :disabled=\"readonly || !useThreads\"\n    :tooltip=\"tooltipMessage\"\n    tooltipPosition='top center'\n  >\n    Handle email-open events\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}\n\ncode:not([class]) {\n  padding: .125rem .25rem;\n  \n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: .25rem;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "20691807-c39c-460c-88e7-edd5c3e4c5ee",
                    "data": {
                      "data": "{ \"hasUrlClickTracking\": false }",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.hasUrlClickTracking\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ovkbfthypuanlrximgsjqewdcz",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    hasUrlClickTracking: {\n      get() { return this.value; },\n      set(value) { this.$emit('input', value); },\n    },\n    tooltipMessage() {\n      if (!this.useThreads) return 'To enable this option, you should turn on \\'enable events handling\\' option';\n    },\n  },\n  watch: {\n    useThreads(val) {\n      if (!val) this.hasUrlClickTracking = false;\n    },\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch \n    v-model=\"hasUrlClickTracking\" \n    v-if=\"useThreads\"\n    :disabled=\"readonly || !useThreads\"\n    :tooltip=\"tooltipMessage\"\n    tooltipPosition='top center'\n  >\n    Handle clicks on URLs in the email body\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "dcad4b1b-4441-4d3b-bc2d-f18b2009bb19",
                    "data": {
                      "label": "Shorten click tracking URLs",
                      "helpText": "",
                      "variable": "hasShortUrl",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "92120617-6293-48fa-b064-9ed96f5f64f5",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.hasUrlClickTracking",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "04b0136a-710e-4ae5-a2df-f2e475b7fe18",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useThreads",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "persistently",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "04b0136a-710e-4ae5-a2df-f2e475b7fe18",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useThreads",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "92120617-6293-48fa-b064-9ed96f5f64f5",
                            "ruleType": {
                              "func": "{ return firstValue === false }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is false",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.hasUrlClickTracking",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "d6f7c8fb-f077-47e7-a11b-65eb9702f7de",
                    "data": {
                      "data": "{\"stepVariable\": \"defaultValue\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.stepVariable\" :emailConfig=\"schema.emailConfig\" :useManualMode=\"schema.useManualMode\" :useThreads=\"schema.useThreads\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-dpjnxmoytvwrusbqgaklizchef",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        emailConfig: {\n          type: Object,\n          default: {}\n        },\n        useManualMode: {\n          type: Boolean\n        },\n        useThreads:{\n          type : Boolean,\n          default : false\n        },\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<h4 v-if=\"useManualMode || (useThreads && emailConfig.type !== 'mail-server')\">\n  Bounce handling\n</h4>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "13dfc0f1-3258-4fa2-9657-07f57c372892",
                    "data": {
                      "data": "{ \"handleComplaints\": false }",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.handleComplaints\" :useManualMode=\"schema.useManualMode\" :emailConfig=\"schema.emailConfig\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-isnchwekdfrpjgubmyqtvzxlao",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    useManualMode: {\n      type: Boolean\n    },\n    emailConfig: {\n      type: Object,\n      default: {},\n    },\n    value: {\n      type: String,\n      default : '',\n    },\n  },\n  computed: {\n    handleComplaints: {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    tooltipMessage() {\n      if (!this.useThreads) return 'To enable this option, you should turn on \\'enable events handling\\' option';\n    },\n  },\n  watch: {\n    useThreads(val) {\n      if (!val) this.handleComplaints = false;\n    },\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-switch \n    v-model=\"handleComplaints\"\n    v-if=\"useManualMode || (useThreads && emailConfig.type !== 'mail-server')\"\n    :disabled=\"readonly || !useThreads\"\n    :tooltip=\"tooltipMessage\"\n    tooltipPosition='top center'\n  >\n    Handle complaints as hard bounces\n  </or-switch>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "a06f4543-25ac-42c5-b84c-265b61502adc",
                    "data": {
                      "data": "{\"bounceHandleType\": \"ignore\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.bounceHandleType\" :useManualMode=\"schema.useManualMode\" :emailConfig=\"schema.emailConfig\" :readonly=\"readonly\" :use-threads=\"schema.useThreads\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ezvjrgtdcskoaplunyxhqiwbfm",
                      "componentLogic": "{\n  props: {\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    useThreads: {\n      type: Boolean,\n      default: false,\n    },\n    useManualMode: {\n      type: Boolean\n    },\n    emailConfig: {\n      type: Object,\n      default: {}\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      bounceHandleOptions: [\n        { label: 'Process hard and soft bounces through the \\'bounce\\' exit', value: 'bounce' },\n        { label: 'Process hard and soft bounces through separate exits', value: 'separately' },\n        { label: 'Process bounces as errors', value: 'error' },\n        { label: 'Ignore bounces', value: 'ignore' },\n      ],\n    };\n  },\n  computed: {\n    bounceHandleType: {\n      get() { return this.value; },\n      set(value) { this.$emit('input', value); },\n    },\n  },\n  watch: {\n    emailConfig(val) {\n      if (val.type === 'mail-server') {\n        return this.bounceHandleType = 'error';\n     }\n   },\n    useThreads(val) {\n      if (!val) this.bounceHandleType = 'ignore';\n    }\n  },\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"bounces-handle-type-wrapper\">\n  <or-radio-group \n    v-model=\"bounceHandleType\"\n    v-if=\"useManualMode || (useThreads && emailConfig.type !== 'mail-server')\"\n    :disabled=\"readonly || !useThreads\"\n    name=\"bounceHandleTypeGroup\" \n    vertical :options=\"bounceHandleOptions\"\n  ></or-radio-group>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".bounces-handle-type-wrapper {\n  margin: 0 0 20px 0;\n}\n.ui-radio-group__radios {\n  \n  .ui-radio__label-text {\n    font-size: .9375rem;\n  }\n  \n  .ui-radio.is-checked {\n    .ui-radio__outer-circle {\n      border: 1px solid #2196f3;\n      background-color: #2196f3;\n    }\n    \n    .ui-radio__inner-circle {\n      background-color: #fff;\n      transform: scale(0.25);\n    }\n  }\n  \n  .ui-radio {\n    .ui-radio__outer-circle {\n      background-color: #fff;\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "ab1e675d-42f9-4908-8826-8a08c2c4003f",
                    "data": {
                      "data": "{\"ignoreOtherBounces\": true}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.ignoreOtherBounces\" :useManualMode=\"schema.useManualMode\" :emailConfig=\"schema.emailConfig\" :useThreads=\"schema.useThreads\" :bounceHandleType=\"schema.bounceHandleType\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-pabsryxvmhknzeqdolcgjtwuif",
                      "componentLogic": "{\n  computed : {\n    computedValue : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    }\n  },\n  props : {\n    value : {\n      type : Boolean,\n      default : true\n    },\n    emailConfig: {\n      type: Object,\n      default: {}\n    },\n    useThreads:{\n      type : Boolean,\n      default : false\n    },\n    useManualMode: {\n      type: Boolean\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    bounceHandleType: {\n      type: String,\n      default: 'bounce'\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-switch\n  v-if=\"(useManualMode && bounceHandleType !== 'ignore') || (useThreads && bounceHandleType !== 'ignore' && emailConfig.type !== 'mail-server')\"\n  v-model=\"computedValue\"\n  :disabled=\"readonly\"\n>\n  Ignore bounces from all but the first To recipient (recommended)\n</or-switch>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".ui-switch--color-primary.is-checked {\n  &.is-disabled {\n    opacity: .5;  \n  }\n  \n  .ui-switch__track {\n    background-color: #2196f3;\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "disableBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "848e554e-ed46-473e-a9d1-a6d8a75e3041",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "57e49748-a7b2-4cc9-ae70-15e0cd2b937b",
                    "data": {
                      "label": "Custom message id",
                      "helpText": "Override step default autogenerated messageId",
                      "variable": "customMessageId",
                      "placeholder": "",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "775be2dd-5484-4990-9475-3aca1d194d0e",
                          "errorMessage": "The Custom message id is not a valid JavaScript expression.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "83ae2930-2bf8-47ad-882f-e665c7dec459",
                                "ruleType": {
                                  "func": "{ return !validators.jsExpression(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "invalid JS expression",
                                  "modes": [],
                                  "category": "code"
                                },
                                "codeValue": "``",
                                "valueType": "code",
                                "firstValue": "schema.customMessageId",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.dev.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.dev.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "9c3362d1-3c34-4db3-8f08-dac462b9a69b",
              "data": {
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "f05a160b-70fe-4828-aa56-df4ff0189860",
                    "data": {
                      "data": "{\n  \"__bounceCollapsibleState\": {\n    \"isOpen\": false\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.__bounceCollapsibleState\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xzfwuyjvkliepoanqbchdsgtrm",
                      "componentLogic": "{\n  data(){\n    return {\n      childrenValidatros: []\n    }\n  },\n  computed : {\n    state : {\n      get () { return this.value; },\n      set (value) { this.$emit('input', value); }\n    },\n    collapsible(){\n      return this.$parent.$parent.$parent.$parent;\n    },\n    invalidSchemaValidators(){\n      return _.keys(this.state._schemaValidators || [])\n        .reduce((invalid, key) => {\n          if (invalid) return invalid;\n          const schemaValue = this.schema[key];\n          const validator = new Function('value', `return ${this.state._schemaValidators[key]}`);\n          return !validator(schemaValue);\n        }, false);\n    },\n    invalid(){\n      return this.childrenValidatros.reduce((inv, validator) => {\n        if (inv) return inv;\n        return validator.$invalid;\n      }, false) || this.invalidSchemaValidators;\n    }\n  },\n  props : {\n    value : {\n      type : Object,\n      default : {}\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  watch: {\n    invalid(value){\n      this.collapsible.invalid = value;\n      if(value) {\n        this.collapsible.isOpen = true;\n      }\n    },\n  },\n  methods: {\n    findChildrenValidators(){\n      return new Promise(res => {\n        const validators = [];\n        \n        const findValidators = (children, validators) => {\n          children.forEach(child => {\n            if(child.$v) {\n              validators.push(child.$v);\n            } else {\n              findValidators(child.$children, validators);\n            }\n          });\n        };\n        \n        this.$nextTick(() => {\n          findValidators(this.collapsible.$children, validators);\n          res(validators);\n        });\n      });\n    },\n    setWatchers(){\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.$watch(`collapsible.${key}`, value => {\n          if (this.invalid) return;\n          this.state = _.assign(this.state, { [key]: value });\n        });\n      });\n    },\n    setCollapsibleState(){\n      if (this.invalid) {\n        this.collapsible.isOpen = true;\n        this.collapsible.invalid = true;\n        return;\n      }\n      _.keys(this.state).filter(k => k[0] !== '_').forEach(key => {\n        this.collapsible[key] = this.state[key];\n      });\n    },\n  },\n  mounted(){\n    this.collapsible.preserveInvalid = true;\n    this.setWatchers();\n    this.setCollapsibleState();\n    this.findChildrenValidators().then(validators => {\n      this.childrenValidatros = validators;\n    });\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!-- Collapsible state controller -->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "85117bf0-f553-43c7-bc17-420a62fd4174",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.qa.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.qa.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "9b247274-1fdf-4915-a5bb-30ca3b3c41f2",
              "data": {
                "data": "{ \"isEmailInheritableStep\": true }",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<wildcard :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                "allowCodeMode": true,
                "componentName": "or-wildcard-ytbqsmzfgnhdxiwvjacpolrkeu",
                "componentLogic": "{\n}",
                "renderCondition": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentTemplate": "<!-- THIS COMPONENT IS ONLY TO SET UP isEmailInheritableStep VARIABLE -->\n<div></div>",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "compiled": {},
              "component": "formWildcard"
            }
          ],
          "outputExample": "{\n  latestResponse: { \n    \tmessageId: \"\",\n    \tdatetime: \"\",\n    \ttype: \"\",\n    \tlink: \"\",\n    \teventSender: {\n    \t\temail: \"\",\n    \t\tname: \"\" \n    \t},\n    \tvalue: \"\",\n    \ttag: { \n    \t\tattributes: { \n    \t\t\tid: \"\", \n    \t\t\ttitle: \"\"\n    \t\t},\n    \t\tcontents: \"\"\n    \t}\n  },\n  allResponses: [],\n  outgoingMessage: {\n  \tmessageId: \"\",\n  \ttimestamp: \"\",\n  \tdatetime: \"\",\n\t  sender: {\n      name: \"\",\n      address:\"\"\n    },\n  \tsubject: {\n  \t\ttext: \"\",\n  \t\ttrimmed: \"\"\n  \t},\n  \trecipients: {\n  \t\tto: [],\n  \t\tcc: [],\n  \t\tbcc: [] \n    },\n  \tcontent: {\n  \t\tplain: \"\",\n  \t\thtml: \"\",\n  \t\ttrimmedText: \"\",\n  \t\ttrimmedHtml: \"\"\n  \t},\n  \tinReplyTo: \"\",\n  \treferences: [],\n  \tattachments: [],\n  \tbeacons: []\n  }\n}",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "const defaults = {\n  \"processError\":true, \n  \"requiredAdapters\":[],\n  \"__accountsCollapsibleState\": {\"isOpen\":true, \"_schemaValidators\":{\"emailConfig\":\"!_.isEmpty(value)\"}},\n  \"nameFrom\":\"``\",\n  \"differentReplyTo\":false,\n  \"senderAddress\":\"``\",\n  \"senderSubDomain\":\"``\",\n  \"replyToAddress\":\"``\",\n  \"replyToSubDomain\":\"``\",\n  \"__replyCollapsibleState\":{\"isOpen\":true},\n  \"isRequestInput\":true,\n  \"replyTo\":\"``\",\n  \"references\":[],\n  \"isReply\":false,\n  \"__recipientsCollapsibleState\":{\"isOpen\":true},\n  \"toList\":[\"``\"],\n  \"ccList\":[],\n  \"bccList\":[],\n  \"hasDynamicRecipients\":false,\n  \"dynamicRecipients\":\"// [ \\\"recipient@domain.com\\\", \\\"John Doe <john@doe.com>\\\" ]\\t// (all are 'To')\\n   /* or */\\n// [ { type: \\\"to\\\", recipient: \\\"recipient@domain.com\\\" }, { type: \\\"cc\\\", recipient: \\\"John Doe <john@doe.com>\\\" } ]\",\n  \"__responseCollapsibleState\":{\"isOpen\":true},\n  \"notWaitResponse\":false,\n  \"timeout\":604800000,\n  \"timeoutString\":\"`1 week`\",\n  \"hasOpenEvent\":false,\n  \"hasUrlClickTracking\":false,\n  \"handleComplaints\":false,\n  \"responseEvent\":\"thread\",\n  \"__messageCollapsibleState\":{\"isOpen\":true},\n  \"subject\":\"``\",\n  \"yourMessage\":\"``\",\n  \"yourMessageHtml\":\"\",\n  \"mode\":{\"label\":\"Plain text\",\"value\":\"plain\"},\n  \"attachments\":[],\n  \"dynamicAttachments\":\"// ['https://link/to/file/1.jpg', 'https://link/to/file/2.txt', ...]\\n// or\\n// [{ location: 'https://link/to/file', name: 'my_file.txt' }, ...]\",\n  \"hasDynamicAttachments\":false,\n  \"__bounceCollapsibleState\":{\"isOpen\":true},\n  \"ignoreOtherBounces\":true,\n  \"bounceHandleType\":\"bounce\",\n  \"dataOut\":{\"name\":\"emailInput\",\"type\":\"session\",\"ttl\":86400000},\n  \"isEmailInheritableStep\":true,\n  \"exits\":[{\"id\":\"next\",\"label\":\"response\"}, {\"id\":\"__error__\",\"label\":\"error\"}],\n  \"dynamicExitsArrayStart\":1\n};\n\nconst main = () => {\n  const dataKeys = Object.keys(step.data);\n  const defaultKeys = Object.keys(defaults);\n  console.log('Run migrations...');\n  defaultKeys.forEach(key => {\n    if (!dataKeys.includes(key)) {\n      console.log(`Add value - ${key}: ${JSON.stringify(defaults[key])}`);\n      step.data[key] = defaults[key];\n    }\n  });\n};\n\nmain();",
            "version": "0.0.507"
          },
          {
            "sample": null,
            "script": "step.data['adaptersLinks'] = [];\n",
            "version": "0.0.512"
          },
          {
            "sample": null,
            "script": "step.data['emailConfig'] = \"\";\n",
            "version": "0.0.513"
          },
          {
            "sample": null,
            "script": "step.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['false'] = \"\";\n",
            "version": "0.0.514"
          },
          {
            "sample": null,
            "script": "step.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['isTextOutput'] = false;\n",
            "version": "0.0.515"
          },
          {
            "sample": null,
            "script": "step.data['emailConfig'] = \"\";\nstep.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['isTextOutput'] = false;\n",
            "version": "0.0.516"
          },
          {
            "sample": null,
            "script": "step.data['requiredAdapters'] = [];\nstep.data['emailConfig'] = \"\";\nstep.data['wysiwygText'] = \"\";\nstep.data['wysiwygPlainText'] = \"\";\nstep.data['isTextOutput'] = false;\n",
            "version": "0.0.517"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.518"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.519"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['emailConfig'])) step.data['emailConfig'] = \"\";\n",
            "version": "0.0.520"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['timestringDuration'])) step.data['timestringDuration'] = 0;\nif(_.isUndefined(step.data['timestringDurationStr'])) step.data['timestringDurationStr'] = \"``\";\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.521"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['timeoutLeng'])) step.data['timeoutLeng'] = {\"input\":\"`1 week`\",\"outputMode\":\"ms\"};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.522"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.523"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.524"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.525"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['wysiwygText'])) step.data['wysiwygText'] = \"\";\nif(_.isUndefined(step.data['wysiwygPlainText'])) step.data['wysiwygPlainText'] = \"\";\nif(_.isUndefined(step.data['isTextOutput'])) step.data['isTextOutput'] = false;\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.526"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['timeoutLeng'])) step.data['timeoutLeng'] = {\"input\":\"`1 week`\",\"outputMode\":\"ms\"};\n",
            "version": "0.0.528"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.531"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.532"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['s__accountsCollapsibleState'])) step.data['__accountsCollapsibleState'] = {\"isOpen\":true,\"_schemaValidators\":{\"emailConfig\":\"!_.isEmpty(value)\"}};\nif(_.isUndefined(step.data['emailConfig'])) step.data['emailConfig'] = \"\";\nif(_.isUndefined(step.data['nameFrom'])) step.data['nameFrom'] = \"``\";\nif(_.isUndefined(step.data['differentReplyTo'])) step.data['differentReplyTo'] = false;\nif(_.isUndefined(step.data['senderAddress'])) step.data['senderAddress'] = \"``\";\nif(_.isUndefined(step.data['senderSubDomain'])) step.data['senderSubDomain'] = \"``\";\nif(_.isUndefined(step.data['replyToAddress'])) step.data['replyToAddress'] = \"``\";\nif(_.isUndefined(step.data['replyToSubDomain'])) step.data['replyToSubDomain'] = \"``\";\nif(_.isUndefined(step.data['__replyCollapsibleState'])) step.data['__replyCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['isRequestInput'])) step.data['isRequestInput'] = true;\nif(_.isUndefined(step.data['replyTo'])) step.data['replyTo'] = \"``\";\nif(_.isUndefined(step.data['references'])) step.data['references'] = [];\nif(_.isUndefined(step.data['isReply'])) step.data['isReply'] = false;\nif(_.isUndefined(step.data['__recipientsCollapsibleState'])) step.data['__recipientsCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['toList'])) step.data['toList'] = [\"``\"];\nif(_.isUndefined(step.data['ccList'])) step.data['ccList'] = [];\nif(_.isUndefined(step.data['bccList'])) step.data['bccList'] = [];\nif(_.isUndefined(step.data['hasDynamicRecipients'])) step.data['hasDynamicRecipients'] = false;\nif(_.isUndefined(step.data['dynamicRecipients'])) step.data['dynamicRecipients'] = \"// [ \\\"recipient@domain.com\\\", \\\"John Doe <john@doe.com>\\\" ]\\t// (all are 'To')\\n   /* or */\\n// [ { type: \\\"to\\\", recipient: \\\"recipient@domain.com\\\" }, { type: \\\"cc\\\", recipient: \\\"John Doe <john@doe.com>\\\" } ]\";\nif(_.isUndefined(step.data['__responseCollapsibleState'])) step.data['__responseCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['timeoutLeng'])) step.data['timeoutLeng'] = {\"input\":\"`1 week`\",\"outputMode\":\"ms\"};\nif(_.isUndefined(step.data['hasOpenEvent'])) step.data['hasOpenEvent'] = false;\nif(_.isUndefined(step.data['hasUrlClickTracking'])) step.data['hasUrlClickTracking'] = false;\nif(_.isUndefined(step.data['handleComplaints'])) step.data['handleComplaints'] = false;\nif(_.isUndefined(step.data['__messageCollapsibleState'])) step.data['__messageCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['subject'])) step.data['subject'] = \"``\";\nif(_.isUndefined(step.data['yourMessage'])) step.data['yourMessage'] = \"``\";\nif(_.isUndefined(step.data['yourMessageHtml'])) step.data['yourMessageHtml'] = \"\";\nif(_.isUndefined(step.data['mode'])) step.data['mode'] = {\"label\":\"Plain text\",\"value\":\"plain\"};\nif(_.isUndefined(step.data['emailTemplateData'])) step.data['emailTemplateData'] = {};\nif(_.isUndefined(step.data['emailTemplateStr'])) step.data['emailTemplateStr'] = \"\";\nif(_.isUndefined(step.data['emailTemplateMergeFieldsStr'])) step.data['emailTemplateMergeFieldsStr'] = \"\";\nif(_.isUndefined(step.data['emailPreviewLink'])) step.data['emailPreviewLink'] = \"\";\nif(_.isUndefined(step.data['wysiwygText'])) step.data['wysiwygText'] = \"\";\nif(_.isUndefined(step.data['wysiwygPlainText'])) step.data['wysiwygPlainText'] = \"\";\nif(_.isUndefined(step.data['isTextOutput'])) step.data['isTextOutput'] = false;\nif(_.isUndefined(step.data['attachments'])) step.data['attachments'] = [];\nif(_.isUndefined(step.data['dynamicAttachments'])) step.data['dynamicAttachments'] = \"// ['https://link/to/file/1.jpg', 'https://link/to/file/2.txt', ...]\\n// or\\n// [{ location: 'https://link/to/file', name: 'my_file.txt' }, ...]\";\nif(_.isUndefined(step.data['hasDynamicAttachments'])) step.data['hasDynamicAttachments'] = false;\nif(_.isUndefined(step.data['useSource'])) step.data['useSource'] = false;\nif(_.isUndefined(step.data['__bounceCollapsibleState'])) step.data['__bounceCollapsibleState'] = {\"isOpen\":true};\nif(_.isUndefined(step.data['bounceHandleType'])) step.data['bounceHandleType'] = \"bounce\";\nif(_.isUndefined(step.data['ignoreOtherBounces'])) step.data['ignoreOtherBounces'] = true;\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{}};\nif(_.isUndefined(step.data['isEmailInheritableStep'])) step.data['isEmailInheritableStep'] = true;\napplyExitsMigration(step, stepTemplate); \napplyExitsMigration(step, stepTemplate); \nstep.data.dynamicExitsArrayStart = stepTemplate.data.dynamicExitsArrayStart; \n",
            "version": "0.0.567"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customMessageId'])) step.data['customMessageId'] = \"\";\n",
            "version": "0.0.639"
          },
          {
            "sample": null,
            "script": "if (step.data.hasOpenEvent || step.data.hasUrlClickTracking) {\n  step.data.useThreads = true;\n}\n",
            "version": "0.0.648"
          },
          {
            "sample": null,
            "script": "const timeoutLegData = _.find(step.data.exits, ['label', 'timeout']);\nconst timeoutLegStepId = _.get(timeoutLegData, 'id');\nconst stepOnTimeoutLeg = _.find(steps, ['id', timeoutLegStepId]);\nconst isTimeoutLegEmpty = _.get(stepOnTimeoutLeg, 'type') === 'empty';\nconst isBounceIgnored = _.get(step.data, 'bounceHandleType') === 'ignore'; \n\nif (step.data.hasOpenEvent || step.data.hasUrlClickTracking || !isTimeoutLegEmpty || !isBounceIgnored) {\n  step.data.useThreads = true;\n}",
            "version": "0.0.652"
          },
          {
            "sample": null,
            "script": "if(_.isObject(step.data.mode)) {\n  if (step.data.mode.value) {\n    step.data.mode = step.data.mode.value\n  } else {\n    step.data.mode = 'plain'\n  }\n}",
            "version": "0.0.667"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['bounceHandleType'])) step.data['bounceHandleType'] = \"bounce\";\n",
            "version": "0.0.668"
          },
          {
            "sample": null,
            "script": "step.data.dynamicAttachments = \"\"",
            "version": "0.0.729"
          },
          {
            "sample": null,
            "script": "if (step.data.useThreads) {\n  step.data.useThreads = false\n}; step.data.exits = _.remove(step.data.exits, (exit) => {\n  return exit.label === 'next' || exit.label === 'error'\n})",
            "version": "0.0.737"
          },
          {
            "script": "step.data.manualEmailConfig = \"this.get('')\"",
            "version": "1.4.1"
          }
        ],
        "modules": [
          {
            "name": "@hapi/joi",
            "version": ""
          },
          {
            "name": "axios",
            "version": ""
          },
          {
            "name": "cheerio",
            "version": ""
          },
          {
            "name": "emailjs",
            "version": "3.8.0"
          },
          {
            "name": "file-type",
            "version": ""
          },
          {
            "name": "html-entities",
            "version": ""
          },
          {
            "name": "html-to-text",
            "version": ""
          },
          {
            "name": "html-validator",
            "version": ""
          },
          {
            "name": "jsdom",
            "version": ""
          },
          {
            "name": "link-check",
            "version": ""
          },
          {
            "name": "mime-types",
            "version": ""
          },
          {
            "name": "moment",
            "version": ""
          },
          {
            "name": "nanoid",
            "version": ""
          },
          {
            "name": "node-fetch",
            "version": ""
          },
          {
            "name": "planer",
            "version": ""
          },
          {
            "name": "striptags",
            "version": ""
          },
          {
            "name": "timestring",
            "version": ""
          },
          {
            "name": "uuid",
            "version": ""
          },
          {
            "name": "html-minifier-terser",
            "version": ""
          }
        ],
        "dateModified": 1650636269444,
        "hooks": {
          "flow-deleted": "const setSelectedIMAPSettings = async (payload) => {\n  const url = $flow.gatewayUrl('email/mail-server/imap-smtp/set-poll-accounts/2.0', $flow.providersAccountId())\n  const updated = axios.post(url, payload)\n    .then(response => {\n      return JSON.parse(response.data.result)\n    })\n    .catch(err => console.error('error', err))\n  return updated\n}\n\nconst main = async () => {\n  try {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepId: step.id,\n        selectedAccounts: []\n      })\n  } catch (error) {\n    console.error('error updating selected imap accounts', error)\n  }\n}\n\nmain()",
          "flow-deactivated": "const setSelectedIMAPSettings = async (payload) => {\n  const url = $flow.gatewayUrl('email/mail-server/imap-smtp/set-poll-accounts/2.0', $flow.providersAccountId())\n  const updated = axios.post(url, payload)\n    .then(response => {\n      return JSON.parse(response.data.result)\n    })\n    .catch(err => console.error('error', err))\n  return updated\n}\n\nconst main = async () => {\n  try {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepId: step.id,\n        selectedAccounts: []\n      })\n  } catch (error) {\n    console.error('error updating selected imap accounts', error)\n  }\n}\n\nmain()",
          "before-activate-flow": "const setSelectedIMAPSettings = async (payload) => {\n  const url = $flow.gatewayUrl('email/mail-server/imap-smtp/set-poll-accounts/2.0', $flow.providersAccountId())\n  const updated = axios.post(url, payload)\n    .then(response => {\n      return JSON.parse(response.data.result)\n    })\n    .catch(err => console.error('error', err))\n  return updated\n}\n\nconst main = async () => {\n  try {\n    if (step.data.emailConfig.type === 'mail-server') {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepLabel: step.label,\n        stepId: step.id,\n        selectedAccounts: [ step.data.emailConfig.id ],\n        flowUrl: `http://studio${env.CLIENT_DOMAIN}/flows/${$flow.botId}/${$flow.id}`,\n      })\n    } else {\n      await setSelectedIMAPSettings({\n        accountId: $flow.accountId,\n        stepLabel: step.label,\n        stepId: step.id,\n        selectedAccounts: [],\n        flowUrl: `http://studio${env.CLIENT_DOMAIN}/flows/${$flow.botId}/${$flow.id}`,\n      })\n    }\n  } catch (error) {\n    console.error('error updating selected imap accounts', error)\n  }\n}\n\nmain()"
        }
      },
      {
        "id": "1683b915-08e7-419c-b4b1-b99cdce7717b",
        "version": "1.4.10",
        "cacheVersion": "449a99f1-f550-4c6d-9819-7a3d1599f402",
        "label": "Create Merge Field Data",
        "icon": "create_data",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "Step allows to declare variables and assign values to them to be used further in the flow.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "let dataOut = {};\nlet parseValue = (elem, force) => {\n  if (force) return _.isString(elem) ? elem : JSON.stringify(elem)\n  if (!_.isEmpty(_.trim(elem)) && _.isFinite(Number(elem))) elem = Number(elem);\n  if (elem === \"true\") elem = true;\n  if (elem === \"false\") elem = false;\n  if (elem === \"null\") elem = null;\n  if (elem === \"undefined\") elem = undefined;\n  return elem;\n}\n\nlet recur = (obj, virtualValue) => {\n  let res;\n  if (_.isArray(obj)) {\n    res = _.map(obj, (elem, key) => {\n      if (_.isArray(elem) || _.isObject(elem)) {\n        return recur(elem, _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)))\n      } else {\n        return parseValue(_.replace(_.replace(elem, /\\\\\\\\/g, \"\\\\\"), /\\\\`/g, '`'), _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)) ? _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)).force : false);\n      }\n    });\n  } else {\n    res = _.mapValues(obj, (elem, key) => {\n      if (_.isArray(elem) || _.isObject(elem)) {\n        return recur(elem, _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)))\n      } else {\n        return parseValue(_.replace(_.replace(elem, /\\\\\\\\/g, \"\\\\\"), /\\\\`/g, '`'), virtualValue ? _.find(virtualValue.value, vitem => _.isEqual(vitem.key, key)).force : false);\n      }\n    })\n  }\n  return res;\n};\n\n\nif (selectedMode === 'Advanced') {\n  _.map(Object.keys(nativeJson), item => {\n    let virtualVal = _.find(virtualJson, vitem => vitem.key === item);\n    if (_.find(virtualJson, vitem => vitem.key === item) && _.find(virtualJson, vitem => vitem.key === item).force) {\n      let val = nativeJson[item];\n      _.set(dataOut, item, _.isString(val) ? val : JSON.stringify(val));\n    } else {\n      let val = nativeJson[item];\n      if (_.isObject(nativeJson[item]) || _.isArray(nativeJson[item])) {\n        _.set(dataOut, item, recur(val, virtualVal));\n      } else {\n        val = _.replace(_.replace(val, /\\\\\\\\/g, \"\\\\\"), /\\\\`/g, '`');\n        if (!_.isEmpty(_.trim(nativeJson[item])) && _.isFinite(Number(nativeJson[item]))) val = Number(nativeJson[item]);\n        if (nativeJson[item] === \"true\") val = true;\n        if (nativeJson[item] === \"false\") val = false;\n        if (nativeJson[item] === \"null\") val = null;\n        if (nativeJson[item] === \"undefined\") val = undefined;\n        _.set(dataOut, item, val);\n      }\n    }\n  });\n} else if (selectedMode === 'Extended') {\n  variables.forEach(item => {\n    if (item.variableName === '') throw new Error(\"Property name can't be empty.\");\n\n    switch (_.get(item, 'valueType')) {\n      case 'string':\n        _.set(dataOut, item.variableName, String(item.variableValue))\n        break\n      case 'number':\n        if (_.isEmpty(item.variableValue) || _.isEmpty(item.variableValue.trim())) {\n          throw new Error(\"Value can't be empty.\")\n        }\n        if (!_.isFinite(_.toNumber(item.variableValue))) {\n          throw new Error(`Incorrect data type was used for ${item.variableName}`)\n        }\n        _.set(dataOut, item.variableName, _.toNumber(item.variableValue))\n        break\n      case 'boolean':\n        if (!_.isBoolean(item.variableValue)) {\n          throw new Error(`Incorrect data type was used for ${item.variableName}`)\n        }\n        _.set(dataOut, item.variableName, item.variableValue)\n        break\n      case 'null':\n        _.set(dataOut, item.variableName, null)\n        break\n      default:\n        _.set(dataOut, item.variableName, item.variableValue)\n        break\n    }\n  });\n\n} else if (selectedMode === 'Simple') {\n  if (valueType === 'code' && typeof simpleData === 'undefined') {\n    throw new Error(\"Value type of merge field data is 'undefined', please enter a valid data type!\");\n  }\n\n  if (valueType === 'number' && (_.isEmpty(simpleData) || _.isEmpty(simpleData.trim()))) throw new Error(\"Value can't be empty.\");\n\n  if ((valueType === 'number' && !_.isFinite(_.toNumber(simpleData))) ||\n    (valueType === 'boolean' && !_.isBoolean(simpleData))) {\n    throw new Error(`Incorrect data type was used for Merge Field`);\n  }\n\n  dataOut = valueType === 'number' ?\n    Number(simpleData) : valueType === 'boolean' ?\n    Boolean(simpleData) : valueType === 'null' ?\n    null : simpleData;\n}\n\nreturn this.exitStep('next', dataOut);",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "jsonE": {},
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "valueType": "string",
          "variables": [],
          "mergeField": "",
          "nativeJson": {},
          "simpleData": "",
          "virtualJson": [],
          "processError": true,
          "selectedMode": "",
          "virtualJsonEditable": []
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "variableName": "value"
        },
        "help": "Step allows to declare one or more variables and assign values to them to be used further in the flow via the *merge field*. The merge field name can be generated automatically from the name of the step or set up manually.\n\n### Create merge field data\nIn order to create data choose one of three modes in the dropdown.\n\n*Simple* mode lets you store a single value in a merge field. The value can be defined manually, using *merge field values* or left empty. *String*, *number*, *boolean* and *null* data types are available in the dropdown, as well as an option to declare more advanced types, like objects and arrays, in code mode. The *value* input will be validated in accordance with to the chosen data type.\n\nUsing *Extended* mode allows creation of multiple variables within one merge field via an *Add merge field property* button and assigning each one a value. At least one property must be defined, and its name should follow these rules:\n- must have a unique name;\n- should start only with a letter;\n- can contain numbers;\n- cannot contain any special characters or spaces;\n- cannot be named as JS reserved words. \n\nThe *value* inputs follow the same rules as in *Simple* mode.\n\n*Advanced* mode allows building a more complex structure of variables and values with help of a JSON editor. Go to full screen mode to be able to make changes. Options to copy and paste created JSON and expand or collapse the created structure are available. Position of the element can be changed using drag controls. Note that elements on the same level can't have empty or identical names and an error message will be displayed in case a user tries to add invalid JSON. If you choose the *Auto* option, the editor will detect the data type automatically.\n\n### Error handling\n\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. the *value* does not match the selected *data type*).\n\n### Reporting events\n\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Release notes\n#### v1.4.2\n- Simple mode was added\n- Advanced mode with JSON Editor was added\n- Added error processing \n- General UI improvements\n- General Bugfixes\n",
        "formBuilder": {
          "stepExits": [
            {
              "id": "3d3d258a-11fa-4bae-a8c7-6e9eab268601",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "b8f42e1e-7821-4967-a3c2-66c8d82ccedf",
              "data": {
                "open": true,
                "header": "Create merge field data",
                "inputs": [
                  {
                    "id": "528d3426-cf02-4e7d-a136-e1bba47eed05",
                    "data": {
                      "data": "{\n  \"selectedMode\": \"Extended\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard  :selectedMode.sync=\"schema.selectedMode\" :schema=\"schema\" :is-new=\"isNew\" :readonly=\"readonly\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-xcbnrtwphuzgfisldyqakjoemv",
                      "componentLogic": "{\n  data() {\n    return {\n      modeList: ['Simple', 'Extended', 'Advanced'],\n    }\n  },\n  \n  watch: {\n    selectedMode() {\n      this.$emit('update:selectedMode', this.selectedMode)\n    }\n  },\n  \n  props : {\n    selectedMode: {\n      type : String,\n      default : 'Extended'\n    },\n    readonly: String,\n    schema: {\n      type: Object,\n      default: {}\n    }\n  },\n  \n  mounted () {\n    this.$emit('update:selectedMode', this.selectedMode || 'Extended')\n  }\n}",
                      "renderCondition": "",
                      "componentTemplate": "<div class=\"header\">\n  <div></div>\n  <or-select\n    class=\"mode-list-select\"\n    :options=\"modeList\"\n    v-model=\"selectedMode\"\n    ref=\"modeListSelect\"\n    :disabled=\"readonly\"\n  ></or-select>\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "a1009716-96b3-4f0c-8e7c-6083884042ee",
                          "mode": "",
                          "title": "No title",
                          "template": "",
                          "variable": "NoVariable"
                        },
                        {
                          "id": "d1761039-d28a-4e7f-9d20-4891420db729",
                          "mode": "",
                          "title": "No title",
                          "template": "",
                          "variable": "NoVariable"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 0;\n  \n  & * {\n    margin: 0;\n  }\n  \n  & > h4 {\n    font-size: 16px;\n    line-height: 22px;\n  }\n}\n\n.ui-select .ui-select__content .ui-select__label .ui-select__display {\n  width: auto;\n  padding: 2px 0 2px 10px;\n  border: 0;\n  background: transparent;\n  color: #a1a5aa;\n  font-weight: 300;\n}\n\n.ui-select__display-value {\n    flex-grow: 0;\n}\n\n.ui-textbox .value .ui-textbox--icon-position-left .has-label {\n  font-weight: bold;\n}\n\n.mode-list-select {\n  margin-top: -44px !important;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "b1a5157d-8ae5-4404-a3f7-b8123d9e4e1e",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "The output data of the step will be stored under this name and can be reused further in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "",
                      "defaultType": "session",
                      "placeholder": "Enter merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "label": "Merge field",
                    "compiled": {},
                    "component": "formDataOut"
                  },
                  {
                    "id": "3b718b92-8358-496a-a1d9-3af282b56137",
                    "data": {
                      "data": "{\n  \"simpleData\": \"\",\n  \"valueType\": \"string\",\n  \"mergeField\":\"\",\n  \"selectedMode\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) { \n    if (_.isArray(data)) { \n      return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n      return `{${_.map(data, (value, key) => `${_.isEmpty(key) ? `\"\"`: key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n    if (_.isEqual(key, 'simpleData')) {\n      return data;\n    }\n    \n    // if ((_.isEqual(key, 'simpleData') || _.isEqual('variableValue', key)) && data.selectedMode === 'Simple') {\n    //   // console.log('data simple:', { data })\n    //   return data;\n    // }\n    \n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  simpleData : {\n    custom(value) {\n      if(this.schema.selectedMode !== 'Simple') return true;\n      \n      let containsMergeField = _.isString(value) && validators.validateExpression(value);\n      \n      if (/await|this/.test(value) && this.schema.valueType === 'number') {\n        return true\n      }\n      \n      if (this.schema.valueType === 'code' && !validators.jsExpression(value)){\n        return false;\n      }\n    \n      if(\n        this.schema.valueType === 'number' && !value.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/) || \n        this.schema.valueType === 'number' && !(value.slice(1,-1) && !_.isEmpty(value.slice(1,-1)) && \n        (containsMergeField || _.isFinite(_.toNumber(value.slice(1,-1)))))\n      ){\n        return false;\n      }\n       \n      return true;\n    }\n  },\n  variableName : {\n     custom(value) {\n        return !_.isEmpty(this.schema.dataOut);\n      }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :isInvalidJSandEmpty.sync=\"schema.isInvalidJSandEmpty\"\n  :mergeField.sync=\"schema.dataOut\"\n  :simpleData.sync=\"schema.simpleData\"\n  :outputExample.sync=\"step.outputExample\"\n  :selectedMode=\"schema.selectedMode\"\n  :merge-fields=\"mergeFields\"\n  :steps.sync=\"steps\"   \n  :step=\"step\"\n  :stepId=\"stepId\"    \n  :schema.sync=\"schema\"   \n  :v=\"$v\"   \n  :readonly=\"readonly\"\n  :isNew=\"isNew\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-enafqigbzxkumjvtcolywdshrp",
                      "componentLogic": "{\n  components: {\n    variableItem: {\n      props: {\n        mergeField: {\n          type: Object,\n          default: ''\n        },\n        variableName: {\n          type: String,\n          default: ''\n        },\n        variableValue: {\n          default: ''\n        },\n        valueType: {\n          type: String,\n          default: 'string'\n        },\n        steps: '',\n        stepId: '',\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        readonly: {\n          type: Boolean,\n          default: false\n        },\n        isNew: Boolean\n      },\n      \n      computed: {\n        invalidValue() {\n          const invalid = (this.valueTypeLocal === 'number' && !this.isValidNumber) || \n            (this.valueTypeLocal === 'code' && !validators.jsExpression(this.variableValueLocal)) ||\n            (this.valueTypeLocal === 'code' && this.variableValueLocal === '')\n            \n          if (invalid) {\n            this.errorText = this.valueTypeLocal === 'number' \n              ? 'Invalid number.' \n              : 'Please enter a valid JS expression.';\n          }\n          \n          if (this.valueTypeLocal === 'number') {\n            this.checkNumber()\n          }\n          \n          return invalid\n        },\n        \n        isNull () {\n          return this.valueTypeLocal === 'null';\n        },\n        \n        isValidNumber () {\n          const checked =  this.checkNumber();\n          \n          let containsMergeField = validators.validateExpression(this.variableValue);\n          \n          return checked || this.variableValue.slice(1,-1) && \n            !_.isEmpty(this.variableValue.slice(1,-1)) && (_.isFinite(_.toNumber(this.variableValue.slice(1,-1))) || containsMergeField) && \n            this.variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/);\n        },\n        \n        variableNameLocal: {\n          get() {\n            return this.variableName;\n          },\n          set(newValue) {\n            this.$emit('update:variableName', newValue);\n            this.validateVariableName(newValue);\n          }\n        },\n        \n        variableValueLocal: {\n          get() {\n            return this.variableValue;\n          },\n          set(newValue) {\n            this.$emit('update:variableValue', newValue.trim ? newValue.trim() : newValue);\n          }\n        },\n        \n        valueTypeLocal: {\n          get() {\n            return this.valueType;\n          },\n          set(newValue) {\n            if (newValue === 'string' || newValue === 'number') {\n              this.variableValueLocal = '``'\n            } else if (newValue === 'boolean') {\n              this.variableValueLocal =  _.isBoolean(this.variableValueLocal) ? this.variableValueLocal : true;\n            } else if (newValue === 'null') {\n              this.variableValueLocal = '`null`';\n            } else if (newValue === 'code') {\n              this.variableValueLocal = ''\n            }\n            \n            this.$emit('update:valueType', newValue);\n          }\n        }\n      },\n      \n      watch: {\n        mergeField(newVal) {\n          this.variableName = newVal.name;\n          this.validateVariableName(newVal.name)\n        },\n        variableName(val) {\n          this.$emit('update:variableName', val)\n        }\n      },\n  \n      data () {\n        return {\n          variableTypeOptions: ['string', 'number', 'boolean', 'null', 'code'],\n          isInvalidVariableName: false,\n          errorText: 'Invalid number.'\n        }  \n      },\n      \n      methods: {\n        checkNumber () {\n          if (/await|this/.test(this.variableValue)) return true\n          \n          this.errorText =  _.isFunction(this.variableValue.slice) && this.variableValue.slice(1,-1).trim() === '' ? 'Value is required.' : 'Invalid number'\n          \n          if (_.isFunction(this.variableValue.slice) && /^\\s+$/.test(this.variableValue.slice(1,-1))) {\n            this.errorText = 'Value is required.'\n          }\n          \n          return false\n        },\n        \n        handleTypeChange (type) {\n          this.valueTypeLocal = type\n          \n          if (type === 'number') this.checkNumber()\n          \n          setTimeout(() => {\n            const showText = _.get(this, '$refs.variableValueInput.showText')\n            if (type === 'code' || (type !== 'code' && !showText)) {\n              this.toggleInputMode()\n            }\n          }, 50)\n        },\n        \n        validateVariableName (varName, isFromEmit = false) {\n          this.isInvalidVariableName = false;\n          \n          let validName = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n\n          if (this.variableName === '') return\n          \n          if (_.isEmpty(_.trim(varName))) {\n            this.errorText = 'Value is required.';\n            this.isInvalidVariableName = true;\n          } else if (!validName.test(varName)) {\n            this.errorText = 'Use valid variable name.';\n            this.isInvalidVariableName = true;\n          }\n          \n          if(!isFromEmit) this.$root.$emit('validateVariable', this._uid);\n        },\n           \n        toggleInputMode () {\n          if(_.get(this, '$refs.variableValueInput.toggleMode')) this.$refs.variableValueInput.toggleMode()\n        }\n      },\n      \n      mounted () {\n        if (this.valueType === 'code') {\n          this.toggleInputMode()\n        }\n        \n        if (this.valueType === 'string' && this.variableValueLocal === '') {\n          this.variableValueLocal = '``'\n        }\n      \n        this.$root.$on('validateVariable', itemId => {\n          if (itemId !== this._uid) this.validateVariableName(this.variableName, true);\n        });\n        \n        if(!this.isNew && _.isEmpty(this.variableName)){\n          this.errorText = 'Value is required.';\n          this.isInvalidVariableName = true;\n        }\n        \n        // if(this.$refs.variableValueInput) this.isTextInput = this.$refs.variableValueInput.displayTextInput;\n        // this.isInvalidVariableName = _.isEmpty(this.variableNameLocal) && !this.isNew;\n      },\n\n      template: `<%= variableItem %>`\n    }\n  },\n  \n  data(){\n    return {\n      variableName: this.mergeField.name || '',\n      variableValue: _.isBoolean(this.simpleData) ? this.simpleData : (this.simpleData || ''),\n      valueType: 'string'\n    }\n  },\n  \n  watch: {\n    variableName() {\n      const mergeField = _.assign(this.mergeField, {name : this.variableName});\n      this.$emit('update:mergeField', mergeField);\n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n      \n      if(currentIndexStep !== -1) {\n        this.steps[currentIndexStep]['outputExample'] = {};\n        \n        this.$emit('update:simpleData', this.variableValue)\n        \n      \n      }\n    },\n    \n    variableValue(v) {\n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n      if(currentIndexStep !== -1) {\n        this.steps[currentIndexStep]['outputExample'] = {};\n        \n        this.$emit('update:simpleData', this.variableValue)\n      }\n    },\n    \n    selectedMode:{\n      handler(newVal){\n        if(_.isEqual(newVal, 'Simple')){\n          this.variableName = this.mergeField.name;\n          const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n          if(currentIndexStep !== -1) {\n            this.steps[currentIndexStep]['outputExample'] = {};\n            this.$emit('update:simpleData', this.variableValue)\n          }\n        }\n      }\n    } \n  },\n  \n  mounted(){\n    if (this.selectedMode !== 'Simple') return \n    \n    this.variableName = this.mergeField.name;\n    const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n    \n    if(currentIndexStep !== -1) {\n      this.steps[currentIndexStep]['outputExample'] = {};\n      this.$emit('update:simpleData', this.variableValue)\n    }\n  },\n    \n  props : {\n    mergeField: {\n      type: String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    outputExample: {\n      type: Object,\n      default () { return {} }\n    },\n    step:Object,\n    simpleData: String,\n    schema:{\n      type: Object,\n      default : () => {} \n    },\n    selectedMode : {\n      type : String,\n      default : 'string'\n    },\n    v: {\n      type: Object,\n      default () {\n        return {\n          schema: {\n            variables: {}\n          }\n        }\n      }\n    },\n    steps: '',\n    stepId: '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    isNew:Boolean\n  }\n}",
                      "renderCondition": "",
                      "componentTemplate": "<div class=\"simple-mode\" v-if=\"selectedMode === 'Simple'\">\n  <variable-item \n    :mergeField.sync=\"mergeField\"\n    :variable-name.sync=\"variableName\"\n    :variable-value.sync=\"variableValue\"\n    :value-type.sync=\"schema.valueType\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    :merge-fields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :isNew=\"isNew\"\n  ></variable-item>\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "91e839ec-d69a-4ca3-a9dc-555fc2ee5885",
                          "mode": "html",
                          "title": "Variable Item",
                          "template": "<div class=\"variable\">\n  <div class=\"variable__value\">\n    <div class=\"select-wrapper\">\n      <div class=\"select-label\">Value</div>\n      <or-select \n        ref=\"valueTypeSelect\"\n        :disabled=\"readonly\"\n        :options=\"variableTypeOptions\"\n        :class=\"[{ valueTypeSelect : valueTypeLocal === 'code' }]\"\n        v-model=\"valueTypeLocal\"\n        @change=\"handleTypeChange\"\n      >\n      </or-select>\n    </div>\n    \n    <or-text-expression\n      v-if=\"valueTypeLocal !== 'boolean'\"\n      ref=\"variableValueInput\"\n      :readonly=\"readonly || isNull\"\n      :error=\"errorText\"\n      :invalid=\"invalidValue\"\n      :steps=\"steps\" \n      :merge-fields=\"mergeFields\"\n      :step-id=\"stepId\"\n      placeholder=\"Enter value\"\n      v-model=\"variableValueLocal\"\n    >\n    </or-text-expression>\n    \n    <or-radio-group \n      v-else\n      :disabled=\"readonly\"\n      :options=\"[true, false]\"\n      v-model=\"variableValueLocal\"\n    >\n    </or-radio-group>\n    \n    <span\n      v-show=\"this.valueType === 'number'\"\n      class=\"value-type-helper\"\n    >\n      Value should match the selected data type.\n    </span>\n  </div>\n</div>",
                          "variable": "variableItem"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".simple-mode {\n  margin-bottom: 30px;\n}\n\n.or-code {\n  min-height: 100%;\n}\n\n.empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n\n.variables-list {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  \n  .or-list-items {\n    width: 100%;\n  }\n  \n  > button.ui-button.ui-button--type-secondary.ui-button--color-primary {\n  \tfont-size: 14px;\n  \tline-height: 14px;\n  }  \n  \n  &.or-list {\n    \n    .list-item {\n      position: relative;\n      padding: 0 36px 0 0;\n      \n      > .remove-button {\n      \tposition: absolute;\n        right: 0;\n        top: 36px;\n      }\n      \n      > .handle {\n        display: none;\n      }\n    }\n    \n    &.single-item {\n      \n      .list-item {\n        padding-left: 0;\n      }\n    }\n  }\n}\n\n.variable {\n  width: 100%;\n  display: flex;\n  .ui-select__content{\n    z-index:3;\n  }\n  &__name {\n    width: 50%;\n    padding-right: 21px;\n    \n    .ui-textbox {\n      &.is-invalid .ui-textbox__feedback-text {\n        visibility: visible;\n      }\n    }\n  }\n  \n  &__value {\n    width: 100%;\n    \n    .input-wrapper {\n      position: relative;\n      \n      &:after {\n        content: '';\n        position: absolute;\n        top: 18px;\n        left: -15px;\n        color: #0F232E;\n        font-size: 14px;\n        transform: translateY(-50%);\n      }\n    }\n    \n    .ui-select {\n      &__dropdown {\n        top: 100%;\n        right: 0;\n        width: auto;\n        min-width: auto;\n      }\n      \n      &__options {\n        min-width: auto;\n      }\n    }\n    \n    .ui-select,\n    .or-text-expression {\n      margin-bottom: 0;  \n    }\n    \n    .or-text-expression.invalid .or-code .ace-wrapper {\n      border-color: #f95d5d;\n    }\n    \n    .ui-select__label {\n    \tdisplay: flex;\n    \tjustify-content: space-between;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n        flex-grow: 0;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n      color: #64b2da !important;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__label-text {\n      white-space: nowrap;\n      font-size: 14px;\n    }\n    \n    .ui-select.has-label .ui-select__dropdown-button {\n      top: 0px;\n      font-size: 20px;\n      margin-top: 2px;\n    }\n    \n    .ui-radio-group {\n      &__label-text {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        font-size: 12px;\n        line-height: 36px;\n        color: rgb(145, 150, 157);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      \n      &__radio {\n        &:not(:first-child) {\n          margin-left: 10px;\n        }\n      }\n      \n      &__radios {\n        position: relative;\n        \n        &:after {\n          content: '';\n          position: absolute;\n          top: 18px;\n          left: -15px;\n          color: #0F232E;\n          font-size: 14px;\n          transform: translateY(-50%);\n        }\n      }\n      \n      &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n      &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n        color: #91969d;\n      }\n    }\n    \n    .ui-radio .ui-radio__label-text {\n      font-size: 14px;\n      line-height: 24px;\n    }\n    \n    .ui-radio-group__radios {\n      display: flex;\n      justify-content: left;\n      height: 36px;\n      font-size: 14px;\n      border-radius: 3px;\n      padding: 7px 10px;\n      background: #f6f6f6;\n    }\n  }\n}\n\n.value-type-helper {\n  display: block;\n  color: rgba(0,0,0,.38);\n  line-height: 1.2;\n  font-size: 12px;\n}\n\n.or-text-expression {\n  position: relative;\n  flex-grow: 1;\n  min-width: 50%;\n  .ui-icon-button.ui-icon-button--type-secondary.ui-icon-button--color-default.ui-icon-button--size-normal.flat.js-mode-btn.active{\n    top:2px;\n    right:26px;\n  }\n    & >.header {\n    position: absolute;\n    height: 36px;\n    width: 100%;\n    min-height: 0;\n    top: -36px;\n    & >button.ui-icon-button.flat.add-variable {\n      visibility: visible;\n      position: absolute;\n      top: 38px;\n      right: 0;\n      z-index: 2;\n    }\n  }\n  \n  .input-wrapper {\n    width: 100%;\n  }\n\n  .js-mode-btn {\n    visibility: hidden;\n    position: absolute;\n    top: -2px;\n    right: 75px;\n    z-index: 2;\n  }\n\n\n  .editable {\n      width: calc(100% - 36px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n  .ace_scroller {\n      width: calc(100% - 72px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n}\n.select-label {\n    color: rgba(0, 0, 0, 0.54);\n    font-size: 12px;\n    line-height: 36px;\n    transform-origin: left;\n    transition: color .1s ease,transform .2s ease;\n}\n.select-wrapper {\n  display: flex;\n  justify-content: space-between;\n}\n\n.valueTypeSelect {\n  margin-right: 30px;\n}\n\n.js-mode-btn {\n  display: none;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "93b7819a-ab60-40a5-a97e-127fd0d69e02",
                    "data": {
                      "data": "{\n  \"variables\": [],\n  \"jsonE\": {},\n  \"selectedMode\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(localData, key) { \n if (_.isArray(localData)) { \n    return `[${_.map(localData, toJson).join(',')}]`;\n    }\n    if (_.isObject(localData)) {\n      return `{${_.map(localData, (value, key) => `${key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n    \n    if(_.isEqual('variableValue',key) && data.selectedMode === 'Extended'){\n      return localData;\n    }\n    return JSON.stringify(localData);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "variables : {\n  custom(value) {\n    if(this.schema.selectedMode !== 'Extended') return true;\n    \n    let validName = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n    \n    let res = true\n    \n    for (let i = 0; i <= value.length - 1; i++) {\n      if (_.isEmpty(value[i].variableName.trim()) || !validName.test(value[i].variableName)) {\n        res = false;\n      } else {\n        for (let j = i + 1; j <= value.length - 1; j++) {\n          if (value[i].variableName === value[j].variableName) {\n            res = false;\n          }\n        }\n      }\n      \n      let containsMergeField = _.isString(value[i].variableValue) && validators.validateExpression(value[i].variableValue);\n      \n      if(\n        ((value[i].valueType === 'number' && !value[i].variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/)) || \n        (value[i].valueType === 'number' && !(value[i].variableValue.slice(1,-1) && !_.isEmpty(value[i].variableValue.slice(1,-1)) && (containsMergeField || _.isFinite(_.toNumber(value[i].variableValue.slice(1,-1)))))) || \n        (value[i].valueType === 'code' && !validators.jsExpression(value[i].variableValue))) && !/await|this/.test(value[i].variableValue)\n      ) {\n        res = false;\n      }\n    }\n    \n    return res;\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<or-wildcard-zpbgnlwiemvxcuoh \n  v-model=\"schema.variables\" \n  :selectedMode=\"schema.selectedMode\"\n  :mergeFieldName.sync=\"schema.dataOut\"\n  :steps.sync=\"steps\"   \n  :stepId=\"stepId\"   \n  :merge-fields=\"mergeFields\"\n  :v=\"$v\"   \n  :readonly=\"readonly\"\n  :isNew=\"isNew\"\n  >\n  \n</or-wildcard-zpbgnlwiemvxcuoh>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zpbgnlwiemvxcuoh",
                      "componentLogic": "{\n  components: {\n    variableItem: {\n      props: {\n        variableNameLable: {\n          type: String,\n          default: ''\n        },\n        variableName: {\n          type: String,\n          default: ''\n        },\n        variableValue: {\n          default: ''\n        },\n        valueType: {\n          type: String,\n          default: 'string'\n        },\n        variables: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        isTextInput: {\n          type: Boolean,\n          default: true\n        },\n        steps: '',\n        stepId: '',\n        mergeFields: {\n          type: Array,\n          default () {\n            return [];\n          }\n        },\n        readonly: {\n          type: Boolean,\n          default: false\n        },\n        isNew:Boolean\n      },\n      \n      computed: {\n        invalidValue(){\n          const invalid = (this.valueTypeLocal === 'number' && !this.isValidNumber) || \n            (this.valueTypeLocal === 'code' && !validators.jsExpression(this.variableValueLocal)) ||\n            (this.valueTypeLocal === 'code' && this.variableValueLocal === '')\n            \n          if (invalid) {\n            this.errorText = this.valueTypeLocal === 'number' \n              ? 'Invalid number.' \n              : 'Please enter a valid JS expression.';\n          }\n          \n          if (this.valueTypeLocal === 'number') {\n            this.checkNumber()\n          }\n          \n          return invalid\n        },\n\n        isNull () {\n          return this.valueTypeLocal === 'null';\n        },\n      \n        isValidNumber(){\n          const checked =  this.checkNumber();\n          \n          let containsMergeField = validators.validateExpression(this.variableValue);\n          \n          return checked || _.isFunction(this.variableValue.slice) && \n            (this.variableValue.slice(1,-1) && !_.isEmpty(this.variableValue.slice(1,-1)) && (_.isFinite(_.toNumber(this.variableValue.slice(1,-1))) || containsMergeField) && \n            this.variableValue.slice(1,-1).trim().match(/[\\+\\-]?\\d+(\\.\\d+)?/));\n        },\n        \n        variableNameLocal: {\n          get() {\n            return this.variableName;\n          },\n          set(newValue) {\n            this.$emit('update:variableName', newValue);\n            this.validateVariableName(newValue);\n          }\n        },\n        variableValueLocal: {\n          get() {\n            return this.variableValue;\n          },\n          set(newValue) {\n            this.$emit('update:variableValue', newValue);\n          }\n        },\n        valueTypeLocal: {\n          get() {\n            return this.valueType;\n          },\n          \n          set(newValue, oldValue) {\n            if (newValue === 'string' || newValue === 'number') {\n              this.variableValueLocal = '``'\n            } else if (newValue === 'boolean') {\n              this.variableValueLocal =  _.isBoolean(this.variableValueLocal) ? this.variableValueLocal : true;\n            } else if (newValue === 'null') {\n              this.variableValueLocal = '`null`';\n            } else if (newValue === 'code') {\n              this.variableValueLocal = ''\n            }\n            \n            this.$emit('update:valueType', newValue);\n          }\n        }\n      },\n  \n      data () {\n        return {\n          variableTypeOptions: ['string', 'number', 'boolean', 'null', 'code'],\n          isInvalidVariableName: false,\n          errorText: 'Invalid number',\n          errorLabelText: 'Property name is required.',\n          isTextInput: true\n        }  \n      },\n      \n      watch: {\n        variables() {\n          this.$root.$emit('validateVariable');\n        },\n        isTextInput: {\n          handler(newVal){\n              this.errorText = newVal ? 'Invalid number': 'Please enter a valid JS expression.';\n          }\n        }\n      },\n      \n      methods: { \n        checkNumber () {\n          if (/await|this/.test(this.variableValue)) return true\n          \n          this.errorText =  _.isFunction(this.variableValue.slice) && this.variableValue.slice(1,-1).trim() === '' ? 'Value is required.' : 'Invalid number'\n          \n          if (_.isFunction(this.variableValue.slice) && /^\\s+$/.test(this.variableValue.slice(1,-1))) {\n            this.errorText = 'Value is required.'\n          }\n          \n          return false\n        },\n        \n        handleTypeChange (type) {\n          this.valueTypeLocal = type\n          \n          if (type === 'number') this.checkNumber()\n          \n          setTimeout(() => {\n            const showText = _.get(this, '$refs.variableValueInput.showText')\n            if (type === 'code' || (type !== 'code' && !showText)) {\n              this.toggleInputMode()\n            }\n          }, 100) // TODO: dirty huck but it works\n        },\n        \n        validateVariableName (varName, isFromEmit = false) {\n          this.isInvalidVariableName = false;\n          let validName = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n\n          if (_.isEmpty(varName.trim())) {\n            this.errorLabelText = 'Property name is required.';\n            this.isInvalidVariableName = true;\n          } else if (!validName.test(varName)) {\n            this.errorLabelText = 'Use valid property name.';\n            this.isInvalidVariableName = true;\n          } else {\n            let variables = _.clone(this.variables);\n            let duplicates = variables.map(item => item.variableName)\n                                    .filter((item, index, arr) => arr.lastIndexOf(item) == index && arr.indexOf(item)!= index);\n\n            if (duplicates.indexOf(varName) > -1) {\n              this.errorLabelText = 'Use another property name.';\n              this.isInvalidVariableName = true;\n            }\n          }\n          \n          if(!isFromEmit) this.$root.$emit('validateVariable', this._uid);\n        },\n        toggleInputMode () {\n          if(_.get(this, '$refs.variableValueInput.toggleMode')) this.$refs.variableValueInput.toggleMode()\n        }\n      },\n      \n      mounted () {\n        if (this.valueType === 'code') {\n          this.toggleInputMode()\n        }\n        \n        if (this.valueType === 'string' && this.variableValueLocal === '') {\n          this.variableValueLocal = '``'\n        }\n        \n        this.$root.$on('validateVariable', itemId => {\n          if (itemId !== this._uid) this.validateVariableName(this.variableName, true);\n        });\n        \n        if(this.$refs.variableValueInput) this.isTextInput = this.$refs.variableValueInput.displayTextInput;\n        this.isInvalidVariableName = _.isEmpty(this.variableNameLocal) && !this.isNew;\n      },\n\n      template: `<%= variableItem %>`\n    }\n  },\n  \n  watch: {\n    variables: {\n      handler (newValue) {\n        if (this.selectedMode === 'Extended') {\n          const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n        \n          if(currentIndexStep !== -1) {\n            const outputExample = {};\n            _.forEach(newValue, item => {\n              _.set(outputExample, `${item.variableName}`, item.variableValue);\n            });\n            this.steps[currentIndexStep]['outputExample'] = outputExample;\n          }\n          this.$emit('input', newValue); \n        }\n      },\n      deep: true\n    },\n    selectedMode:{\n      handler(newVal){\n        if (newVal === 'Extended') {\n          const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n        \n          if(currentIndexStep !== -1) {\n            const outputExample = {};\n            _.forEach(this.variables, item => {\n              _.set(outputExample, `${item.variableName}`, item.variableValue);\n            });\n            this.steps[currentIndexStep]['outputExample'] = outputExample;\n          }\n          this.$emit('input', this.variables); \n      \n        }\n      }\n    } \n  },\n  \n  data () {\n    return {\n      variables: this.value,\n      newVariable () {\n        return {\n          variableName: '',\n          variableValue: '``',\n          valueType: 'string'\n        };\n      }\n    }  \n  },\n  \n  async mounted () {\n    await this.$nextTick();\n    if (this.selectedMode === 'Extended') {\n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n    \n      if(currentIndexStep !== -1) {\n        const outputExample = {};\n        _.forEach(this.variables, item => {\n          _.set(outputExample, `${item.variableName}`, item.variableValue);\n        });\n        this.steps[currentIndexStep]['outputExample'] = outputExample;\n      }\n      this.$emit('input', this.variables); \n          \n      if (this.variables.length === 0 && _.get(this, '$refs.variablesOrList.addItem')) {\n        \n        this.$refs.variablesOrList.addItem();\n      }\n    }\n  },\n  \n  props: {\n    value: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    v: {\n      type: Object,\n      default () {\n        return {\n          schema: {\n            variables: []\n          }\n        }\n      }\n    },\n    selectedMode: '',\n    mergeFieldName: {},\n    steps: '',\n    stepId: '',\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    isNew:Boolean\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div v-show=\"selectedMode === 'Extended'\">\n  <div v-if=\"!variables.length\" class=\"empty-list\">Your variables list is empty.</div>\n  <or-list v-model=\"variables\" \n    ref=\"variablesOrList\"\n    :steps=\"steps\" \n    :step-id=\"stepId\" \n    :merge-fields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :new-item-method=\"newVariable\"\n    :add-button-label=\"'Add merge field property'\"\n    class=\"variables-list\"\n    :can-remove-last-item=\"false\"\n  >\n    <template scope=\"item\">\n      <variable-item :variable-name.sync=\"item.item.variableName\"\n        :variable-value.sync=\"item.item.variableValue\"\n        :value-type.sync=\"item.item.valueType\"\n        :variable-name-lable=\"mergeFieldName\"\n        :variables=\"variables\"\n        :steps=\"item.steps\" \n        :merge-fields=\"mergeFields\"\n        :step-id=\"item.stepId\"\n        :readonly=\"item.readonly\"\n        :isNew=\"isNew\"\n      ></variable-item>\n    </template>\n  </or-list>\n</div>",
                      "wildcardTemplates": [
                        {
                          "id": "daf54781-a236-4880-8a37-38d5dcb62466",
                          "mode": "html",
                          "title": "Variable Item",
                          "template": "<div class=\"variable\">\n  <div class=\"variable__name\">\n    <or-textbox v-model=\"variableNameLocal\"\n      :readonly=\"readonly\"\n      ref=\"testRef\"\n      :disableVariables=\"true\"\n      placeholder=\"enter name\"\n      :invalid=\"isInvalidVariableName\"\n      :error=\"errorLabelText\"\n      class=\"value\"\n      label=\"Property name\"\n      :data-textbox-label=\"variableNameLable.name\"\n    ></or-textbox>\n  </div>\n  <div class=\"variable__value\">\n    <div class=\"select-wrapper\">\n      <div class=\"select-label\">Value</div>\n        <or-select\n          ref=\"valueTypeSelect\"\n          :disabled=\"readonly\"\n          :options=\"variableTypeOptions\"\n          :class=\"[{ valueTypeSelect : valueTypeLocal === 'code' }]\"\n          v-model=\"valueTypeLocal\"\n          @change=\"handleTypeChange\"\n        >\n        </or-select>\n    </div>\n    <or-text-expression \n      v-if=\"valueTypeLocal !== 'boolean'\"\n      ref=\"variableValueInput\"\n      v-model=\"variableValueLocal\"\n      :readonly=\"readonly || isNull\"\n      label=\"\"\n      :error=\"errorText\"\n      :invalid=\"invalidValue\"\n      placeholder=\"Enter value\"\n      :steps=\"steps\" \n      :step-id=\"stepId\"\n      :merge-fields=\"mergeFields\"\n      multiLine\n    >\n    </or-text-expression>\n    <or-radio-group \n      v-else\n      :disabled=\"readonly\"\n      :options=\"[true, false]\"\n      v-model=\"variableValueLocal\"\n    ></or-radio-group>\n    \n    <span \n      v-if=\"this.valueType === 'number'\"\n      class=\"value-type-helper\"\n    >\n      Value should match the selected data type.\n    </span>\n  </div>\n</div>",
                          "variable": "variableItem"
                        },
                        {
                          "id": "afe2d0f3-d67e-4a19-a014-c025a2edf829",
                          "mode": "",
                          "title": "No title",
                          "template": "",
                          "variable": "NoVariable"
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".empty-list {\n  color: #91969D;\t\n  font-size: 12px;\n  line-height: 18px;\n}\n.variables-list.single-item {\n   &.or-list {\n    \n    .list-item {\n      padding: 0px;\n    }\n     \n   }\n}\n.variables-list {\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n  \n  .or-list-items {\n    width: 100%;\n    min-width: 322px;\n  }\n  \n  .ui-button {\n    margin-left: 8px;\n  }\n  \n  > button.ui-button.ui-button--type-secondary.ui-button--color-primary {\n\n  \tfont-size: 14px;\n  \tline-height: 14px;\n  }  \n  \n  &.or-list {\n    \n    .list-item {\n      position: relative;\n      padding: 0 36px 0 0;\n      \n      > .remove-button {\n      \tposition: absolute;\n        right: 0;\n        top: 36px;\n      }\n      \n      > .handle {\n        display: none;\n      }\n    }\n    \n    &.single-item {\n      \n      .list-item {\n        padding-left: 0;\n      }\n    }\n  }\n}\n\n.variable {\n  width: -webkit-fill-available;\n  display: flex;\n  \n  &__name {\n    width: 50%;\n    padding-right: 21px;\n    display: flex;\n    .ui-textbox__content{\n      width: 100%;\n    }\n    .prefix {\n      margin-right: 0;\n    }\n    \n    .value {\n      \n    }\n    \n    .ui-textbox {\n      &.is-invalid .ui-textbox__feedback-text {\n        visibility: visible;\n      }\n    }\n  }\n  \n  &__value {\n    width: 50%;\n    \n    .input-wrapper {\n      position: relative;\n      width:100%;\n      // display:flex;\n      &:after {\n        content: '=';\n        position: absolute;\n        top: 18px;\n        left: -15px;\n        color: #0F232E;\n        font-size: 14px;\n        transform: translateY(-50%);\n      }\n    }\n    \n    .ui-select {\n    \n      &__dropdown {\n        top: 100%;\n        right: 0;\n        width: auto;\n        min-width: auto;\n      }\n      \n      &__options {\n        min-width: auto;\n      }\n    }\n    \n    .ui-select,\n    .or-text-expression {\n      margin-bottom: 0;  \n    }\n    \n    .or-text-expression.invalid .or-code .ace-wrapper {\n      border-color: #f95d5d;\n    }\n    \n    .ui-select__label {\n    \tdisplay: flex;\n    \tjustify-content: space-between;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      width: auto;\n      padding: 2px 0 2px 10px;\n      border: 0;\n      background: transparent;\n      z-index:3;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n        flex-grow: 0;\n    }\n    \n    .ui-select__display-value, .ui-select__dropdown-button {\n      color: #64b2da !important;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__label-text {\n      white-space: nowrap;\n      font-size: 14px;\n    }\n    \n    .ui-select.has-label .ui-select__dropdown-button {\n      top: 0px;\n      font-size: 20px;\n      margin-top: 2px;\n    }\n    \n    .ui-radio-group {\n      &__label-text {\n        display: flex;\n        align-items: center;\n        flex-grow: 1;\n        font-size: 12px;\n        line-height: 36px;\n        color: rgb(145, 150, 157);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n      \n      &__radio {\n        &:not(:first-child) {\n          margin-left: 0px;\n        }\n      }\n      \n      &__radios {\n        position: relative;\n        \n        &:after {\n          content: '=';\n          position: absolute;\n          top: 18px;\n          left: -15px;\n          color: #0F232E;\n          font-size: 14px;\n          transform: translateY(-50%);\n        }\n      }\n      \n      &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n      &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n        color: #91969d;\n      }\n    }\n    \n    \n    .ui-radio-group__radios {\n      display: flex;\n      justify-content: left;\n      height: 36px;\n      font-size: 14px;\n      border-radius: 3px;\n      padding: 7px 10px;\n      background: #f6f6f6;\n    }\n  }\n}\n\n.value-type-helper {\n  display: block;\n  color: rgba(0,0,0,.38);\n  line-height: 1.2;\n  font-size: 12px;\n}\n\n\n.or-text-expression {\n  position: relative;\n  flex-grow: 1;\n  min-width: 50%;\n  .ui-icon-button.ui-icon-button--type-secondary.ui-icon-button--color-default.ui-icon-button--size-normal.flat.js-mode-btn.active{\n    top:2px;\n    right:26px;\n  }\n  \n  .or-editable-wrapper .placeholder {\n    // margin-top:0px;\n    // position:absolute;\n  }\n  .or-code{\n    display: flex;\n    flex-grow: 1;\n    // width: 0px;\n  }\n    & >.header {\n    position: absolute;\n    height: 36px;\n    width: 100%;\n    min-height: 0;\n    top: -36px;\n    & >button.ui-icon-button.flat.add-variable {\n      visibility: visible;\n      position: absolute;\n      top: 38px;\n      right: 0;\n      z-index: 2;\n    }\n  }\n  \n  .input-wrapper {\n    width: 100%;\n  }\n\n  .js-mode-btn {\n    visibility: hidden;\n    position: absolute;\n    top: -2px;\n    right: 75px;\n    z-index: 2;\n  }\n\n\n  .editable {\n      width: calc(100% - 36px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n  .ace_scroller {\n      width: calc(100% - 77px);\n      padding-right: 0;\n      overflow: hidden;\n  }\n}\n.select-label {\n    color: rgba(0, 0, 0, 0.54);\n    font-size: 12px;\n    line-height: 36px;\n    transform-origin: left;\n    transition: color .1s ease,transform .2s ease;\n}\n.select-wrapper {\n  display: flex;\n  justify-content: space-between;\n}\n\n\n\n.ui-textbox {\n    position: relative;\n    width:100%;\n    &:after {\n        position: absolute;\n        content: attr(data-textbox-label);\n        top: 36px;\n        left: 0;\n        max-width:50%;\n        height: 36px;\n        padding: 0 5px 0 12px;\n        color: #91969D;\n        font-size: 14px;\n        line-height: 36px;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        box-sizing: border-box;\n    }\n    &:before {\n        position: absolute;\n        content: \".\";\n        top: 43px;\n        left: calc(50% - 4px);\n        height: 36px;\n        color: #000;\n        font-size: 15px;\n    }\n    .ui-textbox__wr-input-feedback {\n      width:100%;\n    }\n    .ui-textbox__input {\n      padding: 7px 0px 7px 50%;\n    }\n    \n}\n.or-editable-wrapper.single-line{\n  display:flex;\n  flex-grow:1;\n  width:0px;\n}\n\n.valueTypeSelect {\n  margin-right: 30px;\n}\n\n.js-mode-btn {\n  display: none;\n}\n\n.value {\n  &::after {\n    font-weight: bold;\n  }\n}\n"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "05e36001-be78-47d9-ab4a-1f1b56c1078a",
                    "data": {
                      "data": "{\n  \"nativeJson\":{},\n  \"virtualJson\":[],\n  \"virtualJsonEditable\":[]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nlet stringifyExpression = this.$flow.stringifyExpression;\n function toJson(localData, key) { \n if (_.isArray(localData)) { \n    return `[${_.map(localData, toJson).join(',')}]`;\n    }\n    if (_.isObject(localData)) {\n        return `{${_.map(localData, (value, key) => `\"${key}\" : ${toJson(value)}`).join(',')}}`;\n    }\n    \n    if(_.some(stringifyExpression(localData), elem => _.isObject(elem))){\n      return localData;\n    }\n    \n    return JSON.stringify(localData);\n}\nreturn _.mapValues(data, toJson);",
                      "validators": "virtualJson : {\n  custom(value) {\n    if(this.schema.selectedMode !== 'Advanced') return true;\n    let tempObj = {\n      value,\n      type:\"object\"\n    }\n    function isJsonValid(node){\n      let res = true;\n      if(node.type === \"object\"){\n        const checker = _.chain(node.value)\n                    .map('key')\n                    .filter((elem) => !_.isEmpty(_.trim(elem)))\n                    .uniq()\n                    .value()\n                    .length\n        if(checker !== _.get(node, 'value.length', 0)) {\n          res = false;\n        }\n        _.forEach(node.value, n => {\n          res = res && isJsonValid(n);\n        });\n      }\n      if(node.type === \"array\"){\n        _.forEach(node.value, n => {\n          res = res && isJsonValid(n);\n        });\n      }\n      return res;\n    }\n   \n    return isJsonValid(tempObj);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :selectedMode.sync=\"schema.selectedMode\" \n  :schema.sync=\"schema\" \n  :merge-fields=\"mergeFields\" \n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :is-new=\"isNew\" \n  :readonly=\"readonly\"\n  :step=\"step\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-yadtlferwqhvzosunmkgxbjpci",
                      "componentLogic": "{\n  data(){\n    return {\n      localNativeJson: {}\n    }\n  },\n  watch:{\n    localNativeJson:{\n      handler(newVal){\n        this.$emit('update:nativeJson', newVal);\n        this.updateOutputExample(newVal);\n      },\n      deep:true\n    }\n  },\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    step:Object,\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps   : \"\",\n    stepId  : \"\",\n    schema  : ()=>{},\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    selectedMode: \"\"\n  },\n  methods:{\n    updateOutputExample (object) {\n      if(this.selectedMode !== 'Advanced') return \n      \n      const currentIndexStep = _.findIndex(this.steps, item => item.id === this.stepId);\n\n      if(currentIndexStep !== -1 && !_.isEqual(object, this.steps[currentIndexStep]['outputExample'])) {\n        this.steps[currentIndexStep]['outputExample'] = _.cloneDeep(object);\n      }\n    }\n  },\n  mounted(){\n    this.updateOutputExample(this.schema.nativeJson);\n  },\n  updated(){\n    this.updateOutputExample(this.schema.nativeJson);\n  },\n}",
                      "renderCondition": "",
                      "componentTemplate": "<div v-if=\"schema.selectedMode === 'Advanced'\">  \r\n  <or-json-editor\r\n    v-model=\"localNativeJson\"\r\n    :steps=\"steps\"\r\n    :stepId=\"stepId\"\r\n    :merge-fields=\"mergeFields\"\r\n    :schema=\"schema\"\r\n    :readonly=\"readonly\"\r\n  >\r\n  </or-json-editor>\r\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".json-editor {\r\n    height: calc(100% - 92px);\r\n}\r\n\r\n.preview {\r\n  .info.item-value-info {\r\n    min-width: unset;\r\n  }\r\n}\r\n\r\n  .editor__json-editor.ui-modal__body.ui-modal.has-footer {\r\n      max-height: 100vh;\r\n  }"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "disableBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  variableName: 'value'\n}",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "jsonE": {},
                "dataOut": "",
                "jsonData": "",
                "variables": [],
                "nativeJson": {},
                "virtualJson": [],
                "selectedMode": ""
              },
              "rawMode": false,
              "version": "848d7c32-a6f3-4a78-9eee-1806e9f2b5c2",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "3d3d258a-11fa-4bae-a8c7-6e9eab268601",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.selectedMode = 'Extended'",
            "version": "1.0.10"
          },
          {
            "sample": null,
            "script": "step.data.valueType = ''\n",
            "version": "1.4.4"
          },
          {
            "sample": null,
            "script": "step.data.processError = true",
            "version": "1.4.5"
          },
          {
            "sample": null,
            "script": "step.data.valueType = 'string'\nstep.data.processError = true\n",
            "version": "1.4.6"
          },
          {
            "sample": null,
            "script": "if (step.data.processError && !_.find(step.data.exits, ['id', '__error__'])) {\n  step.data.exits.push({\n    \"condition\": \"processError\",\n    \"id\": \"__error__\",\n    \"label\": \"error\"\n  })\n}",
            "version": "1.4.7"
          },
          {
            "script": "if (!_.isEmpty(step.data['selectedMode'])) {\n  step.data['selectedMode'] = step.data['selectedMode'];\n} else if (_.isEmpty(step.data['selectedMode'])) {\n  step.data['selectedMode'] = 'Simple'\n}\n",
            "version": "1.4.10"
          }
        ],
        "dateModified": 1617002812051
      },
      {
        "id": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
        "version": "4.4.27",
        "cacheVersion": "91cfed0d-c1c6-40b3-9670-269e3bd88a7c",
        "label": "Request Response (RWC)",
        "icon": "rwc",
        "iconType": "default",
        "iconUrl": "",
        "shape": "bubble-right",
        "description": "Sends a message to an end user in a specified Rich Web Chat conversation and waits for a response.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Rich Web Chat"
        ],
        "recommended": [],
        "tags": [],
        "template": "const PROVIDER_VERSION = '2020'\nconst PUSH_REPLY_TYPE_TEXT = 'text'\nconst PUSH_RESULT_ERROR = 'error'\nconst STEP_EXIT_NEXT = 'next'\nconst NOTIFICATION_TITLE = 'Onereach.ai Chat'\nconst NOTIFICATION_CTX_TYPE = 'request_response'\n//---------------- report Transcript Event ----------------\nconst report = ({\n  message, \n  medias, \n  transcriptId, \n  previousTranscriptId, \n  botIdentifier, \n  endUserIdentifier,\n  fromType,\n  fromIdentifierType,\n  reportingSettingsKey,\n  fromId,\n  fromIdentifier,\n  toType,\n  toIdentifierType,\n  toIdentifier\n}) => {\n  const reportingObject = {\n    botIdentifier,\n    message,\n    previousTranscriptId,\n    eventId              : transcriptId,\n    channel              : 'RWC',\n    reportingSettingsKey,\n    media                : _.map(medias, fileObj => ({fileUrl: fileObj.location, fileType : 'File'})),\n    fromId               : this.config.flowId,\n    fromType,\n    fromIdentifierType,\n    toType,\n    toIdentifier,\n    toIdentifierType,\n    fromIdentifier\n  };\n\n  this.reporter.reportTranscriptEvent(reportingObject);\n};\n//----------------------------------------------------------\n\nconst mapDataToClient = (inputComponent) => {\n  const componentName = _.trim(inputComponent, '`')\n  const isHasMessage = ['card', 'carousel'].indexOf(componentName) === -1\n  const isHasMedias = ['textFiles'].indexOf(componentName) !== -1\n  let showComponentInMessage = [\n    'schedule',\n    'checkbox', \n    'datepicker', \n    'dropdown', \n    'menu', \n    'radio', \n    'timepicker', \n    'attachments', \n    'geolocation',\n    'slider',\n    'signature',\n    'video'\n  ].indexOf(componentName) !== -1\n  \n  const componentMap = {\n    schedule: {\n      name: 'rwc-scheduler',\n      buttonLabel: scheduleButtonLabel,\n      options: scheduleOptionItems,\n      allowMultiselect: scheduleAllowMultiselect,\n      multiselectQuantity: scheduleMultiselectQuantity,\n      workingHours: workingHours,\n      disableByFunction: scheduleDisableByFunction,\n      disableByMf: scheduleDisableByMf,\n      disableByManually: scheduleDisableByManually,\n      disableFunction: scheduleDisableFunction ? scheduleDisableFunction.toString() : null,\n      disableMf: scheduleDisableMf,\n      disableManual: scheduleDisableManual\n    },\n    record: {\n      name: 'rwc-record',\n      allowedMediaTypes: recordMultimediaOptions\n    },\n    carousel: {\n      name: 'rwc-carousel',\n      options: _.map(carouselOptions, card => {\n        const hasModal = _.get(card, 'hasModal') || false;\n        \n        if(!hasModal)\n          return _.omit(card, ['modalType', 'childWindowType', 'additionalContentLink', 'html', 'showModalButtonInUserResponse'])\n\n        const modalType = _.get(card, 'modalType');\n        const childWindowType = _.get(card, 'childWindowType');\n\n        if(hasModal && modalType === 'child-window' && childWindowType === 'url')\n          return _.omit(card, ['html'])\n        \n        return card;\n      }),\n      hasOtherOption: carouselHasAlternative,\n      submitBtnLabel: carouselSubmitBtnLabel,\n      cancelBtnLabel: carouselCancelBtnLabel,\n      otherOptionData: carouselAlternative,\n      multiple: carouselMultiselect\n    },\n    checkbox: {\n      name: 'rwc-checkbox-group',\n      options: checkboxOptions,\n      defaultValue: checkboxDefault\n    },\n    credit: {\n      name: 'rwc-credit',\n      buttonLabel: creditBtnLabel,\n      cancelButtonLabel: creditCancelBtnLabel,\n      termsCheckboxLabel: creditTermsLabel,\n      termsCheckboxLink: creditTerms\n    },\n    datepicker: {\n      name: 'rwc-datepicker',\n      outFormat: datepickerFormat,\n      startDay: datepickerStartsFrom,\n      isBlockedDates: datepickerBlockDates,\n      isSuggestedDates: datepickerSuggestedDates,\n      blockedOptions: datepickerBlockedOptions,\n      suggestedOptions: datepickerSuggestedOptions,\n      blockedFunction: datepickerBlockedFunc ? datepickerBlockedFunc.toString() : undefined,\n      suggestedFunction: datepickerSuggestedFunc ? datepickerSuggestedFunc.toString() : undefined,\n      blockedMergefield: datepickerBlockedMergefield,\n      suggestedMergefield: datepickerSuggestedMergefield\n    },\n    dropdown: {\n      name: 'rwc-dropdown',\n      options: dropdownOptions,\n      dropdownPlaceholder: dropdownPlaceholder\n    },\n    video: {\n      name: 'rwc-video',\n      startTime: videoStartTime,\n      startTimeTimestring: videoStartTimeTimestring,\n      autoplay: videoAutoplay,\n      button: videoBtnLabel,\n      video: videoSrc,\n      showInThread: videoShowInThread,\n      poster: videoPoster\n    },\n    menu: {\n      name: 'rwc-menu',\n      options: optionListOptions\n    },\n    buttons: {\n      name: 'rwc-buttons-list',\n      options: optionsButtons\n    },\n    slider: {\n      name: 'rwc-slider',\n      min: sliderMin,\n      max: sliderMax,\n      step: sliderStep,\n      unit: sliderUnit,\n      unitPosition: sliderUnitPosition,\n      mode: sliderType,\n      useCustomLabels: sliderUseCustomLabels,\n      labelFunction: sliderCustomFunction ? sliderCustomFunction.toString() : undefined,\n      options: sliderCustomLabels,\n      defaultValue: sliderDefaultValue,\n      defaultValueStart: sliderDefaultStart,\n      defaultValueEnd: sliderDefaultEnd\n    },\n    signature: {\n      name: 'rwc-signature',\n      btnLabel: signatureBtn\n    },\n    radio: {\n      name: 'rwc-radio-group',\n      options: radioOptions,\n      defaultValue: radioDefault\n    },\n    rate: {\n      name: 'rwc-rate',\n      ratePlaceholder: ratePlaceholder,\n      showInput: rateInput,\n      ratingSubmitLabel,\n      ratingDiscardLabel\n    },\n    textFiles: {\n      name: 'or-textbox',\n      placeholder: textPlaceholder,\n      textInputType,\n      textInputCustomPattern\n    },\n    timepicker: {\n      name: 'rwc-timepicker',\n      timeFormat: timepickerFormat\n    },\n    attachments: {\n      name: 'rwc-attachment',\n      isMulti: attachmentsNumber,\n      filesValidation: attachmentsAllowChosen,\n      isPrivate: isPrivateFiles,\n      allowedFileTypes: attachmentsAllowedTypes\n    },\n    geolocation: {\n      name: 'rwc-location',\n      buttonLabel: geolocationBtn,\n      defaultLat: geolocationLat,\n      defaultLng: geolocationLng,\n      useDefault: geolocationSetDefault\n    },\n    custom: {\n      name: 'custom',\n      vars: customVariables,\n      templateType: customTemplateType,\n      hideAfterSubmit: hideCustomComponentAfterSubmit,\n      showBotIcon: showBotIcon,\n      autoSubmit: autoSubmitCustomTemplate,\n      css: customTemplateCompiledCSS,\n      cssWrapperClassName: customTemplateCSSWrapperClassName,\n      scripts: customTempalateScripts,\n      ...(_.trim(customTemplateType, '`') === `vue` && { \n        vueTemplate: customTemplateVueHtmlTemplate,\n        vueScript: customTemplateVueScript\n      }),\n      ...(_.trim(customTemplateType, '`') === `html` && {\n        html: customTemplateHtmlCode,\n        javascript: customTemplateJavaScriptCode,\n      }),\n    }\n  }\n  \n  const answerParams = _.mapValues(componentMap[componentName], (el) => { \n    return el\n  });\n  \n  const answerComponent = {\n    component: componentMap[componentName].name,\n    vBind: answerParams,\n    showComponentInMessage\n  }\n  return { answerComponent, isHasMessage, isHasMedias }\n}\n\nconst timestring = require('timestring');\nconst SEND_DELAY = 100;\nconst UPDATE_CALLBACK = 'UPDATE_CALLBACK';\nconst ALL_MESSAGES_RECEIVED = 'ALL_MESSAGES_RECEIVED';\nconst GET_MESSAGES_FROM_HISTORY = 'GET_MESSAGES_FROM_HISTORY';\nconst uuid = require('uuid');\n\nconst conversation = await rwcContext.resolve();\n\nconst conversationData = await this.mergeFieldsInstance.get({\n  botId: conversation.botId,\n  name: conversation.value.name,\n  type: conversation.type,\n  path: 'rwc_conversation'\n});\n\nif (!conversationData) throw new Error('The conversation is empty. Most possible that invalid conversation selected')\n\nconst {\n  sessionId,\n  callback,\n  chatName,\n  realSessionId,\n  userId,\n  appId,\n  deviceId,\n  accountId\n} = conversationData;\n\nif (accountId) {\n  this.triggers.config({\n    target: accountId\n  })\n}\n\nconst axios = require('axios');\nconst Promise = require('bluebird');\n\n// get last transcript id from MF\nconst lastTranscriptId = await this.mergeFieldsInstance.get({\n  botId: conversation.botId,\n  name: conversation.value.name,\n  type: conversation.type,\n  path: 'rwc_conversation.transcriptId'\n});\n\nconst transcriptRequestId = uuid.v4();\nconst transcriptResponseId = uuid.v4();\n\n// patching conversation transcriptId\nawait this.mergeFieldsInstance.set(\n  {\n    botId: conversation.botId,\n    name: conversation.value.name,\n    type: conversation.type,\n    path: 'rwc_conversation.transcriptId'\n  }, \n  transcriptRequestId\n);\n\nconst sendMessage = async (message) => {\n  if (_.get(message, 'answer.notSendMessage')) return;\n  message.time = Date.now();\n  if (!message.id) {\n    message.id = uuid.v4();\n  }\n  \n  await new Promise(resolve => setTimeout(resolve, SEND_DELAY));\n  await this.eventManager.callbackResolve(callback, message);\n  delete callback.used;\n  await new Promise(resolve => setTimeout(resolve, SEND_DELAY));\n}\n\nconst getUploadUrl = async (pathes) => {\n  const localPathes = pathes\n  const headers = {\n    headers: {\n      Authorization: this.config.authorization,\n      'Content-Type' : 'application/json;charset=UTF-8'\n    }\n  }\n  \n  const urls = []\n  \n  for (let i = 0; i < pathes.length; i += 1) {\n    try {\n      const fileAlreadyExist = await axios.get(`${this.helpers.filesApiUrl}/public/${this.config.accountId}/RWC/${chatName}/${realSessionId}/${localPathes[i].name}`)\n      if (fileAlreadyExist) {\n        localPathes[i].name = localPathes[i].name.replace(/\\.([0-9a-z]+)(?:[\\?#]|$)/i, function(match) {\n          return `__${Date.now()}${match}`\n        });\n      }\n    } catch (e) {}\n  }\n  \n  const isPublic = _.isUndefined(isPrivateFiles) ? true : !isPrivateFiles;\n  \n  \n  for (let i = 0; i < localPathes.length; i += 1) {\n    urls.push(\n      axios.post(`${this.helpers.filesApiUrl}/api/url?isPublic=${isPublic}&accountId=${this.config.accountId}`, {key: `RWC/${chatName}/${realSessionId}/${localPathes[i].name}`, contentType: pathes[i].type, maxFileSize: null}, headers)\n    )\n  }\n  \n  return Promise.all(urls);\n}\n\nconst rwcThreadId = `rwc__${this.session.key}`\n\nif (this.id === 'main') {\n  // .local means subscription relates only to this session\n  // and won't be overwritten by same subscription in the subflow\n  this.triggers.local({\n    name: `chat/return_to_thread/${sessionId}`,\n  }, async ({params}) => {\n    const { answerComponent, isHasMessage, isHasMedias } = mapDataToClient(inputComponent)\n    \n  if (_.trim(inputComponent, '`') === `custom`) {\n    if(_.trim(customTemplateType, '`') === `vue`) {\n      const result = await answerComponent.vBind.vueScript();\n      answerComponent.vBind.vueScript = JSON.stringify(result, function(key, value) {\n        if (typeof value === 'function') {\n          return _.toString(value)\n        } else {\n          return value;\n        }\n      });\n      \n      const showComponentInMessageLocal = _.get(result, 'showComponentInMessage');\n      \n      answerComponent.showComponentInMessage = _.isUndefined(showComponentInMessageLocal) ? showCustomComponentInMessage : showComponentInMessageLocal \n    } else {\n      answerComponent.showComponentInMessage = showCustomComponentInMessage;\n    }\n  }\n  \n  const event = {\n    stepId: savedStepId,\n    id: uuid.v4(),\n    message: isHasMessage ? textMessage : '',\n    medias: isHasMedias ? medias : [],\n    useCustomAnswer,\n    userAnswerFunction: userAnswerFunction ? userAnswerFunction.toString() : null,\n    userAnswerFunctionParams: dataOutput,\n    answerComponent,\n    additionalContent: {\n      additionalContentCardChangeType,\n      additionalHtml,\n      additionalCss,\n      additionalScript: additionalScript ? additionalScript.toString() : '',\n      additionalCardvariables,\n      videoSrc: additionalContentVideo\n    },\n    resended: true\n  }\n  \n  if (autoSuggestion.input) {\n    event.suggestions = _.isEmpty(autoSuggestion.options) ? autoSuggestionOptionsList : autoSuggestion.options\n    event.isSuggestionInput = autoSuggestion.input\n    event.placeholder = textPlaceholder\n    event.suggestionsType = autoSuggestionType\n    event.suggestionsFromMergeField = autoSuggestionOptionsMergeField\n  }\n  \n  // if (answerComponent.component !== 'or-textbox') {\n  //   answerComponent.vBind.allowMask = false\n  // }\n  \n  if (!_.isEmpty(event)) {\n    await sendMessage(event)\n  }\n})\n}\n\nif (this.id === rwcThreadId) {\n  \n  this.triggers.on({\n    name: `ws/chat/${UPDATE_CALLBACK}/${sessionId}`,\n    refresh: true\n  }, async ({params}) => {\n    \n    if (params.callback) {\n      if (this.config.botId === conversation.botId) {\n        await this.mergeFields[conversation.value.name].set(params.callback, 'rwc_conversation.callback')\n      } else {\n        await this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.callback'}, params.callback);\n      }\n      // await this.mergeFields[conversation.value.name].set(params.callback, 'rwc_conversation.callback');\n      return\n    }\n    \n    const resultQueue = await this.emitSync({\n      name : 'rwc/queue_provider',\n      target: this.helpers.providersAccountId,\n      params : {\n        sessionId: params.sessionId,\n        type: 'sync',\n        method: 'get'\n      }\n    })\n    \n    const resultHistory = await this.emitSync({\n      name : 'rwc/history_provider',\n      target: this.helpers.providersAccountId,\n      params : {\n        sessionId: params.sessionId,\n        type: 'sync',\n        method: 'get',\n        lastMessageId: params.lastMessageId\n      }\n    })\n    \n    await this.eventManager.callbackResolve(\n      this.takeCallback(), \n      {\n        status: 'OK', \n        messagesFromQueue: resultQueue,\n        messagesFromHistory: resultHistory\n      })\n  })\n  \n  return this.triggers.otherwise(() => this.exitFlow())\n}\n\nthis.process.newThread(rwcThreadId, thread => {\n  thread.currentStep = this.currentStep\n  thread.local.background = true\n  thread.activate()\n})\n\n  \n  this.triggers.once({\n    name: `ws/chat/response/${sessionId}`,\n    refresh: true\n  }, async ({params}) => {\n    \n    // if (params._eventName === 'rwc_continue_main_thread') {\n    //   return this.exitStep('next', {})\n    // }\n    \n    await sendMessage({\n      answer: params\n    });\n    \n    let medias = params.filePath ? typeof params.filePath === 'string' ? params.filePath : params.filePath.map(el => ({location: el})) : null\n    medias = medias ? medias : params.image ? [{location: params.image}] : []\n    \n    let message = params.message\n    if (params.location) {\n      const arr = [];\n      for (let key in params.location) {\n          if (params.location.hasOwnProperty(key)) {\n              arr.push(key + ':' + params.location[key]);\n          }\n      };\n      message = arr.join(', ');\n    }\n    \n    report({\n      ...params,\n      message,\n      medias,\n      transcriptId         : transcriptResponseId, \n      botIdentifier        : chatName,\n      previousTranscriptId : lastTranscriptId, \n      fromIdentifier       : userId, \n      toIdentifier         : chatName,\n      fromType             : 'Visitor',\n      fromIdentifierType   : 'BrowserFingerprint',\n      reportingSettingsKey : 'responseTranscript',\n      toType               : 'Bot',\n      toIdentifierType     : 'RWCChatId'\n    });\n    \n    // this.mergeFields[conversation.value.name].set(transcriptResponseId, 'rwc_conversation.transcriptId')\n    if (this.config.botId === conversation.botId) {\n      await this.mergeFields[conversation.value.name].set(transcriptResponseId, 'rwc_conversation.transcriptId')\n    } else {\n      await this.mergeFieldsInstance.set({botId: conversation.botId, name: conversation.value.name, type: conversation.type, path: 'rwc_conversation.transcriptId'}, transcriptResponseId);\n    }\n    \n    await this.eventManager.callbackResolve(\n      this.takeCallback(), {\n        received: true\n      })\n   \n      if (params.answerType === 'text-leg') {\n       return this.exitStep('manual response', {\n         userReply: params.message,\n         userText: params.message,\n         requestMessageId: transcriptRequestId,\n         responseMessageId: transcriptResponseId,\n       });\n      }\n      \n      delete params.answerComponent\n      delete params.callback\n      delete params.message\n      \n      rwcContext.set('last', conversation);\n      await rwcContext.save();\n      \n      if (params.leg) {\n        return this.exitStep(params.leg, {\n          ...params,\n          requestMessageId: transcriptRequestId,\n          responseMessageId: transcriptResponseId,\n        })\n      }\n      \n      return this.exitStep('next', {\n        ...params,\n        requestMessageId: transcriptRequestId,\n        responseMessageId: transcriptResponseId,\n      });\n  })\n// }\n\n// wait for request to sign urls\nthis.triggers.once({\n  name: `ws/chat/getSignedUrl/${sessionId}`,\n  refresh: true\n}, async ({params}) => {\n  let signedUrls;\n  try {\n    signedUrls = await getUploadUrl( params );\n    \n    await this.eventManager.callbackResolve(\n    this.takeCallback(), \n    {\n      signedUrls: signedUrls.map(el => el.data)\n    })\n  } catch (e) {\n    await this.eventManager.callbackResolve(\n    this.takeCallback(), \n    {\n      signedUrls: null,\n      status: 'File size is too large' // not really so, need fixes\n    })\n  }\n});\n\nconst errorHandler = async event => {\n  throw new Error(event.params.textMessage)\n};\nthis.triggers.once({\n  name: `ws/chat/response_error/${sessionId}`,\n  refresh: true\n}, errorHandler)\n\nconst sendNotification = async ({ id, message }) => {\n  const target = this.helpers.providersAccountId;\n  let body\n  if (message) {\n    body = message.length > 200 ? message.substring(0, 197) + '...' : message\n  } else {\n    body = ''\n  }\n  \n  this.emitSync({\n    name: `${PROVIDER_VERSION}/app/push/send`,\n    target,\n    params: {\n      appId: appId,\n      accountDeviceId: deviceId,\n      body: body || 'You have a new message',\n      context: {\n        type: NOTIFICATION_CTX_TYPE,\n        messageId: id\n      },\n      title: NOTIFICATION_TITLE,\n      type: PUSH_REPLY_TYPE_TEXT,\n    }\n  })\n  .then(({result}) => {\n    if (_.has(result, PUSH_RESULT_ERROR)) {\n      throw result.error\n    }\n    \n    return this.exitStep(STEP_EXIT_NEXT, {\n      notificationId: result.id\n    })\n  })\n  .catch(e => {\n    this.log.warn(e)\n  })\n}\n\nreturn this.triggers.otherwise(async () => {\n  const { answerComponent, isHasMessage, isHasMedias } = mapDataToClient(inputComponent)\n  \n  if (_.trim(inputComponent, '`') === `custom`) {\n    if(_.trim(customTemplateType, '`') === `vue`) {\n      const result = await answerComponent.vBind.vueScript();\n      answerComponent.vBind.vueScript = JSON.stringify(result, function(key, value) {\n        if (typeof value === 'function') {\n          return _.toString(value)\n        } else {\n          return value;\n        }\n      });\n      \n      const showComponentInMessageLocal = _.get(result, 'showComponentInMessage');\n      \n      answerComponent.showComponentInMessage = _.isUndefined(showComponentInMessageLocal) ? showCustomComponentInMessage : showComponentInMessageLocal \n    } else {\n      answerComponent.showComponentInMessage = showCustomComponentInMessage;\n    }\n  }\n  \n  const event = {\n    stepId: savedStepId,\n    id: uuid.v4(),\n    message: isHasMessage ? textMessage : '',\n    medias: isHasMedias ? medias : [],\n    useCustomAnswer,\n    userAnswerFunction: userAnswerFunction ? userAnswerFunction.toString() : null,\n    userAnswerFunctionParams: dataOutput,\n    answerComponent,\n    additionalContent: {\n      additionalContentCardChangeType,\n      additionalHtml,\n      additionalCss,\n      additionalScript: additionalScript ? additionalScript.toString() : '',\n      additionalCardvariables,\n      videoSrc: additionalContentVideo\n    }\n  }\n  \n  \n  if (autoSuggestion.input) {\n    event.suggestions = _.isEmpty(autoSuggestion.options) ? autoSuggestionOptionsList : autoSuggestion.options\n    event.isSuggestionInput = autoSuggestion.input\n    event.placeholder = textPlaceholder\n    event.suggestionsType = autoSuggestionType\n    event.suggestionsFromMergeField = autoSuggestionOptionsMergeField\n  }\n  \n  // if (answerComponent.component !== 'or-textbox') {\n  //   answerComponent.vBind.allowMask = false\n  // }\n  \n  \n  if (!_.isEmpty(event)) {\n    await sendMessage(event)\n    \n    if (deviceId) {\n      await sendNotification(event)\n    }\n    \n    // add message to queue\n    this.emitAsync({\n      name : 'rwc/queue_provider',\n      target: this.helpers.providersAccountId,\n      params : {\n        sessionId: sessionId,\n        type: 'async',\n        method: 'post',\n        message: {\n          message: textMessage || '',\n          answerComponent,\n          id: event.id,\n          stepId: event.stepId,\n          medias: medias,\n          isSuggestionInput: autoSuggestion.input,\n          placeholder: textPlaceholder,\n          suggestions: autoSuggestion.options,\n          time: Date.now()\n        }\n      }\n    })\n  }\n    \n  report({\n    ...event,\n    medias               : medias || videoSrc,\n    message              : event.message || '',\n    botIdentifier        : chatName,\n    transcriptId         : transcriptRequestId, \n    previousTranscriptId : lastTranscriptId, \n    fromIdentifier       : chatName, \n    toIdentifier         : userId,\n    fromType             : 'Bot',\n    fromIdentifierType   : 'RWCChatId',\n    reportingSettingsKey : 'requestTranscript',\n    toType               : 'Visitor',\n    toIdentifierType     : 'BrowserFingerprint'\n  });\n    \n  this.exitFlow()\n});",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "26a265e2-44a9-4452-ab91-0f6a7c35e88f",
              "label": "manual response",
              "condition": "autoSuggestion.isExtraLeg"
            },
            {
              "id": "55a0101f-854b-44f8-a88e-78c6c4c5f18d",
              "label": "cancel",
              "condition": "hasCancelExit"
            },
            {
              "id": "__timeout__",
              "label": "timeout",
              "condition": "processTimeout"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "medias": [],
          "dataOut": {
            "ttl": 86400000,
            "meta": {
              "type": "rwc-request-response"
            },
            "name": "",
            "type": "session"
          },
          "videoSrc": {},
          "rateInput": true,
          "sliderMax": "``",
          "sliderMin": "``",
          "dataOutput": null,
          "rwcContext": {
            "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
            "output": {
              "selectStyle": "inherited"
            },
            "contextKey": "__rwc_context"
          },
          "sliderStep": "``",
          "sliderType": "single",
          "sliderUnit": "``",
          "creditTerms": {},
          "savedStepId": "",
          "showBotIcon": false,
          "textMessage": "``",
          "videoPoster": {},
          "conversation": {},
          "processError": true,
          "radioDefault": "`No option`",
          "radioOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "signatureBtn": "``",
          "workingHours": {
            "to": null,
            "from": null,
            "timezone": {
              "id": "1",
              "zone": "GMT+00:00"
            },
            "timeFormat": "12"
          },
          "additionalCss": "",
          "textInputType": "text",
          "videoAutoplay": true,
          "videoBtnLabel": "``",
          "videoUsedLink": false,
          "additionalHtml": "",
          "autoSuggestion": {
            "input": true,
            "isExtraLeg": false
          },
          "creditBtnLabel": "``",
          "geolocationBtn": "``",
          "geolocationLat": "``",
          "geolocationLng": "``",
          "inputComponent": "`textFiles`",
          "isPrivateFiles": false,
          "optionsButtons": [
            {
              "label": "``",
              "value": "``",
              "buttonStyle": "default"
            }
          ],
          "processTimeout": true,
          "videoStartTime": "0",
          "carouselOptions": [
            {
              "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
              "image": {},
              "title": "``",
              "value": "``",
              "video": {},
              "hasModal": false,
              "modalType": "default-modal",
              "buttonLabel": "``",
              "buttonStyle": "default",
              "description": "``",
              "childWindowType": "html",
              "additionalContentLink": {},
              "showModalButtonInUserResponse": true
            }
          ],
          "checkboxDefault": [],
          "checkboxOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "customVariables": [],
          "dropdownOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "ratePlaceholder": "``",
          "textPlaceholder": "``",
          "timeoutDuration": "`1h`",
          "useCustomAnswer": false,
          "additionalScript": "",
          "creditTermsLabel": "``",
          "customTemplateId": null,
          "datepickerFormat": "`MM-DD-YYYY`",
          "sliderDefaultEnd": "``",
          "timepickerFormat": "`auto`",
          "attachmentsNumber": "`0`",
          "optionListOptions": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "ratingSubmitLabel": "``",
          "scheduleDisableMf": "this.get('')",
          "videoShowInThread": true,
          "autoSuggestionType": "`emty`",
          "customTemplateType": "`vue`",
          "ratingDiscardLabel": "``",
          "sliderCustomLabels": [
            {
              "label": "``",
              "value": "``"
            },
            {
              "label": "``",
              "value": "``"
            }
          ],
          "sliderDefaultStart": "``",
          "sliderDefaultValue": "``",
          "sliderUnitPosition": "`start`",
          "userAnswerFunction": "return ''",
          "videoTotalDuration": 0,
          "carouselAlternative": {
            "value": "``",
            "buttonLabel": "``",
            "buttonStyle": "default",
            "description": "``"
          },
          "carouselMultiselect": false,
          "dropdownPlaceholder": "``",
          "scheduleButtonLabel": "``",
          "scheduleDisableByMf": false,
          "scheduleOptionItems": [
            {
              "label": "``",
              "value": "``"
            }
          ],
          "creditCancelBtnLabel": "``",
          "datepickerBlockDates": false,
          "datepickerStartsFrom": "`0`",
          "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
          "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
          "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
          "geolocationSetDefault": false,
          "scheduleDisableManual": [],
          "sliderUseCustomLabels": false,
          "additionalContentVideo": [],
          "attachmentsAllowChosen": false,
          "carouselCancelBtnLabel": "``",
          "carouselHasAlternative": false,
          "carouselSubmitBtnLabel": "``",
          "customTempalateScripts": [],
          "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
          "textInputCustomPattern": "``",
          "additionalCardvariables": [],
          "attachmentsAllowedTypes": [],
          "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
          "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
          "recordMultimediaOptions": [
            "`audio`",
            "`video`",
            "`screen`",
            "`file`"
          ],
          "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
          "autoSubmitCustomTemplate": true,
          "datepickerBlockedOptions": [],
          "datepickerSuggestedDates": false,
          "scheduleAllowMultiselect": false,
          "videoStartTimeTimestring": "``",
          "autoSuggestionOptionsList": [
            {
              "text": "``"
            }
          ],
          "customTemplateCompiledCSS": "",
          "scheduleDisableByFunction": false,
          "scheduleDisableByManually": false,
          "datepickerSuggestedOptions": [],
          "datepickerBlockedMergefield": "this.get('')",
          "scheduleMultiselectQuantity": "3",
          "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
          "showCustomComponentInMessage": true,
          "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
          "datepickerSuggestedMergefield": "this.get('')",
          "hideCustomComponentAfterSubmit": false,
          "additionalContentCardChangeType": "`append`",
          "autoSuggestionOptionsMergeField": "this.get('')",
          "customTemplateCSSWrapperClassName": ""
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          },
          "requestTranscript": {
            "tags": [],
            "type": "transcript",
            "label": "Request Transcript",
            "enabled": true
          },
          "responseTranscript": {
            "tags": [],
            "type": "transcript",
            "label": "Response Transcript",
            "enabled": true
          }
        },
        "outputExample": {
          "userReply": "string"
        },
        "help": "Use this step to send a message to an end user in a specified Rich Web Chat conversation and wait for a response. Step works together with the *Wait for Chat (RWC)* step template. When step is reached during flow execution, it sends the message to the chosen conversation and proceeds down the *next* exit after receiving user's reply.\n\n### Message content\nTo create the outgoing message, choose an input component and fill in necessary information. Each component's settings and limits are described in the input component field under the *Info* icon.\n\nThe *preview message* button allows you to see how the user will see the message in the chat.\n\n### Manual user response\nAn option to allow the user manually type their reply instead of choosing a predefined input component is available. Turning it on will add a new *manual response* exit to the tree, and the flow will proceed down that exit if the user chooses to reply with a text message.\n\nNote that for *Text* input component the user is expected to manually type their reply. In this case this option is on by default, and the flow will proceed down the *next* exit.\n\nOption to provide the user with suggestions for his reply is available via selecting type of *Suggested options creation method* and specifying a list of options. These suggestions will appear after the user focuses on the text input field of the chat.\n\n### Conversation\nBy default, the conversation will be inherited from the previous RWC step template on the flow tree. Turn off the respective option to select it manually. First, select the bot name from your OneReach.ai account, and then choose the *conversation* from the respective dropdown that lists the merge field names of available *Wait for Chat (RWC)* step templates in the selected bot. The message will be sent to the chosen conversation.\n\n### Merge field settings\nThe output data of the step will be stored under the name provided in *merge field name*. The content of the output depends on the choice of the input component, as well as on the type of user reply. The structure of the merge field object for each component, as well as for manual user response, is described in the input component field under the *Info* icon.\n\n### Error handling\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step (e.g. if the chosen conversation no longer exists).\n\nBy default, the step will wait for 1 hour to receive a response from the user before proceeding down the *next* exit. The waiting time limits are between 15 seconds and 72 hours, and if no response is received after it ends, the flow will continue through the *timeout* exit. Examples of acceptable time formats: `3m 12s` or `126sec`.\n\n### Reporting events\n\n*Step*, *Request Transcript* and *Response Transcript* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Services dependencies:\n- flow builder - v2.4.0\n- event-manager - v2.0.1\n- deployer - v2.0.0\n\n### Release notes\nv.4.0.0\n- Sends a message to a visitor and waits for an action or a reply. \n- Supports sending files and/or text messages that may contain simple text and/or an input component.\n- Added an option to allow the visitor to reply with a custom text input instead of the predefined component that is handled by the separate exit.\n- Added an option to provide auto-suggestions for the custom text input that can speed up typing for the visitor.\n- Added an option for the flow designer to check the created message content via Preview message button, that opens in a separate tab and reflects step changes in real-time.\n- Step can inherit conversation from gateway step of the current or shared flow.\n- In case of a response time-out, a default user friendly notification is shown in the chat. Alternatively, the flow execution may be continued through the *timeout* exit.\n\nv.4.4.0\n- List of input components was renamed and grouped.\n- Added new input components: Request Rating and feedback, Request Credit Card, Request Signature, Video playback. \n- Merged Card and Card Carousel components into 'Cards' component.\n- Added optional additional info for Select Cards component.\n- Added support of video playback and video poster for Cards.\n- Added option to select single or multiple Cards.\n- Added option to define end-user answer with a JavaScript function instead of predefined component's view.\n- Added option to select button style for Quick reply buttons and Cards.\n- Improved component to select range of values or single point with ability to set default values and custom labels.\n- Added option to store files, received from end-user as private.\n- Improved Request Date component with ability to set blocked and suggested dates.\n- Improved Request Geolocation component with option to set default pin location if in end-user browsers location services are blocked.\n- Improved Request Time component with auto-detected time format, so timepicker is shown according to end-user's browser time format. \n- Improved Custom template component with ability to choose template type and create it with simplified UX.\n- Added option to Custom template to override custom CSS of standard chat components real-time.\n- Added ability to set placeholder to manual user reply.\n- Added list of methods how to set suggested options. \n- Error handling component changed to improved.\n- Added step compatibility with triggering and processing global commands.\n- Added web socket anonymization.\n- Added ability to continue conversation, that is inherited from RWC gateway step.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "e30ec863-9ee8-4aa4-ae77-5b9ce4819194",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "74432918-2455-47e5-9bee-865693e1d2cf",
              "data": {
                "id": "26a265e2-44a9-4452-ab91-0f6a7c35e88f",
                "label": "manual response",
                "condition": "autoSuggestion.isExtraLeg"
              },
              "component": "exitStatic"
            },
            {
              "id": "f8e4fcc5-7e57-4033-9f81-4f2672fec6c6",
              "data": {
                "id": "55a0101f-854b-44f8-a88e-78c6c4c5f18d",
                "label": "cancel",
                "condition": "hasCancelExit"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "1ba3f24d-2656-46fe-a00d-88d52a77c989",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "5eff8357-2db1-4aaa-92ce-8d672ce70dcd",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "3f3dc0e8-302c-447c-a3ae-60e104cd8614",
                    "stepLabel": "Wait for Chat (RWC) 4.2.x",
                    "allowUpdate": true
                  },
                  {
                    "id": "7e0f2b5c-e827-4a00-b18b-6850ec0bff63",
                    "major": "4",
                    "minor": "4",
                    "patch": "",
                    "vforkey": "37b0e329-c470-4a6a-8f04-2e6398a8692e",
                    "stepLabel": "Wait for Chat (RWC) 4.1.x",
                    "allowUpdate": false
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "481de897-5c0f-4447-8034-45a3c89d7314",
              "data": {
                "open": true,
                "header": "Message content",
                "inputs": [
                  {
                    "id": "6968f7c1-1d16-4b40-8c2c-4345e19c0c06",
                    "data": {
                      "icon": "",
                      "label": "Input component",
                      "options": [],
                      "helpText": "",
                      "multiple": false,
                      "variable": "inputComponent",
                      "hasSearch": false,
                      "optionsMode": "dynamic",
                      "placeholder": "Select Field",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<h3>RWC input component settings</h3>\n<p><strong>General description</strong></p>\n<p>The outgoing message, as well as the output of the step, is defined by the selected input component. The character limit some fields are suggested for user-friendly purposes and, if exceeded, will not influence step's execution, unless that is specifically indicated. For some inputs character limit is set and input text might be truncated, so then validation message will be should in step. The way the user sees the message depends on user's device, therefore it is advisable to check it using the <strong>preview message</strong> button for desktop, tablet and mobile devices.</p>\n<p>Most components include a <strong>text message</strong> field. It's settings and limits are described in the respective <em> Info </em> icon of the selected component. </p>\n<p><strong>Input components </strong></p>\n<p>Use components from Select group to ask user to select one or multiple options. Components from Request group will ask for some specific data from end-user. With Other group specific action or data might be requested (with Custom template or Video playback components). Most components include a <strong>text message</strong> field. It's settings and limits are described in the respective <strong>Info </strong>icon of the selected component. </p>\n<p><strong>Select group: </strong></p>\n<p><strong>Cards </strong> </p>\n<p>Multiple cards can be defined via the <em> Add card </em> button. <em> Title </em> and <em> description </em> have the same properties as the <em>text message</em> input of other components, except for the character limit that is fixed and will be truncated if exceeded. <em>Button label </em>limit is also fixed. The <em> card ID </em> input must be unique for each card. Options are available to add video and video poster or only image file from OneReach.ai storage or via an external URL. Button style for each card might be selected,<em> default </em>is suggested by chat style guide.</p>\n<p>To provide the user with an alternative suggestion card, turn on the respective toggle and define <em>description</em>, <em>button label </em>and <em>card ID</em>, that follow the same rules as a regular card.</p>\n<p>For each card option to add additional content is available with respective toddle turn on. Added content might be displayed in modal or in a child window. For modal option, only HTML code can be added to be present as additional content. For child window HTML can be added as a code or added as file from OneReach.ai storage or via an external URL. Optionally, additional content can be shown in submitted end-user's message as well.</p>\n<p>To allow cards multiselect for end-user, turn on the respective toggle and define <em>Submit button label </em>and <em>Cancel button label.</em></p>\n<p>The output of the step will include the <em>chosen</em> by the user card with its title, description, label (all truncated if necessary), as well as card ID. If alternative card was chosen, the <em> title </em> property will be <code> undefined </code> . The structure of the output is:</p>\n<pre><code>{ \n  \"card\": [{ \n    \"title\": \"\", \n    \"description\": \"\", \n    \"label\": \"\",\n    \"additionalContentLink\":\"\" \n    \"cardId\": \"\" \n  }]\n}</code></pre>\n<p><strong> Checkboxes </strong> Multiple checkboxes can be defined via the <em> add checkbox </em> button. The <em> checkbox label </em> field is required and will not be truncated. The <em> checkbox value </em> input must be unique for each checkbox. Option to preselect one or multiple checkboxes is also available. Chosen by the user checkboxes are included in the output. The structure of the output is:</p>\n<pre><code>{ \n  \"checkbox\": [{ \n    \"label\": \"\", \n    \"value\": \"\", \n  }] \n}</code></pre>\n<p><strong> Dropdown option </strong> Multiple options can be defined via the <em> add option </em> button, but only one can be selected by the user. The <em> option label </em> field is required, its input will be truncated if exceeded, but will be added in full to the output. The <em> option value </em> input is also required, must be unique for each option and is included in the output. Option to indicate a placeholder is also available. The structure of the output is:</p>\n<pre><code>{ \n  \"label\": \"\", \n  \"value\": \"\" \n}</code></pre>\n<p><strong> Option from list </strong> Multiple options can be defined via the <em> add option </em> button, but only one can be selected by the user. The <em> option label </em> field is required, its input will be truncated if exceeded, but will be added in full to the output. The <em> option value </em> input must be unique for each option, and is also included in the output. The structure of the output is:</p>\n<pre><code>{\n  \"label\": \"\",\n  \"value\": \"\" \n}</code></pre>\n<p><strong> Quick reply buttons </strong> Multiple buttons can be defined via <em> add button </em> , but only one can be selected by the user. The <em> button label </em> field is required, its input will not be truncated if exceeded and will be added in full to the output. The <em> button value </em> input must be unique for each button, and is also included in the output. Button style for each option might be selected, <em> default </em> is suggested by chat style guide. The structure of the output is:</p>\n<pre><code>{ \n  \"label\": \"\", \n  \"value\": \"\"\n}</code></pre>\n<p><strong> Radio button option </strong> Multiple buttons can be defined via <em> add radio button </em> , but only one can be selected by the user. The <em> radio button label </em> field is required, its input will not be truncated if exceeded and will be added in full to the output. The <em> button value </em> input must be unique for each button, and is also included in the output. Option to preselect a button is also available. The structure of the output is:</p>\n<pre><code>{ \n  \"label\": \"\", \n  \"value\": \"\" \n}</code></pre>\n<p><strong> Range or single point </strong> The slider bar is defined by the <em> min </em> and <em> max </em> values that are expected as numbers with the smaller of the two set as the lower limit. These inputs will be truncated if exceeded, but will be added in full to the output. Depends on component setup <em> default value </em> is required for single point, <em>  <em> default value </em> start </em> and <em> default value end </em> are required for range. The <em> step </em> input defines the size of the slider's movement and is expected as a number with negative value interpreted as positive. The <em> unit </em> value can be added before or after the limit, or left empty. It will be truncated if exceeded, but added in full to the output. Custom labels allows to set text labels at specific value of slider. Advanced option is available shown specific text depends on selected range or point in a real-time. The structure of the output is:</p>\n<pre><code>{\n  \"range\": [0, 100], \n  \"units\": \"F\" \n}</code></pre>\n<h4><strong> Request group: </strong></h4>\n<p><strong> Attachments </strong> Option to allow one or multiple attachments is available.Received attachments are uploaded to your <code> Files </code> storage with public links. To store uploaded files with private links, turn on the respective toggle, so uploaded files won't be accessible to preview ar download in chat. To define specific file types for received attachments, turn the respective toggle on, then choose necessary file types from the dropdown or enter them manually. URLs of uploaded files are added to the output of the step:</p>\n<pre><code>{ \n  \"filePath\": [\"\",\"\"] \n}</code></pre>\n<p><strong> Credit card </strong> The <em> submit button label </em> and <em> cancel button label </em> are required, it's text will be truncated if exceeded. Additional info for Terms and Conditions can be added as simple test or as a hyperlink. Hyperlink text should be wrapped with symbol % and a file should be selected from Files storage or added via URL. For example: `Read %Terms and Conditions%`. When input is selected in step, additional leg is added, so when user cancelled the component submission, the step will proceed by <em> Cancel </em> exit. User's credit card data will be added to the output, it's structure will be:</p>\n<pre><code>{ \n \"cardNumber\":\"\", \n \"expirationDate\":\"\", \n \"cvv\":\"\", \n \"cardHolder\":\"\" \n \"leg\":\"\" \n}</code></pre>\n<p><strong> Date </strong> Options to choose the first day of the week and date format are available. The date chosen by the user is added to the output in selected format. Option to add blocked and suggested dates are available. The structure of the output is:</p>\n<pre><code>{ \n  \"date\": \"08-09-2020\", \n  \"dateText\":\"08 September 2020\", \n  \"dateISO\":\"2021-09-08T10:36:51+03:00\", \n  \"dateUnixMs\":1631086611059 \n}</code></pre>\n<p><strong> Geolocation </strong> The <em> button label </em> is required, its input will be truncated if exceeded. Option to set default location is available with a respective toggle, so end-user will see default location if his browser location services are blocked. User's location coordinates, as well as a screenshot of the map, will be added to the output, its structure will be:</p>\n<pre><code>{ \n  \"location\": { \n    \"lat\": , \n    \"lng\": \n  }, \n  \"image\": \"\" \n}</code></pre>\n<p><strong> Rating and feedback </strong> The <em> submit button label </em> and <em> cancel button label </em> are required, it's text will be truncated if exceeded. By default component will show for end-user input for feedback, that can be hidden by tuning off the respective toggle. User's submitted rating and feedback, will be added to the output, its structure will be:</p>\n<pre><code>{ \n  \"rating\": \"\",\n  \"feedback\": \"\"\n}</code></pre>\n<p><strong> Signature </strong> The <em> button label </em> is required, its input will be truncated if exceeded. Screenshot of user's submitted signature, will be added to the output, its structure will be:</p>\n<pre><code>{ \n  \"image\": \"\" \n}</code></pre>\n<p><strong> Text </strong> The <em> text message </em> settings and limits can be found in the <em> Info </em> icon. There is no limit on the amount or size of attachments. Each attachment will be added to the message in the order from top to bottom. Any file type can be added, and images and <code> .gif </code> files should show a preview.</p>\n<p>To add files from your OneReach.ai storage, click on the respective option, then choose the necessary attachments in the modal window of <code> Files </code> . Note that any operations with data (renaming, deleting, etc.) are done throughout your OneReach.ai account and may affect other flows. To add files using links, click <em> URL </em> and specify it manually or declare it with a merge field.</p>\n<p>Multiple files or links can be chosen via <em> add file </em> button or removed by a click on the bucket icon next to it in the step details panel.</p>\n<p>An option to add a placeholder for user's reply is also available.</p>\n<p>Option to select <em> type of input </em> formatting is available, <em> simple text </em> is selected by default and might be changed. If <em> numeric </em> type of input is selected, end-user will be able to add only numbers. For <em> password </em> type, added text to input will be masked on chat thread, chat history and reporting data. For <em> email </em> type end-user will see At sign on mobile keyboard, but added data won't be not validated if not valid email format is specified. Custom pattern might be selected, it's description is in the <em> Info </em> icon at <em> Pattern </em> input.</p>\n<p>The output of the step will contain user's reply, its structure will be:</p>\n<pre><code>{ \n  \"userReply\": \"\"\n}</code></pre>\n<p><strong> Time </strong> Options to choose 12 or 24 hour format is available. By default aut-detect is selected, so for end-user timepicker will be shown in a format accorsing to browser settings. The output of the step will contain the chosen by the user time in selected format, its structure will be:</p>\n<pre><code>{ \n  \"time\": \"\"\n}</code></pre>\n<h4>Other components:</h4>\n<p><strong> Custom template </strong> Advanced users have an option to create a custom template in code mode using HTML, CSS and JavaScript.Enter the code in the respective box. Template can be saved to <em> Files </em> storage or uploaded. </p>\n<p><strong> Video player </strong> The <em> button label </em> is required, its input will be truncated if exceeded. Video file can be selected from Filed or added via URL, player poster is optional. Client supports HTML5, YouTube, Vimeo players. Video start time defines point, where playback will be started for end-user. Options to <em> autoplay </em> video once it received and to <em> show player </em> <em> in chat when user reply is submitted </em> are selected by default. Once the component submitted, playback won't start automatically in end-user's repsponse. </p>\n<h3>Manual user response</h3>\n<p>For every component except T <em> ext, </em> if toggle <em> Allow manual user response </em> is turned on and the end-user types their response instead of selecting one of the provided choices, the flow will proceed down the <em> manual response </em> exit, and the structure of output will be:</p>\n<pre><code>{\n  \"userReply\": \"string\"\n}</code></pre>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`textFiles`",
                      "dropdownType": "basic",
                      "iconPosition": true,
                      "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                      "allowCodeMode": false,
                      "dynamicOptions": "",
                      "optionsDefault": [],
                      "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [\n  {\n    groupLabel: 'Simple select',\n    items: [\n      {\n        label: 'Cards',\n        icon: 'burst_mode',\n        value: '`carousel`'\n      },\n      {\n        label: 'Checkboxes',\n        icon: 'check_box',\n        value: '`checkbox`'\n      },\n      {\n        label: 'Dropdown option',\n        icon: 'line_weight',\n        value: '`dropdown`'\n      },\n      {\n        label: 'Option from list',\n        icon: 'format_list_bulleted',\n        value: '`menu`'\n      },\n      {\n        label: 'Quick reply button',\n        icon: 'view_stream',\n        value: '`buttons`'\n      },\n      {\n        label: 'Radio button option',\n        icon: 'radio_button_checked',\n        value: '`radio`'\n      },\n      {\n        label: 'Range or single point',\n        icon: 'linear_scale',\n        value: '`slider`'\n      }\n    ]\n  },\n  {\n    groupLabel: 'Request data',\n    items: [\n      {\n        label: 'Attachments',\n        icon: 'attachment',\n        value: '`attachments`'\n      },\n      {\n        label: 'Credit card',\n        icon: 'credit_card',\n        value: '`credit`'\n      },\n      {\n        label: 'Date',\n        icon: 'event',\n        value: '`datepicker`'\n      },\n      {\n        label: 'Geolocation',\n        icon: 'place',\n        value: '`geolocation`'\n      },\n      {\n        label: 'Rating and feedback',\n        icon: 'star',\n        value: '`rate`'\n      },\n      {\n        label: 'Signature',\n        icon: 'gesture',\n        value: '`signature`'\n      },\n      {\n        label: 'Text',\n        icon: 'insert_comment',\n        value: '`textFiles`'\n      },\n      {\n        label: 'Time',\n        icon: 'access_alarms',\n        value: '`timepicker`'\n      },\n    ]\n  },\n  {\n    groupLabel: 'Other',\n    items: [\n      {\n        label: 'Custom template',\n        icon: 'edit',\n        value: '`custom`'\n      },\n      {\n        label: 'Video playback',\n        icon: 'video_library',\n        value: '`video`'\n      }\n    ]\n  }\n];\nmyArr.forEach(el => {\n  el.items = el.items.map(item => {\n    item.label = `<span style=\"display: flex; align-items:center\"><span class=\"material-icons\" style=\"font-size: 20px; color: #91969d; margin-right: 5px;\">${item.icon}</span>${item.label}</span>`\n    return item\n  })\n})\n// for (let i = 0; i < 10; i++) {\n//     myArr.push({ label: `Number ${i}`, value: i });\n// }\nreturn myArr;",
                      "hideOptionTitle": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "mergeFieldsTypes": [
                        "session",
                        "shared",
                        "global"
                      ],
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": "",
                      "extendableOptions": false,
                      "optionsKeysCustom": false,
                      "iconHelpTextOption": "modal",
                      "mergeFieldsIsGroup": true,
                      "allowUseMergeFields": false,
                      "allowOnlyMergeFields": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSelectExpression",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (advanced)",
                    "compiled": {},
                    "component": "formSelectExpression",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelectExpression\"]"
                    ]
                  },
                  {
                    "id": "8e2560bc-11ad-4bfb-bc35-3839a38dc2b2",
                    "data": {
                      "help": "Suggested length is up to 320 chars",
                      "label": "Text message",
                      "variable": "textMessage",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p><strong>Text message</strong><br><br>A text message has no limit on the amount of characters and will not be truncated. However, for user-friendly purposes the suggested limit is 320 characters. The field can be defined manually and using merge fields (click on the <code>{x}</code> icon). Note that using <em>merge field values</em> makes the length of a message unknown.</p><p>You can format the text inserting HTML into the message, for example:</p><pre><code>Look it up on &lt;a href='https://onereach.ai/'&gt; OneReach.ai&lt;/a&gt;!</code></pre><p>will create a link for \"OneReach.ai\".</p><p>To insert an active URL in the text, use <code>http://</code> or <code>https://</code>.</p><p></p>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "320",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4a3145e7-ea43-4bd1-b839-35fb4dedcf14",
                            "ruleType": {
                              "func": "{ return !_.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "doesn't exactly match",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "11ba9646-d225-45c4-8880-d45adee59cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "77738125-4312-488c-9528-b6437bfeb5b3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "modal",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4a3145e7-ea43-4bd1-b839-35fb4dedcf14",
                            "ruleType": {
                              "func": "{ return !_.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "doesn't exactly match",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'card')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "11ba9646-d225-45c4-8880-d45adee59cb7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "77738125-4312-488c-9528-b6437bfeb5b3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "39887fdd-2db1-4427-b13b-e6e2e5832bbd",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Audio",
                          "value": "`audio`",
                          "checked": true,
                          "vforkey": "aa2bf886-c2f7-4118-9b8e-6349f6c5bc9f",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Live video",
                          "value": "`video`",
                          "checked": true,
                          "vforkey": "4f2bab72-f0b9-4307-b6ad-93d5a316e30c",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Screen record",
                          "value": "`screen`",
                          "checked": true,
                          "vforkey": "7b4f488f-d8c5-4682-b0a9-4d68da56e779",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Audio or video file upload",
                          "value": "`file`",
                          "checked": true,
                          "vforkey": "b643008c-7813-4c4b-bbeb-f19133b90ab1",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "recordMultimediaOptions",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [
                        "`audio`",
                        "`video`",
                        "`screen`",
                        "`file`"
                      ],
                      "allowCodeMode": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "57a0d0e2-a25e-4422-9222-835bd1ee9178",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [
                        {
                          "vforkey": "20a83903-6c8c-49f7-aba7-9f5fb095c3f7",
                          "errorMessage": "Multimedia options cannot be empty",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "2d4c4e01-1bc0-4297-b257-f6ad9c04c160",
                                "ruleType": {
                                  "func": "{ return firstValue.length < secondValue.length }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "is shorter than",
                                  "modes": [],
                                  "category": "array"
                                },
                                "codeValue": "``",
                                "valueType": "array",
                                "firstValue": "schema.recordMultimediaOptions",
                                "secondValue": "1",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "57a0d0e2-a25e-4422-9222-835bd1ee9178",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'record')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "546b1168-7680-47f5-9343-84f56eee79a9",
                    "data": {
                      "data": "{\n  \"checkboxOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  checkboxOptions: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`checkbox`') return true\n        return _.trim(obj.label, '`')\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n      notUniqValues (obj) {\n        // if (this.schema.inputComponent !== '`checkbox`') return true\n        return this.schema.checkboxOptions.filter(el => el.value === obj.value).length <= 1\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.checkboxOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bfsjklamrpwounydgcqzxtievh",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      onOptionsChange () {\n        console.log('change')\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.checkboxOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.checkboxOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fdb27d23-b811-4484-a6a8-c892fb32416a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fdb27d23-b811-4484-a6a8-c892fb32416a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n    @data-change=\"onOptionsChange\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Checkbox label ${item.index + 1}`\"\n          removeBubble\n          placeholder=\"E.g. confirm\"\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"400\"\n          help=\"Suggested length is up to 400 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.checkboxOptions.$each[${item.index}].emptyLabel`, v)\"\n          error=\"Checkbox label is required.\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Checkbox value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add checkbox</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fdb27d23-b811-4484-a6a8-c892fb32416a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "daf0ba74-fdfa-4fd4-9093-3f25eca4e479",
                    "data": {
                      "data": "{\n  \"checkboxDefault\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.checkboxDefault\"\n  :inputComponent=\"schema.inputComponent\"\n  :options=\"schema.checkboxOptions\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-zswnekjyvlqrxafcdoumhbgpti",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    watch: {\n      options: {\n        handler(nv, ov) {\n          console.log('new val', nv)\n          console.log('old val', ov)\n          this.populateOptions()\n        },\n        deep: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        options: Array,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      async populateOptions () {\n        await this.$nextTick()\n        if (!this.$refs.selectExpression || !this.options) return\n        \n        // console.log('options', this.$refs.selectExpression.localOptions)\n        // console.log('value', this.$refs.selectExpression.value)\n        // this.$refs.selectExpression.value = this.$refs.selectExpression.value.filter(el => _.trim(el, '``'))\n        this.$refs.selectExpression.localOptions = [];\n        console.log('options', this.options)\n        console.log('value', this.$refs.selectExpression.value)\n        const optionLabels = this.options.map(el => _.trim(el.label, '`'))\n        console.log('optionLabels', optionLabels)\n        const isChosenOptionsNotChanged = this.$refs.selectExpression.value.every(el => {\n          return optionLabels.indexOf(el) !== -1\n        })\n        console.log(isChosenOptionsNotChanged)\n        if (!isChosenOptionsNotChanged) {\n          console.log(213)\n          this.$refs.selectExpression.value = []\n          this.computedValue = []\n        }\n        // if (this.$refs.selectExpression.value.every(el => {el.indexOf()}))\n        // if ()\n        // this.$refs.selectExpression.value = []\n        // if (!this.options) return;\n\n        this.options.map(el => {\n          if (!el || el.label === '``') return;\n          this.$refs.selectExpression.addOption(_.trim(el.label, '`'));\n        })\n        // console.log(this.$refs.selectExpression.localOptions)\n        // this.$refs.selectExpression.localOptions.forEach(el => el.custom = false)\n        // if (this.getValue('answerComponent.vBind.defaultValue') && (typeof this.getValue('answerComponent.vBind.defaultValue') === 'string')) {\n        //   this.$refs.selectExpression.addOption('`No option`');\n        // }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "7314f672-a4bc-43d9-99d9-34849387e4e8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "7314f672-a4bc-43d9-99d9-34849387e4e8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-default-options\">\n  <or-select-expression\n    ref=\"selectExpression\"\n    label=\"Preselected option(s)\"\n    multiple\n    :extendableOptions=\"false\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    placeholder=\"No option is preselected\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    v-model=\"computedValue\"\n    class=\"rwc-default\"\n    @hook:mounted=\"populateOptions\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "7314f672-a4bc-43d9-99d9-34849387e4e8",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'checkbox')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-default-options {\n  .or-select-expression .ui-select__display-selected {\n    background-color: #64b2da;\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-close-button {\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-value .merge-tag {\n    color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "9cf66bfe-5261-43cb-9cf4-20d944f967f9",
                    "data": {
                      "data": "{\n  \"carouselOptions\": [{\n    \"image\": {},\n    \"video\": {},\n    \"title\": \"``\",\n    \"description\": \"``\",\n    \"buttonLabel\": \"``\",\n    \"value\": \"``\",\n    \"hasModal\": false,\n    \"modalType\": \"default-modal\",\n    \"childWindowType\": \"html\",\n    \"additionalContentLink\": {},\n    \"buttonStyle\": \"default\",\n    \"html\": \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\n    \"showModalButtonInUserResponse\": true\n  }]\n}",
                      "toJson": "\n function toJson(data, key) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n  }\n\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n\n    if (/\\$\\{.+?\\}/.test(data)) {\n\n      if(key !== 'html') return data;\n      \n      const regex = /\\$\\{(?:\\{??[^\\[]*?\\})/gm;\n      const str = data;\n      let m;\n      let mergeFields = [];\n      \n      while ((m = regex.exec(str)) !== null) {\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n        m.forEach((match, groupIndex) => {\n            mergeFields.push(match)\n        });\n      }\n      \n      const safeString = data.replaceAll(/\\$\\{(?:\\{??[^\\[]*?\\})/gm, '__$MERGE_FIELD_PLACEHOLDER$__');\n      \n      let replacedBackticks = safeString.replaceAll('`', '&#x60;');\n      \n      \n      _.forEach(mergeFields, mergeField => {\n        replacedBackticks = replacedBackticks.replace('__$MERGE_FIELD_PLACEHOLDER$__', mergeField);\n      })\n    \n      return `\\`${replacedBackticks}\\``;\n    }\n    \n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  carouselOptions: {\n    $each: {\n      longButton (obj) {\n        if (_.trim(obj.buttonLabel, '`').match(/\\$\\{.+?\\}/)) return true;\n        return _.trim(obj.buttonLabel, '`').length <= 24\n      },\n      notFilledHtml (obj) {\n        if(obj.modalType === \"child-window\" && obj.childWindowType === \"url\") \n          return true;\n          \n        return !(obj.hasModal && !_.trim(obj.html, '`'))\n      },\n      notUniqValues (obj) {\n        return this.schema.carouselOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emtyImageFileUrl (obj) {\n        if (obj.image.linkUrl) {\n          return _.trim(obj.image.linkUrl, '`')\n        } else {\n          return true\n        }\n      },\n      emtyVideoFileUrl (obj) {\n        if (obj.video.linkUrl) {\n          return _.trim(obj.video.linkUrl, '`')\n        } else {\n          return true\n        }\n      },\n      emtyAdditionalContentFileData (obj) {\n        if(obj.modalType !== \"child-window\" || obj.childWindowType !== \"url\") \n          return true;\n          \n        return Boolean(_.trim(obj.additionalContentLink.location, \" `'\\\"\") || _.trim(obj.additionalContentLink.linkUrl, \" `'\\\"\"));\n      },\n      emtyAdditionalContentFileUrl (obj) {\n        if(obj.modalType !== \"child-window\" || obj.childWindowType !== \"url\") \n          return true;\n          \n        if (obj.additionalContentLink.linkUrl) {\n          return _.trim(obj.additionalContentLink.linkUrl, '`')\n        } else {\n          return true\n        }\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.carouselOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-msnzxiaogvyphwefjuctqkbldr",
                      "componentLogic": "{\r\n    data () {\r\n      return {\r\n        allowedVideoTypes: ['mov', 'MOV', 'mp4', 'MP4'],\r\n        allowedImageTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\r\n        maxFiles: 1,\r\n        defaultModalContent: \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\"\r\n      }\r\n    },\r\n    computed : {\r\n      modalTypeOptions() {\r\n        return [\r\n          \r\n          { label: `in modal`, value: `default-modal` },\r\n          { label: `in child window`, value: `child-window` }\r\n        ];\r\n      },\r\n      childWindowOptions () {\r\n        return [\r\n          { label: `HTML`, value: `html` },\r\n          { label: `File or URL`, value: `url` }\r\n        ];\r\n      },\r\n      modalTypeAdvancedHelp() {\r\n        return {\r\n          modal: {\r\n            icon: 'info',\r\n            title: 'Help text',\r\n            content: 'If a chat was launched in Onereach.ai Apps, additional content will be viewed in modal window.'\r\n        },\r\n        }\r\n      },\r\n      getButtonsStyle() {\r\n        return [\r\n          {\r\n            label: 'Default',\r\n            value: 'default'\r\n          },\r\n          {\r\n            label: 'Filled',\r\n            value: 'filled'\r\n          },\r\n          {\r\n            label: 'Outlined',\r\n            value: 'outlined'\r\n          },\r\n          {\r\n            label: 'Custom',\r\n            value: 'grayed'\r\n          }]\r\n      },\r\n      authToken () { return this.$settings.token },\r\n      computedValue : {\r\n        get () { return this.value; },\r\n        set (value) { \r\n          this.$emit('input', value); \r\n        }\r\n      }\r\n    },\r\n    props : {\r\n        value : {\r\n            type : String,\r\n            default : ''\r\n        },\r\n        inputComponent: String,\r\n        isNew : Boolean,\r\n        readonly: {\r\n            type : Boolean \r\n        },\r\n        mergeFields: {\r\n            type: Array\r\n        },\r\n        v: Object,\r\n        steps: {\r\n            type: Array,\r\n            default: () => {\r\n                return []\r\n            }\r\n        },\r\n        stepId: {\r\n            type : String,\r\n            default : ''\r\n        }\r\n    },\r\n    methods: {\r\n      getMedia (index) {\r\n        return [this.computedValue[index].image]\r\n      },\r\n      getVideo (index) {\r\n        return [this.computedValue[index].video]\r\n      },\r\n      getAdditionalContentLink (index) {\r\n        return [this.computedValue[index].additionalContentLink]\r\n      },\r\n      setAdditionalContentLink (index, val) {\r\n        this.computedValue[index].additionalContentLink = val[0]\r\n      },\r\n      setMedia (index, val) {\r\n        this.computedValue[index].image = val[0]\r\n      },\r\n      setVideo (index, val) {\r\n        this.computedValue[index].video = val[0]\r\n      },\r\n      getValue (key, val) {\r\n        return _.get(val || this, key)\r\n      },\r\n      addNewItem () {\r\n        this.computedValue.push({\r\n          image: {},\r\n          video: {},\r\n          title: '``', \r\n          description: '``',\r\n          buttonLabel: '``',\r\n          value: '``',\r\n          hasModal: false,\r\n          modalType: `default-modal`,\r\n          childWindowType: `html`,\r\n          additionalContentLink: {},\r\n          buttonStyle: 'default',\r\n          html: this.defaultModalContent,\r\n          showModalButtonInUserResponse: true,\r\n          vforkey: uuid.v4()\r\n        }) \r\n      },\r\n      newItemMethod () {\r\n        return {\r\n          image: {},\r\n          video: {},\r\n          title: '``', \r\n          description: '``',\r\n          buttonLabel: '``',\r\n          value: '``',\r\n          buttonStyle: 'default',\r\n          hasModal: false,\r\n          modalType: `default-modal`,\r\n          childWindowType: `html`,\r\n          additionalContentLink: {},\r\n          html: this.defaultModalContent,\r\n          showModalButtonInUserResponse: true,\r\n          vforkey: uuid.v4()\r\n        }\r\n      },\r\n      openModal (ref) {\r\n        this.$refs[ref].open();\r\n      },\r\n      removeSelectedItem (item) {\r\n        item = {}\r\n      },\r\n      addMedia () {\r\n        this.openModal('select-media');\r\n      },\r\n      addNewUrl () {\r\n        return {\r\n          linkUrl: \"``\",\r\n          vforkey: uuid.v4()\r\n        }\r\n      },\r\n      changeMediaToUrl (index) {\r\n        this.computedValue[index].image = this.addNewUrl();\r\n      },\r\n      changeVideoToUrl (index) {\r\n        this.computedValue[index].video = this.addNewUrl();\r\n      },\r\n      changeAdditionalContentLinkToUrl (index) {\r\n        this.computedValue[index].additionalContentLink = this.addNewUrl();\r\n      },\r\n      additionalContentFileUrlValid(index) {\r\n        const medias = this.computedValue[index].additionalContentLink;\r\n        return !Boolean(_.trim(medias.location, \" `'\\\"\") || _.trim(medias.linkUrl, \" `'\\\"\"));\r\n      },\r\n    }\r\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b0481f2-c629-4c1b-898a-49b2085f45c2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b0481f2-c629-4c1b-898a-49b2085f45c2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-carousel-options\">\r\n  <or-list\r\n    ref=\"list\"\r\n    v-model=\"computedValue\"\r\n    :steps=\"steps\"\r\n    :step-id=\"stepId\"\r\n    :new-item-method=\"newItemMethod\"\r\n    :canRemoveLastItem=\"false\"\r\n    class=\"rwc-carousel-options__list\"\r\n    :readonly=\"readonly\"\r\n  >\r\n    <template slot-scope=\"item\">\r\n      <div class=\"rwc-carousel-options__item\">\r\n        <div class=\"rwc-carousel-options__item-label\">{{ `Card ${item.index + 1}` }}</div>\r\n        \r\n        <div class=\"rwc__media\">\r\n          <or-modal :ref=\"`select-video-${item.index}`\" title=\"Select video\" size=\"large\">\r\n            <or-asset-manager\r\n              v-if=\"!getVideo(item.index).hasOwnProperty('linkUrl')\"\r\n              use-files\r\n              :auth-token=\"authToken\"\r\n              :multi-select=\"false\"\r\n              :max-files=\"maxFiles\"\r\n              :allowed-file-types=\"allowedVideoTypes\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              :allowFilesAndData=\"false\"\r\n              :value=\"getVideo(item.index)\"\r\n              @input=\"val => setVideo(item.index, val)\"\r\n            />\r\n          </or-modal>\r\n          <div v-if=\"item.item.video.name\" class=\"rwc-media__item\">\r\n            <span><b>Video:</b> {{ item.item.video.name }}</span>\r\n            <div class=\"file-controls\">\r\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.video.name && !item.item.video.location && !item.item.video.linkUrl\"></or-progress-circular>\r\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"() => item.item.video = {}\"><or-icon>delete</or-icon></button>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"item.item.video.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\r\n            <or-text-expression\r\n              v-model=\"item.item.video.linkUrl\"\r\n              :mergeFields=\"mergeFields\"\r\n              :steps=\"steps\"\r\n              :step-id=\"stepId\"\r\n              :readonly=\"readonly\"\r\n              label=\"Video URL\"\r\n              placeholder=\"Enter URL to the file\"\r\n              :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].emtyVideoFileUrl`, v)\"\r\n              error=\"Add URL or delete input\"\r\n            />\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"() => item.item.video = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"!(item.item.video.hasOwnProperty('name') || item.item.video.hasOwnProperty('location') || item.item.video.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\r\n            + Add video from\r\n            <or-button\r\n              @click=\"openModal(`select-video-${item.index}`)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              Files\r\n            </or-button>\r\n            or use\r\n            <or-button\r\n              @click=\"changeVideoToUrl(item.index)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              URL\r\n            </or-button>\r\n          </div>\r\n        </div>\r\n        <div class=\"rwc__media\">\r\n          <or-modal :ref=\"`select-media-${item.index}`\" title=\"Select media\" size=\"large\">\r\n            <or-asset-manager\r\n              v-if=\"!getMedia(item.index).hasOwnProperty('linkUrl')\"\r\n              use-files\r\n              :auth-token=\"authToken\"\r\n              :multi-select=\"false\"\r\n              :max-files=\"maxFiles\"\r\n              :allowed-file-types=\"allowedImageTypes\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              :allowFilesAndData=\"false\"\r\n              :value=\"getMedia(item.index)\"\r\n              @input=\"val => setMedia(item.index, val)\"\r\n            />\r\n          </or-modal>\r\n          <div v-if=\"item.item.image.name\" class=\"rwc-media__item\">\r\n            <span><b>{{ item.item.video.linkUrl || item.item.video.name ? `Video poster` : `Image` }}:</b> {{ item.item.image.name }}</span>\r\n            <div class=\"file-controls\">\r\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.image.name && !item.item.image.location && !item.item.image.linkUrl\"></or-progress-circular>\r\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"() => item.item.image = {}\"><or-icon>delete</or-icon></button>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"item.item.image.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\r\n            <or-text-expression\r\n              v-model=\"item.item.image.linkUrl\"\r\n              :mergeFields=\"mergeFields\"\r\n              :steps=\"steps\"\r\n              :step-id=\"stepId\"\r\n              :readonly=\"readonly\"\r\n              :label=\"item.item.video.linkUrl || item.item.video.name ? `Video poster URL` : `Image URL`\"\r\n              placeholder=\"Enter URL to the file\"\r\n              :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].emtyImageFileUrl`, v)\"\r\n              error=\"Add URL or delete input\"\r\n            />\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"() => item.item.image = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"!(item.item.image.hasOwnProperty('name') || item.item.image.hasOwnProperty('location') || item.item.image.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\r\n            + Add {{ item.item.video.linkUrl || item.item.video.name ? `video poster` : `image` }} from\r\n            <or-button\r\n              @click=\"openModal(`select-media-${item.index}`)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              Files\r\n            </or-button>\r\n            or use\r\n            <or-button\r\n              @click=\"changeMediaToUrl(item.index)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly }]\"\r\n              disableRipple\r\n            >\r\n              URL\r\n            </or-button>\r\n          </div>\r\n        </div>\r\n        <or-text-message\r\n          v-model=\"item.item.title\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Title\"\r\n          removeBubble\r\n          help=\"Suggested length is up to 110 chars\"\r\n          disablePopover\r\n          :display-char-counter=\"false\"\r\n          placeholder=\"Add text here\"\r\n        />\r\n        <or-text-message\r\n          v-model=\"item.item.description\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Description\"\r\n          removeBubble\r\n          help=\"Suggested length is up to 180 chars\"\r\n          disablePopover\r\n          :display-char-counter=\"false\"\r\n          placeholder=\"Add text here\"\r\n        />\r\n        <div class=\"flex-row\">\r\n          <or-text-message\r\n          v-model=\"item.item.buttonLabel\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Button label\"\r\n          removeBubble\r\n          counterString=\"%currentCharCount% / %maxCharLength%\"\r\n          :maxCharLength=\"24\"\r\n          disablePopover\r\n          placeholder=\"Add text here\"\r\n          :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].longButton`, v)\"\r\n          :error=\"!getValue(`schema.carouselOptions.$each[${item.index}].longButton`, v) ? 'Limit is exceeded, text will be truncated.' : ''\"\r\n        />\r\n        <or-text-expression\r\n          v-model=\"item.item.value\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :readonly=\"readonly\"\r\n          label=\"Card ID\"\r\n          disablePopover\r\n          placeholder=\"Add Card ID here\"\r\n          :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].notUniqValues`, v)\"\r\n          error=\"Value must be unique.\"\r\n        />\r\n        </div>\r\n        <or-select\r\n          v-model=\"item.item.buttonStyle\"\r\n          :mergeFields=\"mergeFields\"\r\n          :steps=\"steps\"\r\n          :step-id=\"stepId\"\r\n          :disabled=\"readonly\"\r\n          label=\"Button style\"\r\n          disablePopover\r\n          placeholder=\"Select\"\r\n          :options=\"getButtonsStyle\"\r\n        />\r\n        <or-switch v-model=\"item.item.hasModal\" :readonly=\"readonly\" :disabled=\"readonly\">\r\n          Add modal with additional content\r\n        </or-switch>\r\n        <or-switch v-if=\"item.item.hasModal\" v-model=\"item.item.showModalButtonInUserResponse\" :readonly=\"readonly\" :disabled=\"readonly\">\r\n          Show button to view additional content in user answer\r\n        </or-switch>\r\n        <or-radio-group v-if=\"item.item.hasModal\" :options=\"modalTypeOptions\" v-model=\"item.item.modalType\" :advancedHelp=\"modalTypeAdvancedHelp\" :disabled=\"readonly\">\r\n          Select how user will interact with additional content\r\n        </or-radio-group>\r\n        \r\n        <or-radio-group v-if=\"item.item.hasModal && item.item.modalType === `child-window`\" :options=\"childWindowOptions\" v-model=\"item.item.childWindowType\" :disabled=\"readonly\">\r\n          Child window content type\r\n        </or-radio-group>\r\n        \r\n        <or-code\r\n          v-if=\"item.item.hasModal && (item.item.modalType === `default-modal` || (item.item.modalType === `child-window` && item.item.childWindowType === `html`))\"\r\n          :step-id=\"stepId\"\r\n          :steps=\"steps\"\r\n          label=\"HTML code\"\r\n          placeholder=\"Enter HTML here\"\r\n          v-model=\"item.item.html\"\r\n          :mergeFields=\"mergeFields\"\r\n          mode=\"html\"\r\n          :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].notFilledHtml`, v)\"\r\n          error=\"HTML code is required.\"\r\n        />\r\n        \r\n        <div class=\"rwc__media additional-link\" v-if=\"item.item.hasModal && item.item.modalType === `child-window` && item.item.childWindowType === `url`\">\r\n          <or-modal :ref=\"`select-additionalContentLink-${item.index}`\" title=\"Select file\" size=\"large\">\r\n            <or-asset-manager\r\n              v-if=\"!getAdditionalContentLink(item.index).hasOwnProperty('linkUrl')\"\r\n              use-files\r\n              :auth-token=\"authToken\"\r\n              :multi-select=\"false\"\r\n              :max-files=\"maxFiles\"\r\n              :allowed-file-types=\"[]\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              :allowFilesAndData=\"false\"\r\n              :value=\"getAdditionalContentLink(item.index)\"\r\n              @input=\"val => setAdditionalContentLink(item.index, val)\"\r\n            />\r\n          </or-modal>\r\n          <div v-if=\"item.item.additionalContentLink.name\" class=\"rwc-media__item additional-file\">\r\n            <span><b>File URL:</b> {{ item.item.additionalContentLink.name }}</span>\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"() => item.item.additionalContentLink = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"item.item.additionalContentLink.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\r\n            <or-text-expression\r\n              v-model=\"item.item.additionalContentLink.linkUrl\"\r\n              :mergeFields=\"mergeFields\"\r\n              :steps=\"steps\"\r\n              :step-id=\"stepId\"\r\n              :readonly=\"readonly\"\r\n              label=\"File URL\"\r\n              placeholder=\"Enter URL to the file\"\r\n              :invalid=\"!getValue(`schema.carouselOptions.$each[${item.index}].emtyAdditionalContentFileUrl`, v)\"\r\n              error=\"Add URL or delete input\"\r\n            />\r\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"() => item.item.additionalContentLink = {}\"><or-icon>delete</or-icon></button>\r\n          </div>\r\n          <div v-if=\"!(item.item.additionalContentLink.linkUrl || item.item.additionalContentLink.name)\" class=\"rwc-media__buttons\">\r\n            + Add additional content file from\r\n            <or-button\r\n              @click=\"openModal(`select-additionalContentLink-${item.index}`)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly, 'has-error': !isNew && !getValue(`schema.carouselOptions.$each[${item.index}].emtyAdditionalContentFileData`, v) }]\"\r\n              disableRipple\r\n            >\r\n              Files\r\n            </or-button>\r\n            or use\r\n            <or-button\r\n              @click=\"changeAdditionalContentLinkToUrl(item.index)\"\r\n              :disabled=\"readonly\"\r\n              :class=\"['rwc-media__button', { disabled : readonly, 'has-error': !isNew && !getValue(`schema.carouselOptions.$each[${item.index}].emtyAdditionalContentFileData`, v) }]\"\r\n              disableRipple\r\n            >\r\n              URL\r\n            </or-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <div slot=\"footer\">\r\n      <or-button\r\n        :disabled=\"readonly\"\r\n        :class=\"['rwc-carousel-options__add', { disabled : readonly }]\"\r\n        disableRipple\r\n        icon=\"add\"\r\n        @click.stop.prevent=\"addNewItem\">Add card</or-button>\r\n    </div>\r\n  </or-list>\r\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b0481f2-c629-4c1b-898a-49b2085f45c2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n.rwc-carousel-options {\n  \n  .additiona-file {\n    padding: 8px 0;\n  }\n  \n  .ui-select__display {\n    background: #fff;\n  }\n  .remove-bubble .wrapper .message-input {\n    background-color: #fff;\n  }\n  .or-editable-wrapper.single-line {\n    background-color: #fff;\n  }\n  .or-list .list-item>.sortable-handle {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .or-list .list-item>.remove-button {\n    position: absolute;\n    top: -7px;\n    right: 0;\n  }\n  .rwc-carousel-options__item {\n    padding: 0 16px;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    \n    & > * {\n      width: 100%;\n      flex-shrink: 0;\n    }\n    \n    &-label {\n      margin: 0 -16px;\n      margin-bottom: 16px;\n      background-color: #fff;\n      padding-bottom: 8px;\n      font-weight: bold;\n      font-size: 14px;\n      width: calc(100% + 32px);\n    }\n  }\n  \n  .list-item {\n    position: relative;\n    background-color: #f6f6f6;\n    margin-bottom: 16px;\n    padding-top: 0;\n  }\n  \n  .flex-row {\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n  \n  /* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  .additional-link {\n    margin-bottom: 16px;\n  }\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    \n    .or-text-expression {\n      width: calc(100% - 20px);\n    }\n    \n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    padding-right: 0;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "04625cef-9f12-4206-861d-556e2b087b09",
                    "data": {
                      "label": "Allow select multiple",
                      "helpText": "",
                      "variable": "carouselMultiselect",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ce05f3a1-7c32-434b-9b58-e8ca0f4ca621",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ce05f3a1-7c32-434b-9b58-e8ca0f4ca621",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://release.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://release.components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "07e4e173-2121-47fc-b373-ded09f51dc3a",
                    "data": {
                      "label": "Submit button label",
                      "helpText": "",
                      "variable": "carouselSubmitBtnLabel",
                      "multiline": false,
                      "placeholder": "E.g. Submit",
                      "defaultValue": "``",
                      "allowCodeMode": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "48cac8cf-bf76-4d26-b1ee-071b27375a94",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b8fc5754-04fa-4098-ba40-738b0a017e11",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "a8c5b446-87e6-4573-8be1-f59148e82a01",
                          "errorMessage": "Submit button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "d7578748-9185-4c48-95a7-ca9569b9e284",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.carouselSubmitBtnLabel, ' `\"\\'')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "48cac8cf-bf76-4d26-b1ee-071b27375a94",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b8fc5754-04fa-4098-ba40-738b0a017e11",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "6b779e2a-2678-4105-b139-a7a36d55bf4c",
                    "data": {
                      "label": "Cancel button label",
                      "helpText": "",
                      "variable": "carouselCancelBtnLabel",
                      "multiline": false,
                      "placeholder": "E.g. No, thanks",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ef0a70c5-b969-418a-a4c4-92aac334ba17",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "739b5e59-f82d-4a0d-a5de-311a139b49a3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "2d173a70-b26f-46d9-b828-d1978267cfb8",
                          "errorMessage": "Cancel button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a48146f2-b884-4425-828e-146c8f6d66a4",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.carouselCancelBtnLabel, ' `\\'\"')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ef0a70c5-b969-418a-a4c4-92aac334ba17",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselMultiselect",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "739b5e59-f82d-4a0d-a5de-311a139b49a3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "2d23786f-d744-493f-9a60-7e8804617e0b",
                    "data": {
                      "label": "Add alternative suggestion card",
                      "helpText": "",
                      "variable": "carouselHasAlternative",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bca869b4-3ddd-47c7-8a5d-f4d4819baecf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bca869b4-3ddd-47c7-8a5d-f4d4819baecf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "c0042900-e423-4ff9-bf97-eec19fa8dcfc",
                    "data": {
                      "data": "{\n  \"carouselAlternative\": {\n    \"description\": \"``\",\n    \"buttonLabel\": \"``\",\n    \"buttonStyle\": \"default\",\n    \"value\": \"``\"\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  carouselAlternative: {\n    description: {\n      longDesc (value) {\n        if (value.match(/\\$\\{.+?\\}/)) return true;\n        return _.trim(value, '`').length <= 200\n      }\n    },\n    buttonLabel: {\n      longDesc (value) {\n        if (value.match(/\\$\\{.+?\\}/)) return true;\n        return _.trim(value, '`').length <= 24\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.carouselAlternative\"\n  :carouselHasAlternative=\"schema.carouselHasAlternative\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bwsluoedxjmcqptgnfriykvahz",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { \n              this.getValue('schema', this.v)\n              this.$emit('input', value); \n            }\n        },\n        getButtonsStyle() {\n          return [\n          {\n            label: 'Default',\n            value: 'default'\n          },\n          {\n            label: 'Filled',\n            value: 'filled'\n          },\n          {\n            label: 'Outlined',\n            value: 'outlined'\n          },\n          {\n            label: 'Custom',\n            value: 'grayed'\n          }]\n      },\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: Object,\n        isNew : Boolean,\n        carouselHasAlternative: Boolean,\n        inputComponent: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, el) {\n        return _.get(el || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b3b34ff-8306-495a-98a7-c7dca64de041",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselHasAlternative",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "394cc192-da31-42b1-88ee-94b55218059b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b3b34ff-8306-495a-98a7-c7dca64de041",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselHasAlternative",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "394cc192-da31-42b1-88ee-94b55218059b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-alternative\">\n  <or-text-message\n    v-model=\"computedValue.description\"\n    counterString=\"%currentCharCount% / %maxCharLength%\"\n    disablePopover\n    removeBubble\n    :maxCharLength=\"200\"\n    :mergeFields=\"mergeFields\"\n    :steps=\"steps\"\n    :stepId=\"stepId\"\n    label=\"Description\"\n    placeholder=\"E.g. Nothing fits? You can make your own suggestion\"\n    :invalid=\"!getValue(`schema.carouselAlternative.description.longDesc`, v)\"\n    error=\"Limit is exceeded, text will be truncated.\"\n  />\n  <div class=\"rwc-flex\">\n    <or-text-message\n      v-model=\"computedValue.buttonLabel\"\n      counterString=\"%currentCharCount% / %maxCharLength%\"\n      disablePopover\n      removeBubble\n      :maxCharLength=\"24\"\n      label=\"Button label\"\n      placeholder=\"E.g. Show more\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :stepId=\"stepId\"\n      :invalid=\"!getValue(`schema.carouselAlternative.buttonLabel.longDesc`, v)\"\n      error=\"Limit is exceeded, text will be truncated.\"\n    />\n    <or-text-expression\n      v-model=\"computedValue.value\"\n      label=\"Card ID\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :stepId=\"stepId\"\n      placeholder=\"Add value\"\n    />\n  </div>\n  <or-select\n    v-model=\"computedValue.buttonStyle\"\n    :mergeFields=\"mergeFields\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :readonly=\"readonly\"\n    label=\"Button style\"\n    disablePopover\n    placeholder=\"Select\"\n    :options=\"getButtonsStyle\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9b3b34ff-8306-495a-98a7-c7dca64de041",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.carouselHasAlternative",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "394cc192-da31-42b1-88ee-94b55218059b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'carousel')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-alternative {\n  .ui-select__display {\n    background: #fff;\n  }\n  padding: 16px;\n  background-color: #f6f6f6;\n  \n  .rwc-flex {\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  .remove-bubble .wrapper .message-input {\n    background-color: #fff;\n  }\n  \n  .or-editable-wrapper.single-line {\n    background-color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "92ec834b-0817-446d-8453-7efa0baef9a0",
                    "data": {
                      "data": "{ \n  \"customTemplateId\": null\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.customTemplateId\" \n  :customTemplateHtmlCode.sync=\"schema.customTemplateHtmlCode\" \n  :customTemplateJavaScriptCode.sync=\"schema.customTemplateJavaScriptCode\"\n  :customTemplateCSSCode.sync=\"schema.customTemplateCSSCode\"\n  :customTemplateVueHtmlTemplate.sync=\"schema.customTemplateVueHtmlTemplate\"\n  :customTemplateVueScript.sync=\"schema.customTemplateVueScript\"\n  :customTemplateType.sync=\"schema.customTemplateType\"\n  :customVariables.sync=\"schema.customVariables\"\n  :customTempalateScripts.sync=\"schema.customTempalateScripts\"\n  \n  :hideCustomComponentAfterSubmit.sync=\"schema.hideCustomComponentAfterSubmit\"\n  :showCustomComponentInMessage.sync=\"schema.showCustomComponentInMessage\"\n  :autoSubmitCustomTemplate.sync=\"schema.autoSubmitCustomTemplate\"\n  :showBotIcon.sync=\"schema.showBotIcon\"\n  \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-uiazpdtyjflkongbqvsrwmechx",
                      "componentLogic": "{\n    data() {\n      return {\n        loading: false,\n        flatTemplatesList: [],\n        customTemplates: []\n      }\n    },\n    \n    created() {\n      eventHub.$on('lib-templates-list::refresh', this.refreshTemplatesList);\n    },\n    \n    beforeDestroy() {\n      eventHub.$off('lib-templates-list::refresh', this.refreshTemplatesList);\n    },\n    \n    mounted() {\n      this.refreshTemplatesList();\n    },\n  \n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { \n              if(this.value === value) return;\n              \n              this.$emit('input', value); \n              \n              this.setTemplateSources(value);\n              eventHub.$emit('lib-templates-list::selected', _.find(this.flatTemplatesList, { value }));\n            }\n        },\n        canRevertChanges () {\n          if(!this.localValue || _.size(this.flatTemplatesList) === 0) return false;\n          const valueInList = _.find(this.flatTemplatesList, { value: this.value });\n          \n          return Boolean(valueInList);\n        }\n    },\n    \n    \n    methods: {\n    \n      openModal (modalRef) {\n        if(!this.$refs[modalRef]) return;\n          this.$refs[modalRef].open();\n      },\n      \n      closeModal (modalRef) {\n        if(!this.$refs[modalRef]) return;\n        this.$refs[modalRef].close();\n      },\n      \n      async revertTemplateChanges () {\n        if(!this.value) return;\n        \n        await this.setTemplateSources(this.localValue);\n        this.closeModal('confirmRevertModal');\n      },\n      \n      transformTemplatesToGroups(templates) {\n        const groupedObj = _.groupBy(templates, 'type');\n        \n        return _.map(_.toPairs(groupedObj), ([ key, value ]) => ({ groupLabel: key, items: _.orderBy(value, ['label'], ['asc']) }));\n      },\n      \n      async refreshTemplatesList(templateId = null) {\n        this.loading = true;\n        const files = await this.getTemplates();\n        \n        const templates = await this.getTemplatesMeta(files);\n        \n        this.flatTemplatesList = templates;\n        \n        this.customTemplates = this.transformTemplatesToGroups(templates);\n        \n        if(templateId) {\n          this.localValue = templateId;\n        }\n        \n        this.loading = false;\n        eventHub.$emit('lib-templates-list::refresh-finished', this.flatTemplatesList);\n        if(this.localValue) {\n          eventHub.$emit('lib-templates-list::selected', _.find(this.flatTemplatesList, { value: this.localValue })); \n        }\n      },\n      \n      async getTemplates () {\n        return await this.$flow.api.files.ls({ isPublic: true, prefix: 'RWC_custom_templates/' })\n      },\n      \n      async getTemplatesMeta (templateKeys) {\n          const promises = [];\n          const keys = [];\n          \n          _.forEach(templateKeys, ({ key }) => {\n            promises.push(fetch(`${this.$flow.filesApiUrl}/public/${this.$flow.accountId}/${key}meta.json`));\n            keys.push(_.last(_.split(key, '/').slice(0, -1)));\n          });\n          \n          const results = await Promise.all(promises);\n        \n          \n          const data = _.map(results, result => result.json());\n          const templateMetas = await Promise.all(data);\n          \n          return _.map(templateMetas, (meta, index) => ({ value: keys[index], ...meta }));\n          \n      },\n      \n      async setTemplateSources (key) {\n        const templateMeta = _.find(this.flatTemplatesList, ({ value }) => value === key);\n        \n        if(!templateMeta) return;\n        \n        this.updateTemplateType(templateMeta.type);\n        this.updateCustomVars(templateMeta.vars);\n        this.updateScripts(templateMeta.scripts);\n        \n        this.updateControls({ \n          hideCustomComponentAfterSubmit: templateMeta.hideCustomComponentAfterSubmit, \n          showCustomComponentInMessage: templateMeta.showCustomComponentInMessage, \n          autoSubmitCustomTemplate: templateMeta.autoSubmitCustomTemplate, \n          showBotIcon: templateMeta.showBotIcon\n        });\n        \n        \n        if(templateMeta.type === `html`) {\n          const [ html, css, js ] = await this.getHtmlTemplateFiles(key);\n          console.log(html, css, js);\n          this.updateCustomTemplateSources({ html, css, js });\n          return;\n        }\n        \n        if(templateMeta.type === `vue`) {\n          console.log(await this.getVuetemplateFiles(key));\n          let [ vueTemplate, vueScript, css ] = await this.getVuetemplateFiles(key);\n          \n          if(!vueTemplate) vueTemplate = '';\n          if(!css) css = '';\n          \n          this.updateCustomTemplateSources({ vueTemplate, vueScript, css });\n          return;\n        }\n        \n        throw new Error(`Unsupported template type: ${templateMeta.type}`);\n      },\n      \n      updateControls({ hideCustomComponentAfterSubmit = false, showCustomComponentInMessage = true, autoSubmitCustomTemplate = true, showBotIcon = true }) {\n        if(!_.isBoolean(hideCustomComponentAfterSubmit)) {\n          this.$emit('update:hideCustomComponentAfterSubmit', false);\n        } else {\n          this.$emit('update:hideCustomComponentAfterSubmit', hideCustomComponentAfterSubmit);\n        }\n        \n        if(!_.isBoolean(showCustomComponentInMessage)) {\n          this.$emit('update:showCustomComponentInMessage', false);\n        } else {\n          this.$emit('update:showCustomComponentInMessage', showCustomComponentInMessage);\n        }\n        \n        if(!_.isBoolean(autoSubmitCustomTemplate)) {\n          this.$emit('update:autoSubmitCustomTemplate', false);\n        } else {\n          this.$emit('update:autoSubmitCustomTemplate', autoSubmitCustomTemplate);\n        }\n        \n        if(!_.isBoolean(showBotIcon)) {\n          this.$emit('update:showBotIcon', false);\n        } else {\n          this.$emit('update:showBotIcon', showBotIcon);\n        }\n        \n      },\n      \n      async getHtmlTemplateFiles(key) {\n        const link = `${this.$flow.filesApiUrl}/public/${this.$flow.accountId}/RWC_custom_templates/${key}`;\n        this.loading = true;\n        \n        try {\n          const promises = [];\n          promises.push(fetch(`${link}/index.html`));\n          promises.push(fetch(`${link}/index.css`));\n          promises.push(fetch(`${link}/index.js`));\n          \n          const results = await Promise.all(promises);\n        \n          const data = _.map(results, result => result.text());\n          return await Promise.all(data);\n        } finally {\n          this.loading = false; \n        }\n      },\n      \n      async getVuetemplateFiles (key) {\n        const link = `${this.$flow.filesApiUrl}/public/${this.$flow.accountId}/RWC_custom_templates/${key}`;\n        this.loading = true;\n        \n        try {\n          const promises = [];\n          promises.push(fetch(`${link}/index.vue`));\n          promises.push(fetch(`${link}/index.js`));\n          promises.push(fetch(`${link}/index.css`));\n          \n          const results = await Promise.allSettled(promises);\n        \n          const data = [];\n        \n          for(let response of results) {\n              response = response.value();\n              // console.log('response ->', response);\n              if(response.status === 200) {\n                  const responseData = await response.text();\n                  data.push(responseData);\n              } else {\n                  data.push(null);\n              }\n          }\n          \n          return data;\n        } finally {\n          this.loading = false; \n        }\n      },\n      \n      isError (string) {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(string, \"application/xml\");\n        \n        return dom.documentElement.nodeName === `Error`;\n      },\n      \n      updateScripts (scripts) {\n        if(!_.isArray(scripts) || !_.size(scripts)) { \n          this.$emit('update:customTempalateScripts', []);\n          return; \n        }\n        \n        this.$emit('update:customTempalateScripts', scripts);\n      },\n      \n      updateCustomVars (vars) {\n        if(!_.isArray(vars) || !_.size(vars)) {\n          this.$emit('update:customVariables', []);\n          return;\n        }\n        \n        this.$emit('update:customVariables', vars);\n      },\n      \n      updateShowBotIcon(showBotIcon) {\n        this.$emit('update:showBotIcon', showBotIcon);\n      },\n      \n      updateTemplateType (type) {\n        if(!type) throw new Error('Type of template should be present');\n        this.$emit('update:customTemplateType', `\\`${type}\\``);\n      },\n      \n      updateCustomTemplateSources({ html = ``, css = ``, js = ``, vueTemplate = ``, vueScript = `` }) {\n        if(html && !this.isError(html))  { \n          this.$emit('update:customTemplateHtmlCode', html); \n        } else { this.$emit('update:customTemplateHtmlCode', ``) }\n        \n        if(js && !this.isError(js)) {\n          this.$emit('update:customTemplateJavaScriptCode', js); \n        } else { this.$emit('update:customTemplateJavaScriptCode', ``); }\n        \n        if(css && !this.isError(css)) {\n          this.$emit('update:customTemplateCSSCode', css);\n        } else { this.$emit('update:customTemplateCSSCode', ``); }\n        \n        if(vueTemplate && !this.isError(vueTemplate)) {\n          this.$emit('update:customTemplateVueHtmlTemplate', vueTemplate);\n        } else { this.$emit('update:customTemplateVueHtmlTemplate', ``); }\n        \n        if(vueScript && !this.isError(vueScript)) {\n          this.$emit('update:customTemplateVueScript', vueScript);\n        } else { this.$emit('update:customTemplateVueScript', ``); }\n      }\n    },\n    \n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        customTemplateHtmlCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateJavaScriptCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateCSSCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueHtmlTemplate: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueScript: {\n          type: String,\n          default: ``\n        },\n        customTemplateType: {\n          type: String,\n          default: ``\n        },\n        customVariables: {\n          type: Array,\n          default: () => ([])\n        },\n        customTempalateScripts: {\n          type: Array,\n          default: () => ([])\n        },\n        hideCustomComponentAfterSubmit: {\n          type: Boolean,\n          default: false\n        },\n        showCustomComponentInMessage: {\n          type: Boolean,\n          default: true\n        },\n        autoSubmitCustomTemplate: {\n          type: Boolean,\n          default: true\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "01f24406-73ce-4253-88c3-8ca9e1e7242e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "01f24406-73ce-4253-88c3-8ca9e1e7242e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"template-chooser\">\n  <div class=\"dropdown\">\n    <or-select-expression\n      :disabled=\"loading\"\n      v-model=\"localValue\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Custom template\"\n      placeholder=\"Select custom template\"\n      :options=\"customTemplates\"\n      hasSearch\n      :has-groups=\"true\"\n    >\n      <div slot=\"no-results\">No saved templates in this account</div>\n    </or-select-expression>\n  </div>\n  <div class=\"refresh-btn\">\n    <or-icon-button :disabled=\"!canRevertChanges || loading\" tooltip=\"Revert current changes\" tooltip-position=\"top center\" @click=\"openModal('confirmRevertModal')\" icon=\"settings_backup_restore\"></or-icon-button>\n  </div>\n  <div class=\"refresh-btn\">\n    <or-icon-button :loading=\"loading\" tooltip=\"Refresh templates list\" tooltip-position=\"top center\" @click=\"refreshTemplatesList\" icon=\"refresh\"></or-icon-button>\n  </div>\n</div>\n\n<or-modal ref=\"confirmRevertModal\" title=\"Revert current changes\">\n  You sure you want revert current changes?\n  <div slot=\"footer\">\n    <or-button @click=\"revertTemplateChanges\" :dismissible=\"!loading\" :loading=\"loading\" color=\"primary\">Revert</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmRevertModal')\">Cancel</or-button>\n  </div>\n</or-modal>\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "01f24406-73ce-4253-88c3-8ca9e1e7242e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".template-chooser {\n  display: flex;\n  align-items: flex-end;\n  \n  .dropdown {\n    width: calc(100% - 46px - 46px);\n  }\n  \n  .refresh-btn {\n    width: 36px;\n    margin-left: 10px;\n    margin-bottom: 1rem;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "be21bafd-38eb-4c5c-8993-96a315208294",
                    "data": {
                      "label": "Custom template type",
                      "options": [
                        {
                          "label": "Vue template",
                          "value": "`vue`",
                          "checked": false,
                          "vforkey": "bbfadf52-3ee0-4844-b79c-656327ceb3f9"
                        },
                        {
                          "label": "HTML",
                          "value": "`html`",
                          "checked": false,
                          "vforkey": "eff161fe-8347-4e62-a8f5-88d2e67cb9fc"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "customTemplateType",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`vue`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6d465bcc-dce4-4b5c-a9b6-8f6312ffb753",
                            "ruleType": {
                              "func": "{ return validators.jsExpression(firstValue) }",
                              "type": "single",
                              "input": [
                                "string"
                              ],
                              "label": "valid JS expression",
                              "modes": [],
                              "category": "code"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "6d465bcc-dce4-4b5c-a9b6-8f6312ffb753",
                            "ruleType": {
                              "func": "{ return validators.jsExpression(firstValue) }",
                              "type": "single",
                              "input": [
                                "string"
                              ],
                              "label": "valid JS expression",
                              "modes": [],
                              "category": "code"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "38264dc0-a19b-4093-919a-30bfd20bbaad",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "HTML",
                      "helpText": "",
                      "variable": "customTemplateHtmlCode",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76e8530b-d057-4748-9b5b-231866f9452c",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76e8530b-d057-4748-9b5b-231866f9452c",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "4aff4818-7b60-4e62-9cf7-a68c5e92253e",
                    "data": {
                      "data": "{\"customTemplateJavaScriptCode\": \"// readonly <Boolean> - true if message is sent\\n// loading <Boolean> - true on message sending and false when message received in chat\\n// isInPreview <Boolean> - true if message is in preview mode\\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\\n\\nconst testData = 'test data';\\n\\nconst btn = document.getElementById('custom-button');\\nbtn.addEventListener('click', send);\\n\\nfunction send() {\\n  /**\\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\\n   * `myData` field will be stored in mergeField\\n  **/\\n  sendMessage({ \\n    message: testData, \\n    myData: testData \\n  });\\n}\"}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  customTemplateJavaScriptCode: {\n    jsCode(value) {\n      const error = validators.validateJsCode(`${value}`);\n      return !Boolean(error);\n    }\n  }\n}",
                      "applyToJson": false,
                      "formTemplate": "<wildcard v-model=\"schema.customTemplateJavaScriptCode\" :v=\"$v\" :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-instmzehlxpwagkjdfuycrqbvo",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: {\n          type: Object,\n          default: () => ({})\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1bce1794-9f84-4097-a7dc-bb071dd0d733",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1bce1794-9f84-4097-a7dc-bb071dd0d733",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code\n        v-model=\"localValue\"\n        label=\"JavaScript\"\n        :readonly=\"readonly\"\n        :disable-warnings=\"false\"\n        :disable-autocomplete=\"false\"\n        js-env=\"ecma6\"\n        mode=\"javascript\"\n        :steps=\"steps\"\n        :merge-fields=\"mergeFields\"\n        :useBuiltInValidator=\"true\"\n        :disableVariables=\"true\"\n    >\n    </or-code>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1bce1794-9f84-4097-a7dc-bb071dd0d733",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `html`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c91aaa36-87d6-49b2-a696-1e8c06202fc4",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "Vue template",
                      "helpText": "",
                      "variable": "customTemplateVueHtmlTemplate",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d3e51bc1-b530-4636-96cc-ab884fc5406b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d3e51bc1-b530-4636-96cc-ab884fc5406b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "fd6c7a80-29b4-4de2-874a-dbc297f3d75c",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Vue script",
                      "helpText": "",
                      "variable": "customTemplateVueScript",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
                      "validateCode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fcc1543a-c4d7-4142-a279-67ef2240b7d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "fcc1543a-c4d7-4142-a279-67ef2240b7d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom') && _.isEqual(_.trim(schema.customTemplateType, '`'), `vue`)",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://with-toolbox.components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "d1c33207-b1bf-44f8-a048-85f6a78ab18d",
                    "data": {
                      "data": "{\n  \"customTempalateScripts\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  customTempalateScripts: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.customTempalateScripts\" \n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-owjprncmbihskfyvzalxgudqte",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['js'],\n        maxFiles: 10\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0acb5b59-5911-4c0b-b64d-e12de1b74295",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0acb5b59-5911-4c0b-b64d-e12de1b74295",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal ref=\"select-media\" title=\"Select scripts\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n            <span>{{ item.item.name }}</span>\n            <div class=\"file-controls\">\n              <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n              <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n            </div>\n        </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n            <or-text-expression\n              v-model=\"item.item.linkUrl\"\n              :mergeFields=\"mergeFields\"\n              :steps=\"steps\"\n              :step-id=\"stepId\"\n              :readonly=\"readonly\"\n              label=\"Script URL\"\n              placeholder=\"Enter URL to the file\"\n              :invalid=\"getValue(`schema.customTempalateScripts.$each[${item.index}].$invalid`, v)\"\n              error=\"Add URL or delete input\"\n              @input=\"val => updateMedias(item.item, val)\"\n            />\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n        </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add script</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add script from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n  <div v-if=\"getValue(`schema.messageText.$invalid`, v)\" class=\"rwc__error-message\">\n    Message should contain a text or attachment\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0acb5b59-5911-4c0b-b64d-e12de1b74295",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n    \n    .medias-wrapper {\n      width: 100%;\n    }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "83f0d5db-dcd3-471c-8d16-e7f3bc937ce5",
                    "data": {
                      "label": "",
                      "inputs": [
                        {
                          "id": "450d3d40-84df-4592-aa2e-dea24dbad101",
                          "data": {
                            "label": "Name",
                            "helpText": "",
                            "variable": "varName",
                            "multiline": false,
                            "placeholder": "Enter variable name here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        },
                        {
                          "id": "eb750d1c-220c-47e6-8cc3-f11ac4baa094",
                          "data": {
                            "label": "Value",
                            "helpText": "",
                            "variable": "varValue",
                            "multiline": false,
                            "placeholder": "Enter variable value here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "conditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        }
                      ],
                      "variable": "customVariables",
                      "singleline": true,
                      "prettifyDrag": false,
                      "allowCodeMode": true,
                      "limitMaxItems": false,
                      "maxItemsCount": "10",
                      "addButtonLabel": "Add variable",
                      "hasDefaultItem": false,
                      "dragHandleRight": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "30ba5112-a216-4575-abde-6d025a53a382",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "canRemoveLastItem": true,
                      "disabledCondition": "",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "30ba5112-a216-4575-abde-6d025a53a382",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formList",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "List",
                    "compiled": {},
                    "component": "formList",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formList\"]"
                    ]
                  },
                  {
                    "id": "5fc988dd-6512-443f-9252-2a34e76578dc",
                    "data": {
                      "data": "{\n  \"customTemplateCSSCode\": \".custom-send-button {\\n  // add styles for button  \\n  // with this step execution css will be applied for for follow-up messages of the flow\\n}\",\n  \"customTemplateCompiledCSS\": \"\",\n  \"customTemplateCSSWrapperClassName\": \"\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.customTemplateCSSCode\" \n  :customTemplateCompiledCSS.sync=\"schema.customTemplateCompiledCSS\"\n  :customTemplateCSSWrapperClassName.sync=\"schema.customTemplateCSSWrapperClassName\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n>\n  \n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-anfeuyvptirdqsocgbkhmwzxjl",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        alertType() {\n          if(this.compiling && !this.error)\n            return 'info';\n            \n          if(!this.compiling && !this.error)\n            return 'success';\n            \n          return 'error';\n        }\n    },\n    \n    data() {\n      return {\n        compiling: false,\n        error: false,\n        showAlert: false\n      }\n    },\n    \n    async mounted() {\n      await this.$nextTick();\n      await this.compileSCSS();\n    },\n    \n    methods: {\n      generateCSSWrapperClassName() {\n        const uniqId = `${uuid.v4()}`.replaceAll('-', '')\n        const className = `custom-component-${uniqId}`;\n        this.$emit('update:customTemplateCSSWrapperClassName', className);\n        return className;\n      },\n      \n      async compileSCSS() {\n        if(this.readonly) return;\n        this.showAlert = true;\n        this.error = false;\n        \n        if(!this.customTemplateCSSWrapperClassName) {\n          this.generateCSSWrapperClassName();\n        }\n        \n        await this.$nextTick();\n        \n        const styles = `.${this.customTemplateCSSWrapperClassName} { ${this.value} }`;\n       \n      try {\n        this.compiling = true;\n         \n         const compiledCSS = await this.$flow.api.toolbox.compileStyles({ \n          styles,\n          options: {}\n        });\n        \n        if(compiledCSS.compiled.status !== 0) {\n          this.error = true;\n        }\n        \n        const result = _.get(compiledCSS, 'compiled.text') || '';\n      \n        this.$emit('update:customTemplateCompiledCSS', result);\n      } catch(e) {\n        console.error(e);\n        this.error = true;\n      } finally {\n        this.compiling = false;\n      }\n       \n      }\n    },\n      \n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        customTemplateCompiledCSS: {\n          type: String,\n          default: ''\n        },\n        customTemplateCSSWrapperClassName: {\n          type: String,\n          default: ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b1addc74-cba9-4362-90d2-43fb42e0c0f9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b1addc74-cba9-4362-90d2-43fb42e0c0f9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code \n  :invalid=\"error\" \n  :error=\"showAlert ? '' : 'Invalid SCSS'\" \n  v-model=\"localValue\" \n  label=\"CSS (SCSS)\" \n  @blur=\"compileSCSS\" \n  :readonly=\"readonly\"\n>\n</or-code>\n\n<or-alert @dismiss=\"showAlert = false\" :type=\"alertType\" v-show=\"showAlert\" remove-icon>\n  <div class=\"alert-container\">\n    <or-icon-button :class=\"['alert-icon', alertType]\" disabled icon=\"check_circle\" :loading=\"compiling\" :size=\"16\" type=\"secondary\"></or-icon-button>\n    <span v-if=\"compiling && !error\">Compiling SCSS</span>\n    <span v-if=\"!compiling && !error\">SCSS compiled</span>\n    <span v-if=\"!compiling && error\">Invalid SCSS</span>\n  </div>\n</or-alert>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b1addc74-cba9-4362-90d2-43fb42e0c0f9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".container {\n  display: flex;\n}\n\n.info {\n  font-size: 12px;\n  color: grey;\n}\n\n.alert-container {\n  display: flex;\n  align-items: center;\n}\n\n.ui-icon-button.alert-icon {\n  pointer-events: none;\n  padding: 0;\n  width: 26px;\n  height: 26px;\n  margin-right: 16px;\n  \n  \n  &.info {\n    .ui-icon-button__icon { color: #2196f3 !important; }\n  }\n  \n  &.success {\n    .ui-icon-button__icon { color: #4caf50 !important; }\n  }\n  \n  &.error {\n    .ui-icon-button__icon { color: #f44336 !important; }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "bee39a1c-ed2d-475a-aa2e-82f45590af7c",
                    "data": {
                      "label": "Proceed without waiting for user reply",
                      "helpText": "",
                      "variable": "autoSubmitCustomTemplate",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "info",
                          "content": "If the component does not require user interaction, messag will be sent immediatly",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c67f7bb6-bf5a-4d5e-ad0f-ac30638c64d4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c67f7bb6-bf5a-4d5e-ad0f-ac30638c64d4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "443b2601-30f0-4dde-bd50-da1286cea820",
                    "data": {
                      "label": "Send component in message bubble",
                      "helpText": "",
                      "variable": "showCustomComponentInMessage",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1e228e4a-e67a-46a6-b9f8-2ec4801c2a6e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1e228e4a-e67a-46a6-b9f8-2ec4801c2a6e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "7039e6c4-5da9-4a88-9344-b2d1df79aa80",
                    "data": {
                      "label": "Hide component after submit",
                      "helpText": "",
                      "variable": "hideCustomComponentAfterSubmit",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8b69339d-5fcd-4f54-a391-20389eaf16e4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8b69339d-5fcd-4f54-a391-20389eaf16e4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "e951fef4-0808-421a-a2dd-0a2ee9a0ebd3",
                    "data": {
                      "label": "Show bot icon for the message",
                      "helpText": "",
                      "variable": "showBotIcon",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "60ad989f-13ac-40e2-8b23-aaaed2e3fd09",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "60ad989f-13ac-40e2-8b23-aaaed2e3fd09",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "23a33514-a0f8-4e89-a657-93efccfe5a66",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :customTemplateHtmlCode.sync=\"schema.customTemplateHtmlCode\" \n  :customTemplateJavaScriptCode.sync=\"schema.customTemplateJavaScriptCode\"\n  :customTemplateCSSCode.sync=\"schema.customTemplateCSSCode\"\n  :customTemplateVueHtmlTemplate.sync=\"schema.customTemplateVueHtmlTemplate\"\n  :customTemplateVueScript.sync=\"schema.customTemplateVueScript\"\n  \n  :customTemplateType.sync=\"schema.customTemplateType\"\n  :customVariables.sync=\"schema.customVariables\"\n  :customTempalateScripts.sync=\"schema.customTempalateScripts\"\n  :customTemplateId.sync=\"schema.customTemplateId\"\n  \n  :hideCustomComponentAfterSubmit=\"schema.hideCustomComponentAfterSubmit\"\n  :showCustomComponentInMessage=\"schema.showCustomComponentInMessage\"\n  :autoSubmitCustomTemplate=\"schema.autoSubmitCustomTemplate\"\n  :showBotIcon=\"schema.showBotIcon\"\n  \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-swubacevqrnylmpgkxhidjoztf",
                      "componentLogic": "{\n    data() {\n      return {\n        loading: false,\n        templateLabel: ``,\n        hasChanges: false,\n        templates: [],\n        selectedTemplate: null\n      }\n    },\n    \n    created() {\n      eventHub.$on('lib-templates-list::refresh-finished', this.stopLoading);\n      eventHub.$on('lib-templates-list::selected', this.handleTemplateSelection);\n    },\n    \n    beforeDestroy() {\n      eventHub.$off('lib-templates-list::refresh-finished', this.stopLoading);\n      eventHub.$off('lib-templates-list::selected', this.handleTemplateSelection);\n    },\n    \n    computed: {\n      canDeleteTemplateFromLib () {\n        return _.trim(this.customTemplateId, ' `\"\\'')\n      },\n      labelUniq () {\n        if(!this.templateLabel) return true;\n        \n        const templateWidthSameLabel = _.find(this.templates, ({ label }) => {\n          return _.toLower( _.trim(label)) === _.toLower(_.trim(this.templateLabel))\n        });\n        \n        return !Boolean(templateWidthSameLabel);\n      },\n      labelUniqOrSame () {\n        if(!this.templateLabel) return true;\n        \n        const selectedLabel = _.get(this.selectedTemplate, 'label') || ``;\n        \n        const templateWidthSameLabel = _.find(this.templates, ({ label }) => {\n          if(_.toLower( _.trim(label)) === _.toLower(_.trim(selectedLabel))) return false;\n          \n          return _.toLower( _.trim(label)) === _.toLower(_.trim(this.templateLabel));\n        });\n        \n        return !Boolean(templateWidthSameLabel);\n      }\n    },\n    \n    methods: {\n      stopLoading (templates = []) {\n        this.closeModal('confirmPublishModal');\n        this.closeModal('confirmDeleteModal');\n        this.closeModal('confirmEditModal');\n        \n        this.hasChanges = false;\n        this.loading = false;\n        \n        this.templates = templates;\n      },\n      \n      handleTemplateSelection (selectedTemplate = {}) {\n        this.selectedTemplate = selectedTemplate;\n      },\n      \n      async publishTemplate () {\n        this.loading = true;\n        \n        const normalizedTemplateLabel = _.trim(this.templateLabel, ' `\"\\'');\n        const templateId = `${_.snakeCase(normalizedTemplateLabel)}_${uuid.v4()}`;\n        \n        const templateType = _.trim(this.customTemplateType, ' `\"\\'');\n        const prefix = `RWC_custom_templates/${templateId}/`;\n        const meta = this.getTemplateMetaFile({ \n          type: templateType,\n          label: normalizedTemplateLabel,\n          vars:  this.customVariables,\n          scripts: this.customTempalateScripts,\n          autoSubmitCustomTemplate: this.autoSubmitCustomTemplate,\n          showCustomComponentInMessage: this.showCustomComponentInMessage,\n          hideCustomComponentAfterSubmit: this.hideCustomComponentAfterSubmit\n        });\n        \n        if(templateType === `vue`) {\n          const { vueScript, vueTemplate, css } = this.getTemplateFiles(`vue`);\n          try {\n            const promises = [];\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: vueScript, type: 'text/javascript', name: 'index.js' }, isPublic: true, prefix }));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: vueTemplate, type: 'text/html', name: 'index.vue' }, isPublic: true, prefix }));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: css, type: 'text/css', name: 'index.css' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: meta, type: 'application/json', name: 'meta.json' }, isPublic: true, prefix }));\n            \n            await Promise.all(promises)\n          } catch(e) {\n            console.error(e)\n          }\n        }\n        \n        if(templateType === `html`) {\n          const { html, js, css } = this.getTemplateFiles (`html`);\n          try {\n            const promises = [];\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: html, type: 'text/html', name: 'index.html' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: js, type: 'text/javascript', name: 'index.js' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: css, type: 'text/css', name: 'index.css' }, isPublic: true, prefix}));\n            promises.push(this.$flow.api.files.uploadFile({ fileModel: { file: meta, type: 'application/json', name: 'meta.json' }, isPublic: true,  prefix}));\n            \n            await Promise.all(promises);\n          } catch(e) {\n            console.error(e)\n          }\n        }\n        \n        eventHub.$emit('lib-templates-list::refresh', templateId);\n      },\n      \n      getTemplateMetaFile ({ type = `vue`, label = ``, vars = [], scripts = [], hideCustomComponentAfterSubmit = false, showCustomComponentInMessage = true, autoSubmitCustomTemplate = true }) {\n        const metaObject = { \n          label, \n          type, \n          vars, \n          scripts,\n          autoSubmitCustomTemplate,\n          showCustomComponentInMessage,\n          hideCustomComponentAfterSubmit,\n          showBotIcon: this.showBotIcon,\n          lastModified: Date.now()\n        };\n        return new Blob([JSON.stringify(metaObject, null, 2)], { type: 'text/json', name: `meta.json` });\n        \n      },\n      \n      getTemplateFiles (type) {\n        if(type === `html`) {\n          const html = new Blob([this.customTemplateHtmlCode], { type: 'text/html' });\n          const js = new Blob([this.customTemplateJavaScriptCode], { type: 'text/javascript' });\n          const css = new Blob([this.customTemplateCSSCode], { type: 'text/css' });\n          \n          return { html, js, css }\n        }\n        \n        if(type === `vue`) {\n          const vueScript = new Blob([this.customTemplateVueScript], { type: 'text/javascript' });\n          const vueTemplate = new Blob([this.customTemplateVueHtmlTemplate], { type: 'text/html' });\n          const css = new Blob([this.customTemplateCSSCode], { type: 'text/css' });\n          \n          return { vueScript, vueTemplate, css }\n        }\n        \n        throw new Error('No such type');\n      },\n      \n      async getFilesList (type) {\n        const templateId = _.get(this.selectedTemplate, 'value') || ``;\n        return await this.$flow.api.files.ls({ isPublic: true, prefix: `RWC_custom_templates/${templateId}/` })\n      },\n      \n      async deleteFromLib (withRefresh = true) {\n        this.loading = true;\n        const files = await this.getFilesList();\n        \n        const promises = _.map(files, ({ key }) => this.$flow.api.files.delete(key, true));\n        \n        await Promise.all(promises);\n        \n        this.$emit('update:customTemplateId', ``);\n        if(withRefresh) eventHub.$emit('lib-templates-list::refresh');\n        this.hasChanges = false;\n        this.localValue = ``;\n      },\n      \n      async editTemplate() {\n        await this.deleteFromLib(false);\n        await this.publishTemplate();\n      },\n      \n      openModal(ref) {\n        if(!this.$refs[ref]) return;\n        \n        if(ref === 'confirmPublishModal' && _.get(this.selectedTemplate, 'label')) {\n          this.templateLabel = `${_.get(this.selectedTemplate, 'label') || ''} (1)`;\n        }\n        \n        if(ref === 'confirmEditModal') {\n          this.templateLabel = _.get(this.selectedTemplate, 'label') || '';\n        }\n        \n        this.$refs[ref].open(); \n      },\n      \n      closeModal (ref) {\n      if(!this.$refs[ref]) return;\n       this.$refs[ref].close(); \n      },\n    },\n    \n    watch: {\n        customTemplateHtmlCode(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'')!== 'html') return;\n          this.hasChanges = true;\n        },\n        customTemplateJavaScriptCode(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'') !== 'html') return;\n          this.hasChanges = true;\n        },\n        customTemplateCSSCode(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'') !== 'html') return;\n          this.hasChanges = true;\n        },\n        customVariables(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        customTempalateScripts(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        hideCustomComponentAfterSubmit(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        showCustomComponentInMessage(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        autoSubmitCustomTemplate(nv , ov) {\n          if(_.isEqual(nv, ov) || this.customTemplateType !== 'html') return;\n          this.hasChanges = true;\n        },\n        customComponent(nv , ov) {\n          if(_.isEqual(nv, ov) || _.trim(this.customTemplateType, ' `\"\\'') !== 'vue') return;\n          this.hasChanges = true;\n        },\n        customTemplateType(nv , ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        },\n        showBotIcon (nv, ov) {\n          if(_.isEqual(nv, ov)) return;\n          this.hasChanges = true;\n        }\n    },\n    \n    props : {\n        customTemplateHtmlCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateJavaScriptCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateCSSCode: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueHtmlTemplate: {\n          type: String,\n          default: ``\n        },\n        customTemplateVueScript: {\n          type: String,\n          default: ``\n        },\n        customTemplateType: {\n          type: String,\n          default: ``\n        },\n        customVariables: {\n          type: Array,\n          default: () => ([])\n        },\n        customTempalateScripts: {\n          type: Array,\n          default: () => ([])\n        },\n        customTemplateId: {\n          type: String,\n          default: ``\n        },\n        hideCustomComponentAfterSubmit: {\n          type: Boolean,\n          default: true\n        },\n        showCustomComponentInMessage: {\n          type: Boolean,\n          default: true\n        },\n        autoSubmitCustomTemplate: {\n          type: Boolean,\n          default: true\n        },\n        showBotIcon: {\n          type: Boolean,\n          default: true\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5c9c461a-e4ac-4e87-bd16-050ca5e9ea22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5c9c461a-e4ac-4e87-bd16-050ca5e9ea22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-button @click=\"openModal('confirmPublishModal')\" type=\"primary\" color=\"primary\">\n  {{ selectedTemplate ? `Publish template as new` : `Publish template` }}\n</or-button>\n<or-button v-if=\"canDeleteTemplateFromLib\" :disabled=\"!hasChanges\" @click=\"() => { openModal('confirmEditModal') }\" type=\"primary\" color=\"primary\">\n  Update template\n</or-button>\n<or-button v-if=\"canDeleteTemplateFromLib\" @click=\"openModal('confirmDeleteModal')\" type=\"secondary\" color=\"primary\">\n  Delete\n</or-button>\n\n<or-modal :dismissible=\"!loading\" ref=\"confirmPublishModal\" title=\"Publish template\">\n  <or-textbox\n    v-model=\"templateLabel\"\n    label=\"Template label\"\n    :readonly=\"loading\"\n    :invalid=\"!labelUniq\"\n    error=\"Template label should be unique\"\n    placeholder=\"Enter template label\"\n  />\n  <div slot=\"footer\">\n    <or-button :loading=\"loading\" :disabled=\"!templateLabel || !labelUniq\" @click=\"publishTemplate\" color=\"primary\">Publish</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmPublishModal')\">Cancel</or-button>\n  </div>\n</or-modal>\n\n<or-modal :dismissible=\"!loading\" ref=\"confirmEditModal\" title=\"Update template\">\n  <or-textbox\n    v-model=\"templateLabel\"\n    label=\"New template label\"\n    :readonly=\"loading\"\n    :invalid=\"!labelUniqOrSame\"\n    error=\"Label should be unique or the same\"\n    placeholder=\"Enter new template label\"\n  />\n  <div slot=\"footer\">\n    <or-button :loading=\"loading\" :disabled=\"!templateLabel || !labelUniqOrSame\" @click=\"editTemplate\" color=\"primary\">Edit</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmEditModal')\">Cancel</or-button>\n  </div>\n</or-modal>\n\n<or-modal :dismissible=\"!loading\" ref=\"confirmDeleteModal\" title=\"Delete template\">\n  You sure you want to delete this template from library?\n  <div slot=\"footer\">\n    <or-button :loading=\"loading\" @click=\"deleteFromLib\" color=\"red\">Delete</or-button>\n    <or-button :disabled=\"loading\" @click=\"closeModal('confirmPublishModal')\">Cancel</or-button>\n  </div>\n</or-modal>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5c9c461a-e4ac-4e87-bd16-050ca5e9ea22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://vanila-html.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "b2ac6d8f-7c22-418f-b42f-d65cef8f1330",
                    "data": {
                      "label": "Week starts from",
                      "options": [
                        {
                          "label": "Sunday",
                          "value": "`0`",
                          "checked": false,
                          "vforkey": "f49ca720-194f-411b-a189-2099f6bcb0dc"
                        },
                        {
                          "label": "Monday",
                          "value": "`1`",
                          "checked": false,
                          "vforkey": "8d1c3d16-3478-4d92-9959-d2c0191db5f4"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "datepickerStartsFrom",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`0`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2ef1abbd-6a80-4b1c-919a-87b2eb4efca0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "2ef1abbd-6a80-4b1c-919a-87b2eb4efca0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "32456fb3-4310-418e-9332-dfb87aa00a5c",
                    "data": {
                      "label": "Date format",
                      "options": [
                        {
                          "label": "MM-DD-YYYY",
                          "value": "`MM-DD-YYYY`",
                          "checked": false,
                          "vforkey": "0ef7bc71-7afc-4932-b2a3-47d729a09f07"
                        },
                        {
                          "label": "DD-MM-YYYY",
                          "value": "`DD-MM-YYYY`",
                          "checked": false,
                          "vforkey": "60f7f2b5-3fda-43ee-83dd-e0314272ae66"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "datepickerFormat",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`MM-DD-YYYY`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a819a3a-1f71-401c-81d2-2d36a34ffe6f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0a819a3a-1f71-401c-81d2-2d36a34ffe6f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "58348e73-246a-448a-b978-e36ca40ed88a",
                    "data": {
                      "label": "Blocked dates",
                      "helpText": "",
                      "variable": "datepickerBlockDates",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9cde5ef1-f224-48bf-ab12-eec77b5e35ed",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9cde5ef1-f224-48bf-ab12-eec77b5e35ed",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "60fc16cb-50c7-46e3-90f8-5d655f321693",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Future dates",
                          "value": "`future`",
                          "checked": false,
                          "vforkey": "9fe15cb4-d5b5-48bc-afab-4a7561bfd7e4",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Past dates",
                          "value": "`past`",
                          "checked": false,
                          "vforkey": "c2974a2d-3c0b-4158-91de-53bceeafcdf5",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Custom dates (set via function)",
                          "value": "`function`",
                          "checked": false,
                          "vforkey": "2eb59730-cc8c-4457-9140-614b65ce6e99",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Custom dates (set via merge field)",
                          "value": "`mergeField`",
                          "checked": false,
                          "vforkey": "f2ce2a5e-173e-4b30-8045-8118b9c9ffdd",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "datepickerBlockedOptions",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [],
                      "allowCodeMode": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "69de7b60-2beb-4913-a56c-6679a2106a1d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "69de7b60-2beb-4913-a56c-6679a2106a1d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "4d3ab02c-5726-44ce-869f-9fefd7645dda",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "browser",
                      "label": "Function to define blocked dates",
                      "helpText": "",
                      "variable": "datepickerBlockedFunc",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "436f2409-8929-478b-aa7c-ea98327171e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`function`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "436f2409-8929-478b-aa7c-ea98327171e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`function`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "d034a329-9559-4d53-98b3-2aedf853a10f",
                    "data": {
                      "label": "Select merge field",
                      "helpText": "",
                      "variable": "datepickerBlockedMergefield",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "876beac8-06a8-460b-a2cb-864b8669cce9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`mergeField`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "876beac8-06a8-460b-a2cb-864b8669cce9",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerBlockedOptions.indexOf(\"`mergeField`\") !== -1 && schema.datepickerBlockDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "5e94e759-5f39-447e-bbd4-6a1ab54a7612",
                    "data": {
                      "label": "Suggested dates",
                      "helpText": "",
                      "variable": "datepickerSuggestedDates",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "feb203c1-9fb4-4e59-a2e0-b0163400e2ac",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "feb203c1-9fb4-4e59-a2e0-b0163400e2ac",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "02548d40-4def-4d35-b51b-f14b2ac8609b",
                    "data": {
                      "label": "",
                      "options": [
                        {
                          "label": "Custom dates (set via function)",
                          "value": "`function`",
                          "checked": false,
                          "vforkey": "3a8d5720-4d9d-477c-89c1-1dbc6580d2bb",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "label": "Custom dates (set via merge field)",
                          "value": "`mergeField`",
                          "checked": false,
                          "vforkey": "ce1f9000-0222-40dd-b1a1-764a9b99061c",
                          "renderCondition": {
                            "label": "`Visibility condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "disabledCondition": {
                            "label": "`Disablement condition``",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceCheckCondition": {
                            "label": "`Force check condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          },
                          "forceUncheckCondition": {
                            "label": "`Force uncheck condition`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "helpText": "",
                      "multiple": true,
                      "readonly": false,
                      "variable": "datepickerSuggestedOptions",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": [],
                      "allowCodeMode": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "isHtmlHelpText": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3980fe2a-cea7-49c0-8387-7595d016d6cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "prevDynamicOptions": null,
                      "dynamicRadioOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3980fe2a-cea7-49c0-8387-7595d016d6cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "checkboxGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0.2"
                    },
                    "label": "Checkbox Group",
                    "compiled": {},
                    "component": "checkboxGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"checkboxGroup\"]"
                    ]
                  },
                  {
                    "id": "4588d471-1a94-4bce-8c3f-f8146b93eae5",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Function to define suggested dates",
                      "helpText": "",
                      "variable": "datepickerSuggestedFunc",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "20aefe36-1664-482f-b070-30715732cfeb",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`function`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "20aefe36-1664-482f-b070-30715732cfeb",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`function`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "9230fd9e-13e8-41e1-9987-778487ce4c7e",
                    "data": {
                      "label": "Select merge field",
                      "helpText": "",
                      "variable": "datepickerSuggestedMergefield",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5dd79ad-5e15-478c-a76b-6242b9832a20",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`mergeField`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f5dd79ad-5e15-478c-a76b-6242b9832a20",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'datepicker') && schema.datepickerSuggestedDates && schema.datepickerSuggestedOptions.indexOf('`mergeField`') !== -1\n",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "a0af9fbf-c6c7-4c5c-a3cb-854daa8aea8d",
                    "data": {
                      "data": "{\n  \"dropdownOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  dropdownOptions: {\n    $each: {\n      emptyLabel (obj) {\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        return this.schema.dropdownOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`');\n      },\n      labelOutOfLength (obj) {\n        const label = _.trim(obj.label, '`');\n        const hasMergeField = _.isString(obj.label) && validators.validateExpression(obj.label);\n        if(hasMergeField) return true;\n        return label.length <= 24;\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.dropdownOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qpbtorwvnaezdsmukxijlycghf",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.dropdownOptions.$each[${index}].emptyLabel`, this.v)) {\n          return 'Option label is required.'\n        } \n        if (!this.getValue(`schema.dropdownOptions.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.dropdownOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.dropdownOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "09932c46-b793-4413-b48c-5fd29422deb3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "09932c46-b793-4413-b48c-5fd29422deb3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"24\"\n          help=\"Suggested length is up to 24 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.dropdownOptions.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.dropdownOptions.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add option</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "09932c46-b793-4413-b48c-5fd29422deb3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "54057ef8-860f-42bd-bfaa-79f1668bfaf6",
                    "data": {
                      "help": "Suggested length is up to 25 chars",
                      "label": "Dropdown placeholder",
                      "variable": "dropdownPlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Select an option",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "25",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0f01be99-a787-42a6-b5a1-e456ad34dd64",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "6497d4d1-3ca8-4507-a488-c49b5d3335f0",
                          "errorMessage": "Limit is exceeded, text will be truncated",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "37acafa2-5c2d-4980-9885-302040f2db31",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.dropdownPlaceholder, '`').length > 25",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "79a4cb58-776c-45fd-8bc9-2487cf6c8a83",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "!(_.isString(schema.dropdownPlaceholder) && validators.validateExpression(schema.dropdownPlaceholder))",
                                "valueType": "mergeTags",
                                "firstValue": "schema.dropdownPlaceholder",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0f01be99-a787-42a6-b5a1-e456ad34dd64",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'dropdown')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "c27ab054-4aed-4c2a-bad5-515dc1401f35",
                    "data": {
                      "data": "{\n  \"optionListOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  optionListOptions: {\n    $each: {\n      emptyLabel (obj) {\n        if (this.schema.inputComponent !== '`menu`') return true\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        if (this.schema.inputComponent !== '`menu`') return true\n        return this.schema.optionListOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n      labelOutOfLength (obj) {\n        const label = _.trim(obj.label, '`');\n        const hasMergeField = _.isString(obj.label) && validators.validateExpression(obj.label);\n        if(hasMergeField) return true;\n        return label.length <= 24;\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.optionListOptions\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-swazoxctumighrflveqkbndpjy",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.optionListOptions.$each[${index}].emptyLabel`, this.v)) {\n          return 'Option list label is required.'\n        } \n        if (!this.getValue(`schema.optionListOptions.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.optionListOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.optionListOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "829255e5-e735-4556-9b35-f5c8a462e7cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'menu')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "829255e5-e735-4556-9b35-f5c8a462e7cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'menu')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option list label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"24\"\n          help=\"Suggested length is up to 24 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.optionListOptions.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.optionListOptions.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option list value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add option</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "829255e5-e735-4556-9b35-f5c8a462e7cd",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'menu')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "e142ca5f-e65a-45df-8ae2-01c22ff45a37",
                    "data": {
                      "data": "{\n  \"optionsButtons\": [{\n    \"label\": \"``\",\n    \"value\": \"``\",\n    \"buttonStyle\": \"default\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  optionsButtons: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`buttons`') return true\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        // if (this.schema.inputComponent !== '`buttons`') return true\n        return this.schema.optionsButtons.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`');\n      },\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.optionsButtons\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-naikvlehgpmcfbyosdwqrjzuxt",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getButtonsStyle() {\n          return [\n          {\n            label: 'Default',\n            value: 'default'\n          },\n          {\n            label: 'Filled',\n            value: 'filled'\n          },\n          {\n            label: 'Outlined',\n            value: 'outlined'\n          },\n          {\n            label: 'Custom',\n            value: 'grayed'\n          }]\n        },\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.optionsButtons.$each[${index}].emptyLabel`, this.v)) {\n          return 'Button label is required.'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          buttonStyle: \"default\",\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          buttonStyle: \"default\",\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.optionsButtons.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.optionsButtons.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec644c0b-16c2-4516-90f5-c84c3ecdc046",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'buttons')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec644c0b-16c2-4516-90f5-c84c3ecdc046",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'buttons')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <div>\n          <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Button label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"24\"\n          help=\"Suggested length is up to 24 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.optionsButtons.$each[${item.index}].emptyLabel`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Button value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n        </div>\n        <or-select\n          v-model=\"item.item.buttonStyle\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          label=\"Button style\"\n          disablePopover\n          placeholder=\"Select\"\n          :options=\"getButtonsStyle\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add button</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec644c0b-16c2-4516-90f5-c84c3ecdc046",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'buttons')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    \n    \n    & > div {\n      width: 100%;\n      display: flex;\n      \n      & > * {\n        width: calc(50% - 4px);\n        flex-shrink: 0;\n        \n        &:nth-child(1) {\n          margin-right: 8px;\n        }\n      }\n      \n      .ui-select__content {\n        margin-right: 0 !important;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "4201c4ac-69e2-417c-a690-46e31340fb9c",
                    "data": {
                      "data": "{\n  \"radioOptions\": [{\n    \"label\": \"``\",\n    \"value\": \"``\"\n  }]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  radioOptions: {\n    $each: {\n      emptyLabel (obj) {\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        return this.schema.radioOptions.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.radioOptions\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-jeoyzdbslrkfqnhagxwpmicutv",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.radioOptions.$each[${index}].emptyLabel`, this.v)) {\n          return 'Radio button label is required.'\n        } \n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.radioOptions.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.radioOptions.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1400fd2d-4bbf-4a5b-9d70-1e49de83c242",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1400fd2d-4bbf-4a5b-9d70-1e49de83c242",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Radio button label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"400\"\n          help=\"Suggested length is up to 400 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.radioOptions.$each[${item.index}].emptyLabel`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Radio button value ${item.index + 1}`\"\n          placeholder=\"Add text here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add radio button</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1400fd2d-4bbf-4a5b-9d70-1e49de83c242",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "fac67652-08e2-4bc6-9b71-bdf6d20152ee",
                    "data": {
                      "data": "{\n  \"radioDefault\": \"`No option`\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.radioDefault\"\n  :inputComponent=\"schema.inputComponent\"\n  :options=\"schema.radioOptions\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bdzgmyaskcnervqxulhitojpwf",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    watch: {\n      options: {\n        handler(nv, ov) {\n          this.populateOptions()\n        },\n        deep: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        inputComponent: String,\n        options: Array,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      onValueSelect (e) {\n        if (this.computedValue === e.value) {\n          this.$refs.selectExpression.value = null\n          this.computedValue = null\n        }\n      },\n      async populateOptions () {\n        await this.$nextTick()\n        if (!this.$refs.selectExpression || !this.options) return\n        \n        this.$refs.selectExpression.localOptions = [];\n        const optionLabels = this.options.map(el => _.trim(el.label, '`'))\n        \n        this.options.map(el => {\n          if (!el || el.label === '``') return;\n          this.$refs.selectExpression.addOption(_.trim(el.label, '`'));\n        })\n        \n        this.$refs.selectExpression.addOption('`No option`');\n        \n        const labels = this.$refs.selectExpression.localOptions.map(el => el.label)\n        this.$refs.selectExpression.localOptions = this.$refs.selectExpression.localOptions.map(el => {\n          el.custom = false\n          return el\n        })\n        if (labels.indexOf(this.computedValue) !== -1) {\n          this.$refs.selectExpression.value = this.value\n        } else {\n          this.$refs.selectExpression.value = '`No option`'\n        }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfca52bd-732f-46f8-bb82-7b7fedf6b2e6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfca52bd-732f-46f8-bb82-7b7fedf6b2e6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-default-options\">\n  <or-select-expression\n    ref=\"selectExpression\"\n    label=\"Preselected option(s)\"\n    :multiple=\"false\"\n    :extendableOptions=\"false\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    placeholder=\"No option is preselected\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    v-model=\"computedValue\"\n    class=\"rwc-default\"\n    @hook:mounted=\"populateOptions\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dfca52bd-732f-46f8-bb82-7b7fedf6b2e6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'radio')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-default-options {\n  .or-select-expression .ui-select__display-selected {\n    background-color: #64b2da;\n  }\n  .or-select-expression .ui-select__display-close-button {\n    color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "237cfb14-0b8a-4637-bb4d-e7d25a0616c1",
                    "data": {
                      "data": "{\n  \"sliderType\": \"single\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :sliderType.sync=\"schema.sliderType\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-npwflbjvzrcosqhkduxyatgiem",
                      "componentLogic": "{\n  data () {\n    return {\n      typeOptions: [\n        {\n          label: 'Select single point',\n          value: 'single'\n        },\n        {\n          label: 'Select range',\n          value: 'range'\n        }\n      ],\n      localType: this.sliderType\n    }\n  },\n  watch: {\n    localType: {\n      handler(nv) {\n        this.$emit('update:sliderType', nv)\n      },\n      immediate: true\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        sliderType: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4416401e-1c33-4f23-b490-096ad0ca5304",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4416401e-1c33-4f23-b490-096ad0ca5304",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-radio-groups\">\n  <or-radio-group \n    name=\"sliderType\"\n    :options=\"typeOptions\"\n    v-model=\"localType\"\n    :disabled=\"readonly\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4416401e-1c33-4f23-b490-096ad0ca5304",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-radio-groups {\n  .ui-radio-group__radios {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 8px;\n  }\n  \n  .ui-radio.ui-radio-group__radio {\n    width: 50%;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5e1f8a57-3348-4794-96b5-09ebff3f5dad",
                    "data": {
                      "data": "{\n  \"sliderMin\": \"``\",\n  \"sliderMax\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  sliderMin: {\n    notEmpty (obj) {\n      return _.trim(obj, '`')\n    },\n    number (value) {\n      if (_.trim(value, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      const val = value.replace(',', '.')\n      return !!(_.trim(val, '`')).match(/^-?\\d*\\.?\\d*$/);\n    },\n    moreThanLimit (obj) {\n      if (_.trim(obj, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      return _.trim(obj, '`').length <= 13\n    },\n    lessThanMin (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  },\n  sliderMax: {\n    notEmpty (obj) {\n      return _.trim(obj, '`')\n    },\n    moreThanLimit (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      return _.trim(obj, '`').length <= 13\n    },\n    number (obj) {\n      if (_.trim(obj, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      const val = obj.replace(',', '.')\n      return !!(_.trim(val, '`')).match(/^-?\\d*\\.?\\d*$/);\n    },\n    lessThanMin (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :sliderMin.sync=\"schema.sliderMin\"\n  :sliderMax.sync=\"schema.sliderMax\"\n  :sliderLabelTypes=\"schema.sliderLabelTypes\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-exfdphzqcgbuntriojylkvwams",
                      "componentLogic": "{\n  data() {\n    return {\n      localMin: this.sliderMin,\n      localMax: this.sliderMax\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getMinError () {\n          if (!this.getValue(`schema.sliderMin.notEmpty`, this.v)) {\n            return 'Min is required.'\n          } \n          if (!this.getValue(`schema.sliderMin.number`, this.v)) {\n            return 'Min is expected as a number.'\n          }\n          if (!this.getValue(`schema.sliderMin.moreThanLimit`, this.v)) {\n            return 'Limit is exceeded, text will be truncated'\n          }\n          if (!this.getValue(`schema.sliderMin.lessThanMin`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        },\n        getMaxError () {\n          if (!this.getValue(`schema.sliderMax.notEmpty`, this.v)) {\n            return 'Max is required.'\n          } \n          if (!this.getValue(`schema.sliderMax.number`, this.v)) {\n            return 'Min is expected as a number.'\n          }\n          if (!this.getValue(`schema.sliderMax.moreThanLimit`, this.v)) {\n            return 'Limit is exceeded, text will be truncated'\n          }\n          if (!this.getValue(`schema.sliderMax.lessThanMin`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        }\n    },\n    watch: {\n      localMin (nv) {\n        this.$emit('update:sliderMin', nv)\n      },\n      localMax (nv) {\n        this.$emit('update:sliderMax', nv)\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        sliderMin: [Number, String],\n        sliderMax: [Number, String],\n        sliderLabelTypes: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        v: Object,\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, el) {\n        return _.get(el || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3db1bb87-73d9-4fc5-ab05-9aca5b7c8ae4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3db1bb87-73d9-4fc5-ab05-9aca5b7c8ae4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-flex\">\n  <or-text-message\n    label=\"Min\"\n    v-model=\"computedValue\"\n    :maxCharLength=\"13\"\n    disablePopover\n    removeBubble\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    placeholder=\"0\"\n    counterString=\"%currentCharCount% / %maxCharLength%\"\n    :invalid=\"!getValue(`schema.sliderMin.notEmpty`, v) || !getValue(`schema.sliderMin.moreThanLimit`, v) || !getValue(`schema.sliderMin.number`, v) || !getValue(`schema.sliderMin.lessThanMin`, v)\"\n    :error=\"getMinError\"\n    v-model=\"localMin\"\n  />\n  <or-text-message\n    label=\"Max\"\n    v-model=\"computedValue\"\n    :maxCharLength=\"13\"\n    disablePopover\n    removeBubble\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    placeholder=\"100\"\n    counterString=\"%currentCharCount% / %maxCharLength%\"\n    :invalid=\"!getValue(`schema.sliderMax.notEmpty`, v) || !getValue(`schema.sliderMax.moreThanLimit`, v) || !getValue(`schema.sliderMax.number`, v) || !getValue(`schema.sliderMax.lessThanMin`, v)\"\n    :error=\"getMaxError\"\n    v-model=\"localMax\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3db1bb87-73d9-4fc5-ab05-9aca5b7c8ae4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-flex {\n  display: flex;\n  \n  & > * {\n    width: calc(50% - 4px);\n    \n    &:nth-child(1) {\n      margin-right: 8px;\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c105307e-7aed-4b70-9282-507aab74f13b",
                    "data": {
                      "label": "Default value",
                      "helpText": "",
                      "variable": "sliderDefaultValue",
                      "multiline": false,
                      "placeholder": "Add value here",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "407b3d07-5d77-45d1-a417-944643bf6cf3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b86ce143-02f0-48ea-aad1-82790eb8730d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'single')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "b9eee005-7a5e-488c-83b9-a558abbadb8c",
                          "errorMessage": "Value must be great than min.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "043e646f-5a5d-446e-a204-eb8a68f18b20",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "(+_.trim(schema.sliderDefaultValue, '`') < +_.trim(schema.sliderMin, '`')) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\$\\{/)) && schema.sliderDefaultValue.trim() ",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "c3c9fef6-6f1d-4f90-a069-453075bc65e3",
                          "errorMessage": "Value must be less than max.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "210609a0-ecfd-4391-a40c-27f271cacc4d",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "(+_.trim(schema.sliderDefaultValue, '`') > +_.trim(schema.sliderMax, '`')) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "90332b33-8a34-439d-b43b-4f9e57dd42c2",
                          "errorMessage": "Default value is required",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "b6b9cdd6-e4c8-4834-a4a6-674f68e9390c",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.sliderDefaultValue, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "83608e8d-c5a3-48e1-be21-2497711ab1ad",
                          "errorMessage": "Default value is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "9b03adf9-f00b-47d4-923f-1538fa699d91",
                                "ruleType": {
                                  "func": "{ return firstValue > secondValue }",
                                  "type": "double",
                                  "input": [
                                    "number",
                                    "number"
                                  ],
                                  "label": ">",
                                  "modes": [
                                    "numStrings"
                                  ],
                                  "category": "number"
                                },
                                "codeValue": "(!_.trim(schema.sliderDefaultValue, '`').match(/^\\-?\\d+([\\.|\\,]?\\d+)?$/)) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\`?\\$\\{.*(}`?)$/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "624ca987-817e-414d-b561-4704de17a1fb",
                          "errorMessage": "Min decimal is 0.0001",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e498f9e7-c84a-4059-892a-e4f525534103",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "((_.trim(schema.sliderDefaultValue, '`').replace(',', '.').split('.')[1] ? _.trim(schema.sliderDefaultValue, '`').replace(',', '.').split('.')[1].length > 4 : splitted)) && (!_.trim(schema.sliderDefaultValue, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "407b3d07-5d77-45d1-a417-944643bf6cf3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b86ce143-02f0-48ea-aad1-82790eb8730d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'single')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "2129e0d6-3402-4210-a459-8a28bbd90037",
                    "data": {
                      "data": "{\n  \"sliderDefaultStart\": \"``\",\n  \"sliderDefaultEnd\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  sliderDefaultStart: {\n    notEmpty (value) {\n      return _.trim(value, '`')\n    },\n    lessThanMin (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      const val = value.trim();\n      return !(+_.trim(val, '`').replace(',', '.') < +_.trim(this.schema.sliderMin, '`').replace(',', '.'))\n    },\n    greatThanMax (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      return !(+_.trim(value, '`').replace(',', '.') > +_.trim(this.schema.sliderMax, '`').replace(',', '.'))\n    },\n    onlyNumber (value) {\n      if (_.trim(value, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      return !!(_.trim(value, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/);\n    },\n    lessDecimal (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  },\n  sliderDefaultEnd: {\n    notEmpty (value) {\n      return _.trim(value, '`')\n    },\n    lessThanMin (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      const val = value.trim();\n      return !(+_.trim(val, '`').replace(',', '.') < + _.trim(this.schema.sliderMin, '`').replace(',', '.'))\n    },\n    greatThanMax (value) {\n      if (_.trim(value, '`').match(/^\\$\\{/)) return true\n      return !(+_.trim(value, '`').replace(',', '.') > +_.trim(this.schema.sliderMax, '`').replace(',', '.'))\n    },\n    onlyNumber (value) {\n      if (_.trim(value, '`').match(/^\\`?\\$\\{.*(}`?)$/)) return true\n      return !!(_.trim(value, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/);\n    },\n    lessDecimal (obj) {\n      if (_.trim(obj, '`').match(/^\\$\\{/)) return true\n      if ((_.trim(obj, '`')).match(/\\d+([\\.|\\,]?\\d+)?$/)) {\n        if (_.trim(obj, '`').includes('.')) {\n          return _.trim(obj, '`').split('.')[1].length <= 4;\n        } else if (_.trim(obj, '`').includes(',')) {\n          return _.trim(obj, '`').split(',')[1].length <= 4;\n        }\n        return true\n      } else {\n        return true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.stepVariable\"\n  :sliderDefaultStart.sync=\"schema.sliderDefaultStart\"\n  :sliderDefaultEnd.sync=\"schema.sliderDefaultEnd\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-eumbtgvhxfolirpzckwynsadjq",
                      "componentLogic": "{\n    computed : {\n        localStart : {\n            get () { return this.sliderDefaultStart; },\n            set (value) { this.$emit('update:sliderDefaultStart', value); }\n        },\n        localEnd: {\n          get () { return this.sliderDefaultEnd; },\n            set (value) { this.$emit('update:sliderDefaultEnd', value); }\n        },\n        getErrorStart () {\n          if (!this.getValue(`schema.sliderDefaultStart.notEmpty`, this.v)) {\n            return 'Default value start is required.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.lessThanMin`, this.v)) {\n            return 'Value must be great than min.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.greatThanMax`, this.v)) {\n            return 'Value must be less than max.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.onlyNumber`, this.v)) {\n            return 'Default value start is expected as number.'\n          }\n          if (!this.getValue(`schema.sliderDefaultStart.lessDecimal`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        },\n        getErrorEnd () {\n          if (!this.getValue(`schema.sliderDefaultEnd.notEmpty`, this.v)) {\n            return 'Default value end is required.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.lessThanMin`, this.v)) {\n            return 'Value must be great than min.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.greatThanMax`, this.v)) {\n            return 'Value must be less than max.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.onlyNumber`, this.v)) {\n            return 'Default value end is expected as number.'\n          }\n          if (!this.getValue(`schema.sliderDefaultEnd.lessDecimal`, this.v)) {\n            return 'Min decimal is 0.0001'\n          }\n        }\n    },\n    props : {\n      sliderDefaultStart: String,\n      sliderDefaultEnd: String,\n      v: Object,\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, val) {\n        return _.get(val || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1b069379-9764-495a-bf59-7a55247e59e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'range')",
                            "valueType": "advanced",
                            "firstValue": "schema.sliderType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "f8f42c38-3bac-415d-8896-c1bb694a4471",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1b069379-9764-495a-bf59-7a55247e59e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'range')",
                            "valueType": "advanced",
                            "firstValue": "schema.sliderType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "f8f42c38-3bac-415d-8896-c1bb694a4471",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-flex\">\n  <or-text-expression\n    label=\"Default value start\"\n    v-model=\"localStart\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :steps=\"steps\"\n    :stepId=\"stepId\"\n    placeholder=\"Add value here\"\n    showErrorText=\"persistently\"\n    :invalid=\"!getValue(`schema.sliderDefaultStart.lessThanMin`, v) || !getValue(`schema.sliderDefaultStart.greatThanMax`, v) || !getValue(`schema.sliderDefaultStart.onlyNumber`, v) || !getValue(`schema.sliderDefaultStart.notEmpty`, v) || !getValue(`schema.sliderDefaultStart.lessDecimal`, v)\"\n    :error=\"getErrorStart\"\n  ></or-text-expression>\n  <or-text-expression\n    label=\"Default value end\"\n    v-model=\"localEnd\"\n    :mergeFields=\"mergeFields\"\n    :readonly=\"readonly\"\n    :steps=\"steps\"\n    :stepId=\"stepId\"\n    placeholder=\"Add value here\"\n    showErrorText=\"persistently\"\n    :invalid=\"!getValue(`schema.sliderDefaultEnd.lessThanMin`, v) || !getValue(`schema.sliderDefaultEnd.greatThanMax`, v) || !getValue(`schema.sliderDefaultEnd.onlyNumber`, v) || !getValue(`schema.sliderDefaultEnd.notEmpty`, v) || !getValue(`schema.sliderDefaultEnd.lessDecimal`, v)\"\n    :error=\"getErrorEnd\"\n  ></or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1b069379-9764-495a-bf59-7a55247e59e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.sliderType, '`'), 'range')",
                            "valueType": "advanced",
                            "firstValue": "schema.sliderType",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "f8f42c38-3bac-415d-8896-c1bb694a4471",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-flex {\n  display: flex;\n  \n  & > * {\n    width: calc(50% - 4px);\n    flex-shrink: 0;\n    \n    &:nth-child(1) {\n      margin-right: 8px;\n    } \n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "bc0c8f7f-f773-4988-baff-d4dd808c6e9f",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :sliderDefaultValue.sync=\"schema.sliderDefaultValue\"\n  :sliderDefaultStart.sync=\"schema.sliderDefaultStart\"\n  :sliderDefaultEnd.sync=\"schema.sliderDefaultEnd\"\n\n  :codeModes.sync=\"schema.__codeModes\"\n  \n  :min=\"schema.sliderMin\"\n  :max=\"schema.sliderMax\"\n  :step=\"schema.sliderStep\"\n  :sliderType=\"schema.sliderType\"\n  \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-epsoilkrujghabmzwdnvyqtxcf",
                      "componentLogic": "{\n    computed : {\n        getMarks () {\n          if(validators.validateExpression(this.max) || validators.validateExpression(this.min)) return [];\n          \n          return [this.getMin, this.getMax].sort((a, b) => a - b);\n        },\n        getStep () {\n          if(validators.validateExpression(this.step)) return 0;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderStep) ? _.trim(this.step, '`').replace(',', '.') : _.trim(this.codeModes.sliderStep, ' \"`\\'');\n          if (formatted === '' && (this.sliderDefaultValue || this.defaultValueStart)) {\n            if ((this.sliderDefaultValue || this.defaultValueStart) - this.getMarks[0] > 10) {\n              return 1;\n            } else {\n              return ((this.sliderDefaultValue || this.defaultValueStart) - this.getMarks[0]) / 100 || 0.01;\n            }\n          }\n    \n          if (formatted === '') {\n            return 1;\n          }\n    \n          if (formatted === 0 || formatted === '0' || formatted === 'undefined' || isNaN(formatted)) {\n            if (this.getMarks[1] % 1 !== 0 || this.getMarks[0] % 1 !== 0) {\n              if (this.getMarks[ 0 ] < 0.01) {\n                let step = '0.';\n                let i = 1;\n                while (i < ('' + this.getMarks[ 0 ]).length - 2) {\n                  step += '0';\n                  i++;\n                }\n                step += '1';\n                return step;\n              }\n    \n              return 0.01;\n            }\n            return 1;\n          }\n    \n          if ((this.getMarks[1] - this.getMarks[0]) % formatted === 0) {\n            return Math.abs(formatted);\n          }\n    \n          if ((this.getMarks[1] - this.getMarks[0]) % formatted !== 0) {\n            return Math.abs(formatted);\n          }\n    \n          if (!formatted.match(numberRegexp)) return 1; // if not only numbers\n    \n          return Math.abs(formatted > (this.getMarks[1] - this.getMarks[0]) / 2 ? 1 : parseInt(formatted));\n        },\n        getMin () {\n          if(validators.validateExpression(this.min)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderMin) ? _.trim(this.min, '`').replace(',', '.') : _.trim(this.codeModes.sliderMin, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 0;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getMax () {\n          if(validators.validateExpression(this.max)) return;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderMax) ? _.trim(this.max, '`').replace(',', '.') : _.trim(this.codeModes.sliderMax, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getDefault() {\n          if(validators.validateExpression(this.sliderDefaultValue)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderDefaultValue) ? _.trim(this.sliderDefaultValue, '` \\'\"').replace(',', '.') : _.trim(this.codeModes.sliderDefaultValue, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getDefaultStart() {\n          if(validators.validateExpression(this.sliderDefaultStart)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderDefaultStart) ? _.trim(this.sliderDefaultStart, '` \\'\"').replace(',', '.') : _.trim(this.codeModes.sliderDefaultStart, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        getDefaultEnd() {\n          if(validators.validateExpression(this.sliderDefaultEnd)) return 0;\n          \n          const numberRegexp = /^-?\\d+\\.?\\d*$/mg;\n          \n          const formatted = _.isUndefined(this.codeModes.sliderDefaultEnd) ? _.trim(this.sliderDefaultEnd, '` \\'\"').replace(',', '.') : _.trim(this.codeModes.sliderDefaultEnd, ' \"`\\'');\n          if (!formatted.match(numberRegexp)) return 100;\n          if (+formatted % 1 !== 0) {\n            return parseFloat((+formatted).toFixed(4));\n          }\n          return parseInt(formatted);\n        },\n        sliderData() {\n          if(validators.validateExpression(this.max) || validators.validateExpression(this.min) || validators.validateExpression(this.step))\n            return [];\n            \n          \n          if (Math.abs(this.getMax - this.getMin) % this.getStep !== 0 && this.getStep !== 0) {\n            const mod = Math.abs(this.getMax - this.getMin) % this.getStep;\n            let total = parseInt((Math.abs(this.getMax - this.getMin) - mod) / this.getStep);\n      \n            let step = null;\n            if (total >= 1000) {\n              total = 1000;\n              step = parseFloat(Math.abs(this.getMax - this.getMin) / 1002).toFixed(4);\n            }\n      \n            const start = Math.min(+this.getMin, +this.getMax);\n            step =  step || +this.getStep;\n            const toFixedNumber = this.getMarks[1] - this.getMarks[0] > 100 ? 0 : 4;\n      \n            let sliderData = Array.from(Array(total + 2), (_, i) => parseFloat((start + step * i).toFixed(toFixedNumber).replace(/.0000$/, '')));\n            sliderData[sliderData.length - 1] = this.getMarks[1];\n            \n            return sliderData\n          }\n    \n          return [];\n        },\n        \n        showSinglePointWarning() {\n          if(!this.sliderData || _.isEmpty(this.sliderData) || _.isEmpty(this.closestSingleSteps)) return false;\n          if(this.sliderType !== `single`) return false;\n          \n          return !_.find(this.sliderData, (el => el === this.getDefault));\n        },\n        showDefaultStartWarning() {\n          if(!this.sliderData || _.isEmpty(this.sliderData) || _.isEmpty(this.closestStartSteps)) return false;\n          if(this.sliderType !== `range`) return false;\n          \n          return !_.find(this.sliderData, (el => el === this.getDefaultStart));\n        },\n        showDefaultEndWarning() {\n          if(!this.sliderData || _.isEmpty(this.sliderData) || _.isEmpty(this.closestEndSteps)) return false;\n          if(this.sliderType !== `range`) return false;\n          \n          return !_.find(this.sliderData, (el => el === this.getDefaultEnd));\n        },\n        \n        showWarning() {\n          return this.showSinglePointWarning || this.showDefaultStartWarning || this.showDefaultEndWarning;\n        },\n        \n        closestSingleSteps() {\n          return this.findClosestSteps(this.getDefault);\n        },\n        closestStartSteps() {\n          return this.findClosestSteps(this.getDefaultStart);\n        },\n        closestEndSteps() {\n          return this.findClosestSteps(this.getDefaultEnd);\n        }\n    },\n    methods: {\n      setDefaultValue(value, variable) {\n        if(_.has(this.codeModes, variable)) {\n          \n          const codeModes = _.cloneDeep(this.codeModes);\n          \n          codeModes[variable] = `\\`${value}\\``;\n          \n          this.$emit(`update:codeModes`, codeModes);\n          return;\n        }\n        \n        this.$emit(`update:${variable}`, `\\`${value}\\``);\n      },\n      findClosestSteps(defaultValue) {\n        if(!this.sliderData || _.isEmpty(this.sliderData)) return [];\n          \n        const closestIndex = _.findIndex(this.sliderData, el => el > defaultValue);\n        \n        if(closestIndex === -1) return [];\n        \n        if(closestIndex === 0) {\n          return [this.sliderData[closestIndex]];\n        }\n        \n        return [this.sliderData[closestIndex - 1], this.sliderData[closestIndex]]\n      }\n    },\n    props : {\n        sliderDefaultValue : {\n            type : String,\n            default : ''\n        },\n        sliderDefaultStart: {\n          type: String,\n          default: ''\n        },\n        sliderDefaultEnd: {\n          type: String,\n          default: ''\n        },\n\n        codeModes: {\n          type: Object,\n          default: () => ({})\n        },\n        \n        min: {\n          type: String,\n          default: ''\n        },\n        max: {\n          type: String,\n          default: ''\n        },\n        \n        step: {\n          type: String,\n          default: ''\n        },\n        sliderType: {\n          type: String,\n          default: ''\n        },\n\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "82d4aac2-fe86-45f9-9fb3-57ce74f49619",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "82d4aac2-fe86-45f9-9fb3-57ce74f49619",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-alert :dismissible=\"false\" type=\"warning\" v-show=\"showWarning\">\r\n  \r\n  <div v-if=\"showSinglePointWarning\" class=\"warn-message\">\r\n    Min would be set as default. Change Step to use your <strong>Default</strong> value, or select closest steps: <span v-for=\"(step, index) in closestSingleSteps\">{{ index ? `, ` : `` }}<a href=\"#\" @click.prevent=\"setDefaultValue(step, 'sliderDefaultValue')\">{{ step }}</a></span>\r\n  </div>\r\n  \r\n  <div v-if=\"showDefaultStartWarning\" class=\"warn-message\">\r\n    Min would be set as default. Change Step to use your <strong>Default start</strong> value: <span v-for=\"(step, index) in closestStartSteps\">{{ index ? `, ` : `` }}<a href=\"#\" @click.prevent=\"setDefaultValue(step, 'sliderDefaultStart')\">{{ step }}</a></span>\r\n  </div>\r\n  \r\n  <div v-if=\"showDefaultEndWarning\" class=\"warn-message\">\r\n    Min would be set as default. Change Step to use your <strong>Default end</strong> value: <span v-for=\"(step, index) in closestEndSteps\">{{ index ? `, ` : `` }}<a href=\"#\" @click.prevent=\"setDefaultValue(step, 'sliderDefaultEnd')\">{{ step }}</a></span>\r\n  </div>\r\n</or-alert>\r\n\r\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "82d4aac2-fe86-45f9-9fb3-57ce74f49619",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".warn-message {\n  margin-bottom: .5rem;\n  \n  &:last-child {\n    margin-bottom: 0;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c6e8fe74-5845-4305-a0ee-3561781f2e2f",
                    "data": {
                      "label": "Step",
                      "helpText": "",
                      "variable": "sliderStep",
                      "multiline": false,
                      "placeholder": "Specify the size of each movement",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f4552f58-a04d-4ab1-9dfb-03c01593de75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "869a4f32-b9ee-4757-a467-1ab5ab0dd28e",
                          "errorMessage": "Step is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "4f2145f4-5b8c-4ed4-adfa-7a04c43e9dd5",
                                "ruleType": {
                                  "func": "{ return !(_.isNil(firstValue) || _.isEmpty(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "mixed"
                                  ],
                                  "label": "has a value",
                                  "modes": [
                                    "trimQuotes"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "(!_.trim(schema.sliderStep, '`')) && (!_.trim(schema.sliderStep, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "schema.sliderStep",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "2fd63c6c-da41-4c61-b989-4e8fa3ad0932",
                          "errorMessage": "Step is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "7a6a1380-04a7-4879-839f-bcede79d6805",
                                "ruleType": {
                                  "func": "{ return _.isNil(firstValue) ? _.isNil(secondValue) : _.isNil(secondValue) ? false : typeof firstValue === 'object' ? firstValue.constructor.toString().split(' ')[1] === secondValue.constructor.toString().split(' ')[1] : (typeof firstValue) === (typeof secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "is same type as",
                                  "modes": false,
                                  "category": "general"
                                },
                                "codeValue": "(!_.trim(schema.sliderStep, '`').match(/^\\d+([\\.|\\,]?\\d+)?$/)) && (!_.trim(schema.sliderStep, '`').match(/^\\`?\\$\\{.*(}`?)$/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "0093b256-b041-49ea-a9a6-21a191c5064a",
                          "errorMessage": "Min decimal is 0.0001",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "edf3c60f-55f2-4c7f-94d1-97c5cea7b8ac",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "((_.trim(schema.sliderStep, '`').replace(',', '.').split('.')[1] ? _.trim(schema.sliderStep, '`').replace(',', '.').split('.')[1].length > 4 : splitted)) && (!_.trim(schema.sliderStep, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f4552f58-a04d-4ab1-9dfb-03c01593de75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "129ac9cb-85f6-4e9a-ba48-5940f82237ca",
                    "data": {
                      "help": "",
                      "label": "Units",
                      "variable": "sliderUnit",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. kg, $, ℃",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "5",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9c78f638-7546-4a86-9266-de83a4742105",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "b71b13ea-0a91-446b-b0d2-a178fb0a8514",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "32b3e48c-475c-40c8-8786-a510034b9dcd",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.sliderUnit, '`').length > 5",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "31bdab8c-0f2e-4e53-88b7-2cdc3ac786a4",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.sliderUnit",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9c78f638-7546-4a86-9266-de83a4742105",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "ec7100a2-9d86-4509-bf6e-fbd7304b1d62",
                    "data": {
                      "label": "Unit position",
                      "options": [
                        {
                          "label": "At the beginning",
                          "value": "`start`",
                          "checked": false,
                          "vforkey": "c144f9d5-1de2-44e5-a6c6-c99949e3fd93"
                        },
                        {
                          "label": "At the end",
                          "value": "`end`",
                          "checked": false,
                          "vforkey": "8f1ff344-e8e6-44d7-bdc9-3129e319fe28"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "sliderUnitPosition",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`start`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "df3d95d7-fa72-4fce-862a-f9e9e8240f30",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'),  'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "df3d95d7-fa72-4fce-862a-f9e9e8240f30",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'),  'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "7b335235-255e-432a-a3b8-0f72d0dc1e13",
                    "data": {
                      "label": "Use custom labels",
                      "helpText": "",
                      "variable": "sliderUseCustomLabels",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b82e21ad-df63-4774-aa33-cf0c0276ec0e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b82e21ad-df63-4774-aa33-cf0c0276ec0e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "52fb901b-f8f0-4b9a-ad3b-b0a4847b0a69",
                    "data": {
                      "data": "{\n  \"sliderCustomLabels\": [\n    {\n      \"label\": \"``\",\n      \"value\": \"``\"\n    },\n    {\n      \"label\": \"``\",\n      \"value\": \"``\"\n    }\n  ]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  sliderCustomLabels: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`')\n      },\n      notUniqValues (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return this.schema.sliderCustomLabels.filter(el => el.value === obj.value).length <= 1\n      },\n      emptyValue (obj) {\n        return _.trim(obj.value, '`')\n      },\n      labelOutOfLength (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`').length <= 400\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.sliderCustomLabels\"\n  :inputComponent=\"schema.inputComponent\"\n  :sliderLabelTypes=\"schema.sliderLabelTypes\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-vpcuojtamisgehwxzdqbyfrkln",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        sliderLabelTypes: String,\n        inputComponent: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.sliderCustomLabels.$each[${index}].emptyLabel`, this.v)) {\n          return 'Label is required.'\n        } \n        if (!this.getValue(`schema.sliderCustomLabels.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      },\n      isValueUniq (index) {\n          return this.getValue(`schema.sliderCustomLabels.$each[${index}].notUniqValues`, this.v)\n      },\n      isValueEmpty (index) {\n        return this.getValue(`schema.sliderCustomLabels.$each[${index}].emptyValue`, this.v)\n      },\n      isValueInvalid (index) {\n        return !this.isValueUniq(index) || !this.isValueEmpty(index);\n      },\n      getValueErrorMessage(index) {\n        if(!this.isValueEmpty(index)) return `Value is required.`\n        if(!this.isValueUniq(index)) return `Value must be unique.`\n        \n        return ``;\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "33d26fe2-b32b-43b1-9544-718aefce1a1f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "00aea39d-8b81-4edf-8ec3-c1e5310f9b6f",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "33d26fe2-b32b-43b1-9544-718aefce1a1f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "00aea39d-8b81-4edf-8ec3-c1e5310f9b6f",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    :canDeleteItems=\"computedValue.length > 2\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Label ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"5\"\n          help=\"Suggested length is up to 5 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.sliderCustomLabels.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.sliderCustomLabels.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-text-expression\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Value ${item.index + 1}`\"\n          placeholder=\"Add value here\"\n          :invalid=\"isValueInvalid(item.index)\"\n          :error=\"getValueErrorMessage(item.index)\"\n        />\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add label</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "33d26fe2-b32b-43b1-9544-718aefce1a1f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "00aea39d-8b81-4edf-8ec3-c1e5310f9b6f",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "b7e27be6-5121-4683-b42e-31d8ebdd78b0",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Function to define user message, that will be returned in chat",
                      "helpText": "",
                      "variable": "sliderCustomFunction",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0667f944-b381-47be-9bdd-341864bf90d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "d3847309-4700-446d-8751-56b9a9fdd683",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0667f944-b381-47be-9bdd-341864bf90d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'slider')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "d3847309-4700-446d-8751-56b9a9fdd683",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.sliderUseCustomLabels",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "ccccb20b-fd45-45e5-ac00-5162903ea0c2",
                    "data": {
                      "data": "{\n  \"medias\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `{}`;\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/medias/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  medias: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.medias\" \n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-feucqhijmypzawbkndlsvgotxr",
                      "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: [],\n        maxFiles: 10\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cc1cf2a-183e-4085-82a8-319d74fffe49",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cc1cf2a-183e-4085-82a8-319d74fffe49",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"true\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"medias-wrapper\">\n        <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <span>{{ item.item.name }}</span>\n          <div class=\"file-controls\">\n            <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"item.item.name && !item.item.location && !item.item.linkUrl\"></or-progress-circular>\n            <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n          </div>\n      </div>\n        <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.medias.$each[${item.index}].$invalid`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => updateMedias(item.item, val)\"\n          />\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n      <or-button\n        v-if=\"value && value.length\"\n        :disabled=\"readonly\"\n        :class=\"['rwc-media__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addMedia\">Add file</or-button>\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add attachment from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n  <div v-if=\"getValue(`schema.messageText.$invalid`, v)\" class=\"rwc__error-message\">\n    Message should contain a text or attachment\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cc1cf2a-183e-4085-82a8-319d74fffe49",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n  \n  .medias-wrapper {\n    width: 100%;\n  }\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "d557c63c-855e-4319-aa9c-b729b40d948c",
                    "data": {
                      "label": "Input type",
                      "options": [
                        {
                          "label": "Simple text",
                          "value": "text",
                          "vforkey": "23b37895-9cf3-4609-9f4b-e871da67d8c4"
                        },
                        {
                          "label": "Numeric",
                          "value": "number",
                          "vforkey": "af4eb5ce-09c1-4c20-a5b5-b05c60ce5d8f"
                        },
                        {
                          "label": "Password",
                          "value": "password",
                          "vforkey": "704e0efb-8ad1-4a0d-9e31-6ac130605e95"
                        },
                        {
                          "label": "Email",
                          "value": "email",
                          "vforkey": "bdf1ebad-1fb9-4ef2-a171-11952412eba4"
                        },
                        {
                          "label": "Custom pattern",
                          "value": "custom",
                          "vforkey": "81f81d33-c5da-43a5-83f7-c257ff4faab8"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "textInputType",
                      "placeholder": "Select Field",
                      "defaultValue": "text",
                      "allowCodeMode": true,
                      "renderCondition": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formSelect",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (simple)",
                    "compiled": {},
                    "component": "formSelect",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelect\"]"
                    ]
                  },
                  {
                    "id": "c8fecf9e-76fe-4aec-979d-4a1de9ff05f7",
                    "data": {
                      "help": "",
                      "label": "Pattern",
                      "variable": "textInputCustomPattern",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p>Custom pattern allows only to add formatting for requested data and doesn't provide validation for it. To specify pattern symbol use next chars:</p>\n<ul>\n  <li># - only digits (0-9)</li>\n  <li>X - [0-9a-zA-Z]</li>\n  <li>S - [a-zA-Z]</li>\n  <li>A - [a-zA-Z] will transform to UPPER CASE</li>\n  <li>a - [a-zA-Z] will transform to lower case</li>\n  <li>! - escape char pattern and use as a regular symbol</li>\n</ul>\n\n<p>Examples:</p>\n<p>To request 4 last credit card digits, use pattern:  !#!#!#!# !#!#!#!# !#!#!#!# !#!#!#!# ####</p>\n<p>When end-user adds digits (e.g. 4444) , text input and submitted data will contain  : #### #### #### 4444</p>\n<p>To request phone number for specific country code, use pattern: +1 (500) ###-##-##</p>\n<p>When end-user adds digits (e.g. 1234567) ,  text input and submitted data will contain +1 (500) 123-45-67</p>\n",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength% char",
                      "maxCharLength": 160,
                      "disablePopover": false,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ca5d78c9-fc1f-4058-8729-a94ebb59dd5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "1cf01821-f9d5-409d-abcd-c2eefdc0b492",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.textInputType, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": false,
                      "iconHelpTextOption": "modal",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ca5d78c9-fc1f-4058-8729-a94ebb59dd5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "1cf01821-f9d5-409d-abcd-c2eefdc0b492",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.textInputType, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "7b79ed0a-2426-4ac9-8919-46090c9e2ba7",
                    "data": {
                      "help": "",
                      "label": "User's reply placeholder",
                      "variable": "textPlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Write a reply",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "30",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "17015f01-c354-455f-b2f0-5016495c8541",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "1eed21a0-1709-4c66-853d-91b15ff29129",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "54744b39-48d8-41a9-83a4-cba77b09f350",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.textPlaceholder, '`').length > 30 && (!_.trim(schema.textPlaceholder, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "17015f01-c354-455f-b2f0-5016495c8541",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "3502ae56-7c8d-4b4b-8b1c-19007306033d",
                    "data": {
                      "label": "Time format",
                      "options": [
                        {
                          "label": "Auto-detect",
                          "value": "`auto`",
                          "checked": false,
                          "vforkey": "4b986fe0-91ca-426b-8210-1ccce57fee0c"
                        },
                        {
                          "label": "12-hour clock",
                          "value": "`12`",
                          "checked": false,
                          "vforkey": "606e70b1-e59b-4f70-9b92-2807ff3a782a"
                        },
                        {
                          "label": "24-hour clock",
                          "value": "`24`",
                          "checked": false,
                          "vforkey": "e5dfc746-edd2-4ebc-8cf3-960fb4f50b3e"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "timepickerFormat",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`auto`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b502cb56-dff5-4ef1-8ecc-885e7ccb1813",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'timepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b502cb56-dff5-4ef1-8ecc-885e7ccb1813",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'timepicker')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "176d507b-ca93-4195-b599-209b55a46d70",
                    "data": {
                      "label": "Number of attachments",
                      "options": [
                        {
                          "label": "One",
                          "value": "`0`",
                          "checked": false,
                          "vforkey": "e52c95af-6afb-4ae2-bf44-95c403d13852"
                        },
                        {
                          "label": "Multiple",
                          "value": "`1`",
                          "checked": false,
                          "vforkey": "ce7aee82-3687-412f-b162-d16f2a01be21"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "attachmentsNumber",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`0`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "10b5815a-6d78-4655-81e5-e7d8323bbb33",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "horizontal",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "10b5815a-6d78-4655-81e5-e7d8323bbb33",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "b02b422d-e887-4bf8-a098-cf434802c15b",
                    "data": {
                      "label": "Store user files as private",
                      "helpText": "",
                      "variable": "isPrivateFiles",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "Uploaded files won't be accessible in chat client",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "75796a55-000b-40f9-87f4-dc0d7f1b4cf6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "tooltip",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "75796a55-000b-40f9-87f4-dc0d7f1b4cf6",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "538c09e4-fa60-4b3b-8e18-01e478f43d59",
                    "data": {
                      "label": "Allow only chosen file types",
                      "helpText": "",
                      "variable": "attachmentsAllowChosen",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c9543938-c2ec-48f4-b47f-e983a1003322",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c9543938-c2ec-48f4-b47f-e983a1003322",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "bb5d9112-fc37-499a-b6d3-eac7f1386583",
                    "data": {
                      "data": "{\n  \"attachmentsAllowedTypes\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  attachmentsAllowedTypes: {\n    notEmpty (obj) {\n      return !_.isEmpty(obj)\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.attachmentsAllowedTypes\"\n  :attachmentsAllowChosen=\"schema.attachmentsAllowChosen\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-euzbgtonldrvxiymcphqksjfwa",
                      "componentLogic": "{\n  data () {\n    return {\n      options: [\n        {\n          \"groupLabel\": \"Audio files\",\n          \"items\": [\n            {\n              \"label\": \"M4A\",\n              \"value\": \"M4A\"\n            },\n            {\n              \"label\": \"MP3\",\n              \"value\": \"MP3\"\n            },\n            {\n              \"label\": \"MPA\",\n              \"value\": \"MPA\"\n            },\n            {\n              \"label\": \"WAV\",\n              \"value\": \"WAV\"\n            },\n            {\n              \"label\": \"WMA\",\n              \"value\": \"WMA\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Compressed files\",\n          \"items\": [\n            {\n              \"label\": \"7Z\",\n              \"value\": \"7Z\"\n            },\n            {\n              \"label\": \"CBR\",\n              \"value\": \"CBR\"\n            },\n            {\n              \"label\": \"DEB\",\n              \"value\": \"DEB\"\n            },\n            {\n              \"label\": \"GZ\",\n              \"value\": \"GZ\"\n            },\n            {\n              \"label\": \"PKG\",\n              \"value\": \"PKG\"\n            },\n            {\n              \"label\": \"RAR\",\n              \"value\": \"RAR\"\n            },\n            {\n              \"label\": \"ZIP\",\n              \"value\": \"ZIP\"\n            },\n            {\n              \"label\": \"ZIPX\",\n              \"value\": \"ZIPX\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Data files\",\n          \"items\": [\n            {\n              \"label\": \"CSV\",\n              \"value\": \"CSV\"\n            },\n            {\n              \"label\": \"DAT\",\n              \"value\": \"DAT\"\n            },\n            {\n              \"label\": \"SDF\",\n              \"value\": \"SDF\"\n            },\n            {\n              \"label\": \"TAR\",\n              \"value\": \"TAR\"\n            },\n            {\n              \"label\": \"XML\",\n              \"value\": \"XML\"\n            },\n            {\n              \"label\": \"JSON\",\n              \"value\": \"JSON\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Image files\",\n          \"items\": [\n            {\n              \"label\": \"BMP\",\n              \"value\": \"BMP\"\n            },\n            {\n              \"label\": \"GIF\",\n              \"value\": \"GIF\"\n            },\n            {\n              \"label\": \"HEIC\",\n              \"value\": \"HEIC\"\n            },\n            {\n              \"label\": \"JPG\",\n              \"value\": \"JPG\"\n            },\n            {\n              \"label\": \"JPEG\",\n              \"value\": \"JPEG\"\n            },\n            {\n              \"label\": \"PNG\",\n              \"value\": \"PNG\"\n            },\n            {\n              \"label\": \"PSD\",\n              \"value\": \"PSD\"\n            },\n            {\n              \"label\": \"TIF\",\n              \"value\": \"TIF\"\n            },\n            {\n              \"label\": \"TIFF\",\n              \"value\": \"TIFF\"\n            },\n            {\n              \"label\": \"SVG\",\n              \"value\": \"SVG\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Spreadsheet files\",\n          \"items\": [\n            {\n              \"label\": \"XLR\",\n              \"value\": \"XLR\"\n            },\n            {\n              \"label\": \"XLS\",\n              \"value\": \"XLS\"\n            },\n            {\n              \"label\": \"XLSX\",\n              \"value\": \"XLSX\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Text files\",\n          \"items\": [\n            {\n              \"label\": \"DOC\",\n              \"value\": \"DOC\"\n            },\n            {\n              \"label\": \"DOCX\",\n              \"value\": \"DOCX\"\n            },\n            {\n              \"label\": \"LOG\",\n              \"value\": \"LOG\"\n            },\n            {\n              \"label\": \"ODT\",\n              \"value\": \"ODT\"\n            },\n            {\n              \"label\": \"PAGES\",\n              \"value\": \"PAGES\"\n            },\n            {\n              \"label\": \"PDF\",\n              \"value\": \"PDF\"\n            },\n            {\n              \"label\": \"RTF\",\n              \"value\": \"RTF\"\n            },\n            {\n              \"label\": \"TXT\",\n              \"value\": \"TXT\"\n            },\n            {\n              \"label\": \"WPD\",\n              \"value\": \"WPD\"\n            }\n          ]\n        },\n        {\n          \"groupLabel\": \"Video files\",\n          \"items\": [\n            {\n              \"label\": \"AVI\",\n              \"value\": \"AVI\"\n            },\n            {\n              \"label\": \"FLV\",\n              \"value\": \"FLV\"\n            },\n            {\n              \"label\": \"M4V\",\n              \"value\": \"M4V\"\n            },\n            {\n              \"label\": \"MOV\",\n              \"value\": \"MOV\"\n            },\n            {\n              \"label\": \"MP4\",\n              \"value\": \"MP4\"\n            },\n            {\n              \"label\": \"MPG\",\n              \"value\": \"MPG\"\n            },\n            {\n              \"label\": \"WMV\",\n              \"value\": \"WMV\"\n            }\n          ]\n        },\n      ],\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getSortedOptions () {\n          return this.options.map(el => {\n            el.items = _.sortBy(el.items, 'label');\n            return el;\n          })\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: Object,\n        attachmentsAllowChosen: Boolean,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue (key, el) {\n        return _.get(el || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f072ab4-0a87-4fb5-babb-c0b784f50cc7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "58185ce5-692b-4344-b5f7-b23df4b4f638",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.attachmentsAllowChosen",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f072ab4-0a87-4fb5-babb-c0b784f50cc7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "58185ce5-692b-4344-b5f7-b23df4b4f638",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.attachmentsAllowChosen",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-files-types\">\n  <or-select-expression\n    ref=\"selectGroups\"\n    label=\"File types\"\n    multiple\n    extendableOptions\n    extendsByLabel\n    hasGroups\n    hasSearch\n    extraGroupLabel=\"Custom file types\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    placeholder=\"Select file types\"\n    :mergeFields=\"mergeFields\"\n    :options=\"getSortedOptions\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    :invalid=\"!getValue(`schema.attachmentsAllowedTypes.notEmpty`, v)\"\n    error=\"File type is required\"\n    v-model=\"computedValue\"\n  />\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f072ab4-0a87-4fb5-babb-c0b784f50cc7",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'attachments')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "58185ce5-692b-4344-b5f7-b23df4b4f638",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.attachmentsAllowChosen",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-files-types {\n  .or-select-expression .ui-select__display-selected {\n    background-color: #64b2da;\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-close-button {\n    color: #fff;\n  }\n  .or-select-expression .ui-select__display-value .merge-tag {\n    color: #fff;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "98c9725a-b34e-4050-b755-0fadfd1cbbe6",
                    "data": {
                      "help": "",
                      "label": "Button label",
                      "variable": "geolocationBtn",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Share location",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bbd4208e-e874-4eef-999a-9b2e5f70a538",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "f908fa36-0957-41b6-95f3-771912c08203",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "45851cf1-2099-45fa-aea8-17c81a78a356",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.geolocationBtn, '`').length > 24 && !(_.trim(schema.geolocationBtn, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "bbd4208e-e874-4eef-999a-9b2e5f70a538",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "13ff862b-4519-4b3b-b841-debe8ee021aa",
                    "data": {
                      "label": "Set default location",
                      "helpText": "",
                      "variable": "geolocationSetDefault",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "152e4115-9d56-426a-8e59-0d90925e8012",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "152e4115-9d56-426a-8e59-0d90925e8012",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "2fcdfdf5-1e4a-4e2e-9964-d289c5dc0c27",
                    "data": {
                      "label": "Latitude",
                      "helpText": "",
                      "variable": "geolocationLat",
                      "multiline": false,
                      "placeholder": "Add value here",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a50c29f3-cc15-4765-a1f9-99112b2392a5",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "8e3e427a-c9bf-4840-acb0-e39ce1a4d895",
                          "errorMessage": "Latitude is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "ef079717-1be2-43fc-a647-84ce0dce1dd3",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLat, '`')",
                                "valueType": "advanced",
                                "firstValue": "schema.inputComponent",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "ce15b6c1-49f8-4ec9-ae72-7fa876a0b8f3",
                          "errorMessage": "Latitude is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "6b646f8b-bd91-47a5-a5e1-31eb3a7a240d",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLat, '`').match(/^-?[0-9\\.]+$/) && (!_.trim(schema.geolocationLat, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a50c29f3-cc15-4765-a1f9-99112b2392a5",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "af95ab89-8732-4b18-b77d-e4c1d27b3334",
                    "data": {
                      "label": "Longitude",
                      "helpText": "",
                      "variable": "geolocationLng",
                      "multiline": false,
                      "placeholder": "Add value here",
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "809ea92e-184d-42a6-b867-437dcffba82d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [
                        {
                          "vforkey": "8394bc79-0f7c-4398-ac46-1e669bb4e4a2",
                          "errorMessage": "Longitude is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "0299ca3a-b222-4a5e-8efe-f9e3dac33467",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLng, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "caaeb28c-0523-4c32-9b19-cb12694c6c83",
                          "errorMessage": "Longitude is expected as a number.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "d3bb04c8-6310-4146-a456-b19cdf40c1c0",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.geolocationLng, '`').match(/^-?[0-9\\.]+$/) && (!_.trim(schema.geolocationLng, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "809ea92e-184d-42a6-b867-437dcffba82d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text input",
                    "compiled": {},
                    "component": "formTextInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                    ]
                  },
                  {
                    "id": "27a321f0-2985-4c45-ad70-70f1b53d99e4",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :geolocationLat.sync=\"schema.geolocationLat\"\n  :geolocationLng.sync=\"schema.geolocationLng\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-enogfupbvhmtyrajslzckxwqid",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    data () {\n      return {\n        defaultLocationWindow: null\n      }\n    },\n    props : {\n      geolocationLat: String,\n      geolocationLng: String,\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    mounted () {\n      window.addEventListener('message', this.frameMessageHandler, false);\n    },\n    methods: {\n      openMapWindow () {\n        const url = `${this.$flow.chatUiUrl}/set-pin`\n        // const url = `http://localhost:8090/set-pin`\n        try {\n          this.defaultLocationWindow = window.open(url, 'default_location', 'width=600,height=600,top=0');\n        } catch (e) {\n          console.warn(e);\n          this.defaultLocationWindow.close();\n          this.defaultLocationWindow = window.open(url, 'default_location', 'width=600,height=600,top=0');\n        }\n      },\n      frameMessageHandler (e) {\n        if (e.data === 'PREVIEW_LOADED' && this.defaultLocationWindow) {\n          this.sendMessageToPreview();\n        }\n        if (e.data.type === 'DATA_FROM_FRAME' && this.defaultLocationWindow) {\n          this.defaultLocationWindow.close();\n          const {lat, lng} = _.get(e, 'data.data.data')\n          this.$emit('update:geolocationLat', '`' + lat + '`')\n          this.$emit('update:geolocationLng', '`' + lng + '`')\n        }\n      },\n      sendMessageToPreview () {\n        if (!this.defaultLocationWindow) return;\n        \n        this.defaultLocationWindow.postMessage({\n          type: 'changeSendBehavior',\n          value: 'to-parent-window'\n        }, '*');\n        \n        this.defaultLocationWindow.postMessage({\n          type: 'messageData',\n          message: {\n            message: 'Set default pin position when user blocks geolocation tracking.',\n            medias: [],\n            answerComponent: {\n              component: 'rwc-location',\n              vBind: {\n                buttonLabel: 'Pick location',\n                defaultLat: this.geolocationLat,\n                defaultLng: this.geolocationLng\n              },\n              showComponentInMessage: true\n            }\n          }\n        }, '*');\n          \n        const config = _.get(this.conversation, 'meta.lookAndFeel')\n        this.defaultLocationWindow.postMessage({\n          type: 'chatConfig',\n          config: {\n            ...config\n          }\n        }, '*');\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "56932013-35b1-45c8-8a12-f712ec1ce384",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "56932013-35b1-45c8-8a12-f712ec1ce384",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-button color=\"primary\" type=\"secondary\" :disabled=\"readonly\" @click=\"openMapWindow\">\n    Set on map\n  </or-button>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "56932013-35b1-45c8-8a12-f712ec1ce384",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'geolocation') && schema.geolocationSetDefault",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "6533116d-a17a-4482-9d64-a071fc43b337",
                    "data": {
                      "help": "Suggested length is up to 24 chars.",
                      "label": "Button label",
                      "variable": "signatureBtn",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "039efce4-0b91-41b1-a89e-8c0c9f98201d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'signature')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "063abe78-52a1-4798-ad46-7b8d96a2e7c3",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "74d8949f-022e-453e-b747-84287ae194f2",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.signatureBtn, '`').length > 24  && (!_.trim(schema.signatureBtn, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "98fc0c16-1f43-4f0f-bd3e-6109c168e252",
                          "errorMessage": "Button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "7cd340ee-a255-4b3b-8b03-7f86d93a87a5",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.signatureBtn, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "039efce4-0b91-41b1-a89e-8c0c9f98201d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'signature')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "b3f6dc77-c8b4-4c7e-a7f0-af132ac23797",
                    "data": {
                      "help": "",
                      "label": "Submit button label",
                      "variable": "ratingSubmitLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Submit",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "15",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ebb0e7fd-c7fd-414b-aed9-bb45b9ea0e3f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "e26630a5-1151-4ddd-912c-31fe2d93ae21",
                          "errorMessage": "Submit button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "eb8cb334-6ed7-41e5-966e-f3e061e692e3",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.ratingSubmitLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "schema.ratingSubmitLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "d7dcd388-d394-46a9-9212-fad4bc2e8fa4",
                          "errorMessage": "Limit is exceeded, text will be truncated",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a644df01-7ade-4e21-80eb-d6abd4aa063e",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.ratingSubmitLabel, '`').length > 15",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "e5987dd1-de95-4f7c-9ff2-df8e5bdd4f17",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.ratingSubmitLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ebb0e7fd-c7fd-414b-aed9-bb45b9ea0e3f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "fe65690d-7e93-4565-b10d-dd13da3c53e9",
                    "data": {
                      "help": "",
                      "label": "Cancel button label",
                      "variable": "ratingDiscardLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. No, thanks",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "15",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4b65f326-5907-47b6-92b6-59b79b5061cf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "87a40e67-acc7-47e3-a5e0-24389faa5fd7",
                          "errorMessage": "Cancel button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e2ced27c-1ab5-4935-b24d-ddfc071a926f",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.ratingDiscardLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "750dbb28-6f5c-446e-800c-95a789855d85",
                          "errorMessage": "Limit is exceeded, text will be truncated",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "d1c63520-d4fd-4a18-a4c4-2773bf5f4843",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.ratingDiscardLabel, '`').length > 15",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "1761f315-7c06-46c2-be82-d1743ea3b02e",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.ratingDiscardLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4b65f326-5907-47b6-92b6-59b79b5061cf",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "f7d99281-32ba-4a60-b16f-4a7eda027ed6",
                    "data": {
                      "label": "Input for feedback",
                      "helpText": "",
                      "variable": "rateInput",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cf2adfb-ed5e-42b3-9bef-e71834cccc13",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "1cf2adfb-ed5e-42b3-9bef-e71834cccc13",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "6ccfcfe1-5979-489b-a2fc-2f3a1c47a5a4",
                    "data": {
                      "help": "",
                      "label": "Placeholder for feedback input",
                      "variable": "ratePlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "30",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8addf5b9-d7ab-462f-9f13-6686aafe7736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b3f9d37e-e064-4895-a8e1-83f6d58519de",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.rateInput",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "fd14d99d-0dd4-4cdc-ba47-4f8839b9c4a0",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e561cdc0-4095-455c-83a5-19584852227e",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.ratePlaceholder, '`').length > 30  && (!_.trim(schema.ratePlaceholder, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "schema.ratePlaceholder",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8addf5b9-d7ab-462f-9f13-6686aafe7736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'rate')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "b3f9d37e-e064-4895-a8e1-83f6d58519de",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.rateInput",
                            "secondValue": "true",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "71257ce1-77d0-410b-907a-5faf24fa7895",
                    "data": {
                      "help": "",
                      "label": "Submit button  label",
                      "variable": "creditBtnLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. Submit",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad7294e2-8b73-405c-8dae-f9776a104a3b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "a427e102-a160-47ac-853c-b1128c4d0f20",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "58e4e7e4-c74a-45d7-8282-42763143dfc0",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.creditBtnLabel, '`').length > 24 && !_.trim(schema.creditBtnLabel, '`').match(/\\$\\{.+?\\}/)",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "a891cd10-e633-48c3-867f-7f88a3a267b2",
                          "errorMessage": "Submit button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "c3b8d15f-4eff-45ce-a124-15965e79d762",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.creditBtnLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad7294e2-8b73-405c-8dae-f9776a104a3b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "c15c9e1d-2741-48bf-9242-46083a90f19a",
                    "data": {
                      "help": "",
                      "label": "Cancel button label",
                      "variable": "creditCancelBtnLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. No, thanks",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength% char",
                      "maxCharLength": "24",
                      "disablePopover": false,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f9f92ab-9959-4586-beff-ac733679536a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "28ea4226-994c-454f-846a-9d1f62e1777e",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "e50c4afb-c751-41f1-90a9-dd0948785668",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.creditCancelBtnLabel, '`').length > 24 && !_.trim(schema.creditCancelBtnLabel, '`').match(/\\$\\{.+?\\}/)",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "vforkey": "9c3f8e97-9af2-46a5-b340-55575e7755ea",
                          "errorMessage": "Cancel button label is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "52411a3a-d1e5-44df-85fc-9e9ac593ced1",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "!_.trim(schema.creditCancelBtnLabel, '`')",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f9f92ab-9959-4586-beff-ac733679536a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "990142bd-eec5-438b-8d0f-b21902a56294",
                    "data": {
                      "help": "Suggested length is up to 400 chars",
                      "label": "Terms and Сonditions checkbox",
                      "variable": "creditTermsLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. %I agree with Terms and Conditions%",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "info",
                          "content": "Wrap text in '%' to produce a link",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "left middle"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "400",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3e1c68a2-fe97-4e55-8068-ad8c82950961",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, \"`\"), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "tooltip",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3e1c68a2-fe97-4e55-8068-ad8c82950961",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, \"`\"), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "afe295b4-0e99-4356-a6a6-a94713a4cb7d",
                    "data": {
                      "data": "{\n  \"creditTerms\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `[]`;\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  creditTerms: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.creditTerms\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ycunfwdgqtvjmihoszkelrabpx",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: [],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              console.log(value)\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f0debfaf-642a-40b7-bd8d-71156d46290b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f0debfaf-642a-40b7-bd8d-71156d46290b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"URL\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.creditTerms.$invalid`, v)\"\n      error=\"Add URL or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add Terms and Сonditions from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f0debfaf-642a-40b7-bd8d-71156d46290b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'credit')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "c08636c7-67c4-42d4-adbd-4e6d4cba7439",
                    "data": {
                      "data": "{\n  \"videoSrc\": {},\n  \"videoTotalDuration\": 0,\n  \"videoUsedLink\": false\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `[]`;\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  videoSrc: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.videoSrc\" \n  :videoTotalDuration.sync=\"schema.videoTotalDuration\"\n  :videoUsedLink.sync=\"schema.videoUsedLink\"\n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-maztosbhkqgdwvjfcpynxlurie",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['mov', 'MOV', 'mp4', 'MP4'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      },\n      value: {\n        handler(nv) {\n          if (!(_.get(this.value, '[0].location') || _.get(this.value, 'location'))) {\n            this.$emit('update:videoTotalDuration', 0)\n          }\n          const isLinksUsed = this.value.hasOwnProperty('linkUrl');\n          if (isLinksUsed) {\n            this.$emit('update:videoUsedLink', true)\n          } else {\n            this.$emit('update:videoUsedLink', false)\n          }\n        },\n        immediate: true,\n        deep: true\n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          const isLinksUsed = this.value.every(el => el.linkUrl);\n          return isLinksUsed\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        },\n        getVideoSrc () {\n          return _.get(this.value, '[0].location') || _.get(this.value, 'location');\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        videoTotalDuration: Number,\n        videoUsedLink: Boolean,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      },\n      onVideoLoad (e) {\n        this.$emit('update:videoTotalDuration', e.target.duration)\n      },\n      onVideoError () {\n        this.$emit('update:videoTotalDuration', 0)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "80e0e26e-98e4-41d6-a2c8-d728f7f005e1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "80e0e26e-98e4-41d6-a2c8-d728f7f005e1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <div class=\"hidden\">\n    <video \n      :src=\"getVideoSrc\"\n      @loadedmetadata=\"onVideoLoad\"\n      @onerror=\"onVideoError\"\n    ></video>\n  </div>\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Video url\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.videoSrc.$invalid`, v)\"\n      error=\"Add video url or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add video from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "80e0e26e-98e4-41d6-a2c8-d728f7f005e1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n.rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.hidden {\n  position: absolute;\n  left: -100000000px;\n  top: -1000000px;\n  opacity: 0;\n  visibility: hidden;\n  width: 0;\n  height: 0;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "00fdf686-ee1c-48e5-a124-a60eb2f0b156",
                    "data": {
                      "data": "{\n  \"videoPoster\": {}\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  if (!medias) return `[]`;\n  let finalMedias = medias.linkUrl ? `{ location: ${medias.linkUrl}, size: ${_.get(medias, 'data.Size')} }` : `{ location: ${JSON.stringify(medias.location)}, size: ${medias.size} }`\n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n  return convertMedias(data)\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  videoPoster: {\n    custom (obj) {\n      return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.videoPoster\" \n  :inputComponent=\"schema.inputComponent\"\n  :is-new=\"isNew\" \n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-tnlcjxspvgdirbuozmwehkqfay",
                      "componentLogic": "{\n    data () {\n      return {\n        allowedFileTypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'svg', 'SVG', 'png', 'PNG', 'heic', 'HEIC', 'tiff', 'TIFF', 'tif', 'TIF'],\n        maxFiles: 1,\n        assetsManagerFiles: [],\n        allowFileUpdate: false\n        \n      };\n    },\n    watch: {\n      assetsManagerFiles (nv) {\n        if(!this.allowFileUpdate) return;\n        this.medias = nv; \n        \n        if(nv.location) {\n          this.allowFileUpdate = false;\n        }\n      },\n      medias: {\n        deep: true,\n        handler(nv) {\n          if(!nv.name) {\n            this.allowFileUpdate = false;\n          }\n        } \n      }\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              console.log(value)\n              let res = _.isArray(value) ? value[0] : value;\n              if (_.isEqual(this.value, res)) return;\n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        },\n        isEmpty () {\n          const isFilesNotEmpty = _.get(this, 'value', []).length && this.value.some(el => el.key || el.linkUrl.slice(1, -1))\n          return !Boolean(isFilesNotEmpty || (this.messageText || '``').slice(1, -1))\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        inputComponent: String,\n        messageText: String,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      setLinkUrlValue (val) {\n        this.medias.linkUrl = val\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem () {\n        this.medias = {}\n      },\n      addMedia () {\n        this.openModal('select-media');\n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = this.addNewUrl();\n        this.medias = _medias\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "556c697c-507d-4f62-a2f5-aa57fb6efb5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "556c697c-507d-4f62-a2f5-aa57fb6efb5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal @open=\"allowFileUpdate = true\" ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!medias.hasOwnProperty('linkUrl')\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"assetsManagerFiles\"\n    />\n  </or-modal>\n  <div v-if=\"medias.name\" class=\"rwc-media__item\">\n    <span>{{ medias.name }}</span>\n    <div class=\"file-controls\">\n      <or-progress-circular class=\"loader\" color=\"multi-color\" size=\"14\" v-show=\"medias.name && !medias.location && !medias.linkUrl\"></or-progress-circular>\n      <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n    </div>\n  </div>\n  <div v-if=\"medias.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n    <or-text-expression\n      v-model=\"medias.linkUrl\"\n      :mergeFields=\"mergeFields\"\n      :steps=\"steps\"\n      :step-id=\"stepId\"\n      :readonly=\"readonly\"\n      label=\"Poster url\"\n      placeholder=\"Enter URL to the file\"\n      :invalid=\"getValue(`schema.videoPoster.$invalid`, v)\"\n      error=\"Add poster url or delete input\"\n    />\n    <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem\"><or-icon>delete</or-icon></button>\n  </div>\n\n  <div v-if=\"!(value.hasOwnProperty('name') || value.hasOwnProperty('location') || value.hasOwnProperty('linkUrl') )\" class=\"rwc-media__buttons\">\n    + Add poster from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "556c697c-507d-4f62-a2f5-aa57fb6efb5e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n.rwc-media__item {\n  .or-text-expression {\n    width: 100%;\n  }\n}\n\n.file-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  button {\n    margin-left: 4px;\n  }\n  \n  .loader {\n    margin-top: 4px;\n  }\n}\n\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "2d5fbe71-b4b9-4d44-aa97-b9a31a4d40ce",
                    "data": {
                      "data": "{\n  \"videoStartTimeTimestring\": \"``\",\n  \"videoStartTime\": \"0\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n   if (/\\$\\{.+?\\}/.test(data)) return data;\n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  videoStartTimeTimestring: {\n    notValid (value) {\n      if (!_.trim(value, '`')) return true\n      if (_.trim(value, '`').match(/^\\s*$/)) return false\n      try {\n        libs.timestring(value, 'ms')\n        if (_.trim(value, '`') == 0) return true\n        if (!value) return true\n        if (/\\$\\{/.test(value)) return true\n        if(!(value.slice(1, -1) || '').match(/^[a-z0-9\\s]+$/gi)) return false\n        if ((value.slice(1, -1) || '').match(/\\`\\$\\\"\\#\\?\\\\\\!\\@\\#\\$\\%\\^\\&\\*\\)\\_\\+\\=\\-\\'\\]\\/\\[\\{\\}/gi)) return false\n        const regex = /^(([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|60)\\s?[ss].*|([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|60)\\s?[mM].*|([0-9]|[0-3][0-9]|4[0-8])\\s?[hH].*|(01-9]|[0-9]\\w+?)\\s?[dD].*)$/;\n        return regex.test(value.slice(1, -1));\n      } catch (e) {\n        if (/\\$\\{/.test(value)) return true\n        return false\n      }\n    },\n    moreThanDuration (value) {\n      if (this.schema.videoUsedLinks || !this.schema.videoTotalDuration || !_.trim(value, '`')) return true\n      try {\n        const val = libs.timestring(value, 'ms')\n        const total = this.schema.videoTotalDuration * 1000\n        return val <= total\n      } catch (e) {\n        console.warn(e)\n        return false\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.videoStartTimeTimestring\"\n  :videoStartTime.sync=\"schema.videoStartTime\"\n  :videoTotalDuration=\"schema.videoTotalDuration\"\n  :videoUsedLink=\"schema.videoUsedLink\"\n  :videoSrc=\"schema.videoSrc\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :v=\"$v\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-lkxzsjidochaebpqtyrwnfvgmu",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) {\n              this.$emit('input', value);\n              \n              let val = 0\n              try {\n                val = libs.timestring(value, 'ms')\n              } catch (e) {\n                console.warn(e)\n              }\n              \n              this.$emit('update:videoStartTime', val)\n            }\n        },\n        getError() {\n          if (!this.getValue(`schema.videoStartTimeTimestring.notValid`, this.v)) {\n            return 'Start time is invalid timestring.'\n          }\n          if (!this.getValue(`schema.videoStartTimeTimestring.moreThanDuration`, this.v)) {\n            return 'Start time must be less than video duration.'\n          }\n        },\n        getVideoDuration () {\n          return this.videoTotalDuration.toFixed(1)\n        }\n    },\n    props : {\n        videoSrc: {\n          type: Object,\n          default: () => ({})\n        },\n        videoUsedLink: Boolean,\n        value : {\n            type : String,\n            default : ''\n        },\n        videoTotalDuration: {\n          type: [Number, String],\n          default: 0\n        },\n        videoStartTime: {\n          type: [String, Number],\n          default: 0\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        v: Object,\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, val) {\n        return _.get(val || this, key)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8c0458d6-b652-436e-936d-6c35e40a5b75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8c0458d6-b652-436e-936d-6c35e40a5b75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div>\n  <or-text-expression\n    label=\"Video start time\"\n    v-model=\"computedValue\"\n    :mergeFields=\"mergeFields\"\n    :stepId=\"stepId\"\n    :steps=\"steps\"\n    placeholder=\"E.g. 1m 20s\"\n    :helpText=\"videoTotalDuration ? `Video duration is ${getVideoDuration}s` : ''\"\n    :invalid=\"getValue(`schema.videoStartTimeTimestring.$invalid`, v)\"\n    :error=\"getError\"\n    :readonly=\"readonly\"\n  ></or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8c0458d6-b652-436e-936d-6c35e40a5b75",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5a1c1632-aa94-4d16-a292-3c3a5ef533fd",
                    "data": {
                      "help": "",
                      "label": "Button label",
                      "variable": "videoBtnLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add text here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "24",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "849776f9-323d-4f6d-92b8-d135cbe29d58",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "bdfc5088-ca40-4aad-ad9f-295325a99988",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "410017ed-e0c3-409d-8f6c-646e62529dc7",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.videoBtnLabel, '`').length > 24",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              },
                              {
                                "modes": [],
                                "vforkey": "224829fe-96ce-43aa-b349-b9689ed62184",
                                "ruleType": {
                                  "func": "{ return !(_.isString(firstValue) && validators.validateExpression(firstValue)) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "doesn't have merge field",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.videoBtnLabel",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "all",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "849776f9-323d-4f6d-92b8-d135cbe29d58",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://notification.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://notification.components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "4c8504d3-5f8e-4420-96c1-c802aa5dfda0",
                    "data": {
                      "label": "Autoplay",
                      "helpText": "",
                      "variable": "videoAutoplay",
                      "trueValue": "",
                      "falseValue": "",
                      "helpTextURL": "",
                      "isHtmlLabel": false,
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "helpTextOption": "none",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b7dca392-2b85-47fa-97ff-0cbd98d5e14a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "iconHelpTextOption": "none",
                      "forceCheckCondition": {
                        "label": "`Force check`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "forceUncheckCondition": {
                        "label": "`Force uncheck`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b7dca392-2b85-47fa-97ff-0cbd98d5e14a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCheckBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Checkbox",
                    "compiled": {},
                    "component": "formCheckBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCheckBox\"]"
                    ]
                  },
                  {
                    "id": "6eb95593-18dc-456a-84b9-63c0dab2c5e8",
                    "data": {
                      "label": "Show player in chat when user reply is submitted",
                      "helpText": "",
                      "variable": "videoShowInThread",
                      "trueValue": "",
                      "falseValue": "",
                      "helpTextURL": "",
                      "isHtmlLabel": false,
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "checkboxColor": "primary",
                      "labelPosition": "left",
                      "helpTextOption": "none",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a063fc5d-a772-488d-80da-33f37c3862c1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "iconHelpTextOption": "none",
                      "forceCheckCondition": {
                        "label": "`Force check`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "forceUncheckCondition": {
                        "label": "`Force uncheck`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "a063fc5d-a772-488d-80da-33f37c3862c1",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'video')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCheckBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Checkbox",
                    "compiled": {},
                    "component": "formCheckBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCheckBox\"]"
                    ]
                  },
                  {
                    "id": "23cd2be4-dd57-4e88-82ef-4b5355a7c275",
                    "data": {
                      "help": "",
                      "label": "Button label",
                      "variable": "scheduleButtonLabel",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "Add value here",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "80",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5d81a736-c0ea-4d9f-8c2e-7c3dfad72ae0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5d81a736-c0ea-4d9f-8c2e-7c3dfad72ae0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "d2b3a472-236b-486a-a5eb-11bc0dddf78d",
                    "data": {
                      "header": "Options",
                      "headingType": "h4",
                      "isHtmlLabel": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec537613-2fe5-4f67-94e4-1e984441b408",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ec537613-2fe5-4f67-94e4-1e984441b408",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formHeader",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Header",
                    "compiled": {},
                    "component": "formHeader",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formHeader\"]"
                    ]
                  },
                  {
                    "id": "95075e34-f695-478e-ad12-3305f1056261",
                    "data": {
                      "data": "{\n  \"scheduleOptionItems\": [\n    {\n      \"label\": \"``\",\n      \"value\": \"``\"\n    }\n  ]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  scheduleOptionItems: {\n    $each: {\n      emptyLabel (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`')\n      },\n      emptyDuration (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.value, '`')\n      },\n      labelOutOfLength (obj) {\n        // if (this.schema.inputComponent !== '`slider`' || this.schema.sliderLabelTypes !== 'custom') return true\n        return _.trim(obj.label, '`').length <= 400\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.scheduleOptionItems\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :v=\"$v\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-lqsabfkrgmntcowxypiezuhvdj",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getDurations () {\n          return ['30 min', '1 hour', '1,5 hour', '2 hours', '2,5 hours', '3 hours', '3,5 hours', '4 hours']\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getErrorLabel (index) {\n        if (!this.getValue(`schema.scheduleOptionItems.$each[${index}].emptyLabel`, this.v)) {\n          return 'Label is required.'\n        } \n        if (!this.getValue(`schema.scheduleOptionItems.$each[${index}].labelOutOfLength`, this.v)) {\n          return 'Limit is exceeded, text will be truncated'\n        }\n      },\n      getValue (key, val) {\n        return _.get(val || this, key)\n      },\n      addNewItem () {\n        this.computedValue.push({\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }) \n      },\n      newItemMethod () {\n        return {\n          label: '``', \n          value: '``',\n          vforkey: uuid.v4()\n        }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "767360b0-d534-4cc6-a956-64379193799d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "767360b0-d534-4cc6-a956-64379193799d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-options\">\n  <or-list\n    ref=\"list\"\n    v-model=\"computedValue\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"newItemMethod\"\n    :canRemoveLastItem=\"false\"\n    :canDeleteItems=\"computedValue.length > 1\"\n    class=\"rwc-options__list\"\n    :readonly=\"readonly\"\n  >\n    <template slot-scope=\"item\">\n      <div class=\"rwc-options__item\">\n        <or-text-message\n          v-model=\"item.item.label\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :label=\"`Option name ${item.index + 1}`\"\n          removeBubble\n          counterString=\"%currentCharCount% / %maxCharLength%\"\n          :maxCharLength=\"100\"\n          help=\"Suggested length is up to 100 chars\"\n          disablePopover\n          placeholder=\"Add text here\"\n          :invalid=\"!getValue(`schema.scheduleOptionItems.$each[${item.index}].emptyLabel`, v) || !getValue(`schema.scheduleOptionItems.$each[${item.index}].labelOutOfLength`, v)\"\n          :error=\"getErrorLabel(item.index)\"\n        />\n        <or-select\n          v-model=\"item.item.value\"\n          :mergeFields=\"mergeFields\"\n          :steps=\"steps\"\n          :step-id=\"stepId\"\n          :readonly=\"readonly\"\n          :disabled=\"readonly\"\n          :label=\"`Option duration ${item.index + 1}`\"\n          placeholder=\"Add duration here\"\n          :options=\"getDurations\"\n          :invalid=\"!getValue(`schema.scheduleOptionItems.$each[${item.index}].emptyDuration`, v)\"\n          error=\"Duration is required.\"\n        ></or-select>\n      </div>\n    </template>\n    <div slot=\"footer\">\n      <or-button\n        :disabled=\"readonly\"\n        :class=\"['rwc-options__add', { disabled : readonly }]\"\n        disableRipple\n        icon=\"add\"\n        @click.stop.prevent=\"addNewItem\">Add option</or-button>\n    </div>\n  </or-list>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "767360b0-d534-4cc6-a956-64379193799d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-options {\n    background: rgb(246, 246, 246);\n    padding: 16px;\n    border-radius: 4px;\n    .remove-bubble .wrapper .message-input,\n    .or-editable-wrapper {\n      background: #fff;\n    }\n    \n    .ui-select .ui-select__content .ui-select__label .ui-select__display {\n      background: #fff;\n    }\n    \n  .or-list.rwc-options__list {\n    .rwc-options__item {\n      width: calc(100% - 64px);\n    }\n  }\n  .or-list.rwc-options__list.single-item {\n    .rwc-options__item {\n      width: 100%;\n    }\n  }\n  .rwc-options__item {\n    width: 100%;\n    display: flex;\n    \n    & > * {\n      width: calc(50% - 4px);\n      flex-shrink: 0;\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n  \n  button.ui-button.ui-button--type-primary.ui-button--color-default {\n    background-color: transparent;\n    border: none;\n    color: #64b2da;\n    font-weight: bold;\n  }\n  \n  .ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon, .ui-button--type-primary.ui-button--color-default .ui-button__icon {\n    color: #64b2da;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "4e16d80a-9afa-4ba5-b91e-37a5c335134f",
                    "data": {
                      "label": "Allow multiselect",
                      "helpText": "",
                      "variable": "scheduleAllowMultiselect",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8e17cb05-410e-4977-b25d-1bcfc643396f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "8e17cb05-410e-4977-b25d-1bcfc643396f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "e7232c7b-2d61-4155-827d-080f9d0ac42b",
                    "data": {
                      "label": "Options quantity",
                      "options": [
                        {
                          "label": "2",
                          "value": "2",
                          "vforkey": "7c91a3d1-cf9c-4ad2-82fa-55f1ec097a1a"
                        },
                        {
                          "label": "3",
                          "value": "3",
                          "vforkey": "12d1b973-76ab-468f-a927-866a606fab0d"
                        },
                        {
                          "label": "4",
                          "value": "4",
                          "vforkey": "95e0935c-d006-49cd-ae59-e4a44b4be993"
                        },
                        {
                          "label": "5",
                          "value": "5",
                          "vforkey": "2bf43de2-bc07-47f0-90d5-af59aadf299f"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "scheduleMultiselectQuantity",
                      "placeholder": "Select Field",
                      "defaultValue": "3",
                      "allowCodeMode": true,
                      "renderCondition": "_.trim(schema.inputComponent, '`') === 'schedule' && schema.scheduleAllowMultiselect",
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formSelect",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (simple)",
                    "compiled": {},
                    "component": "formSelect",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelect\"]"
                    ]
                  },
                  {
                    "id": "f1d5a2e3-d0e7-4f47-a9e1-2cfcfcf32502",
                    "data": {
                      "header": "Working hours",
                      "headingType": "h4",
                      "isHtmlLabel": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f590434b-3f84-4da3-8bba-02b77202f78b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "f590434b-3f84-4da3-8bba-02b77202f78b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formHeader",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Header",
                    "compiled": {},
                    "component": "formHeader",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formHeader\"]"
                    ]
                  },
                  {
                    "id": "deb62bd0-c110-47f6-b168-a8cef72408f5",
                    "data": {
                      "data": "{\n  \"workingHours\": {\n    \"timezone\": { \"id\": \"1\", \"zone\": \"GMT+00:00\" },\n    \"timeFormat\": \"12\",\n    \"from\": null,\n    \"to\": null\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  v-model=\"schema.workingHours\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-hlurzvdapqicyntbgejswmofxk",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        },\n        getTimezones () {\n          return [\n            {label: 'GMT+00:00 (GMT) Greenwich Mean Time', value: {id: '1', zone: 'GMT+00:00'}},\n            {label: 'GMT+00:00 (UTC) Universal Coordinated Time', value: {id: '2', zone: 'GMT+00:00'}},\n            {label: 'GMT+01:00 (ECT) European Central Time', value: {id: '3', zone: 'GMT+01:00'}},\n            {label: 'GMT+02:00 (EET) Eastern European Time', value: {id: '4', zone: 'GMT+02:00'}},\n            {label: 'GMT+02:00 (ART) (Arabic) Egypt Standard Time', value: {id: '5', zone: 'GMT+02:00'}},\n            {label: 'GMT+03:00 (EAT) Eastern African Time', value: {id: '6', zone: 'GMT+03:00'}},\n            {label: 'GMT+03:30 (MET) Middle East Time', value: {id: '7', zone: 'GMT+03:30'}},\n            {label: 'GMT+04:00 (NET) Near East Time', value: {id: '8', zone: 'GMT+04:00'}},\n            {label: 'GMT+05:00 (PLT) Pakistan Lahore Time', value: {id: '9', zone: 'GMT+05:00'}},\n            {label: 'GMT+05:30 (IST) India Standard Time', value: {id: '10', zone: 'GMT+05:30'}},\n            {label: 'GMT+06:00 (BST) Bangladesh Standard Time', value: {id: '11', zone: 'GMT+06:00'}},\n            {label: 'GMT+07:00 (VST) Vietnam Standard Time', value: {id: '12', zone: 'GMT+07:00'}},\n            {label: 'GMT+08:00 (CTT) China Taiwan Time', value: {id: '13', zone: 'GMT+08:00'}},\n            {label: 'GMT+09:00 (JST) Japan Standard Time', value: {id: '14', zone: 'GMT+09:00'}},\n            {label: 'GMT+09:30 (ACT) Australia Central Time', value: {id: '15', zone: 'GMT+09:30'}},\n            {label: 'GMT+10:00 (AET) Australia Eastern Time', value: {id: '16', zone: 'GMT+10:00'}},\n            {label: 'GMT+11:00 (SST) Solomon Standard Time', value: {id: '17', zone: 'GMT+11:00'}},\n            {label: 'GMT+12:00 (NST) New Zealand Standard Time', value: {id: '18', zone: 'GMT+12:00'}},\n            {label: 'GMT-11:00 (MIT) Midway Islands Time', value: {id: '19', zone: 'GMT-11:00'}},\n            {label: 'GMT-10:00 (HST) Hawaii Standard Time', value: {id: '20', zone: 'GMT-10:00'}},\n            {label: 'GMT-09:00 (AST) Alaska Standard Time', value: {id: '21', zone: 'GMT-09:00'}},\n            {label: 'GMT-08:00 (PST) Pacific Standard Time', value: {id: '22', zone: 'GMT-08:00'}},\n            {label: 'GMT-07:00 (PNT) Phoenix Standard Time', value: {id: '23', zone: 'GMT-07:00'}},\n            {label: 'GMT-07:00 (MST) Mountain Standard Time', value: {id: '24', zone: 'GMT-07:00'}},\n            {label: 'GMT-06:00 (CST) Central Standard Time', value: {id: '25', zone: 'GMT-06:00'}},\n            {label: 'GMT-05:00 (EST) Eastern Standard Time', value: {id: '26', zone: 'GMT-05:00'}},\n            {label: 'GMT-05:00 (IET) Indiana Eastern Standard Time', value: {id: '27', zone: 'GMT-05:00'}},\n            {label: 'GMT-04:00 (PRT) Puerto Rico and US Virgin Islands Time', value: {id: '28', zone: 'GMT-04:00'}},\n            {label: 'GMT-03:30 (CNT) Canada Newfoundland Time', value: {id: '29', zone: 'GMT-03:30'}},\n            {label: 'GMT-03:00 (AGT) Argentina Standard Time', value: {id: '30', zone: 'GMT-03:00'}},\n            {label: 'GMT-03:00 (BET) Brazil Eastern Time', value: {id: '31', zone: 'GMT-03:00'}},\n            {label: 'GMT-01:00 (CAT) Central African Time', value: {id: '32', zone: 'GMT-01:00'}}\n          ]\n          // return [\n          //   {label: '(GMT-12:00) International Date Line West', value: {id: '1', zone: 'GMT-12:00'}},\n          //   {label: '(GMT-11:00) Midway Island, Samoa', value: {id: '2', zone: 'GMT-11:00'}},\n          //   {label: '(GMT-10:00) Hawaii', value: {id: '3', zone: 'GMT-10:00'}},\n          //   {label: '(GMT-09:00) Alaska', value: {id: '4', zone: 'GMT-9:00'}},\n          //   {label: '(GMT-08:00) Pacific Time (US & Canada)', value: {id: '5', zone: 'GMT-8:00'}},\n          //   {label: '(GMT-08:00) Tijuana, Baja California', value: {id: '6', zone: 'GMT-8:00'}},\n          //   {label: '(GMT-07:00) Arizona', value: {id: '7', zone: 'GMT-7:00'}},\n          //   {label: '(GMT-07:00) Chihuahua, La Paz, Mazatlan', value: {id: '8', zone: 'GMT-7:00'}},\n          //   {label: '(GMT-07:00) Mountain Time (US & Canada)', value: {id: '9', zone: 'GMT-7:00'}},\n          //   {label: '(GMT-06:00) Central America', value: {id: '10', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-06:00) Central Time (US & Canada)', value: {id: '11', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-06:00) Guadalajara, Mexico City, Monterrey', value: {id: '12', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-06:00) Saskatchewan', value: {id: '13', zone: 'GMT-6:00'}},\n          //   {label: '(GMT-05:00) Bogota, Lima, Quito, Rio Branco', value: {id: '14', zone: 'GMT-5:00'}},\n          //   {label: '(GMT-05:00) Eastern Time (US & Canada)', value: {id: '15', zone: 'GMT-5:00'}},\n          //   {label: '(GMT-05:00) Indiana (East)', value: {id: '16', zone: 'GMT-5:00'}},\n          //   {label: '(GMT-04:00) Atlantic Time (Canada)', value: {id: '17', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-04:00) Caracas, La Paz', value: {id: '18', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-04:00) Manaus', value: {id: '19', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-04:00) Santiago', value: {id: '20', zone: 'GMT-4:00'}},\n          //   {label: '(GMT-03:30) Newfoundland', value: {id: '21', zone: 'GMT-3:30'}},\n          //   {label: '(GMT-03:00) Brasilia', value: {id: '22', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-03:00) Buenos Aires, Georgetown', value: {id: '23', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-03:00) Greenland', value: {id: '24', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-03:00) Montevideo', value: {id: '25', zone: 'GMT-3:00'}},\n          //   {label: '(GMT-02:00) Mid-Atlantic', value: {id: '26', zone: 'GMT-2:00'}},\n          //   {label: '(GMT-01:00) Cape Verde Is.', value: {id: '27', zone: 'GMT-1:00'}},\n          //   {label: '(GMT-01:00) Azores', value: {id: '28', zone: 'GMT-1:00'}},\n          //   {label: '(GMT+00:00) Casablanca, Monrovia, Reykjavik', value: {id: '29', zone: 'GMT+00:00'}},\n          //   {label: '(GMT+00:00) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London', value: {id: '30', zone: 'GMT+00:00'}},\n          //   {label: '(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', value: {id: '31', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', value: {id: '32', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) Brussels, Copenhagen, Madrid, Paris', value: {id: '33', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb', value: {id: '34', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+01:00) West Central Africa', value: {id: '35', zone: 'GMT+01:00'}},\n          //   {label: '(GMT+02:00) Amman', value: {id: '36', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Athens, Bucharest, Istanbul', value: {id: '37', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Beirut', value: {id: '38', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Cairo', value: {id: '39', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Harare, Pretoria', value: {id: '40', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius', value: {id: '41', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Jerusalem', value: {id: '42', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Minsk', value: {id: '43', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+02:00) Windhoek', value: {id: '44', zone: 'GMT+02:00'}},\n          //   {label: '(GMT+03:00) Kuwait, Riyadh, Baghdad', value: {id: '45', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:00) Moscow, St. Petersburg, Volgograd', value: {id: '46', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:00) Nairobi', value: {id: '47', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:00) Tbilisi', value: {id: '48', zone: 'GMT+03:00'}},\n          //   {label: '(GMT+03:30) Tehran', value: {id: '49', zone: 'GMT+03:30'}},\n          //   {label: '(GMT+04:00) Abu Dhabi, Muscat', value: {id: '50', zone: 'GMT+04:00'}},\n          //   {label: '(GMT+04:00) Baku', value: {id: '51', zone: 'GMT+04:00'}},\n          //   {label: '(GMT+04:00) Yerevan', value: {id: '52', zone: 'GMT+04:00'}},\n          //   {label: '(GMT+04:30) Kabul', value: {id: '53', zone: 'GMT+04:30'}},\n          //   {label: '(GMT+05:00) Yekaterinburg', value: {id: '54', zone: 'GMT+05:00'}},\n          //   {label: '(GMT+05:00) Islamabad, Karachi, Tashkent', value: {id: '55', zone: 'GMT+05:00'}},\n          //   {label: '(GMT+05:30) Sri Jayawardenapura', value: {id: '56', zone: 'GMT+05:30'}},\n          //   {label: '(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi', value: {id: '57', zone: 'GMT+05:30'}},\n          //   {label: '(GMT+05:45) Kathmandu', value: {id: '58', zone: 'GMT+05:45'}},\n          //   {label: '(GMT+06:00) Almaty, Novosibirsk', value: {id: '59', zone: 'GMT+06:00'}},\n          //   {label: '(GMT+06:00) Astana, Dhaka', value: {id: '60', zone: 'GMT+06:00'}},\n          //   {label: '(GMT+06:30) Yangon (Rangoon)', value: {id: '61', zone: 'GMT+06:30'}},\n          //   {label: '(GMT+06:30) Yangon (Rangoon)', value: {id: '62', zone: 'GMT+06:30'}},\n          //   {label: '(GMT+07:00) Krasnoyarsk', value: {id: '63', zone: 'GMT+07:00'}},\n          //   {label: '(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi', value: {id: '64', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Kuala Lumpur, Singapore', value: {id: '65', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Irkutsk, Ulaan Bataar', value: {id: '66', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Perth', value: {id: '67', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+08:00) Taipei', value: {id: '68', zone: 'GMT+08:00'}},\n          //   {label: '(GMT+09:00) Osaka, Sapporo, Tokyo', value: {id: '69', zone: 'GMT+09:00'}},\n          //   {label: '(GMT+09:00) Seoul', value: {id: '70', zone: 'GMT+09:00'}},\n          //   {label: '(GMT+09:00) Yakutsk', value: {id: '71', zone: 'GMT+09:00'}},\n          //   {label: '(GMT+09:30) Adelaide', value: {id: '72', zone: 'GMT+09:30'}},\n          //   {label: '(GMT+09:30) Darwin', value: {id: '73', zone: 'GMT+09:30'}},\n          //   {label: '(GMT+10:00) Brisbane', value: {id: '74', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Canberra, Melbourne, Sydney', value: {id: '75', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Hobart', value: {id: '76', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Guam, Port Moresby', value: {id: '77', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+10:00) Vladivostok', value: {id: '78', zone: 'GMT+10:00'}},\n          //   {label: '(GMT+11:00) Magadan, Solomon Is., New Caledonia', value: {id: '79', zone: 'GMT+11:00'}},\n          //   {label: '(GMT+12:00) Auckland, Wellington', value: {id: '80', zone: 'GMT+12:00'}},\n          //   {label: '(GMT+12:00) Fiji, Kamchatka, Marshall Is.', value: {id: '81', zone: 'GMT+12:00'}},\n          //   {label: '(GMT+13:00) Nuku\\'alofa', value: {id: '82', zone: 'GMT+13:00'}},\n          // ]\n        },\n        getHours () {\n          return this.computedValue.timeFormat === '24' ?\n            [\n              '00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30',\n              '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30',\n              '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00', '22:30', '23:00', '23:30', '24:00'\n            ]\n            :\n            [\n              '12:00 AM', '12:30 AM', '1:00 AM', '1:30 AM', '2:00 AM','2:30 AM', '3:00 AM', '3:30 AM', '4:00 AM', '4:30 AM', '5:00 AM', '5:30 AM', '6:00 AM', '6:30 AM', '7:00 AM',\n              '7:30 AM', '8:00 AM', '8:30 AM', '9:00 AM', '9:30 AM', '10:00 AM', '10:30 AM', '11:00 AM', '11:30 AM', '12:00',\n              '12:30 PM', '1:00 PM', '1:30 PM', '2:00 PM', '2:30 PM', '3:00 PM', '3:30 PM', '4:00 PM', '4:30 PM', '5:00 PM', '5:30 PM', '6:00 PM', '6:30 PM', '7:00 PM', '7:30 PM',\n              '8:00 PM', '8:30 PM', '9:00 PM', '9:30 PM', '10:00 PM', '10:30 PM', '11:00 PM', '11:30 PM', '12:00 PM'\n            ]\n        }\n    },\n    watch: {\n      'computedValue.timeFormat': {\n        handler () {\n          this.setValue('from', null)\n          this.setValue('to', null)\n        }\n      }\n    },\n    props : {\n        value : {\n            type : Object,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue(key, el) {\n        return _.get(el || this.computedValue, key)\n      },\n      setValue(key, val) {\n        this.$set(this.computedValue, key, val)\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d49edcb1-3985-45b6-b23d-b2104c933773",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d49edcb1-3985-45b6-b23d-b2104c933773",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"working-hours\">\n  <or-select \n    label=\"Timezone\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    placeholder=\"Select\"\n    :options=\"getTimezones\"\n    v-model=\"computedValue.timezone\"\n  ></or-select>\n  <or-radio-group \n    :value=\"getValue('timeFormat')\"\n    @input=\"val => setValue('timeFormat', val)\"\n    :options=\"[{label: '12-hour clock', value: '12'}, {label: '24-hour clock', value: '24'}]\"\n    :readonly=\"readonly\"\n    :disabled=\"readonly\"\n  >\n    Time format\n  </or-radio-group>\n  <div class=\"row\">\n    <or-select \n      label=\"From\" \n      placeholder=\"Select\" \n      :options=\"getHours\" \n      v-model=\"computedValue.from\"\n      :readonly=\"readonly\"\n    :disabled=\"readonly\"\n    ></or-select>\n    <or-select \n      label=\"To\" \n      placeholder=\"Select\" \n      :options=\"getHours\" \n      v-model=\"computedValue.to\"\n      :readonly=\"readonly\"\n      :disabled=\"readonly\"\n    ></or-select>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "d49edcb1-3985-45b6-b23d-b2104c933773",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".working-hours {\n  background: rgb(246, 246, 246);\n  padding: 16px;\n  border-radius: 4px;\n  \n  .ui-select .ui-select__content .ui-select__label .ui-select__display {\n    background: #fff;\n  }\n    \n  .row {\n    display: flex;\n    \n    .ui-select {\n      width: calc(50% - 4px);\n      \n      &:nth-child(1) {\n        margin-right: 8px;\n      }\n    }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "f6beda56-9477-4cfb-8feb-fcb89110610a",
                    "data": {
                      "header": "Disabled dates and time",
                      "headingType": "h4",
                      "isHtmlLabel": false,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad65ec71-7746-4bcf-8430-fafbafca211d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "ad65ec71-7746-4bcf-8430-fafbafca211d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formHeader",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Header",
                    "compiled": {},
                    "component": "formHeader",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formHeader\"]"
                    ]
                  },
                  {
                    "id": "b8def0ff-a683-43b5-a6d0-07deb780afe5",
                    "data": {
                      "label": "Set via function",
                      "helpText": "",
                      "variable": "scheduleDisableByFunction",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b2cecfbe-0e61-4734-a12b-1955a69da6d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b2cecfbe-0e61-4734-a12b-1955a69da6d2",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "de74182c-e7d9-4e92-8465-62891efc308b",
                    "data": {
                      "label": "Set via merge field",
                      "helpText": "",
                      "variable": "scheduleDisableByMf",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76cd20cd-6b3d-4150-8a11-e3bac5740ee4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "76cd20cd-6b3d-4150-8a11-e3bac5740ee4",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "f4798f7d-2418-42d2-b637-2d4074cc159d",
                    "data": {
                      "label": "Set manually",
                      "helpText": "",
                      "variable": "scheduleDisableByManually",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9bfe4d10-aee9-4284-9b07-a4ed02f5963d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "9bfe4d10-aee9-4284-9b07-a4ed02f5963d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "66676367-0e15-47e8-85d5-661244086f25",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "Function to define blocked dates and time slots",
                      "helpText": "",
                      "variable": "scheduleDisableFunction",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b3f1686a-2fb0-4228-8419-d4efb2233819",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "5e051228-2cff-420a-852b-8d891b06a873",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByFunction",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "b3f1686a-2fb0-4228-8419-d4efb2233819",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "5e051228-2cff-420a-852b-8d891b06a873",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByFunction",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "1675d76c-3a2b-4187-ba08-06e14a60be97",
                    "data": {
                      "label": "Merge field disabled dates",
                      "helpText": "",
                      "variable": "scheduleDisableMf",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dee4f291-916a-452e-98c4-f32fd6ca2e45",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "e1f5a565-f68b-4b01-b334-d63ba6e484bd",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByMf",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dee4f291-916a-452e-98c4-f32fd6ca2e45",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "e1f5a565-f68b-4b01-b334-d63ba6e484bd",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByMf",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "b6fe07bd-ab11-420b-8a07-c8373909f841",
                    "data": {
                      "variableName": "scheduleDisableManual",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c652c38f-92d6-416c-b9df-f0f79c8e99d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "31376bc0-142f-4551-aab4-22d3c3d51f42",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByManually",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c652c38f-92d6-416c-b9df-f0f79c8e99d3",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.inputComponent, '`'), 'schedule')",
                            "valueType": "advanced",
                            "firstValue": "schema.inputComponent",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "31376bc0-142f-4551-aab4-22d3c3d51f42",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.scheduleDisableByManually",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": [
                      "time-schedule",
                      "https://content-assets.onereach.ai/component/time-schedule/0.0.13/index.js"
                    ]
                  },
                  {
                    "id": "8076e42b-0d04-43a5-a229-e50e88a079a3",
                    "data": {
                      "label": "Use function to define user answer",
                      "helpText": "",
                      "variable": "useCustomAnswer",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0dcd6f8b-9aca-42fc-8cb5-bec7fa03126f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "0dcd6f8b-9aca-42fc-8cb5-bec7fa03126f",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'custom')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "569c4d1e-b755-456b-bad9-b754491cedb3",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "User answer message",
                      "helpText": "",
                      "variable": "userAnswerFunction",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "return ''",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "28de6b35-d66b-424f-bd6b-da89b4e01629",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useCustomAnswer",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "28de6b35-d66b-424f-bd6b-da89b4e01629",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.useCustomAnswer",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "6d94a645-eca3-4440-898a-c51ba8bac80c",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :schema=\"schema\"\n  :conversation=\"schema.conversation\"\n  :rwcContext=\"schema.rwcContext\"\n  :textMessage=\"schema.textMessage\"\n  :textPlaceholder=\"schema.textPlaceholder\"\n  :textInputType=\"schema.textInputType\"\n  :textInputCustomPattern=\"schema.textInputCustomPattern\"\n  :inputComponent=\"schema.inputComponent\"\n  :buttonStyle=\"schema.buttonStyle\"\n  :medias=\"schema.medias\"\n  :cardDescription=\"schema.cardDescription\"\n  :cardBtnLabel=\"schema.cardBtnLabel\"\n  :flow=\"$flow\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-qmzavthwfyrxlsigbpcjkuodne",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        flow: {\n          type: Object,\n          default: () => ({})\n        },\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean\n        },\n        mergeFields: {\n            type: Array\n        },\n        buttonStyle: String,\n        textInputCustomPattern: String,\n        textInputType: String,\n        conversation: Object,\n        rwcContext: {\n          type: Object,\n          default: () => ({})\n        },\n        textMessage: String,\n        inputComponent: String,\n        textPlaceholder: String,\n        schema: Object,\n        cardBtnLabel: String,\n        cardDescription: String,\n        medias: Array,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    mounted () {\n      window.addEventListener('message', this.previewLoadedHandler, false);\n    },\n    data() {\n      return {\n        loading: false,\n        btnDisabled: true,\n        configError: false\n      }\n    },\n    watch: {\n      schema: {\n        handler () { this.sendMessageToPreview() },\n        deep: true\n      },\n      rwcContext: {\n        handler(nv) {\n          this.configError = false\n        },\n        deep: true\n      },\n      'flow.store.state.flow.lastActionTime': {\n        immediate: true,\n        handler () {\n          if(!this.readonly) {\n            this.btnDisabled = false;\n            return;\n          }\n          \n          this.checkIsFlowActive();\n        }\n      }\n    },\n    methods: {\n      async checkIsFlowActive (immediate) {\n        this.loading = true;\n        \n        if (!this.flow.id) {\n          this.btnDisabled = false;\n          return;\n        };\n        \n        try {\n          const deployments = await this.flow.api.deployments.getActiveDeploymentsByFlowId(this.flow.id);\n          this.btnDisabled = deployments.length === 0;        \n        } finally { this.loading = false; }\n      },\n      openPreviewWindow () {\n        const url = `${this.$flow.chatUiUrl}/preview`\n        // const url = `http://localhost:8090/preview`\n        try {\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        } catch (e) {\n          console.warn(e);\n          this.previewWindow.close();\n          this.previewWindow = window.open(url, 'preview', 'width=600,height=600,top=0');\n        }\n      },\n      previewLoadedHandler (e) {\n        if (e.data === 'PREVIEW_LOADED' && this.previewWindow) {\n          this.sendMessageToPreview();\n        }\n      },\n      getReadableMergeTag (value = '', options) {\n        const mergeTagLeftWrapper = _.get(options, 'mergeTagLeftWrapper', '`{');\n        const mergeTagRightWrapper = _.get(options, 'mergeTagRightWrapper', '}`');\n        if (value) {\n          return _.chain(value)\n            .replace(/^[`'\"](.*)[`'\"]$/g, '$1')\n            .replace(/await this\\.mergeFields\\[[`'\"](.*)[`'\"]\\]\\.get\\((.*path: *[`'\"](.*)[`'\"])?.*\\)/g, (str, $1, $2, $3) => `${mergeTagLeftWrapper}${$1}${$3 ? `.${$3}` : ''}${mergeTagRightWrapper}`) // eslint-disable-line max-params\n            .replace(/this\\.get\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}$1${mergeTagRightWrapper}`)\n            .replace(/this\\.session\\.get\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}#session.$1${mergeTagRightWrapper}`)\n            .replace(/await this\\.getShared\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}#shared.$1${mergeTagRightWrapper}`)\n            .replace(/await this\\.getGlobal\\([`'\"](.*)[`'\"]\\)/g, `${mergeTagLeftWrapper}#global.$1${mergeTagRightWrapper}`)\n            .replace(/this\\.(.+)/, `${mergeTagLeftWrapper}#$1${mergeTagRightWrapper}`)\n            .value();\n        }\n        return '';\n      },\n      mapDataToClient (inputComponent) {\n        const componentName = _.trim(this.inputComponent, '`')\n        const isHasMessage = ['card', 'carousel'].indexOf(componentName) === -1\n        const isHasMedias = ['textFiles'].indexOf(componentName) !== -1\n        let showComponentInMessage = [\n          'schedule',\n          'checkbox', \n          'datepicker', \n          'dropdown', \n          'menu', \n          'radio', \n          'timepicker', \n          'attachments', \n          'geolocation',\n          'slider',\n          'signature',\n          'video'\n        ].indexOf(componentName) !== -1\n        \n        const componentMap = {\n          schedule: {\n            name: 'rwc-scheduler',\n            buttonLabel: 'scheduleButtonLabel',\n            options: 'scheduleOptionItems',\n            allowMultiselect: 'scheduleAllowMultiselect',\n            multiselectQuantity: 'scheduleMultiselectQuantity',\n            workingHours: 'workingHours',\n            disableByFunction: 'scheduleDisableByFunction',\n            disableByMf: 'scheduleDisableByMf',\n            disableByManually: 'scheduleDisableByManually',\n            disableFunction: 'scheduleDisableFunction',\n            disableMf: 'scheduleDisableMf',\n            disableManual: 'scheduleDisableManual'\n          },\n          credit: {\n            name: 'rwc-credit',\n            buttonLabel: 'creditBtnLabel',\n            cancelButtonLabel: 'creditCancelBtnLabel',\n            termsCheckboxLabel: 'creditTermsLabel',\n            termsCheckboxLink: 'creditTerms'\n          },\n          carousel: {\n            name: 'rwc-carousel',\n            options: 'carouselOptions',\n            hasOtherOption: 'carouselHasAlternative',\n            otherOptionData: 'carouselAlternative',\n            submitBtnLabel: 'carouselSubmitBtnLabel',\n            cancelBtnLabel: 'carouselCancelBtnLabel',\n            multiple: 'carouselMultiselect'\n          },\n          checkbox: {\n            name: 'rwc-checkbox-group',\n            options: 'checkboxOptions',\n            defaultValue: 'checkboxDefault'\n          },\n          datepicker: {\n            name: 'rwc-datepicker',\n            outFormat: 'datepickerFormat',\n            startDay: 'datepickerStartsFrom',\n            isBlockedDates: 'datepickerBlockDates',\n            isSuggestedDates: 'datepickerSuggestedDates',\n            blockedOptions: 'datepickerBlockedOptions',\n            suggestedOptions: 'datepickerSuggestedOptions',\n            blockedFunction: 'datepickerBlockedFunc',\n            suggestedFunction: 'datepickerSuggestedFunc'\n          },\n          dropdown: {\n            name: 'rwc-dropdown',\n            options: 'dropdownOptions',\n            dropdownPlaceholder: 'dropdownPlaceholder'\n          },\n          slider: {\n            name: 'rwc-slider',\n            min: 'sliderMin',\n            max: 'sliderMax',\n            step: 'sliderStep',\n            unit: 'sliderUnit',\n            unitPosition: 'sliderUnitPosition',\n            mode: 'sliderType',\n            useCustomLabels: 'sliderUseCustomLabels',\n            labelFunction: 'sliderCustomFunction',\n            options: 'sliderCustomLabels',\n            defaultValue: 'sliderDefaultValue',\n            defaultValueStart: 'sliderDefaultStart',\n            defaultValueEnd: 'sliderDefaultEnd'\n          },\n          signature: {\n            name: 'rwc-signature',\n            btnLabel: 'signatureBtn'\n          },\n          menu: {\n            name: 'rwc-menu',\n            options: 'optionListOptions'\n          },\n          buttons: {\n            name: 'rwc-buttons-list',\n            options: 'optionsButtons'\n          },\n          radio: {\n            name: 'rwc-radio-group',\n            options: 'radioOptions',\n            defaultValue: 'radioDefault'\n          },\n          rate: {\n            name: 'rwc-rate',\n            ratePlaceholder: 'ratePlaceholder',\n            showInput: 'rateInput',\n            ratingSubmitLabel: 'ratingSubmitLabel',\n            ratingDiscardLabel: 'ratingDiscardLabel'\n          },\n          textFiles: {\n            name: 'or-textbox',\n            placeholder: 'textPlaceholder',\n            allowMask: 'textInputAllowMask'\n          },\n          timepicker: {\n            name: 'rwc-timepicker',\n            timeFormat: 'timepickerFormat'\n          },\n          video: {\n            name: 'rwc-video',\n            startTime: 'videoStartTime',\n            autoplay: 'videoAutoplay',\n            button: 'videoBtnLabel',\n            video: 'videoSrc',\n            poster: 'videoPoster'\n          },\n          attachments: {\n            name: 'rwc-attachment',\n            isMulti: 'attachmentsNumber',\n            filesValidation: 'attachmentsAllowChosen',\n            allowedFileTypes: 'attachmentsAllowedTypes'\n          },\n          geolocation: {\n            name: 'rwc-location',\n            buttonLabel: 'geolocationBtn',\n            useDefault: 'geolocationSetDefault',\n            defaultLat: 'geolocationLat',\n            defaultLng: 'geolocationLng'\n          },\n          custom: {\n            name: 'custom',\n            templateType: 'customTemplateType',\n            component: 'customComponent',\n            showBotIcon: 'showBotIcon',\n            scripts: 'customTempalateScripts',\n            autoSubmit: 'autoSubmitCustomTemplate',\n            html: 'customTemplateHtmlCode',\n            javascript: 'customTemplateJavaScriptCode',\n            css: 'customTemplateCSSCode',\n            vars: 'customVariables'\n          }\n        }\n        \n        \n        const answerParams = _.mapValues(componentMap[componentName], (el) => { \n          if (el === 'scheduleDisableManual') {\n            return this.schema[el].map(evt => {\n              return {\n                ...evt,\n                dateFrom: evt.dateFrom ? JSON.stringify(evt.dateFrom) : '',\n                dateTo: evt.dateTo ? JSON.stringify(evt.dateTo) : ''\n              }\n            })\n          }\n          \n          const codeModeValue = _.get(this.schema, `__codeModes.${el}`);\n          \n          return _.isUndefined(codeModeValue) ? this.schema[el] : this.parseCodeModeValue(codeModeValue);\n        });\n        \n        \n        const answerComponent = {\n          component: componentMap[componentName].name,\n          vBind: answerParams,\n          showComponentInMessage\n        }\n        \n        return { answerComponent, isHasMessage, isHasMedias }\n      },\n      async sendMessageToPreview () {\n        if (!this.previewWindow) return;\n        \n        const { answerComponent, isHasMessage, isHasMedias } = this.mapDataToClient(_.trim(this.inputComponent, '`'))\n        \n        \n        if (answerComponent.vBind.component) {\n          try {\n            const result = await new Function(answerComponent.vBind.component)()\n            answerComponent.vBind.component = JSON.stringify(result, function(key, value) {\n              if (typeof value === 'function') {\n                return _.toString(value)\n              } else {\n                return value;\n              }\n            });\n            answerComponent.showComponentInMessage = _.get(result, 'showComponentInMessage');\n            \n            const showComponentInMessageLocal = _.get(result, 'showComponentInMessage');\n      \n            answerComponent.showComponentInMessage = _.isUndefined(showComponentInMessageLocal) ? this.schema.showCustomComponentInMessage : showComponentInMessageLocal;\n          } catch (e) {\n            console.warn(e)\n            answerComponent.vBind.component = \"\"\n          }\n          \n          // console.log('COMP', answerComponent.vBind.component)\n          // answerComponent.vBind.component = answerComponent.vBind.component.toString()\n          // console.log('COMP', answerComponent.vBind.component)\n          // answerComponent.vBind.component = answerComponent.vBind.component.replace(/{\\n? * ?path.*\\n*.*}/gi, (match) => {\n          //   return match.replace(/\\n */gi, '')\n          // })\n          \n          // const strWithoutMergeTags = this.getReadableMergeTag(answerComponent.vBind.component)\n          \n          // answerComponent.vBind.component = JSON.stringify(new Function(strWithoutMergeTags).call(this), function(key, value) {\n          //   if (typeof value === 'function') {\n          //     return _.toString(value)\n          //   } else {\n          //     return value;\n          //   }\n          // });\n          \n          // if (this.inputComponent === '`custom`') {\n          //   answerComponent.showComponentInMessage = _.get(JSON.parse(answerComponent.vBind.component), 'showComponentInMessage')\n          //   answerComponent.waitForAnswer = _.get(JSON.parse(answerComponent.vBind.component), 'waitForAnswer')\n          // }\n        }\n        \n        if (this.inputComponent !== '`textFiles`') {\n          answerComponent.vBind.allowMask = false\n        }\n        \n        const codeModeTextMessageValue = _.get(this.schema, '__codeModes.textMessage');\n        const codeModeMediasValue = _.get(this.schema, '__codeModes.medias');\n        const codeModeSuggestionsValue = _.get(this.schema, '__codeModes.autoSuggestionOptionsList');\n        const codeModeSuggestionType = _.get(this.schema, '__codeModes.autoSuggestionType');\n        const codeModeSuggestionsFromMergeField = _.get(this.schema, '__codeModes.autoSuggestionOptionsMergeField');\n        const codeModeIsSuggestionInput = _.get(this.schema, '__codeModes.autoSuggestion');\n\n        \n        const textMessage = _.isUndefined(codeModeTextMessageValue) ? this.textMessage : this.parseCodeModeValue(codeModeTextMessageValue, codeModeTextMessageValue);\n        const medias = _.isUndefined(codeModeMediasValue) ? this.medias : this.parseCodeModeValue(codeModeMediasValue, []);\n        \n        const oldOptions = _.get(this.schema, 'autoSuggestion.options', []);\n        const newOptions = _.get(this.schema, 'autoSuggestionOptionsList', []);\n        const suggestions = _.isUndefined(codeModeSuggestionsValue) ? _.isEmpty(oldOptions) ? newOptions : oldOptions : this.parseCodeModeValue(codeModeSuggestionsValue, []);\n        \n        const suggestionsType = _.isUndefined(codeModeSuggestionType) ? _.get(this.schema, 'autoSuggestionType') : this.parseCodeModeValue(codeModeSuggestionType, `emty`);\n        const suggestionsFromMergeField = _.isUndefined(codeModeSuggestionsFromMergeField) ? _.get(this.schema, 'autoSuggestionOptionsMergeField') : this.parseCodeModeValue(codeModeSuggestionsFromMergeField, ``);\n        const isSuggestionInput = _.isUndefined(codeModeIsSuggestionInput) ? _.get(this.schema, 'autoSuggestion.input') : this.parseCodeModeValue(codeModeIsSuggestionInput, {}).input;\n        \n        \n        this.previewWindow.postMessage({\n          type: 'messageData',\n          message: {\n            message: isHasMessage ? textMessage : '',\n            medias: isHasMedias ? medias : [],\n            answerComponent,\n            suggestions,\n            suggestionsType,\n            suggestionsFromMergeField,\n            isSuggestionInput,\n            placeholder: this.textPlaceholder,\n            textInputType: this.textInputType,\n            textInputCustomPattern: this.textInputCustomPattern\n          }\n        }, '*');\n          \n          \n        // const config = _.get(this.conversation, 'meta.lookAndFeel')\n        const ctxHelpers = this.$flow.getCache('rwcContext.helpers');\n          \n        if (!ctxHelpers) {\n          this.configError = true\n          return;\n        }\n          \n        const config = ctxHelpers.getLastStepWithContext('manual', 'data.conversation.meta.lookAndFeel')\n         || ctxHelpers.getInitialStep('data.dataOut.meta.lookAndFeel');\n         \n        // to show warning message in template\n        if (!config) {\n          this.configError = true\n        } else {\n          this.configError = false\n        }\n        this.previewWindow.postMessage({\n            type: 'chatConfig',\n            config: {\n              ...config\n            }\n          }, '*');\n      },\n      parseCodeModeValue(value, defaultValue = []) {\n        try { return eval(`(${value})`); }\n        catch(e) { return defaultValue; }\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc-preview\">\n  <or-button color=\"primary\" type=\"secondary\" :disabled=\"btnDisabled\" :loading=\"loading\" @click=\"openPreviewWindow\">\n    Preview message\n  </or-button>\n  <div v-if=\"configError\" class=\"conversation-warning\">\n    <or-alert type=\"warning\" :dismissible=\"false\">To view correct preview, please select conversation manually.</or-alert>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc-preview {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.conversation-warning {\n  margin-top: 12px;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "f6840180-c3b8-4e66-9ce0-47ccbb984d01",
                    "data": {
                      "data": "{\n  \"savedStepId\": \"\",\n  \"dataOutput\": null\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard\n  :inputComponent=\"schema.inputComponent\"\n  :suggestion=\"schema.autoSuggestion\"\n  :dataOutput.sync=\"schema.dataOutput\"\n  :output-example.sync=\"step.outputExample\"\n  :savedStepId.sync=\"schema.savedStepId\"\n  :userAnswerFunction.sync=\"schema.userAnswerFunction\"\n  :useCustomAnswer.sync=\"schema.useCustomAnswer\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n  :schema=\"schema\"\n  :textMessage.sync=\"schema.textMessage\"\n></wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-ikslfeqphuyrjtowdcvxmagbzn",
                      "componentLogic": "{\n  data () {\n    return {\n      outputExamples: {\n        textFiles: {\n          userReply: 'String'\n        },\n        schedule: {\n          option: {\n            label: 'String',\n            duration: 'String'\n          },\n          selected: [\n            {\n              from: 'String',\n              to: 'String'\n            }\n          ]\n        },\n        card: {\n          description: 'String',\n          value: 'String'\n        },\n        credit: {\n          cardNumber: 'String',\n          expirationDate: 'String',\n          cvv: 'String',\n          cardHolder: 'String'\n        },\n        radio: {\n          label: 'String',\n          value: 'String'\n        },\n        rate: {\n          rating: 'String',\n          feedback: 'String'\n        },\n        video: {\n          playbackStartTime: 'String',\n          playbackEndTime: 'String',\n          totalVideoDuration: 'String',\n          viewDuration: 'String'\n        },\n        carousel: {\n          cards: [{\n            cardId: 'String',\n            image: 'String',\n            video: 'String',\n            title: 'String',\n            description: 'String',\n            buttonLabel: 'String',\n            additionalContentLink: 'String'\n          }]\n        },\n        checkbox: {\n          checkbox: [\n            {\n              label: 'string',\n              value: 'string'\n            }\n          ],\n          checkboxText: 'String'\n        },\n        signature: {\n          image: 'String'\n        },\n        radio: {\n          label: 'String',\n          value: 'String'\n        },\n        attachments: {\n          filePath: 'array'\n        },\n        geolocation: {\n          location: {\n            lat: 'String',\n            lng: 'String'\n          },\n          image: 'string'\n        },\n        menu: {\n          label: 'string',\n          value: 'String'\n        },\n        dropdown: {\n          label: 'string',\n          value: 'String'\n        },\n        buttons: {\n          label: 'String',\n          value: 'String'\n        },\n        datepicker: {\n          date: 'String',\n          dateText: 'String',\n          dateISO: 'String',\n          dateUnixMs: 'String'\n        },\n        timepicker: {\n          time: 'String'\n        },\n        slider: {\n          value: 'String',\n          units: 'String'\n        }\n      }\n    }\n  },\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        suggestion: Object,\n        inputComponent: String,\n        savedStepId: String,\n        outputExample: Object,\n        dataOutput: Object,\n        useCustomAnswer: Boolean,\n        userAnswerFunction: String,\n        schema: Object,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        textMessage: {\n          type: String,\n          default: ``\n        }\n    },\n    mounted () {\n      if (this.savedStepId !== this.stepId) {\n        this.$emit('update:savedStepId', this.stepId)\n      }\n    },\n    watch: {\n      outputExample(nv, ov) {\n        if (JSON.stringify(nv) !== JSON.stringify(ov)) {\n          this.changeAnswerFunction()\n        }\n      },\n      inputComponent (nv) {\n        if (_.trim(nv, '`') === 'custom') {\n          this.$emit('update:useCustomAnswer', false)\n        }\n        this.changeOutputExample()\n      },\n      'schema.attachmentsNumber': {\n        handler(nv, ov) {\n          if ((nv && ov) && (nv !== ov)) {\n            this.changeAnswerFunction()\n          }\n        },\n        immediate: true\n      },\n      'schema.sliderType': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      },\n      'schema.sliderUseCustomLabels': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      },\n      'suggestion.input': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      },\n      'schema.carouselMultiselect': {\n        handler(nv) {\n          this.changeOutputExample()\n        },\n        immediate: true\n      }\n    },\n    methods: {\n      async changeOutputExample () {\n        await this.$nextTick()\n        const trimedComponent = _.trim(this.inputComponent, '`')\n        let outputFromComponent = this.outputExamples[trimedComponent] || {}\n        const outputSuggestion = _.get(this, 'suggestion.input') ? {userReply: 'String'} : {}\n        if (trimedComponent === 'slider') {\n          const range = _.trim(this.schema.sliderType, '`') === 'range' ? this.schema.sliderUseCustomLabels ? [{label: 'String',value: 'String'}, {label: 'String',value: 'String'}] : [] : null\n          const label = _.trim(this.schema.sliderType, '`') === 'single' ? this.schema.sliderUseCustomLabels ? 'String' : null : null\n          const value = _.trim(this.schema.sliderType, '`') === 'single' ? 'String' : null\n          const units = this.schema.sliderUseCustomLabels ? null : 'String'\n          outputFromComponent = {\n            range,\n            label,\n            value,\n            units\n          }\n          outputFromComponent = _.pickBy(outputFromComponent, _.identity);\n        }\n        if (trimedComponent === 'rate') {\n          outputFromComponent = {\n            rating: 'String',\n            feedback: this.schema.rateInput ? 'String' : null\n          }\n          outputFromComponent = _.pickBy(outputFromComponent, _.identity);\n        }\n        let finalOutput = Object.assign(outputSuggestion, outputFromComponent);\n        \n        this.$emit('update:outputExample', finalOutput)\n        \n        // for backwards compatibility for carousel\n        if (trimedComponent === 'carousel' && !this.schema.carouselMultiselect) {\n          finalOutput = {\n            ...finalOutput,\n            card: {\n              ...this.outputExamples.carousel.cards[0],\n              label: 'String',\n              button: 'String',\n              value: 'String',\n            }\n          }\n        }\n        \n        this.$emit('update:dataOutput', finalOutput)\n      },\n      changeAnswerFunction () {\n        const finalOutput = this.outputExample\n        let outputString = _.isEmpty(finalOutput) ? '' : Object.keys(finalOutput).map(el => {\n          const type = typeof finalOutput[el] === 'object' ? _.isArray(finalOutput[el]) ? 'array' : 'object' : finalOutput[el] === 'Array' ? 'array' : typeof finalOutput[el]\n          return `${el}: ${type}`\n        }).join(', ')\n        \n        // exception for attachment component (hotfix)\n        if (_.trim(this.schema.attachmentsNumber, '`') === '1' && _.trim(this.schema.inputComponent, '`') === 'attachments') {\n          outputString = `filePath: array`\n        }\n        this.$emit('update:userAnswerFunction', outputString ? `// You have access to ${outputString}\\nreturn ''` : '')\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<!--this component change output example and save stepId-->",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Customize the message your visitors will interact with by selecting an input component and filling the necessary fields.",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "6f6bd9af-3680-484e-9b45-deb0871c6dfa",
              "data": {
                "open": false,
                "header": "Manual user response",
                "inputs": [
                  {
                    "id": "86eddf30-7655-42a5-9cc1-328d648cf707",
                    "data": {
                      "data": "{\n  \"autoSuggestion\": {\n    \"input\": true,\n    \"isExtraLeg\": false\n  }\n}",
                      "toJson": "//function that describe how to serialize wildcard data\nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n function toJson(data, property = '', parentPath = '') { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.autoSuggestion\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :v=\"$v\"\n  :step-id=\"stepId\"\n  :schema=\"schema\"\n  :steps=\"steps\"\n  :answerComponent=\"schema.inputComponent\"\n  :textPlaceholder.sync=\"schema.textPlaceholder\"\n  :hasCancelExit.sync=\"schema.hasCancelExit\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-bnuprdilmswqjakfehgycoztxv",
                      "componentLogic": "{\n    computed : {\n        getAnswerComponentType () {\n          return _.trim(this.answerComponent, '`');\n        },\n        isAnswerTextInput () {\n          return this.getAnswerComponentType === 'textFiles';\n        }\n    },\n    watch: {\n      getAnswerComponentType: {\n        handler(nv) {\n          if (nv === 'credit') {\n            this.$emit('update:hasCancelExit', true)\n          } else {\n            this.$emit('update:hasCancelExit', false)\n          }\n        },\n        immediate: true\n      },\n      isAnswerTextInput: {\n        async handler (nv, ov) {\n          this.setValue('input', nv)\n          if (nv) {\n            await this.$nextTick()\n            this.setValue('isExtraLeg', false)\n          }\n          \n          if (ov !== nv && ov) {\n            this.$emit('update:textPlaceholder', '``')\n          }\n        },\n        immediate: true\n      },\n      'value.input': {\n        handler (nv) {\n          if (nv && !this.isAnswerTextInput) {\n            this.setValue('isExtraLeg', true)\n          } else {\n            this.setValue('isExtraLeg', false)\n          }\n        },\n        immediate: true\n      }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        hasCancelExit: {\n          type: Boolean,\n          default: false\n        },\n        answerComponent: String,\n        textPlaceholder: String,\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        schema: Object,\n        mergeFields: {\n            type: Array\n        },\n        v: Object,\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      getValue (key, el) {\n        return _.get(el || this.value, key, null);\n      },\n      async setValue (key, value) {\n        const val = _.cloneDeep(this.value);\n        \n        _.set(val, key, value);\n        this.$emit('input', val);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__suggestion\">\n    <!--TOGGLE-->\n    <or-switch :disabled=\"readonly || isAnswerTextInput\" :value=\"!!getValue('input')\" @input=\"val => setValue('input', val)\">\n      Allow manual user response\n    </or-switch>\n    <!--TOGGLE-->\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__suggestion {\n  /deep/ .or-text-expression {\n    min-width: calc(100% - 32px);\n    max-width: calc(100% - 32px);\n    margin-bottom: 0;\n  }\n  .or-text-expression {\n    min-width: calc(100% - 32px);\n    max-width: calc(100% - 32px);\n    margin-bottom: 0;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "48aae173-c67c-4c93-ab90-eeb97d52d0da",
                    "data": {
                      "help": "",
                      "label": "User’s reply placeholder",
                      "variable": "textPlaceholder",
                      "isHtmlHelp": false,
                      "isHtmlLabel": false,
                      "placeholder": "E.g. write a reply",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "``",
                      "allowCodeMode": true,
                      "counterString": "%currentCharCount% / %maxCharLength%",
                      "maxCharLength": "30",
                      "disablePopover": true,
                      "isMessageBubble": false,
                      "renderCondition": "",
                      "allowMergeFields": true,
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "586e6861-4b18-48f8-a459-0c7920d67d56",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "66d311fe-35e1-4750-ab13-a2085cdce7d5",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.isExtraLeg",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "focus",
                      "displayCharCounter": true,
                      "iconHelpTextOption": "none",
                      "inCharLimitMessage": "<p>The character limit for an SMS message is %maxCharLength% characters.</p>\n<p>If your message contains more characters, it will be broken down into more than one SMS message.</p>",
                      "validationConditions": [
                        {
                          "vforkey": "0e5a0252-7c2b-4d58-b274-e4f0474e6cd8",
                          "errorMessage": "Limit is exceeded, text will be truncated.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "vforkey": "a0afbbb1-5a3d-4f1d-a1c1-c479ea04103f",
                                "ruleType": {
                                  "func": "{ return _.isEqual(firstValue, secondValue) }",
                                  "type": "double",
                                  "input": [
                                    "mixed",
                                    "mixed"
                                  ],
                                  "label": "exactly matches",
                                  "modes": [
                                    "strict"
                                  ],
                                  "category": "general"
                                },
                                "codeValue": "_.trim(schema.textPlaceholder, '`').length > 30 && (!_.trim(schema.textPlaceholder, '`').match(/^\\$\\{/))",
                                "valueType": "advanced",
                                "firstValue": "``",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "notInCharLimitMessage": "You have exceeded amount of characters that can be sent via a single SMS.",
                      "mergeFieldInUseMessage": "<p>We cannot calculate the exact amount of characters in your message because it contains a variable.</p>\n<p>There are %currentCharCount% characters excluding the variable in your message.</p>",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "586e6861-4b18-48f8-a459-0c7920d67d56",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.isEqual(_.trim(schema.inputComponent, '`'), 'textFiles')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "66d311fe-35e1-4750-ab13-a2085cdce7d5",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.isExtraLeg",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formTextMessage",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text Message",
                    "compiled": {},
                    "component": "formTextMessage",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextMessage\"]"
                    ]
                  },
                  {
                    "id": "7e0c0cf6-aab1-4868-9d74-de6846384386",
                    "data": {
                      "icon": "",
                      "label": "Suggested options creation method",
                      "options": [
                        {
                          "label": "No suggested options",
                          "value": "`emty`",
                          "vforkey": "96e8f84e-f4e0-4b11-b4a1-08fdb7e77107"
                        },
                        {
                          "label": "Create a list",
                          "value": "`list`",
                          "vforkey": "5939df90-f26d-4538-8efe-f2e2692ba8bd"
                        },
                        {
                          "label": "Set values dynamically",
                          "value": "`dynamic`",
                          "vforkey": "a7752f3e-e4bb-45d7-b7e2-9b0dafbb3962"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "variable": "autoSuggestionType",
                      "hasSearch": false,
                      "optionsMode": "default",
                      "placeholder": "Select type",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "info",
                          "title": "Help",
                          "content": "<p>\n  <strong>No suggested options</strong><br>\n  Text input is shown without suggested options\n</p>\n\n<p>\n  <strong>Create a list</strong><br>\n  Add suggested options manually or set in code mode as objects array in the appropriate format:\n  <pre><code>[{\n  text: `one`\n}, {\n  text: `two`\n}]</code></pre>\n</p>\n\n<p>\n  <strong>Set values dynamically</strong><br>\n  Pass merge field variable to the input that stores suggested options in the appropriate format:\n  <pre><code>[{\n  text: `one`\n}, {\n  text: `two`\n}]</code></pre>\n</p>",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`emty`",
                      "dropdownType": "basic",
                      "iconPosition": true,
                      "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                      "allowCodeMode": true,
                      "dynamicOptions": "",
                      "optionsDefault": [],
                      "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [];\nfor (let i = 0; i < 10; i++) {\n    myArr.push({ label: `Number ${i}`, value: i });\n}\nreturn myArr;",
                      "hideOptionTitle": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "731d1a99-fa53-40d5-8e82-27adf961569a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "mergeFieldsTypes": [
                        "session",
                        "shared",
                        "global"
                      ],
                      "validateRequired": false,
                      "defaultArrayValue": [],
                      "disabledCondition": "",
                      "extendableOptions": false,
                      "optionsKeysCustom": false,
                      "iconHelpTextOption": "modal",
                      "mergeFieldsIsGroup": true,
                      "allowUseMergeFields": false,
                      "allowOnlyMergeFields": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "731d1a99-fa53-40d5-8e82-27adf961569a",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSelectExpression",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Dropdown (advanced)",
                    "compiled": {},
                    "component": "formSelectExpression",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formSelectExpression\"]"
                    ]
                  },
                  {
                    "id": "2afa1a85-8417-4f93-a3bf-dab7afc2e2d2",
                    "data": {
                      "label": "Merge field",
                      "helpText": "",
                      "variable": "autoSuggestionOptionsMergeField",
                      "defaultValue": "this.get('')",
                      "allowCodeMode": true,
                      "disableBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b9f210f-e729-44c0-9000-dce3ea880b16",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.input",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "a8f0c6d9-e399-4141-a38d-58f3659a89e1",
                            "ruleType": {
                              "func": "{ return _.includes(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "string",
                                "string"
                              ],
                              "label": "contains",
                              "modes": [
                                "stringNums",
                                "ignoreCase",
                                "trim"
                              ],
                              "category": "string"
                            },
                            "codeValue": "``",
                            "valueType": "string",
                            "firstValue": "schema.autoSuggestionType",
                            "secondValue": "`dynamic`",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "validateRequired": false,
                      "disabledCondition": "",
                      "alwaysShowHelpText": false,
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5b9f210f-e729-44c0-9000-dce3ea880b16",
                            "ruleType": {
                              "func": "{ return firstValue === true }",
                              "type": "single",
                              "input": [
                                "mixed"
                              ],
                              "label": "is true",
                              "modes": [
                                "noTruthy"
                              ],
                              "category": "boolean"
                            },
                            "codeValue": "``",
                            "valueType": "boolean",
                            "firstValue": "schema.autoSuggestion.input",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "a8f0c6d9-e399-4141-a38d-58f3659a89e1",
                            "ruleType": {
                              "func": "{ return _.includes(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "string",
                                "string"
                              ],
                              "label": "contains",
                              "modes": [
                                "stringNums",
                                "ignoreCase",
                                "trim"
                              ],
                              "category": "string"
                            },
                            "codeValue": "``",
                            "valueType": "string",
                            "firstValue": "schema.autoSuggestionType",
                            "secondValue": "`dynamic`",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "all",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "4cd5228c-39c9-42a5-9889-f9fd09a1a73d",
                    "data": {
                      "data": "{\n  \"autoSuggestionOptionsList\": [{\"text\": \"``\"}]\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        data = _.omit(data, ['vforkey']);\n        return `{${_.map(data, (value, key) => `${key}: ${value}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  autoSuggestionOptionsList: {\n    $each: {\n      required(val) {\n        const text = _.get(val, 'text', '');\n        return !_.isEmpty(_.trim(text, ' `'));\n      },\n      uniq(val, list) {\n        list = _.get(this, 'schema.autoSuggestionOptionsList', list);\n        const currentText = _.get(val, 'text', '');\n        \n        const duplicates = _.filter(list, ({ text }) => _.trim(text) === _.trim(currentText));\n        \n        return _.size(duplicates) < 2;\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.autoSuggestionOptionsList\" \n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :mergeFields=\"mergeFields\" \n  :step-id=\"stepId\"\n  :v=\"$v\"\n  :steps=\"steps\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-ariknbzvghmupjqdcywsxeflto",
                      "componentLogic": "{\n    computed : {\n        localValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    \n    methods: {\n        addSuggestion() {\n          return {\n            text: '``'\n          }\n        },\n        \n        getErrorText(vObj) {\n          if(!vObj.$invalid) return ``;\n          \n          if(!vObj.required) return `This field should not be empty`;\n          if(!vObj.uniq) return `This field should be unique`;\n        }\n    },\n    \n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        v: {\n          type: Object,\n          default: () => {}\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "268feda3-7ed1-4641-8ba7-dfebe4f04b1e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.autoSuggestionType, ' `'), `list`) && schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "268feda3-7ed1-4641-8ba7-dfebe4f04b1e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.autoSuggestionType, ' `'), `list`) && schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-list v-model=\"localValue\" addButtonLabel=\"Add suggestion\" :new-item-method=\"addSuggestion\">\r\n  <template slot-scope=\"item\">\r\n    <div class=\"input\">\r\n      <or-text-expression\r\n        :readonly=\"readonly\"\r\n        v-model=\"item.item.text\" \r\n        placeholder=\"Add suggestion to user\" \r\n        :steps=\"item.steps\" \r\n        :stepId=\"item.stepId\" \r\n        label=\"Suggestion\"\r\n        :mergeFields=\"mergeFields\"\r\n        :invalid=\"!isNew && v.schema.autoSuggestionOptionsList.$each[item.index].$invalid\"\r\n        :error=\"getErrorText(v.schema.autoSuggestionOptionsList.$each[item.index])\"\r\n      ></or-text-expression>\r\n    </div>\r\n  </template>\r\n</or-list>\r\n",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "268feda3-7ed1-4641-8ba7-dfebe4f04b1e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.isEqual(_.trim(schema.autoSuggestionType, ' `'), `list`) && schema.autoSuggestion.input",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".input {\n  width: 100%;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "Allow users to reply manually and, if necessary, provide them with suggestions.",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "b9b4ddf3-5b09-49d4-96eb-cb77beca73f1",
              "data": {
                "open": false,
                "header": "Additional content customization",
                "inputs": [
                  {
                    "id": "65553bf1-0be9-4440-b581-4feb121947e2",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard :is-new=\"isNew\" :readonly=\"readonly\" :merge-fields=\"mergeFields\" :step-id=\"stepId\" :steps=\"steps\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qbkczylptvwdehojairfmguxns",
                      "componentLogic": "{\n    computed : {\n        computedValue : {\n            get () { return this.value; },\n            set (value) { this.$emit('input', value); }\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "337c117a-79e0-4854-b2e9-36a5b816ae22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'empty'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "7da8ccdd-bef4-4141-8bc9-92f28e10c2db",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "337c117a-79e0-4854-b2e9-36a5b816ae22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'empty'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "7da8ccdd-bef4-4141-8bc9-92f28e10c2db",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"text\">No additional content is selected</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "337c117a-79e0-4854-b2e9-36a5b816ae22",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'empty'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          },
                          {
                            "modes": [],
                            "vforkey": "7da8ccdd-bef4-4141-8bc9-92f28e10c2db",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "!_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`')",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".text {\n  font-size: 14px;\n  line-height: 16px;\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "5da9f6fa-5068-465c-b8d9-8e939f206528",
                    "data": {
                      "label": "Select how to manage HTML content",
                      "options": [
                        {
                          "label": "Append HTML to content of previous steps",
                          "value": "`append`",
                          "checked": false,
                          "vforkey": "7bdfdda4-2f02-463f-add0-77f4e3177e6f"
                        },
                        {
                          "label": "Override HTML in content card",
                          "value": "`override`",
                          "checked": false,
                          "vforkey": "f4863da8-e3c2-4b76-af45-638ee237fd2a"
                        }
                      ],
                      "helpText": "",
                      "multiple": false,
                      "readonly": false,
                      "variable": "additionalContentCardChangeType",
                      "radioColor": "primary",
                      "isHtmlLabel": false,
                      "optionsMode": "default",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": "`append`",
                      "iconHelpText": "",
                      "labelPosition": "left",
                      "dynamicOptions": "let options = [];\nfor (let i = 0; i < 5; i++) {\n\toptions.push({ label: `Option ${i}`, value: `option_${i}` });\n}\nreturn options;",
                      "isHtmlHelpText": false,
                      "iconHelpTextURL": "",
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f7ab0a8-9dc4-434d-8306-1b95fea45736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "groupOrientation": "vertical",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "3f7ab0a8-9dc4-434d-8306-1b95fea45736",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "radioGroup",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Radio Group",
                    "compiled": {},
                    "component": "radioGroup",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"radioGroup\"]"
                    ]
                  },
                  {
                    "id": "c9c6f71e-3663-47bd-9ddc-378d64b2edbc",
                    "data": {
                      "data": "{\n  \"additionalContentVideo\": []\n}",
                      "toJson": "//function that describe how to serialize wildcard data \nfunction generateProperty(property, key){\n  return property ? `${property}.${key}` : key\n}\n\nfunction convertMedias(medias) {\n  let filteredMedias = _.filter(medias, media => (_.has(media, 'linkUrl') && media.linkUrl.length && media.linkUrl !== \"``\") || _.has(media, 'location'));\n  let finalMedias = _.map(filteredMedias, media => {\n    return media.linkUrl ? `{ location: ${media.linkUrl}, size: ${_.get(media, 'data.Size')} }` : `{ location: ${JSON.stringify(media.location)}, size: ${media.size} }`\n  })\n  \n  return finalMedias.length ? `[${finalMedias}]` : `[]`;\n}\n\nfunction toJson(data, property = '', path) {\n    if ((/additionalContentVideo/g).test(property)) return convertMedias(data)\n    if (_.isArray(data)) {\n        return `[${_.map(data, d => toJson(d, generateProperty(property, '[]'))).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, generateProperty(property, key))}`).join(',')}}`;\n    }\n    if (/\\$\\{.+?\\}/.test(data)) return data;\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  additionalContentVideo: {\n    $each: {\n      custom (obj) {\n        return obj.linkUrl ? (obj.linkUrl && obj.linkUrl.slice(1, -1)) : true\n      }\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.additionalContentVideo\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\" \n  :steps=\"steps\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-qacpbzikfxmolydunretwghsvj",
                      "componentLogic": "{\n    data () {\n      return {\n        previewWindow: null,\n        allowedFileTypes: ['mov', 'MOV', 'mp4', 'MP4'],\n        maxFiles: 1\n      };\n    },\n    computed : {\n        authToken () { return this.$settings.token },\n        medias : {\n            get () {\n              return this.value;\n            },\n            set (value) {\n              let res = value;\n              if (_.isEqual(this.value, res)) return;\n              \n              res.forEach(el => {\n                if (!el.vforkey) {\n                  el.vforkey = uuid.v4();\n                }\n                return el;\n              }) // add key to prevent trigger change by or-list\n              \n              this.$emit('input', res);\n            }\n        },\n        usedUrlInputs () {\n          if (!_.get(this, 'value', []).length) return false;\n          return this.value.every(el => el.linkUrl);\n        }\n    },\n    props : {\n        value : {\n            type : String,\n            default : ''\n        },\n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        v : {\n          type: Object,\n          default() {\n            return {schema: {}};\n          }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        }\n    },\n    methods: {\n      // media methods begin\n      getValue (key, el) {\n        return _.get(el || this.value, key);\n      },\n      updateMedias (field, value) {\n        const medias = _.cloneDeep(this.medias);\n        medias.forEach(el => {\n          if (el.vforkey === field.vforkey) {\n            el.linkUrl = field.linkUrl\n            el.vforkey = field.vforkey\n          }\n          return el\n        })\n        this.medias = medias;\n      },\n      openModal (ref) {\n        this.$refs[ref].open();\n      },\n      removeSelectedItem (key) {\n        const _medias = this.value\n        _medias.splice(key, 1);\n        medias = _medias\n        // this.setValue('medias', _medias);\n      },\n      addMedia () {\n        if (_.has(_.get(this.value, '[0]'), 'linkUrl')) {\n          const _medias = this.value;\n          _medias.push(this.addNewUrl());\n          this.medias = _medias\n          // this.setValue('medias', _medias);\n        } else {\n          this.openModal('select-media');\n        }\n        \n      },\n      addNewUrl () {\n        return {\n          linkUrl: \"``\",\n          vforkey: uuid.v4()\n        }\n      },\n      changeMediaToUrl () {\n        const _medias = [this.addNewUrl()];\n        this.medias = _medias\n        // this.setValue('medias', _medias);\n      }\n    }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5774a18d-9aed-4c10-8347-c5e4b68ab07e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'video'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5774a18d-9aed-4c10-8347-c5e4b68ab07e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'video'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"rwc__media\">\n  <or-modal ref=\"select-media\" title=\"Select media\" size=\"large\">\n    <or-asset-manager\n      v-if=\"!usedUrlInputs\"\n      use-files\n      :auth-token=\"authToken\"\n      :multi-select=\"false\"\n      :max-files=\"maxFiles\"\n      :allowed-file-types=\"allowedFileTypes\"\n      :files-api-url=\"$flow.filesApiUrl\"\n      :allowFilesAndData=\"false\"\n      v-model=\"medias\"\n    />\n  </or-modal>\n  <or-list\n    ref=\"mediaList\"\n    :value=\"value\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :new-item-method=\"addNewUrl\"\n    :readonly=\"readonly\"\n    :maxItemsCount=\"1\"\n    class=\"rwc-media__list\"\n  >\n    <template slot-scope=\"item\">\n      <div v-if=\"item.item.name\" class=\"rwc-media__item\">\n          <span>{{ item.item.name }}</span>\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\" :disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n      <div v-if=\"item.item.hasOwnProperty('linkUrl')\" class=\"rwc-media__item\">\n          <or-text-expression\n            v-model=\"item.item.linkUrl\"\n            :mergeFields=\"mergeFields\"\n            :steps=\"steps\"\n            disableVariables\n            disableCodeMode\n            :step-id=\"stepId\"\n            :readonly=\"readonly\"\n            label=\"URL\"\n            placeholder=\"Enter URL to the file\"\n            :invalid=\"getValue(`schema.heroVideo.$each[${item.index}].$invalid`, v)\"\n            error=\"Add URL or delete input\"\n            @input=\"val => updateMedias(item.item, val)\"\n          />\n          <button v-if=\"!readonly\" :class=\"['rwc-media__delete', {disabled: readonly}]\":disabled=\"readonly\" @click=\"removeSelectedItem(item.index)\"><or-icon>delete</or-icon></button>\n      </div>\n    </template>\n    <!--add extra file start-->\n    <div slot=\"footer\">\n    </div>\n    <!--add extra file end-->\n  </or-list>\n  <!--media items end-->\n  <div v-if=\"!(value && value.length)\" class=\"rwc-media__buttons\">\n    + Add video from\n    <or-button\n      @click=\"openModal('select-media')\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly }]\"\n      disableRipple\n    >\n      Files\n    </or-button>\n    or use\n    <or-button\n      @click=\"changeMediaToUrl\"\n      :disabled=\"readonly\"\n      :class=\"['rwc-media__button', { disabled : readonly, }]\"\n      disableRipple\n    >\n      URL\n    </or-button>\n  </div>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "5774a18d-9aed-4c10-8347-c5e4b68ab07e",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'video'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".rwc__error-message {\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: #f95d5d;\n}\n/* MEDIAS BEGIN */\n.rwc-media {\n  min-width: 100%;\n  \n  &.has-error {\n    .rwc-media__buttons {\n      button {\n        color: red !important;\n      }\n    }\n    .rwc-media__button {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    .rwc-media__add {\n      color: #f95d5d !important;\n      \n      .ui-icon {\n        color: #f95d5d !important;\n      }\n    }\n    \n  }\n  \n  .or-editable-wrapper {\n    .placeholder,\n    .editable {\n      line-height: 21px;\n    }\n  }\n  \n  &__buttons {\n    font-size: 14px;\n    font-weight: bold;\n    margin-bottom: 16px;\n  }\n  \n  &__button {\n    padding: 0;\n    font-size: 14px;\n    font-weight: bold;\n    color: #64b2da !important;\n    background-color: transparent !important;\n    min-width: 0;\n    height: auto;\n    min-height: 0;\n    \n    &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n      color: rgba(#64b2da, 0.8) !important;\n    }\n    \n    &.has-error {\n      color: #f95d5d !important;\n    }\n  }\n\n  &__list {\n    width: 100%;\n\n    /deep/ .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n    .or-list-items .list-item>.remove-button {\n        display: none;\n    }\n      \n    .or-text-expression {\n      width: 100%;\n    }\n    \n    &:not(.single-item) {\n      .or-text-expression {\n        min-width: 100%;\n      }\n      .rwc-media__item {\n        max-width: calc(100% - 46px);\n      }\n    }\n    &.single-item {\n      .rwc-media__item {\n        .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n        /deep/ .or-text-expression {\n          max-width: calc(100% - 24px);\n        }\n      }\n    }\n  }\n  &__item {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    justify-content: space-between;\n    font-size: 14px;\n    line-height: 16px;\n    > span {\n      display: inline-block;\n      max-width: calc(100% - 16px);\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  }\n\n  &__delete {\n    background-color: transparent;\n    border: none;\n    color: #c6c6c6;\n    .ui-icon {\n        font-size: 16px;\n    }\n\n    &:hover {\n        color: red;\n    }\n  }\n  &__add {\n    background: transparent !important;\n    background-color: transparent !important;\n    color: #64b2da !important;\n    font-weight: bold;\n    padding: 0;\n      &.ui-button--type-primary.ui-button--color-default .ui-button__dropdown-icon,\n      &.ui-button--type-primary.ui-button--color-default .ui-button__icon {\n        color: #64b2da;\n        .ui-icon {\n            font-size: 16px;\n        }\n      }\n      &.ui-button.ui-button--type-primary.ui-button--color-default:hover:not([disabled]) {\n        color: rgba(#64b2da, 0.8) !important;\n      }\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "39308104-1f9c-42f2-b665-8708651959d8",
                    "data": {
                      "mode": "html",
                      "jsEnv": "ecma6",
                      "label": "HTML",
                      "helpText": "",
                      "variable": "additionalHtml",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dc4e56ab-f361-4622-8156-09e025749b04",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "dc4e56ab-f361-4622-8156-09e025749b04",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "b1ea55c0-3cf0-4111-ba49-de159afbac28",
                    "data": {
                      "mode": "scss",
                      "jsEnv": "ecma6",
                      "label": "CSS",
                      "helpText": "",
                      "variable": "additionalCss",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4123959c-015e-44f6-8689-6672dcfb048b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": true,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "4123959c-015e-44f6-8689-6672dcfb048b",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "86c613ac-37f3-4d14-9160-c437c2560c22",
                    "data": {
                      "mode": "javascript",
                      "jsEnv": "ecma6",
                      "label": "JavaScript",
                      "helpText": "",
                      "variable": "additionalScript",
                      "warnings": false,
                      "autocomplete": true,
                      "defaultValue": "",
                      "validateCode": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e42de35b-4f80-4597-a6c6-4ca6aaa1e8e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableVariables": false,
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validateExpression": false,
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "e42de35b-4f80-4597-a6c6-4ca6aaa1e8e0",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formCode",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Code",
                    "compiled": {},
                    "component": "formCode",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formCode\"]"
                    ]
                  },
                  {
                    "id": "e4eaf086-eb17-421a-9552-1f4d66fd9887",
                    "data": {
                      "label": "",
                      "inputs": [
                        {
                          "id": "4d0c0b6b-a47c-4c79-875c-20d74ceba321",
                          "data": {
                            "label": "Name",
                            "helpText": "",
                            "variable": "varName",
                            "multiline": false,
                            "placeholder": "Enter variable name here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        },
                        {
                          "id": "85e86246-0500-4a3c-8b15-3420250e75f6",
                          "data": {
                            "label": "Value",
                            "helpText": "",
                            "variable": "varValue",
                            "multiline": false,
                            "placeholder": "Enter variable value here",
                            "defaultValue": "``",
                            "allowCodeMode": true,
                            "renderCondition": "",
                            "allowMergeFields": true,
                            "validateRequired": false,
                            "disabledCondition": "",
                            "alwaysShowHelpText": false,
                            "validationConditions": [],
                            "renderConditionBuilder": {
                              "label": "`Conditional visibility`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": true,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            },
                            "disableConditionBuilder": {
                              "label": "`Conditional disablement`",
                              "rules": [],
                              "trueValue": "any",
                              "description": "``",
                              "defaultValue": false,
                              "isNotCollapsed": false,
                              "isEditableHeader": false
                            }
                          },
                          "meta": {
                            "name": "formTextInput",
                            "type": "onereach-studio-form-input",
                            "version": "1.0"
                          },
                          "label": "Text input",
                          "compiled": {},
                          "component": "formTextInput",
                          "pluginRefs": [
                            "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                            "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formTextInput\"]"
                          ]
                        }
                      ],
                      "variable": "additionalCardvariables",
                      "singleline": true,
                      "prettifyDrag": false,
                      "allowCodeMode": true,
                      "limitMaxItems": false,
                      "maxItemsCount": "10",
                      "addButtonLabel": "Add variable",
                      "hasDefaultItem": false,
                      "dragHandleRight": false,
                      "renderCondition": "",
                      "conditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c207280c-5f60-470c-beb3-4a45c5882c4d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "canRemoveLastItem": true,
                      "disabledCondition": "",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [
                          {
                            "modes": [],
                            "vforkey": "c207280c-5f60-470c-beb3-4a45c5882c4d",
                            "ruleType": {
                              "func": "{ return _.isEqual(firstValue, secondValue) }",
                              "type": "double",
                              "input": [
                                "mixed",
                                "mixed"
                              ],
                              "label": "exactly matches",
                              "modes": [
                                "strict"
                              ],
                              "category": "general"
                            },
                            "codeValue": "_.trim(_.get(schema.conversation, 'meta.additionalContent.type', ''), '`') === 'card'",
                            "valueType": "advanced",
                            "firstValue": "``",
                            "secondValue": "``",
                            "caseInsensitive": true,
                            "isDisabledSecondValue": false
                          }
                        ],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": true,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formList",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "List",
                    "compiled": {},
                    "component": "formList",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formList\"]"
                    ]
                  }
                ],
                "description": "Here you can set up the additional content",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "d21347b3-1bf1-4cd9-adab-037b45f54d3e",
                      "ruleType": {
                        "func": "{ return firstValue === false }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is false",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.textMessage",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "d21347b3-1bf1-4cd9-adab-037b45f54d3e",
                      "ruleType": {
                        "func": "{ return firstValue === false }",
                        "type": "single",
                        "input": [
                          "mixed"
                        ],
                        "label": "is false",
                        "modes": [
                          "noTruthy"
                        ],
                        "category": "boolean"
                      },
                      "codeValue": "``",
                      "valueType": "boolean",
                      "firstValue": "schema.textMessage",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "bf7442fe-c5bd-4536-8b65-761ac9d445d4",
              "data": {
                "open": false,
                "header": "Conversation",
                "inputs": [
                  {
                    "id": "bd72be90-9c0c-4875-8ae8-ffd639ddc58a",
                    "data": {
                      "inputs": [
                        {
                          "component": [
                            "conversation-select",
                            "https://content-assets.onereach.ai/component/conversation-select/0.0.18/index.js"
                          ]
                        }
                      ],
                      "inherit": {
                        "from": "last",
                        "isAdvanced": false
                      },
                      "isNested": false,
                      "variable": "rwcContext",
                      "contextKey": "__rwc_context",
                      "showEditor": false,
                      "exposeConfig": false,
                      "allowCodeMode": false,
                      "contextInputs": {
                        "step": [
                          {
                            "data": {},
                            "component": "stepChooser"
                          }
                        ],
                        "manual": [
                          {
                            "id": "d0307eb0-6ef4-4216-8f34-fb5444b34e36",
                            "data": {
                              "required": true,
                              "variableName": "conversation",
                              "conversationType": "rwc-chat",
                              "validationConditions": [],
                              "renderConditionBuilder": {
                                "label": "`Conditional visibility`",
                                "rules": [],
                                "trueValue": "any",
                                "description": "``",
                                "defaultValue": true,
                                "isNotCollapsed": false,
                                "isEditableHeader": false
                              },
                              "disableConditionBuilder": {
                                "label": "`Conditional disablement`",
                                "rules": [],
                                "trueValue": "any",
                                "description": "``",
                                "defaultValue": false,
                                "isNotCollapsed": false,
                                "isEditableHeader": false
                              }
                            },
                            "compiled": {},
                            "component": [
                              "conversation-select",
                              "https://content-assets.onereach.ai/component/conversation-select/0.0.18/index.js"
                            ]
                          }
                        ],
                        "dataOut": [
                          {
                            "data": {},
                            "component": "formSelectExpression"
                          }
                        ],
                        "inherited": []
                      },
                      "selectedTypes": [
                        "inherited",
                        "manual"
                      ],
                      "contextControl": {
                        "data": {
                          "id": "4d87de58-d77f-4dd0-ad5f-f134b470d683",
                          "label": "Inherit context from previous step",
                          "helpText": "",
                          "variable": "selectStyle",
                          "labelLeft": false,
                          "trueLabel": "Continue conversation",
                          "trueValue": "inherited",
                          "falseLabel": "",
                          "falseValue": "manual",
                          "isHtmlLabel": false,
                          "switchColor": "primary",
                          "advancedHelp": {
                            "link": {
                              "url": "",
                              "icon": "help",
                              "iconHelp": "",
                              "tooltipPosition": "top center"
                            },
                            "modal": {
                              "icon": "help",
                              "title": "",
                              "content": "",
                              "iconHelp": "",
                              "tooltipPosition": "top center"
                            },
                            "tooltip": {
                              "icon": "help",
                              "content": "",
                              "openTooltipOn": "hover",
                              "tooltipPosition": "top center"
                            }
                          },
                          "defaultValue": "inherited",
                          "allowCodeMode": true,
                          "isHtmlHelpText": false,
                          "switchPosition": "left",
                          "isHtmlTrueLabel": false,
                          "overwriteLabels": true,
                          "overwriteValues": true,
                          "renderCondition": "",
                          "isHtmlFalseLabel": false,
                          "disabledCondition": "",
                          "helpDisplayOption": "hover",
                          "iconHelpTextOption": "none",
                          "validationConditions": [],
                          "renderConditionBuilder": {
                            "label": "`Conditional visibility`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": false,
                            "isEditableHeader": false
                          },
                          "disableConditionBuilder": {
                            "label": "`Conditional disablement`",
                            "rules": [],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": false,
                            "isNotCollapsed": false,
                            "isEditableHeader": false
                          }
                        },
                        "component": "formSwitch"
                      },
                      "initEmptyStore": false,
                      "renderCondition": "",
                      "allContextOptions": [
                        {
                          "label": "Inherited",
                          "value": "inherited"
                        },
                        {
                          "label": "Target step",
                          "value": "step"
                        },
                        {
                          "label": "Merge field",
                          "value": "dataOut"
                        },
                        {
                          "label": "Manual",
                          "value": "manual"
                        }
                      ],
                      "configurationName": "rwc",
                      "disabledCondition": "",
                      "useCustomResolver": true,
                      "bufferVariableName": "__contextTtlBuffer",
                      "keyValueCollection": "___simple_context_service_rwc",
                      "initContextInstance": true,
                      "validationConditions": [],
                      "customResolveFunction": "function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}",
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": [
                      "simple-context-manager",
                      "https://content-assets.onereach.ai/component/simple-context-manager/0.0.8/index.js"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": true,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "a2deda66-54da-4b8f-a74a-1876444ba223",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "68a9f701-3e1c-4d9b-a13e-8e366d3c88cb",
                    "data": {
                      "meta": {
                        "type": "rwc-request-response"
                      },
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{\n  \"type\": 'rwc-request-response'\n}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  userReply: 'string'\n}",
          "defaultTimeout": "`1h`",
          "hasProcessError": true,
          "hasChangeTimeout": true,
          "hasProcessTimeout": true,
          "allowSkipStepLogic": true,
          "processTimeOutMaxValue": "72h",
          "processTimeOutMinValue": "15s"
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate);",
            "version": "0.0.19"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processError'])) step.data['processError'] = true;\nif(_.isUndefined(step.data['stepVariable'])) step.data['stepVariable'] = {\"sendMessage\":true,\"allowMedia\":true,\"waitForAnswer\":true,\"waitForFiles\":false,\"useFiles\":true,\"medias\":[],\"messageText\":\"``\",\"validation\":[],\"answerComponent\":{\"component\":null,\"defaultValue\":\"\",\"sendMessage\":true,\"showComponentInMessage\":false,\"waitForAnswer\":true,\"allowMedia\":true},\"answerType\":null};\nif(_.isUndefined(step.data['conversation'])) step.data['conversation'] = {\"name\":\"\",\"meta\":\"\"};\nif(_.isUndefined(step.data['autoSuggestion'])) step.data['autoSuggestion'] = {\"input\":true,\"isExtraLeg\":false,\"options\":[]};\nif(_.isUndefined(step.data['timeoutVariable'])) step.data['timeoutVariable'] = {\"processTimeout\":false,\"waitTimeout\":\"`1 h`\"};\nif(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{\"type\":\"rwc-request-response\"}};\napplyExitsMigration(step, stepTemplate);",
            "version": "4.0.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000,\"meta\":{\"type\":\"rwc-request-response\"}};\n",
            "version": "4.0.29"
          },
          {
            "sample": null,
            "script": "step.outputExample.userReply = 'string'",
            "version": "4.1.1"
          },
          {
            "sample": null,
            "script": "step.data.cardDescription = '``';\nstep.data.textMessage = '``';\nstep.data.datepickerStartsFrom = '`sunday`'\nstep.data.datepickerFormat = '`mm-dd-yyyy`'\nstep.data.dropdownPlaceholder = '``'\nstep.data.sliderType = '`range`'\nstep.data.attachmentsNumber = '`one`'\nstep.data.sliderDefaultValue = ''",
            "version": "4.1.18"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['signatureBtn'])) step.data['signatureBtn'] = \"``\";\nstep.data.signatureBtn = \"``\"",
            "version": "4.1.19"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['rateInput'])) step.data['rateInput'] = true;\nif(_.isUndefined(step.data['ratePlaceholder'])) step.data['ratePlaceholder'] = \"``\";\nstep.data.rateInput = true\nstep.data.ratePlaceholder = \"``\"",
            "version": "4.1.20"
          },
          {
            "sample": null,
            "script": "step.data.creditBtnLabel = \"``\";\nstep.data.creditTerms = \"``\";\nstep.data.creditAllowMask = true;",
            "version": "4.1.23"
          },
          {
            "sample": null,
            "script": "step.data.creditTermsLabel = \"``\";\nstep.data.textInputAllowMask = false",
            "version": "4.1.24"
          },
          {
            "sample": null,
            "script": "step.data.videoAutoplay = true\nstep.data.videoBtnLabel = \"``\"\nstep.data.videoShowInThread = true",
            "version": "4.1.34"
          },
          {
            "sample": null,
            "script": "step.data.datepickerBlockDates = false\nstep.data.datepickerSuggestedDates = false\nstep.data.datepickerBlockedOptions = []",
            "version": "4.1.38"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['datepickerBlockedFunc'])) step.data['datepickerBlockedFunc'] = \"// tip: return true to enable and false to disable date\\n\" +\n\"// disable all wednesdays\\n\" +\n\"// return moment(date).day() !== 3;\\n\" +\n\"// disable 10s day of month\\n\" +\n\"// return moment(date).date() !== 10;\\n\" +\n\"// disable Novembers\\n\" +\n\"// return moment(date).month() !== 10;\"\nif(_.isUndefined(step.data['datepickerSuggestedFunc'])) step.data['datepickerSuggestedFunc'] = \"// tip: return true to highlight date\\n\" +\n\"// highlight all mondays and fridays\\n\" +\n\"// return moment(date).day() === 1 || moment(date).day() === 5;\\n\" +\n\"// highlight 1st - 11s day of month\\n\" +\n\"// return moment(date).date() >= 1 && moment(date).date() <= 11;\\n\" +\n\"// highlight Novembers\\n\" +\n\"// return moment(date).month() === 10;\";\n",
            "version": "4.1.39"
          },
          {
            "sample": null,
            "script": "step.data.datepickerBlockedMergefield = \"this.get('')\";\nstep.data.datepickerSuggestedMergefield = \"this.get('')\";\nstep.data.datepickerSuggestedOptions = [];",
            "version": "4.1.40"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['datepickerBlockedFunc'])) step.data['datepickerBlockedFunc'] = \"// tip: return true to disable and false to enable date\\n// disable all wednesdays\\n// return moment(date).day() === 3;\\n// disable 10s day of month\\n// return moment(date).date() === 10;\\n// disable Novembers\\n// return moment(date).month() === 10;\";\n",
            "version": "4.2.2"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['geolocationSetDefault'])) step.data['geolocationSetDefault'] = false;\nif(_.isUndefined(step.data['geolocationLat'])) step.data['geolocationLat'] = \"``\";\nif(_.isUndefined(step.data['geolocationLng'])) step.data['geolocationLng'] = \"``\";\n",
            "version": "4.2.6"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['bookingAllowMultiselect'])) step.data['bookingAllowMultiselect'] = false;\nif(_.isUndefined(step.data['bookingDisableDates'])) step.data['bookingDisableDates'] = false;\nif(_.isUndefined(step.data['bookingDisableDatesOptions'])) step.data['bookingDisableDatesOptions'] = [];\nif(_.isUndefined(step.data['bookingDisableSlots'])) step.data['bookingDisableSlots'] = false;\nif(_.isUndefined(step.data['bookingTimeFormat'])) step.data['bookingTimeFormat'] = \"`12`\";\nif(_.isUndefined(step.data['bookingSessionItems'])) step.data['bookingSessionItems'] = [];\n",
            "version": "4.2.8"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['autoSuggestionType'])) step.data['autoSuggestionType'] = \"emty\";\nif (_.isUndefined(step.data['autoSuggestionOptionsMergeField'])) step.data['autoSuggestionOptionsMergeField'] = ''",
            "version": "4.2.9"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['autoSuggestionOptionsList'])) step.data['autoSuggestionOptionsList'] = [];\n",
            "version": "4.2.10"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.datepickerBlockDates)) {\n  step.data.datepickerBlockDates = false\n}\nif (_.isUndefined(step.data.datepickerBlockedOptions)) {\n  step.data.datepickerBlockedOptions = []\n}\nif (_.isUndefined(step.data.datepickerBlockedMergefield)) {\n  step.data.datepickerBlockedMergefield = \"this.get('')\"\n}\nif (_.isUndefined(step.data.datepickerSuggestedDates)) {\n  step.data.datepickerSuggestedDates = false\n}\nif (_.isUndefined(step.data.datepickerSuggestedOptions)) {\n  step.data.datepickerSuggestedOptions = []\n}\nif (_.isUndefined(step.data.datepickerSuggestedFunc)) {\n  step.data.datepickerSuggestedFunc = ''\n}\nif (_.isUndefined(step.data.datepickerSuggestedMergefield)) {\n  step.data.datepickerSuggestedMergefield = \"this.get('')\"\n}",
            "version": "4.2.12"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.cardDescription)) {\n  step.data.cardDescription = \"``\"\n}\nif (_.isUndefined(step.data.cardBtnLabel)) {\n  step.data.cardBtnLabel = \"``\"\n}\nif (_.isUndefined(step.data.cardBtnValue)) {\n  step.data.cardBtnValue = \"``\"\n}\nif (_.isUndefined(step.data.textMessage)) {\n  step.data.textMessage = _.get(step.data, 'stepVariable.messageText') || \"``\"\n}\nif (_.isUndefined(step.data.carouselHasAlternative)) {\n  step.data.carouselHasAlternative = false\n}\nif (_.isUndefined(step.data.datepickerStartsFrom)) {\n  step.data.datepickerStartsFrom = \"`0`\"\n}\nif (_.isUndefined(step.data.datepickerFormat)) {\n  step.data.datepickerFormat = \"`MM-DD-YYYY`\"\n}\nif (_.isUndefined(step.data.dropdownPlaceholder)) {\n  step.data.dropdownPlaceholder = \"``\"\n}\nif (_.isUndefined(step.data.sliderDefaultValue)) {\n  step.data.sliderDefaultValue = \"``\"\n}\nif (_.isUndefined(step.data.sliderStep)) {\n  step.data.sliderStep = \"\"\n}\nif (_.isUndefined(step.data.sliderUnit)) {\n  step.data.sliderUnit = \"``\"\n}\nif (_.isUndefined(step.data.sliderUnitPosition)) {\n  step.data.sliderUnitPosition = \"`start`\"\n}\nif (_.isUndefined(step.data.sliderType)) {\n  step.data.sliderType = \"single\"\n}\nif (_.isUndefined(step.data.textInputAllowMask)) {\n  step.data.textInputAllowMask = false\n}\nif (_.isUndefined(step.data.videoStartTime)) {\n  step.data.videoStartTime = \"0\"\n}\nif (_.isUndefined(step.data.videoStartTimeTimestring)) {\n  step.data.videoStartTimeTimestring = \"``\"\n}\nif (_.isUndefined(step.data.carouselOptions)) {\n  step.data.carouselOptions = [{\n    image: {},\n    label: \"``\",\n    description: \"``\",\n    button: \"``\",\n    value: \"``\",\n    vforkey: \"d848c364-6f0b-4165-98cb-1e3bbe3e1bb7\"\n  }]\n}\nif (_.isUndefined(step.data.carouselAlternative)) {\n  step.data.carouselAlternative = {\n    text: \"``\",\n    button: \"``\",\n    value: \"``\"\n  }\n}\nif (_.isUndefined(step.data.checkboxOptions)) {\n  step.data.checkboxOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"fb0ba6ca-2292-435e-b375-6e9266f3931e\"\n  }]\n}\nif (_.isUndefined(step.data.sliderUseCustomLabels)) {\n  step.data.sliderUseCustomLabels = false\n}\nif (_.isUndefined(step.data.sliderCustomFunction)) {\n  step.data.sliderCustomFunction = `// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }`\n}\nif (_.isUndefined(step.data.sliderCustomLabels)) {\n  step.data.sliderCustomLabels = [{\n    label: \"``\",\n    value: \"``\"\n  }, {\n    label: \"``\",\n    value: \"``\"\n  }]\n}\nif (_.isUndefined(step.data.sliderMin)) {\n  step.data.sliderMin = \"``\"\n}\nif (_.isUndefined(step.data.sliderMax)) {\n  step.data.sliderMax = \"``\"\n}\nif (_.isUndefined(step.data.textPlaceholder)) {\n  step.data.textPlaceholder = \"``\"\n}\nif (_.isUndefined(step.data.timepickerFormat)) {\n  step.data.timepickerFormat = \"`12`\"\n}\nif (_.isUndefined(step.data.dropdownOptions)) {\n  step.data.dropdownOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"fc0eb1aa-6a5d-494e-acab-8d73268e8de3\"\n  }]\n}\nif (_.isUndefined(step.data.optionListOptions)) {\n  step.data.optionListOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"c1eea434-9e78-4ed2-aae5-6fc65398dd60\"\n  }]\n}\nif (_.isUndefined(step.data.optionsButtons)) {\n  step.data.optionsButtons = [{\n    \"label\": \"``\",\n    \"value\": \"``\",\n    \"vforkey\": \"010b9444-c33d-42e3-ac7f-e1f7225a9c1f\"\n  }]\n}\nif (_.isUndefined(step.data.radioOptions)) {\n  step.data.radioOptions = [{\n    label: \"``\",\n    value: \"``\",\n    vforkey: \"847d2416-4a11-4e62-a9a8-d87ce1e1f519\"\n  }]\n}\nif (_.isUndefined(step.data.radioDefault)) {\n  step.data.radioDefault = \"`No option`\"\n}\nif (_.isUndefined(step.data.attachmentsNumber)) {\n  step.data.attachmentsNumber = \"`0`\"\n}\nif (_.isUndefined(step.data.attachmentsAllowChosen)) {\n  step.data.attachmentsAllowChosen = false\n}\nif (_.isUndefined(step.data.geolocationBtn)) {\n  step.data.geolocationBtn = \"``\"\n}\nif (_.isUndefined(step.data.customComponent)) {\n  step.data.customComponent = `return {\n  template: {\n    template: \\`<button @click=\"send(testData)\">{{ testData }}</button>\\`,\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: [],\n    methods: {\n      send(msg) {\n        /**\n         * \\`message\\` field will be sent as user reply and will NOT be stored in mergeField\n         * \\`myData\\` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    },\n    // mounted () {\n    //  if the component does not require user interaction, you can send a message when the component mount\n    //  this.send('mounted')\n    // },\n    computed: {}\n  },\n  \"showComponentInMessage\": true // if true component will be shown in the message bubble\n}`\n}",
            "version": "4.2.16"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['datepickerAllowed'])) step.data['datepickerAllowed'] = null;",
            "version": "4.2.18"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['useCustomAnswer'])) step.data['useCustomAnswer'] = false;\nif(_.isUndefined(step.data['userAnswerFunction'])) step.data['userAnswerFunction'] = \"return ''\";\n",
            "version": "4.2.19"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['buttonStyle'])) step.data['buttonStyle'] = \"default\";\n",
            "version": "4.2.20"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleAllowMultiselect'])) step.data['scheduleAllowMultiselect'] = false;\nif(_.isUndefined(step.data['scheduleDisableDates'])) step.data['scheduleDisableDates'] = false;\nif(_.isUndefined(step.data['scheduleDisableDatesOptions'])) step.data['scheduleDisableDatesOptions'] = [];\nif(_.isUndefined(step.data['scheduleDisableSlots'])) step.data['scheduleDisableSlots'] = false;\nif(_.isUndefined(step.data['scheduleTimeFormat'])) step.data['scheduleTimeFormat'] = \"`12`\";\nif(_.isUndefined(step.data['scheduleSessionItems'])) step.data['scheduleSessionItems'] = [];\nif(_.isUndefined(step.data['scheduleButtonLabel'])) step.data['scheduleButtonLabel'] = \"``\";\nif(_.isUndefined(step.data['workingHours'])) step.data['workingHours'] = {\n    \"timezone\": null,\n    \"timeFormat\": false,\n    \"from\": null,\n    \"to\": null\n  }\n",
            "version": "4.2.23"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleDisableByFunction'])) step.data['scheduleDisableByFunction'] = false;\nif(_.isUndefined(step.data['scheduleDisableByMf'])) step.data['scheduleDisableByMf'] = false;\nif(_.isUndefined(step.data['scheduleDisableByManually'])) step.data['scheduleDisableByManually'] = false;\nif(_.isUndefined(step.data['scheduleDisableFunction'])) step.data['scheduleDisableFunction'] = \"\";\nif(_.isUndefined(step.data['scheduleDisableMf'])) step.data['scheduleDisableMf'] = \"this.get('')\";\nif(_.isUndefined(step.data['scheduleDisableManual'])) step.data['scheduleDisableManual'] = [];\n",
            "version": "4.2.24"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleMultiselectQuantity'])) step.data['scheduleMultiselectQuantity'] = \"3\";\nstep.data.scheduleDisableFunction = `// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;`",
            "version": "4.2.25"
          },
          {
            "sample": null,
            "script": "if(step.data.carouselOptions) {\r\n  step.data.carouselOptions = _.map(step.data.carouselOptions, card => ({\r\n    ...card,\r\n    showModalButtonInUserResponse: true\r\n  }));\r\n}",
            "version": "4.2.34"
          },
          {
            "sample": null,
            "script": "if(step.data.carouselOptions) {\r\n  step.data.carouselOptions = _.map(step.data.carouselOptions, card => ({\r\n    ...card,\r\n    modalType: \"default-modal\"\r\n  }));\r\n}",
            "version": "4.2.36"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['scheduleDisableManual'])) step.data['scheduleDisableManual'] = [];",
            "version": "4.2.37"
          },
          {
            "sample": null,
            "script": "step.data['scheduleOptionItems'] = [{label: \"``\", value: \"``\"}]",
            "version": "4.2.43"
          },
          {
            "sample": null,
            "script": "step.data.recordMultimediaOptions = [\"`audio`\", \"`video`\", \"`screen`\", \"`file`\"]",
            "version": "4.2.45"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['customVariables'])) step.data['customVariables'] = [];\n",
            "version": "4.2.46"
          },
          {
            "sample": null,
            "script": "step.data.carouselOptions = _.map(step.data.carouselOptions, option => ({\n    image: _.get(option, 'image', {}),\n    video: _.get(option, 'video', {}),\n    label: _.get(option, 'label', \"``\"),\n    description: _.get(option, 'description', \"``\"),\n    button: _.get(option, 'button', \"``\"),\n    value: _.get(option, 'value', \"``\"),\n    hasModal: _.get(option, 'hasModal', false),\n    modalType: _.get(option, 'modalType', \"default-modal\"),\n    buttonStyle: _.get(option, 'buttonStyle', \"default\"),\n    html: _.get(option, 'html', \"\"),\n    showModalButtonInUserResponse: _.get(option, 'showModalButtonInUserResponse', true),\n    vforkey: _.get(option, 'vforkey', \"\")\n  }))",
            "version": "4.2.47"
          },
          {
            "sample": null,
            "script": "step.data.customTemplateType = '`vue`';\nstep.data.customTemplateHtmlCode = ``;\nstep.data.customTemplateJavaScriptCode = ``;\nstep.data.customTemplateCSSCode = ``;",
            "version": "4.2.49"
          },
          {
            "sample": null,
            "script": "step.data.autoSubmitCustomTemplate = true;\nstep.data.showCustomComponentInMessage = true;",
            "version": "4.2.52"
          },
          {
            "sample": null,
            "script": "step.data.customTempalateScripts = [];",
            "version": "4.2.54"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['hideCustomComponentAfterSubmit'])) step.data['hideCustomComponentAfterSubmit'] = false;\n",
            "version": "4.2.55"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.name === `custom`) {\n    step.data.inputComponent = `\\`custom\\``;\n    step.data.customComponent = step.data.stepVariable.answerComponent.template;\n\n    step.data.showCustomComponentInMessage = _.get(step, 'data.stepVariable.answerComponent.showComponentInMessage', true)\n}",
            "version": "4.2.56"
          },
          {
            "sample": null,
            "script": "step.data.customTemplateId = ``;",
            "version": "4.2.57"
          },
          {
            "sample": null,
            "script": "step.data.carouselOptions = _.map(step.data.carouselOptions, option => ({\n    image: _.get(option, 'image', {}),\n    video: _.get(option, 'video', {}),\n    title: _.get(option, 'label', \"``\"),\n    description: _.get(option, 'description', \"``\"),\n    buttonLabel: _.get(option, 'button', \"``\"),\n    value: _.get(option, 'value', \"``\"),\n    hasModal: _.get(option, 'hasModal', false),\n    modalType: _.get(option, 'modalType', \"default-modal\"),\n    buttonStyle: _.get(option, 'buttonStyle', \"default\"),\n    html: _.get(option, 'html', \"\"),\n    showModalButtonInUserResponse: _.get(option, 'showModalButtonInUserResponse', true),\n    vforkey: _.get(option, 'vforkey', \"\")\n}));\n\n_.forEach(step.data.carouselOptions, option => {\n    delete option.label;\n    delete option.button;\n})\n\nstep.data.carouselAlternative = {\n    description: _.get(step, 'data.carouselAlternative.text', \"``\"),\n    buttonLabel: _.get(step, 'data.carouselAlternative.button', \"``\"),\n    buttonStyle: _.get(step, 'data.carouselAlternative.buttonStyle', \"``\"),\n    value: _.get(step, 'data.carouselAlternative.value', \"``\")  \n};",
            "version": "4.2.58"
          },
          {
            "sample": null,
            "script": "\nif(step.data.inputComponent === `\\`card\\``) {\n    step.data.inputComponent = `\\`carousel\\``;\n\n    step.data.carouselOptions = [{\n        image: step.data.cardImage,\n        video: {},\n        title: \"``\",\n        description: step.data.cardDescription,\n        buttonLabel: step.data.cardBtnLabel,\n        value: step.data.cardBtnValue,\n        hasModal: false,\n        modalType: \"default-modal\",\n        buttonStyle: step.data.buttonStyle,\n        html: \"\",\n        showModalButtonInUserResponse: true,\n        vforkey: \"\"\n    }];\n\n    step.data.carouselHasAlternative = false;\n}\n\ndelete step.data.cardImage;\ndelete step.data.cardDescription;\ndelete step.data.cardBtnLabel;\ndelete step.data.cardBtnValue;\ndelete step.data.buttonStyle;",
            "version": "4.2.59"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['carouselOptions'])) step.data['carouselOptions'] = [{\"image\":{},\"video\":{},\"title\":\"``\",\"description\":\"``\",\"buttonLabel\":\"``\",\"value\":\"``\",\"hasModal\":false,\"modalType\":\"default-modal\",\"buttonStyle\":\"default\",\"html\":\"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding: 1rem 0;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: block;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\"showModalButtonInUserResponse\":true}];\n",
            "version": "4.2.60"
          },
          {
            "sample": null,
            "script": "step.data.isPrivateFiles = false;",
            "version": "4.2.66"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['showBotIcon'])) step.data['showBotIcon'] = false;\n",
            "version": "4.2.68"
          },
          {
            "sample": null,
            "script": "step.data.timeoutDuration = step.data.timeoutVariable.waitTimeout;\nstep.data.processTimeout = step.data.timeoutVariable.processTimeout;\nconst timeoutExit = _.find(step.data.exits, exit => exit.label === 'timeout');\nif (timeoutExit) {\n  timeoutExit.id = '__timeout__';\n  timeoutExit.condition = 'processTimeout';\n}\ndelete step.data.timeoutVariable;",
            "version": "4.2.69"
          },
          {
            "sample": null,
            "script": "step.data.carouselOptions = _.map(step.data.carouselOptions, option => ({\n    ...option,\n    childWindowType: `html`,\n    additionalContentLink: {},\n}));",
            "version": "4.2.76"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['ratingSubmitLabel'])) step.data['ratingSubmitLabel'] = \"``\";\nif(_.isUndefined(step.data['ratingDiscardLabel'])) step.data['ratingDiscardLabel'] = \"``\";\n",
            "version": "4.2.78"
          },
          {
            "sample": null,
            "script": "step.data.carouselMultiselect = false;",
            "version": "4.2.81"
          },
          {
            "sample": null,
            "script": "const inputComponent = _.replace(_.get(step.data, 'stepVariable.answerComponent.component'), 'rwc-', '');\n  if(inputComponent) {\n    step.data.inputComponent = `\\`${inputComponent}\\`` || '`textFiles`'\n  }",
            "version": "4.2.86"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.name === `checkbox-group`) {\n    step.data.inputComponent = `\\`checkbox\\``;\n\n    const options = _.get(step, 'data.stepVariable.answerComponent.vBind.options', []);\n    const defaultValue = _.get(step, 'data.stepVariable.answerComponent.vBind.defaultValue', []);\n\n    step.data.checkboxOptions = options;\n    step.data.checkboxDefault = defaultValue;\n\n    step.data.showCustomComponentInMessage = _.get(step, 'data.stepVariable.answerComponent.showComponentInMessage', true)\n}",
            "version": "4.2.87"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-datepicker`) {\n    step.data.inputComponent = `\\`datepicker\\``;\n\n    const datepickerStartsFrom = _.get(step, 'data.stepVariable.answerComponent.vBind.startDay', '0');\n    const datepickerFormat = _.get(step, 'data.stepVariable.answerComponent.vBind.outFormat', 'MM-DD-YYYY');\n\n    step.data.datepickerStartsFrom = `\\`${datepickerStartsFrom}\\``;\n    step.data.datepickerFormat = `\\`${datepickerFormat}\\``;\n\n\n    step.data.datepickerBlockDates = false;\n    step.data.datepickerSuggestedDates = false;\n    step.data.datepickerBlockedOptions = [];\n    step.data.datepickerSuggestedOptions = [];\n}",
            "version": "4.2.88"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-dropdown`) {\n    step.data.inputComponent = `\\`dropdown\\``;\n\n    const options = _.get(step, 'data.stepVariable.answerComponent.vBind.options', []);\n    const dropdownPlaceholder = _.get(step, 'data.stepVariable.answerComponent.vBind.dropdownPlaceholder', '``');\n\n    step.data.dropdownOptions = options;\n    step.data.dropdownPlaceholder = dropdownPlaceholder;\n}",
            "version": "4.2.89"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-menu`) {\n    step.data.inputComponent = `\\`menu\\``;\n\n    const options = _.get(step, 'data.stepVariable.answerComponent.vBind.options', []);\n\n    step.data.optionListOptions = options;\n}",
            "version": "4.2.90"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-timepicker`) {\n    step.data.inputComponent = `\\`timepicker\\``;\n\n    const timeFormat = _.get(step, 'data.stepVariable.answerComponent.vBind.timeFormat', '12');\n\n    step.data.timepickerFormat = `\\`${timeFormat}\\``;\n}",
            "version": "4.2.91"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-buttons-list`) {\n    step.data.inputComponent = `\\`buttons\\``;\n\n    const optionsButtons = _.get(step, 'data.stepVariable.answerComponent.vBind.options') || [];\n\n    step.data.optionsButtons = _.map(optionsButtons, button => ({ ...button, buttonStyle: \"default\" }));\n}",
            "version": "4.2.92"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-radio-group`) {\n    step.data.inputComponent = `\\`radio\\``;\n\n    const radioOptions = _.get(step, 'data.stepVariable.answerComponent.vBind.options') || [];\n    const defaultValue = _.get(step, 'data.stepVariable.answerComponent.vBind.defaultValue') || '`No option`';\n\n    step.data.radioOptions = radioOptions;\n    step.data.radioDefault = defaultValue;\n}",
            "version": "4.2.93"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `or-textbox`) {\n    step.data.inputComponent = `\\`textFiles\\``;\n\n    const medias = _.get(step, 'data.stepVariable.medias') || [];\n    const messageText = _.get(step, 'data.stepVariable.messageText') || '``';\n    const placeholder = _.get(step, 'data.stepVariable.answerComponent.vBind.placeholder') || '``';\n\n    step.data.radiotextMessageOptions = messageText;\n    step.data.medias = medias;\n    step.data.textPlaceholder = placeholder;\n\n    step.data.textInputAllowMask = false;\n}",
            "version": "4.2.94"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-attachment`) {\n    step.data.inputComponent = `\\`attachments\\``;\n\n    const attachmentsNumber = _.get(step, 'data.stepVariable.answerComponent.vBind.isMulti') || \"0\";\n    const attachmentsAllowChosen = _.get(step, 'data.stepVariable.answerComponent.vBind.filesValidation') || false;\n    const attachmentsAllowedTypes = _.get(step, 'data.stepVariable.answerComponent.vBind.allowedFileTypes') || [];\n\n    step.data.attachmentsNumber = `\\`${attachmentsNumber}\\``;\n    step.data.attachmentsAllowChosen = attachmentsAllowChosen;\n    step.data.attachmentsAllowedTypes = attachmentsAllowedTypes;\n\n    step.data.isPrivateFiles = false;\n}",
            "version": "4.2.95"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-location`) {\n    step.data.inputComponent = `\\`geolocation\\``;\n\n    const geolocationBtn = _.get(step, 'data.stepVariable.answerComponent.vBind.buttonLabel') || '``';;\n\n    step.data.geolocationBtn = geolocationBtn;\n\n    step.data.geolocationSetDefault = false;\n    step.data.geolocationLat = '``';\n    step.data.geolocationLng = '``';\n}",
            "version": "4.2.96"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-slider`) {\n    step.data.inputComponent = `\\`slider\\``;\n\n    const sliderMin = _.get(step, 'data.stepVariable.answerComponent.vBind.min') || '``';\n    const sliderMax = _.get(step, 'data.stepVariable.answerComponent.vBind.max') || '``';\n    const sliderStep = _.get(step, 'data.stepVariable.answerComponent.vBind.step') || '``';\n    const sliderUnit = _.get(step, 'data.stepVariable.answerComponent.vBind.unit') || '``';\n    const sliderUnitPosition = _.get(step, 'data.stepVariable.answerComponent.vBind.unitPosition') || 'end';\n\n    step.data.sliderMin = sliderMin;\n    step.data.sliderMax = sliderMax;\n    step.data.sliderStep = sliderStep;\n    step.data.sliderUnit = sliderUnit;\n    step.data.sliderUnitPosition = `\\`${sliderUnitPosition}\\``;\n\n    step.data.sliderType = 'single';\n    step.data.sliderDefaultValue = '``';\n    step.data.sliderUseCustomLabels = false;\n\n    step.data.sliderDefaultStart = '``';\n    step.data.sliderDefaultEnd = '``';\n\n    step.data.sliderCustomLabels = [{ label: '``', value: '``' }, { label: '``', value: '``' }];\n}",
            "version": "4.2.97"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nconst autoSuggestion = _.get(step, 'data.autoSuggestion') || [];\nconst options = _.get(step, 'data.autoSuggestion.options') || [];\n\nstep.data.autoSuggestion = _.omit(autoSuggestion, ['options']);\n\nif(_.size(options)) {\n  step.data.autoSuggestionType = '`list`';\n  step.data.autoSuggestionOptionsList = options;\n} else {\n  step.data.autoSuggestionType = '`emty`';\n  step.data.autoSuggestionOptionsList = [];\n}\n\nstep.data.autoSuggestionOptionsMergeField = `await this.mergeFields[''].get()`\n",
            "version": "4.2.98"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-card`) {\n    step.data.inputComponent = `\\`carousel\\``;\n\n    const image = _.get(step, 'data.stepVariable.answerComponent.vBind.image[0]') || {};\n    const description = _.get(step, 'data.stepVariable.answerComponent.vBind.description') || '``';\n    const buttonLabel = _.get(step, 'data.stepVariable.answerComponent.vBind.button') || '``';\n    const value = _.get(step, 'data.stepVariable.answerComponent.vBind.sendValue') || '``';\n\n    step.data.carouselOptions = [{\n      image,\n      video: {},\n      title: \"``\",\n      description,\n      buttonLabel,\n      value,\n      hasModal: false,\n      modalType: \"default-modal\",\n      childWindowType: \"html\",\n      additionalContentLink: {},\n      buttonStyle: \"default\",\n      html: \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\n      showModalButtonInUserResponse: true,\n    }];\n}",
            "version": "4.2.99"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.stepVariable)) return;\n\nif(step.data.stepVariable.answerComponent.component === `rwc-carousel`) {\n    step.data.inputComponent = `\\`carousel\\``;\n\n\n    const prevCarouselOptions = _.get(step, 'data.stepVariable.answerComponent.vBind.options') || [];\n\n    step.data.carouselOptions = _.map(prevCarouselOptions, option => {\n      const image = _.get(option, 'image[0]') || {};\n      const title = _.get(option, 'label') || '``';\n      const description = _.get(option, 'description') || '``';\n      const buttonLabel = _.get(option, 'button') || '``';\n      const value = _.get(option, 'value') || '``';\n\n      return {\n        image,\n        video: {},\n        title,\n        description,\n        buttonLabel,\n        value,\n        hasModal: false,\n        modalType: \"default-modal\",\n        childWindowType: \"html\",\n        additionalContentLink: {},\n        buttonStyle: \"default\",\n        html: \"<div class=\\\"additonal-info-wrapper\\\">\\n    <h2>Neil deGrasse Tyson Ipsum</h2>\\n    <p class=\\\"paragraph\\\">\\n        Short description about content or a <a href=\\\"#\\\">link</a>\\n    </p>\\n    <div class=\\\"picture\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"label\\\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \\n    </p>\\n    <p class=\\\"paragraph\\\">\\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\\n    </p>\\n    <div class=\\\"product-info\\\">\\n        <div class=\\\"image\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"40px\\\" height=\\\"40px\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\\\"/></svg>\\n            <!-- <img src=\\\"your image url\\\"> -->\\n        </div>\\n        <div class=\\\"info\\\">\\n            <h4>Heading</h4>\\n            <p class=\\\"paragraph\\\">\\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \\n            </p>\\n            <a href=\\\"#\\\"></a><button class=\\\"info-button\\\">Button</button></a>\\n        </div>\\n    </div>\\n    <h2>Heading</h2>\\n    <p class=\\\"paragraph\\\">\\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\\n    </p>\\n    <div class=\\\"info-footer\\\">\\n        <a href=\\\"https://google.com\\\"><button class=\\\"info-button outlined\\\">Button 1</button></a>\\n        <a href=\\\"#\\\"><button class=\\\"info-button\\\">Button 2</button></a>\\n    </div>\\n</div>\\n<style>\\n    .additonal-info-wrapper a {\\n        text-decoration: none;\\n        font-weight: bold;\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .picture {\\n        margin: 2rem 0;\\n    }\\n    .additonal-info-wrapper .picture .image {\\n        width: 100%;\\n        height: 280px;\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .picture .image svg,\\n    .additonal-info-wrapper .product-info .image {\\n        fill: var(--textColor);\\n    }\\n    .additonal-info-wrapper .picture .label {\\n        margin-top: 10px;\\n        color: rgb(145, 150, 157);\\n        font-size: 12px;\\n        font-weight: normal;\\n        letter-spacing: 0px;\\n        line-height: 18px;\\n    }\\n    .additonal-info-wrapper .paragraph {\\n        color: var(--textColor);\\n        font-size: 14px;\\n        font-weight: normal;\\n        line-height: 21px;\\n    }\\n    .additonal-info-wrapper .info-footer {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n        padding-top: 1rem;\\n    }\\n    .additonal-info-wrapper .info-footer a {\\n        margin-right: 1rem;\\n        display: block;\\n    }\\n    .additonal-info-wrapper .info-footer a:last-child {\\n        margin-right: 0;\\n    }\\n    .additonal-info-wrapper .info-button {\\n        background: rgb(23, 138, 231);\\n        border-radius: 4px;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(255, 255, 255);\\n        font-size: 14px;\\n        font-weight: 600;\\n        text-align: center;\\n        padding: .5rem 1rem;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n    .additonal-info-wrapper .info-button.outlined {\\n        background: none;\\n        border: 1px solid rgb(23, 138, 231);\\n        color: rgb(23, 138, 231);\\n    }\\n    .additonal-info-wrapper .product-info {\\n        display: flex;\\n        align-items: center;\\n        background: var(--bodyBackground);\\n        align-items: center;\\n        margin: 2rem 0;\\n        width: 100%;\\n    }\\n    .additonal-info-wrapper .product-info .image {\\n        background: var(--bodyBackground);\\n        color: var(--textColor);\\n        width: 40%;\\n        height: 210px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        overflow: hidden;\\n        object-fit: cover;\\n    }\\n    .additonal-info-wrapper .product-info .info {\\n        width: 60%;\\n        padding: 0 1rem;\\n        color: var(--textColor);\\n    }\\n    .additonal-info-wrapper .product-info .info h4 {\\n        color: var(--textColor);\\n    }\\n    .rwc-embed .additonal-info-wrapper .paragraph {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .picture .label {\\n        font-size: 14px\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer {\\n        justify-content: space-between;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-button {\\n        font-size: 16px;\\n        width: 100%;\\n        padding: 1rem;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .image {\\n        width: 100%;\\n        height: 220px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info {\\n        box-sizing: border-box;\\n        width: 100%;\\n        padding: 16px;\\n        width: auto;\\n    }\\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\\n        font-size: 16px;\\n    }\\n    .rwc-embed .additonal-info-wrapper .info-footer a {\\n        width: 100%;\\n    }\\n    @media only screen and (max-width: 768px) {\\n        .additonal-info-wrapper .paragraph {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .picture .label {\\n            font-size: 14px\\n        }\\n        .additonal-info-wrapper .info-footer {\\n            justify-content: space-between;\\n        }\\n        .additonal-info-wrapper .info-button {\\n            font-size: 16px;\\n            width: 100%;\\n            padding: 1rem;\\n        }\\n        .additonal-info-wrapper .product-info {\\n            display: flex;\\n            flex-direction: column;\\n        }\\n        .additonal-info-wrapper .product-info .image {\\n            width: 100%;\\n            height: 220px;\\n        }\\n        .additonal-info-wrapper .product-info .info {\\n            width: 100%;\\n            padding: 16px;\\n            width: auto;\\n        }\\n        .additonal-info-wrapper .product-info .info h4 {\\n            font-size: 16px;\\n        }\\n        .additonal-info-wrapper .info-footer a {\\n            width: 100%;\\n        }\\n    }\\n</style>\",\n        showModalButtonInUserResponse: true,\n      };\n    });\n\n    const carouselHasAlternative = _.get(step, 'data.stepVariable.answerComponent.vBind.hasOtherOption') || false;\n    const carouselAlternative = _.get(step, 'data.stepVariable.answerComponent.vBind.otherOptionData') || {};\n\n    step.data.carouselMultiselect = false;\n    step.data.carouselHasAlternative = carouselHasAlternative;\n\n    step.data.carouselAlternative = {\n      description: _.get(carouselAlternative, 'text') || '``',\n      buttonLabel: _.get(carouselAlternative, 'button') || '``',\n      buttonStyle: 'default',\n      value: _.get(carouselAlternative, 'value') || '``'\n    }\n\n}",
            "version": "4.2.100"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['rwcContext'])) step.data['rwcContext'] = {\"contextKey\":\"__rwc_context\",\"store\":\"this.get('__rwc_context', await this.getShared('__rwc_context'))\",\"output\":{\"selectStyle\":\"inherited\"}};\n",
            "version": "4.3.0"
          },
          {
            "sample": null,
            "script": "step.data.carouselSubmitBtnLabel = '`Submit`';\nstep.data.carouselCancelBtnLabel = '`No, thanks`';",
            "version": "4.3.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['additionalContentCardChangeType'])) step.data['additionalContentCardChangeType'] = \"`append`\";\nif(_.isUndefined(step.data['additionalContentVideo'])) step.data['additionalContentVideo'] = [];\nif(_.isUndefined(step.data['additionalHtml'])) step.data['additionalHtml'] = \"\";\nif(_.isUndefined(step.data['additionalCss'])) step.data['additionalCss'] = \"\";\nif(_.isUndefined(step.data['additionalScript'])) step.data['additionalScript'] = \"\";\nif(_.isUndefined(step.data['additionalCardvariables'])) step.data['additionalCardvariables'] = [];\n",
            "version": "4.4.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['textInputType'])) step.data['textInputType'] = \"text\";\n",
            "version": "4.4.11"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['textInputCustomPattern'])) step.data['textInputCustomPattern'] = \"``\";\n",
            "version": "4.4.12"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data.creditCancelBtnLabel)) step.data.creditCancelBtnLabel = \"``\";",
            "version": "4.4.13"
          },
          {
            "sample": null,
            "script": "if (_.isUndefined(step.data.hasCancelExit)) step.data.hasCancelExit = false",
            "version": "4.4.16"
          },
          {
            "sample": null,
            "script": "const customTemplateVueHtmlTemplate = _.get(step.data, 'customTemplateVueHtmlTemplate');\n\nstep.data.customTemplateVueHtmlTemplate = '';\n\nconst customComponent = _.get(step.data, 'customComponent');\n\nif(customComponent) step.data.customTemplateVueScript = customComponent\n\ndelete step.data.customComponent;",
            "version": "4.4.18"
          },
          {
            "script": "",
            "version": "4.4.27"
          }
        ],
        "modules": [
          {
            "name": "axios",
            "version": ""
          },
          {
            "name": "bluebird",
            "version": ""
          },
          {
            "name": "timestring",
            "version": ""
          },
          {
            "name": "uuid",
            "version": ""
          }
        ],
        "dateCreated": 1571248485762,
        "dateModified": 1662127183472,
        "hooks": {}
      },
      {
        "id": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
        "version": "1.0.2",
        "cacheVersion": "30bf2826-8a33-4a64-92fc-a34bb755abaf",
        "label": "Create Log Entry",
        "icon": "log",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "This step allows to add info, warning or error messages to the logs.",
        "isGatewayStep": false,
        "publishedBy": "OneReach",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "const message = logMessage || '';\nconst data = logData || ``;\n\nif(message || data) {\n  if(data){\n    this.log[logType.value](message, data);\n  } else {\n    this.log[logType.value](message);\n  }\n}\n\nreturn this.exitStep('next');\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next"
            }
          ],
          "logData": "{}",
          "logType": {
            "label": "Info (plain)",
            "value": "info"
          },
          "logMessage": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "This step allows to add info, warning or error messages to the logs, which can be helpful in debugging and troubleshooting.\n\nSpecific type of message can be chosen from drop down menu.\n\nMessage and Data fields are optional and can be filled in with any text, including information collected via the merge fields.\nAt least one of the optional fields should be specified in order to create a new log message.\n\n**Reporting Events**\nDefault reporting events for the step is Step. Once step executed, each event collects specific data, which can be used in reports. Flow composer is able to specify tags for each event. Tag acts as a marker for the event it’s specified for. Those markers allow to build more extended reports.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "47d0d7d2-be10-4a6e-a1a5-243369c78c9b",
              "data": {
                "id": "next",
                "label": "next"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "cfe8b394-da37-4306-9a6e-8166779fdae0",
              "data": {
                "data": "{\n  \"logType\": {\"value\": \"info\", \"label\": \"Info (plain)\" }\n}",
                "toJson": "//function that describe how to serialize wildcard data\n function toJson(data) {\n if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<or-wildcard-oiuvmhsxnpzwarbt    :readonly=\"readonly\"   :steps=\"steps\"   v-model=\"schema.logType\"   :step-id=\"stepId\"   :v=\"$v\" ></or-wildcard-oiuvmhsxnpzwarbt>",
                "componentName": "or-wildcard-oiuvmhsxnpzwarbt",
                "componentLogic": "{\n  data() {\n    return {\n      logTypeList: [\n        {\"value\": \"info\", \"label\": \"Info (plain)\", \"class\": \"info\"},\n        {\"value\": \"warn\", \"label\": \"Warning\", \"class\": \"warn\"},\n        {\"value\": \"error\", \"label\": \"Error\", \"class\": \"error\"}\n      ],\n      logType: this.value\n    }\n  },\n\n watch: {\n   logType (newValue) {\n     this.$emit('input', newValue);\n   }\n },\n\n  components : {\n    'logsList' : Vue.component('ui-select').extend({\n      render : Vue.compile(`<div class=\"ui-select\" :class=\"classes\">\n              <input\n                  class=\"ui-select__hidden-input\"\n                  type=\"hidden\"\n\n                  :name=\"name\"\n                  :value=\"submittedValue\"\n\n                  v-if=\"name\"\n              >\n\n              <div class=\"ui-select__icon-wrapper\" v-if=\"icon || $slots.icon\">\n                  <slot name=\"icon\">\n                      <ui-icon :icon=\"icon\"></ui-icon>\n                  </slot>\n              </div>\n\n              <div class=\"ui-select__content\">\n                  <div\n                      class=\"ui-select__label\"\n                      ref=\"label\"\n\n                      :tabindex=\"disabled ? null : '0'\"\n\n                      @click=\"toggleDropdown\"\n                      @focus=\"onFocus\"\n                      @keydown.enter.prevent=\"openDropdown\"\n                      @keydown.space.prevent=\"openDropdown\"\n                      @keydown.tab=\"onBlur\"\n                  >\n                      <div\n                          class=\"ui-select__label-text\"\n                          :class=\"labelClasses\"\n                          v-if=\"label || $slots.default\"\n                      >\n                          <slot>{{ label }}</slot>\n                      </div>\n\n                      <div class=\"ui-select__display\">\n                          <div\n                              class=\"ui-select__display-value\"\n                              :class=\"{ 'is-placeholder': !hasDisplayText }\"\n                          >\n                              {{ hasDisplayText ? displayText : (hasFloatingLabel && isLabelInline) ? null : placeholder }}\n                          </div>\n\n                          <ui-icon class=\"ui-select__dropdown-button\">\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6.984 9.984h10.03L12 15z\"/></svg>\n                          </ui-icon>\n                      </div>\n\n                      <transition name=\"ui-select--transition-fade\">\n                          <div\n                              class=\"ui-select__dropdown\"\n                              ref=\"dropdown\"\n                              tabindex=\"-1\"\n\n                              @keydown.down.prevent=\"highlightOption(highlightedIndex + 1)\"\n                              @keydown.enter.prevent.stop=\"selectHighlighted(highlightedIndex, $event)\"\n                              @keydown.esc.prevent=\"closeDropdown()\"\n                              @keydown.tab=\"onBlur\"\n                              @keydown.up.prevent=\"highlightOption(highlightedIndex - 1)\"\n\n                              v-show=\"showDropdown\"\n                          >\n                              <div\n                                  class=\"ui-select__search\"\n\n                                  @click.stop\n                                  @keydown.space.stop\n\n                                  v-show=\"hasSearch && options.length\"\n                              >\n                                  <input\n                                      autocomplete=\"off\"\n                                      class=\"ui-select__search-input\"\n                                      ref=\"searchInput\"\n                                      type=\"text\"\n\n                                      :placeholder=\"searchPlaceholder\"\n\n                                      v-model=\"query\"\n                                  >\n\n                                  <ui-icon class=\"ui-select__search-icon\">\n                                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                                          <path d=\"M9.516 14.016c2.484 0 4.5-2.016 4.5-4.5s-2.016-4.5-4.5-4.5-4.5 2.016-4.5 4.5 2.016 4.5 4.5 4.5zm6 0l4.97 4.97-1.5 1.5-4.97-4.97v-.797l-.28-.282c-1.126.984-2.626 1.547-4.22 1.547-3.61 0-6.516-2.86-6.516-6.47S5.906 3 9.516 3s6.47 2.906 6.47 6.516c0 1.594-.564 3.094-1.548 4.22l.28.28h.798z\"/>\n                                      </svg>\n                                  </ui-icon>\n                                  <ui-icon slot=\"icon\" v-if=\"query\" class=\"clearSearch\" icon=\"clear\" @click.native=\"clearSearch\"></ui-icon>\n                                  <ui-progress-circular\n                                      class=\"ui-select__search-progress\"\n                                      :size=\"20\"\n                                      :stroke=\"4\"\n                                      v-show=\"loading\"\n                                  ></ui-progress-circular>\n                              </div>\n\n                              <ul class=\"ui-select__options\" ref=\"optionsList\">\n\n                                    <ui-select-option\n                                      ref=\"options\"\n                                      :highlighted=\"highlightedIndex === index\"\n                                      :keys=\"keys\"\n                                      :multiple=\"multiple\"\n                                      :option=\"option ? option.label : option\"\n                                      :selected=\"isOptionSelected(option)\"\n                                      :type=\"type\"\n                                      :title=\"option.label\"\n                                      :class=\"'selected-logtype__' + option.class\"\n                                      @click.native.stop=\"selectOption(option, index)\"\n                                      @mouseover.native.stop=\"highlightOption(index, { autoScroll: false })\"\n                                      v-for=\"(option, index) in filteredOptions\"\n                                    >\n                                      <slot\n                                          name=\"option\"\n                                          :title=\"option.label ? option.label : option\"\n                                          :highlighted=\"highlightedIndex === index\"\n                                          :index=\"index\"\n                                          :option=\"option\"\n                                          :selected=\"isOptionSelected(option)\"\n                                      >\n                                      </slot>\n                                  </ui-select-option>\n\n                                  <div class=\"ui-select__no-results\" v-show=\"hasNoResults\">\n                                      <slot name=\"no-results\">No results found</slot>\n                                  </div>\n                              </ul>\n                          </div>\n                      </transition>\n                  </div>\n\n                  <div class=\"ui-select__feedback\" v-if=\"hasFeedback\">\n                      <div class=\"ui-select__feedback-text\" v-if=\"showError\">\n                          <slot name=\"error\">{{ error }}</slot>\n                      </div>\n\n                      <div class=\"ui-select__feedback-text\" v-else-if=\"showHelp\">\n                          <slot name=\"help\">{{ help }}</slot>\n                      </div>\n                  </div>\n              </div>\n      </div>`).render\n    })\n  },\n\n  props : {\n    value: {\n      type: Object,\n      default () {\n        return {};\n      }\n    },\n    steps: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    stepId: {\n      type: String,\n      default: ''\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  }\n}",
                "componentTemplate": "<logs-list\n  ref=\"select\"\n  class=\"logtype-select\"\n  label=\"Type\"\n  name=\"Log type input\"\n  placeholder=\"Log type\"\n  v-model=\"logType\"\n  :options=\"logTypeList\"\n  :disabled=\"readonly\"\n>\n</logs-list>",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".logtype-select {\n  .ui-select-option {\n    &__basic {\n      position: relative;\n      padding-left: 10px;\n      overflow: visible;\n\n      &:before {\n        content: '';\n        position: absolute;\n        height: .5rem;\n        width: .5rem;\n        border-radius: 10px;\n        left: -5px;\n        top: 50%;\n        transform: translateY(-50%);\n      }\n    }\n\n    &.selected-logtype {\n      &__info .ui-select-option__basic:before{\n        background-color: #00ff00;\n      }\n    }\n\n    &.selected-logtype {\n      &__warn .ui-select-option__basic:before{\n        background-color: #ffff00;\n      }\n    }\n\n    &.selected-logtype {\n      &__error .ui-select-option__basic:before{\n        background-color: #ff0000;\n      }\n    }\n  }\n}"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "a2f714e5-85fc-4a79-a26d-73b2ad4fd363",
              "data": {
                "label": "Message",
                "helpText": "",
                "variable": "logMessage",
                "multiline": false,
                "placeholder": "Text",
                "defaultValue": "``",
                "renderCondition": "",
                "trimWhitespaces": false,
                "validateRequired": false
              },
              "label": "Text box",
              "compiled": {},
              "component": "formTextBox"
            },
            {
              "id": "f8b56318-6b01-44b1-b7b7-cd4951c51c2b",
              "data": {
                "mode": "javascript",
                "jsEnv": "ecma6",
                "label": "Data",
                "helpText": "",
                "variable": "logData",
                "warnings": false,
                "autocomplete": true,
                "defaultValue": "{}",
                "validateCode": false,
                "renderCondition": "",
                "validateRequired": false,
                "disabledCondition": "",
                "validateExpression": true,
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "label": "Code",
              "compiled": {},
              "component": "formCode"
            }
          ],
          "outputExample": null,
          "hasProcessError": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "logData": "",
                "logType": {
                  "label": "Info (plain)",
                  "value": "`info`"
                },
                "logMessage": "``"
              },
              "rawMode": false,
              "version": "4dfd2970-d58f-4de1-b0c2-59d15985f216",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "47d0d7d2-be10-4a6e-a1a5-243369c78c9b",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.2"
          }
        ],
        "dateModified": 1585252658721
      },
      {
        "id": "0796f3ac-2d14-4dda-8570-2f11760c6dd7",
        "version": "1.0.1",
        "cacheVersion": "1d6d6483-b1da-414a-93f9-fbfd9d62a6f0",
        "label": "Validate Email Address Format",
        "icon": "send_email",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-down",
        "description": "Checks whether an input has the form of a valid email address. ",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Email",
          "Validation"
        ],
        "recommended": [],
        "tags": [],
        "template": "const validator = require(\"email-validator\");\nconst isValid = validator.validate(inEmail);\nconst invalidExitLeg = processInvalid;\n\nif(!isValid) {\n  return invalidExitLeg ? this.exitStep('invalid', isValid) : this.exitStep('next', isValid);\n}\n\nreturn this.exitStep('next', isValid)\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "name": "",
            "type": "session"
          },
          "inEmail": "``",
          "processError": true,
          "processInvalid": false,
          "dynamicExitsArrayStart": 1
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "This step validates received text as email address, but does not check the validity of the address' TLD (.com, .io, etc.).\n\n**Required fields**\n- Email address (can be set via merge field defined in other step)\n- Merge field\n\n**Step exits**\n- next - static\n- invalid - dynamic (can be added by switching ON ‘Process invalid’ toggle)\n\n**Validation result**\nPossible validation result processing can be set via 'Process invalid' toggle.\n\n‘Process invalid’ toggle switched OFF\n- validation passed - validEmailFormat is set to TRUE\n- validation failed - validEmailFormat is set to FALSE\n\n‘Process invalid’ toggle switched ON - NEXT and INVALID step exits are shown.\n- validation passed - flow proceeds to NEXT exit and validEmailFormat is set to TRUE\n- validation failed - flow proceeds to INVALID exit and validEmailFormat is set to FALSE\n",
        "formBuilder": {
          "stepExits": [
            {
              "id": "a7b5a828-1645-413c-be4e-3d64ddc26b52",
              "data": {
                "id": "next",
                "label": "next"
              },
              "component": "exitStatic"
            },
            {
              "id": "933ee3a3-bb71-4181-b7b6-1abfd0ebb5f6",
              "data": {
                "index": 1
              },
              "component": "exitDynamic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "64a1a6a0-2ad8-46d4-95f9-bcb4658eb0ec",
              "data": {
                "header": "Email",
                "headingType": "h4",
                "isHtmlLabel": false
              },
              "label": "Header",
              "compiled": {},
              "component": "formHeader"
            },
            {
              "id": "93f6ae66-817f-48f1-8fa8-84d10187b16e",
              "data": {
                "label": "Email address",
                "helpText": "",
                "variable": "inEmail",
                "multiline": false,
                "placeholder": "",
                "defaultValue": "``",
                "renderCondition": "",
                "trimWhitespaces": false,
                "validateRequired": true
              },
              "label": "Text box",
              "compiled": {},
              "component": "formTextBox"
            },
            {
              "id": "9d1ee3cd-aacf-4478-a1e6-f76335c683d2",
              "data": {
                "header": "Validation result",
                "headingType": "h4",
                "isHtmlLabel": false
              },
              "label": "Header",
              "compiled": {},
              "component": "formHeader"
            },
            {
              "id": "3b610f0a-81ee-4eac-9b76-e2a0dac9db7a",
              "data": {
                "data": "{\"processInvalid\": false }",
                "toJson": "//function that describe how to serialize wildcard data\n function toJson(data) {\n if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                "validators": "",
                "applyToJson": false,
                "formTemplate": "<or-wildcard-hjqexsufyovlabmz   v-model=\"schema.processInvalid\"   :exits.sync=\"schema.exits\"   :readonly=\"readonly\"   :stepId=\"stepId\"   :steps=\"steps\" ></or-wildcard-hjqexsufyovlabmz>",
                "componentName": "or-wildcard-hjqexsufyovlabmz",
                "componentLogic": "{\n  props: {\n    value: {},\n    stepId: '',\n    steps: {},\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    exits: {\n      type: Array,\n      default () {\n        return []\n      }\n    }\n  },\n\n  computed: {\n    processInvalid: {\n      get () {\n        return this.value;\n      },\n      set (newValue) {\n        this.$emit('input', newValue);\n        this.switchExit(newValue);\n      }\n    }\n  },\n\n  methods: {\n    switchExit(value) {\n      const invalidLegIndex = _.findIndex(this.exits, item => item.id === 'invalid');\n\n      if(!_.isEmpty(this.exits)) {\n        if(value && invalidLegIndex === -1) {\n          const newExit = {\n            id: 'invalid',\n            label: 'invalid',\n            dynamic: true,\n            stepId: ''\n          };\n          this.exits.push(newExit);\n        } else if (!value && invalidLegIndex > -1) {\n          this.exits.splice(invalidLegIndex, 1);\n        }\n        this.$emit('update:exits', this.exits);\n      };\n    }\n  }\n}",
                "componentTemplate": "<div>\n  <or-switch\n    name=\"Switch to invalid exit\"\n    label=\"Process invalid\"\n    :disabled=\"readonly\"\n    v-model=\"processInvalid\"\n  ></or-switch>\n</div>",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".ui-switch {\n  margin-top: 10px;\n}"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "ff8e8ddb-86c0-4994-ad6e-11632dbff171",
              "data": {
                "label": "Merge field name",
                "helpText": "Specify the name of the merge field where the stepâ€™s result will be stored and can be reused later in the flow.",
                "defaultTTL": 86400000,
                "defaultName": "validEmailFormat",
                "defaultType": "session",
                "placeholder": "Merge field name",
                "defaultValue": "",
                "renderCondition": "",
                "validateRequired": true
              },
              "label": "Merge field",
              "compiled": {},
              "component": "formDataOut"
            }
          ],
          "outputExample": "",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "dataOut": "validEmailFormat",
                "inEmail": "``",
                "processError": false,
                "processInvalid": false
              },
              "rawMode": false,
              "version": "474e23c1-e106-4bed-9bf0-9faf2ddb9c08",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "a7b5a828-1645-413c-be4e-3d64ddc26b52",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "933ee3a3-bb71-4181-b7b6-1abfd0ebb5f6",
                    "data": {
                      "index": 1
                    },
                    "component": "exitDynamic"
                  }
                ],
                "hasProcessError": true
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": null,
            "version": "1.0.0"
          }
        ],
        "dateModified": 1586527213690
      },
      {
        "id": "15d38611-733d-4b8b-bb19-9d50e2cef160",
        "version": "0.5.29",
        "cacheVersion": "62cf5b89-b0ab-4c79-963b-719fb6b7168f",
        "originalSource": "5a883f28-33ea-4abd-a993-2463157c3317",
        "label": "Convert HTML into PDF or Image Copy",
        "icon": "convert_html_to_pdf",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "[alpha] Step allows to create PDF or Image based on data at the provided URL or based on HTML code.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Pre-release",
          "HTML",
          "PDF"
        ],
        "recommended": [],
        "tags": [],
        "template": "const Request   = require('or-sdk/request');\nconst request   = new Request(this);\nconst timestring = require('timestring');\n\nconst fileSettings = {\n  assetsUrl : assetsUrl, \n  fileName :  newName.slice(0, 99),\n  filePath : `/${filePath}`\n}\n\nconst fileSource = fileSourceType === 'url' ? urlSource : htmlSource;\n\nif (!fileSource) {\n  throw new Error('The source is not defined');\n}\n\nif (!fileSettings.fileName.replace(/\\s/g, '').length) {\n    throw new Error('File name can\\'t be empty');\n}\n\nif (!filePath.replace(/\\s/g, '').length) {\n    throw new Error('Folder name can\\'t be empty');\n}\n\nconst fileNameRegex = /^([\\w- '!_.*()]+){0,}$/;\nif (!fileNameRegex.test(fileSettings.fileName)) {\n    this.log.warn('File name will be changed according to naming standarts')\n}\n\n// Setting maximum navigation timeout\nlet defaultNavigationTimeout = 5 * 1000; // default value 5s\ntry {\n  defaultNavigationTimeout = timestring(_.isNumber(maxNavigationTimeout) ? `${maxNavigationTimeout} ms` : maxNavigationTimeout, 'ms');\n} catch (error) {\n    throw new Error(`Failed to parse timeout value \"${maxNavigationTimeout}\".`);\n}\n\nif (defaultNavigationTimeout === 0) {\n  throw new Error(`Failed to parse timeout value \"${defaultNavigationTimeout}\".`);\n}\n\nif (defaultNavigationTimeout < 1000 || defaultNavigationTimeout > 30000) {\n  throw new Error(`Timeout value must be in range from 1 second to 30 seconds.`);\n}\n\n// Setting webpage load waiting time\ntry {\n  loadWaitingTime = timestring(_.isNumber(loadWaitingTime) ? `${loadWaitingTime} ms` : loadWaitingTime, 'ms');\n} catch (error) {\n    throw new Error(`Failed to parse webpage load waiting time value \"${loadWaitingTime}\".`);\n}\n\nif (loadWaitingTime === 0) {\n  throw new Error(`Failed to parse webpage load waiting time value \"${loadWaitingTime}\".`);\n}\n\nif (loadWaitingTime < 1000 || loadWaitingTime > 20000) {\n  throw new Error(`Webpage load waiting time value must be in range from 1 second to 20 seconds.`);\n}\n\nlet body = {\n  src: fileSource,\n  //acl: makeFilePrivate ? \"private\" : \"public-read\",\n  // returnBuffer: false,\n  browser: {\n    javaScriptEnabled: true,\n    loadWaitingTime,\n    defaultNavigationTimeout\n  }\n}\n\nif (fileType === 'pdf') {\n  body.pdf = {\n    marginTop    : topMargin ? parseFloat(topMargin) : 0,\n    marginBottom : bottomMargin ? parseFloat(bottomMargin) : 0,\n    marginLeft   : leftMargin ? parseFloat(leftMargin) : 0,\n    marginRight  : rightMargin ? parseFloat(rightMargin) : 0\n  };\n  \n  let verticalMarginSize = body.pdf.marginTop + body.pdf.marginBottom;\n  let horizontalMarginSize = body.pdf.marginLeft + body.pdf.marginRight;\n  \n//   let verticalMarginSize;\n//   let horizontalMarginSize;\n//   switch (marginUnits) {\n//     case 'in':\n//       verticalMarginSize = topMargin + bottomMargin;\n//       horizontalMarginSize = leftMargin + rightMargin;\n//       break;\n      \n//     case 'px':\n//       // 1 inch equals to 96 vertical pixels and to 72 horizontal pixels\n//       verticalMarginSize = topMargin/96 + bottomMargin/96;\n//       horizontalMarginSize = leftMargin/72 + rightMargin/72;\n//       break;\n    \n//     case 'cm':\n//       let inchesInCm = 0.393701;\n//       verticalMarginSize = topMargin*inchesInCm + bottomMargin*inchesInCm;\n//       horizontalMarginSize = leftMargin*inchesInCm + rightMargin*inchesInCm;\n//       break;\n      \n//     case 'mm':\n//       let inchesInMm = 0.0393701;\n//       verticalMarginSize = topMargin*inchesInMm + bottomMargin*inchesInMm;\n//       horizontalMarginSize = leftMargin*inchesInMm + rightMargin*inchesInMm;\n//       break;\n      \n//     default:\n//       break;\n//   }\n\n  if (pdfViewType === 'predefined') {\n    body.pdf.landscape = pdfPredefinedOrientation.toLowerCase() === 'landscape' ? true : false;\n    pdfPredefinedSize = pdfPredefinedSize.toLowerCase();\n    \n    const printFormats = {\n      letter: {\n        width: 8.5,\n        height: 11\n      },\n      legal: {\n        width: 8.5,\n        height: 14\n      },\n      tabloid: {\n        width: 11,\n        height: 17\n      },\n      ledger: {\n        width: 17,\n        height: 11\n      },\n      a0: {\n        width: 33.1,\n        height: 46.8\n      },\n      a1: {\n        width: 23.4,\n        height: 33.1\n      },\n      a2: {\n        width: 16.5,\n        height: 23.4\n      }, \n      a3: {\n        width: 11.7,\n        height: 16.5\n      },\n      a4: {\n        width: 8.27,\n        height: 11.7\n      },\n      a5: {\n        width: 5.83,\n        height: 8.27\n      },\n      a6: {\n        width: 4.13,\n        height: 5.83\n      }\n    }\n\n    if (!printFormats[pdfPredefinedSize]) throw new Error('Invalid pdf format');\n    if (verticalMarginSize >= printFormats[pdfPredefinedSize].height) throw new Error('Page height must be greater than the vertical margin');\n    if (horizontalMarginSize >= printFormats[pdfPredefinedSize].width) throw new Error('Page width must be greater than the horizontal margin');\n\n    body.pdf.paperHeight = printFormats[pdfPredefinedSize].height;\n    body.pdf.paperWidth = printFormats[pdfPredefinedSize].width;\n    \n  } else if (pdfViewType === 'custom') {\n    if (pdfCustomHeight <= 0) throw new Error('Height must be greater than 0');\n    if (pdfCustomWidth <= 0) throw new Error('Width must be greater than 0');\n    \n//     let heightInInches;\n//     let widthInInches;\n//     switch (pdfSizeUnits) {\n//       case 'in':\n//         heightInInches = pdfCustomHeight;\n//         widthInInches = pdfCustomWidth;\n//         break;\n        \n//       case 'px':\n//         // 1 inch equals to 96 vertical pixels and to 72 horizontal pixels\n//         heightInInches = pdfCustomHeight/96;\n//         widthInInches = pdfCustomWidth/72;\n//         break;\n      \n//       case 'cm':\n//         let inchesInCm = 0.393701;\n//         heightInInches = pdfCustomHeight*inchesInCm;\n//         widthInInches = pdfCustomWidth*inchesInCm;\n//         break;\n        \n//       case 'mm':\n//         let inchesInMm = 0.0393701;\n//         heightInInches = pdfCustomHeight*inchesInMm;\n//         widthInInches = pdfCustomWidth*inchesInMm;\n//         break;\n        \n//       default:\n//         break;\n//     }\n\n    if (verticalMarginSize > pdfCustomHeight) throw new Error('Vertical margin is greater than print page height');\n    if (horizontalMarginSize > pdfCustomWidth) throw new Error('Horizontal margin is greater than print page width');\n\n    body.pdf.paperWidth = pdfCustomWidth;\n    body.pdf.paperHeight = pdfCustomHeight;\n  }\n\n  body.pdf.printBackground = backgroundToPdf;\n  body.pdf.displayHeaderFooter = headerTemplate || footerTemplate ? true : false;\n  if (headerTemplate) body.pdf.headerTemplate = headerTemplate;\n  if (footerTemplate) body.pdf.footerTemplate = footerTemplate;\n//   body.browser.emulateMedia = websitePrintVersion ? \"print\" : \"screen\";\n  // body.pdf.margin = {\n  //   top    : topMargin + marginUnits,\n  //   bottom : bottomMargin + marginUnits,\n  //   left   : leftMargin + marginUnits,\n  //   right  : rightMargin + marginUnits\n  // };\n\n} else if (fileType === 'image') {\n//   body.screenshot = {\n//     fullPage: fullPageScreenShot\n//   };\n  body.screenshot = {};\n  body.browser.viewport = {\n    mobile: isMobileVersion\n  };\n  \n  body.browser.userAgent = isMobileVersion ? \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Mobile Safari/537.36\"\n                                            : \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n\n  if (imageSize === 'custom') {\n    body.resize = {\n      height: parseFloat(imageSizeCustomHeight),\n      width: parseFloat(imageSizeCustomWidth)\n    }\n  } else if (imageSize === 'clip') {\n    if (imageSizeClipHeight <= 0) throw new Error('Clip height must be greater than 0');\n    if (imageSizeClipWidth <= 0) throw new Error('Clip width must be greater than 0');\n    if (imageSizeClipHeight > 10000) throw new Error('Clip height can\\'t be greater than 10000');\n    if (imageSizeClipWidth > 10000) throw new Error('Clip width can\\'t be greater than 10000');\n    \n    body.screenshot.clip = {\n      x      : parseFloat(imageSizeClipXOffset),\n      y      : parseFloat(imageSizeClipYOffset),\n      width  : parseFloat(imageSizeClipWidth),\n      height : parseFloat(imageSizeClipHeight)\n    }\n  }\n\n  if (websiteResolution === 'screen') {\n    body.browser.viewport.width = 1366;\n    // body.browser.viewport.height = 768;\n  } else if (websiteResolution === 'tablet') {\n    body.browser.viewport.width = 768;\n    // body.browser.viewport.height = 1024;\n  } else if (websiteResolution === 'phone') {\n    body.browser.viewport.width = 375;\n    // body.browser.viewport.height = 667;\n  } else if (websiteResolution === 'custom') {\n    if (parseFloat(customResolutionWidth) < 0) throw new Error('Resolution width must be greater than 0');\n    if (parseFloat(customResolutionHeight) < 0) throw new Error('Resolution height width must be greater than 0');\n    if (parseFloat(customResolutionWidth) > 10000) throw new Error('Resolution width can\\'t be greater than 10000');\n    if (parseFloat(customResolutionHeight) > 10000) throw new Error('Resolution height can\\'t be greater than 10000');\n    body.browser.viewport.width = parseFloat(customResolutionWidth);\n    // body.browser.viewport.height = parseFloat(customResolutionHeight);\n  }\n\n  if (imageFileType !== 'png') body.screenshot.quality = parseFloat(imageQuality);\n//   body.screenshot.omitBackground = backgroundToImage;\n}\n\nconst fileExtension = fileType === 'pdf' ? fileType : imageFileType;\n// const converterUrl = `https://toolbox-staging.onereach.ai/convert/${fileSourceType}/${fileType}`;\n// // const converterUrl = `https://70e0772f.ngrok.io/convert/${fileSourceType}/${fileType}`\n// body.filename = `${fileSettings.filePath}${fileSettings.fileName}.${fileExtension}`.substr(1);\nbody.filename = `${fileSettings.fileName}.${fileExtension}`;\nbody.path = fileSettings.filePath;\n\n// const body = {\n//     \"src\": \"https://www.google.com\",\n//     \"filename\": \"converted.png\",\n//     \"browser\" : {\n//         \"javaScriptEnabled\": true,\n//         \"loadWaitingTime\": 1,\n//         \"viewport\": {\n//           \"screenOrientation\": {\n//             \"type\": \"portraitPrimary\",\n//             \"angle\": 45\n//           }\n//         }\n//     }\n// }\n// const converterUrl = `${this.helpers.toolboxUrl}/convert/url`\n\nconst sucessCallbackUrl = await request.post({\n  uri: `${this.helpers.toolboxUrl}/convert/${fileSourceType}`,\n  body,\n  headers: {\n    authorization: authToken\n  },\n  json: true,\n  resolveWithFullResponse: true\n}).then(response => {\n  return response.body.pollUrl;\n}, err => {\n  this.log.error('error', err);\n  throw new Error(err.error);\n});\n\nlet startExecution = new Date();\n\nconst pollingResult = (uri) => {\n  return request.get({\n    uri,\n    headers: {\n      authorization: authToken\n    },\n    json: true,\n    resolveWithFullResponse: true\n  }).then(response => {\n    if (response.statusCode === 202) {\n      let endExecution = new Date() - startExecution;\n      \n      // if (endExecution + 3000 > defaultNavigationTimeout) \n      //   throw new Error('Timeout error.')\n      \n      return Promise.delay(2000)\n        .then(() => pollingResult(uri))\n    } else {\n      return response\n    }\n  }, err => {\n    this.log.error('error', err)\n    throw new Error(err.error);\n  });\n}\n\nconst pollResult = await pollingResult(sucessCallbackUrl);\n\nreturn this.exitStep('next', { \"url\": pollResult.body.url });\n",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "name": "",
            "type": "session"
          },
          "newName": "``",
          "filePath": "``",
          "fileType": "pdf",
          "useFiles": true,
          "assetsUrl": "",
          "authToken": "",
          "imageSize": "full",
          "topMargin": "``",
          "urlSource": "``",
          "htmlSource": "",
          "leftMargin": "``",
          "pdfViewType": "predefined",
          "rightMargin": "``",
          "bottomMargin": "``",
          "imageQuality": "80",
          "pdfSizeUnits": "px",
          "processError": true,
          "imageFileType": "jpeg",
          "fileSourceType": "url",
          "footerTemplate": "``",
          "headerTemplate": "``",
          "pdfCustomWidth": "``",
          "backgroundToPdf": true,
          "isMobileVersion": false,
          "loadWaitingTime": "`3 sec`",
          "makeFilePrivate": false,
          "pdfCustomHeight": "``",
          "backgroundToImage": false,
          "pdfPredefinedSize": "`Letter`",
          "websiteResolution": "screen",
          "fullPageScreenShot": false,
          "imageSizeClipWidth": "``",
          "imageSizeClipHeight": "``",
          "websitePrintVersion": false,
          "imageSizeClipXOffset": "``",
          "imageSizeClipYOffset": "``",
          "imageSizeCustomWidth": "``",
          "maxNavigationTimeout": "`10 sec`",
          "customResolutionWidth": "``",
          "imageSizeCustomHeight": "``",
          "customResolutionHeight": "``",
          "pdfPredefinedOrientation": "`landscape`"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "url": ""
        },
        "help": "",
        "formBuilder": {
          "stepExits": [
            {
              "id": "dbaccacc-ecca-4e19-8443-2cddd33055c0",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "3674f1eb-179f-4c61-9b01-1f472727430d",
              "data": {
                "data": "{\n  \"fileSourceType\": \"url\",\n  \"urlSource\": \"``\",\n  \"htmlSource\": \"\",\n  \"newName\": \"``\",\n  \"filePath\": \"``\",\n  \"fileType\": \"pdf\",\n  \"pdfViewType\": \"predefined\",\n  \"pdfPredefinedSize\": \"`Letter`\",\n  \"pdfPredefinedOrientation\": \"`landscape`\",\n  \"pdfSizeUnits\": \"px\",\n  \"pdfCustomWidth\": \"``\",\n  \"pdfCustomHeight\": \"``\",\n  \"headerTemplate\": \"``\",\n  \"footerTemplate\": \"``\",\n  \"backgroundToPdf\": true,\n  \"topMargin\": \"``\",\n  \"bottomMargin\": \"``\",\n  \"leftMargin\": \"``\",\n  \"rightMargin\": \"``\",\n  \"imageFileType\": \"jpeg\",\n  \"imageQuality\": \"80\",\n  \"imageSize\": \"full\",\n  \"imageSizeCustomWidth\": \"``\",\n  \"imageSizeCustomHeight\": \"``\",\n  \"imageSizeClipWidth\": \"``\",\n  \"imageSizeClipHeight\": \"``\",\n  \"imageSizeClipXOffset\": \"``\",\n  \"imageSizeClipYOffset\": \"``\",\n  \"backgroundToImage\": false,\n  \"websitePrintVersion\": false,\n  \"fullPageScreenShot\": false,\n  \"websiteResolution\": \"screen\",\n  \"customResolutionWidth\": \"``\",\n  \"customResolutionHeight\": \"``\",\n  \"isMobileVersion\": false,\n  \"assetsUrl\": \"\",\n  \"authToken\": \"\",\n  \"useFiles\" : true\n}",
                "toJson": "return {\n  fileSourceType: JSON.stringify(data.fileSourceType),\n  urlSource: data.urlSource,\n  htmlSource: data.htmlSource === '``' ? data.htmlSource : `\\`${data.htmlSource}\\``,\n  // htmlSource: data.htmlSource,\n  useFiles: data.useFiles,\n  newName: data.newName,\n  filePath: data.filePath,\n  fileType: JSON.stringify(data.fileType),\n  pdfViewType: JSON.stringify(data.pdfViewType),\n  pdfPredefinedSize: data.pdfPredefinedSize,\n  pdfPredefinedOrientation: data.pdfPredefinedOrientation,\n  pdfSizeUnits: JSON.stringify(data.pdfSizeUnits),\n  pdfCustomWidth: data.pdfCustomWidth,\n  pdfCustomHeight: data.pdfCustomHeight,\n  headerTemplate: data.headerTemplate,\n  footerTemplate: data.footerTemplate,\n  backgroundToPdf: data.backgroundToPdf,\n  topMargin: data.topMargin,\n  bottomMargin: data.bottomMargin,\n  leftMargin: data.leftMargin,\n  rightMargin: data.rightMargin,\n  imageFileType: JSON.stringify(data.imageFileType),\n  imageQuality: JSON.stringify(data.imageQuality),\n  imageSize: JSON.stringify(data.imageSize),\n  imageSizeCustomWidth: data.imageSizeCustomWidth,\n  imageSizeCustomHeight: data.imageSizeCustomHeight,\n  imageSizeClipWidth: data.imageSizeClipWidth,\n  imageSizeClipHeight: data.imageSizeClipHeight,\n  imageSizeClipXOffset: data.imageSizeClipXOffset,\n  imageSizeClipYOffset: data.imageSizeClipYOffset,\n  backgroundToImage: data.backgroundToImage,\n  websitePrintVersion: data.websitePrintVersion,\n  fullPageScreenShot: data.fullPageScreenShot,\n  websiteResolution: JSON.stringify(data.websiteResolution),\n  customResolutionWidth: data.customResolutionWidth,\n  customResolutionHeight: data.customResolutionHeight,\n  assetsUrl: JSON.stringify(data.assetsUrl), \n  authToken: JSON.stringify(data.authToken), \n  makeFilePrivate: data.makeFilePrivate, \n  processError: data.processError,\n  isMobileVersion: data.isMobileVersion\n}",
                "validators": "urlSource: {\n  custom(value) {\n    if  (this.schema.fileSourceType === 'url') {\n      return value.slice(1, -1).length && validators.jsExpression(value)\n    }\n    return true\n  }\n},\nhtmlSource: {\n  custom(value) {\n    if  (this.schema.fileSourceType === 'html') {\n      // return validators.jsExpression(value);\n      return value.slice(1, -1).length\n    }\n    return true\n  }\n},\nnewName: {\n  custom(value) {\n    return value.slice(1, -1).replace(/\\s/g, '').length && validators.jsExpression(value)\n  }\n},\nfilePath: {\n  custom(value) {\n    return value.slice(1, -1).length && validators.jsExpression(value)\n  }\n},\npdfCustomWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'pdf' && this.schema.pdfViewType === 'custom') {\n      console.log('pdfwdth')\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0.1)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0.1)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\npdfCustomHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'pdf' && this.schema.pdfViewType === 'custom') {\n    console.log('pdfhgh')\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0.1)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)))\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\nheaderTemplate: {\n  custom(value) {\n    return validators.jsExpression(value)\n  }\n},\nfooterTemplate: {\n  custom(value) {\n    return validators.jsExpression(value)\n  }\n},\ntopMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nbottomMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nleftMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nrightMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nimageSizeCustomWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\nimageSizeCustomHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipXOffset: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipYOffset: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\ncustomResolutionWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.websiteResolution === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\ncustomResolutionHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.websiteResolution === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},",
                "applyToJson": true,
                "formTemplate": "<or-wildcard-ctkiqvdglpyfrsuj \n  :v=\"$v\" \n  :file-source-type.sync=\"schema.fileSourceType\" \n  :url-source.sync=\"schema.urlSource\" \n  :html-source.sync=\"schema.htmlSource\" \n  :new-name.sync=\"schema.newName\" \n  :file-path.sync=\"schema.filePath\" \n  :file-type.sync=\"schema.fileType\" \n  :pdf-view-type.sync=\"schema.pdfViewType\" \n  :pdf-predefined-size.sync=\"schema.pdfPredefinedSize\" \n  :pdf-predefined-orientation.sync=\"schema.pdfPredefinedOrientation\" \n  :pdf-size-units.sync=\"schema.pdfSizeUnits\"\n  :pdf-custom-width.sync=\"schema.pdfCustomWidth\" \n  :pdf-custom-height.sync=\"schema.pdfCustomHeight\" \n  :header-template.sync=\"schema.headerTemplate\" \n  :footer-template.sync=\"schema.footerTemplate\"\n  :background-to-pdf.sync=\"schema.backgroundToPdf\"\n  :top-margin.sync=\"schema.topMargin\"\n  :bottom-margin.sync=\"schema.bottomMargin\"\n  :left-margin.sync=\"schema.leftMargin\"\n  :right-margin.sync=\"schema.rightMargin\"\n  :image-file-type.sync=\"schema.imageFileType\"\n  :image-quality.sync=\"schema.imageQuality\"\n  :image-size.sync=\"schema.imageSize\"\n  :image-size-custom-width.sync=\"schema.imageSizeCustomWidth\"\n  :image-size-custom-height.sync=\"schema.imageSizeCustomHeight\"\n  :image-size-clip-width.sync=\"schema.imageSizeClipWidth\"\n  :image-size-clip-height.sync=\"schema.imageSizeClipHeight\"\n  :image-size-clip-x-offset.sync=\"schema.imageSizeClipXOffset\"\n  :image-size-clip-y-offset.sync=\"schema.imageSizeClipYOffset\"\n  :background-to-image.sync=\"schema.backgroundToImage\"\n  :website-print-version.sync=\"schema.websitePrintVersion\"\n  :full-page-screen-shot.sync=\"schema.fullPageScreenShot\"\n  :website-resolution.sync=\"schema.websiteResolution\"\n  :custom-resolution-width.sync=\"schema.customResolutionWidth\"\n  :custom-resolution-height.sync=\"schema.customResolutionHeight\"\n  :is-mobile-version.sync=\"schema.isMobileVersion\"\n  :process-error.sync=\"schema.processError\" \n  :assets-url.sync=\"schema.assetsUrl\" \n  :auth-token.sync=\"schema.authToken\" \n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\" \n  :steps=\"steps\" \n  :step-id=\"stepId\"\n></or-wildcard-ctkiqvdglpyfrsuj>",
                "componentName": "or-wildcard-txhwnliorqzpumyfgvdcejsbak",
                "componentLogic": "{\n  data() {\n    return {\n      pathFileData: [],\n      pdfCustomWidthError: '',\n      pdfCustomHeightError: '',\n      imageSizeCustomWidthError: '',\n      imageSizeCustomHeightError: '',\n      imageSizeClipWidthError: '',\n      imageSizeClipHeightError: '',\n      imageSizeClipXOffsetError: '',\n      imageSizeClipYOffsetError: '',\n      customResolutionWidthError: '',\n      customResolutionHeightError: '',\n      topMarginError: '',\n      bottomMarginError: '',\n      leftMarginError: '',\n      rightMarginError: '',\n      fileSourceTypeOptions: [\n        {\n            label : 'URL',\n            value : 'url'\n        },\n        {\n            label : 'HTML code',\n            value : 'html'\n        }\n      ],\n      fileTypeOptions: [\n        {\n            label : 'PDF',\n            value : 'pdf',\n            checked: 'checked'\n        },\n        {\n            label : 'Image',\n            value : 'image'\n        }\n      ],\n      pdfViewTypeOptions: [\n        {\n            label : 'Predefined',\n            value : 'predefined'\n        },\n        {\n            label : 'Custom',\n            value : 'custom'\n        }\n      ],\n      pdfPredefinedSizeOptions: [\n        {\n            label : 'Letter',\n            value : '`Letter`'\n        },\n        {\n            label : 'Legal',\n            value : '`Legal`'\n        },\n        {\n            label : 'Tabloid',\n            value : '`Tabloid`'\n        },\n        {\n            label : 'Ledger',\n            value : '`Ledger`'\n        },\n        {\n            label : 'A0',\n            value : '`A0`'\n        },\n        {\n            label : 'A1',\n            value : '`A1`'\n        },\n        {\n            label : 'A2',\n            value : '`A2`'\n        },\n        {\n            label : 'A3',\n            value : '`A3`'\n        },\n        {\n            label : 'A4',\n            value : '`A4`'\n        },\n        {\n            label : 'A5',\n            value : '`A5`'\n        },\n        {\n            label : 'A6',\n            value : '`A6`'\n        }\n      ],\n      pdfPredefinedOrientationOptions: [\n        {\n            label : 'Landscape',\n            value : '`landscape`'\n        },\n        {\n            label : 'Portrait',\n            value : '`portrait`'\n        }\n      ],\n      imageFileTypeOptions: [\n        {\n            label : 'JPEG',\n            value : 'jpeg'\n        },\n        {\n            label : 'PNG',\n            value : 'png'\n        }\n      ],\n      imageQualityOptions: [],\n      imageSizeOptions: [\n        {\n            label : 'Full',\n            value : 'full'\n        },\n        // {\n        //     label : 'Custom',\n        //     value : 'custom'\n        // },\n        {\n            label : 'Clip',\n            value : 'clip'\n        }\n      ],\n      measurementUnitsOptions : [ 'px', 'in', 'cm', 'mm' ],\n      websiteResolutionOptions : [\n        {\n            label : 'Large screen (1366x768)',\n            value : 'screen'\n        },\n        {\n            label : 'Tablet (768x1024)',\n            value : 'tablet'\n        },\n        {\n            label : 'Phone (375x667)',\n            value : 'phone'\n        },\n        {\n            label : 'Custom',\n            value : 'custom'\n        }\n      ]\n    }\n  },\n  \n  computed : {\n    fileSourceTypeLocal : {\n      get () { return this.fileSourceType; },\n      set (value) { this.$emit('update:fileSourceType', value); }\n    },\n    urlSourceLocal : {\n      get () { return this.urlSource; },\n      set (value) { this.$emit('update:urlSource', value); }\n    },\n    htmlSourceLocal : {\n      get () { return this.htmlSource; },\n      set (value) { this.$emit('update:htmlSource', value); }\n    },\n    newNameLocal : {\n      get () { return this.newName; },\n      set (value) { this.$emit('update:newName', value); }\n    },\n    filePathLocal: {\n      get () { return this.filePath; },\n      set (value) {\n        this.$emit('update:filePath', value);\n      }\n    },\n    fileNameHelpText () {\n      return `File name can contain only letters, numbers, spaces and special characters \"!\", \"-\", \"_\", \".\", \"*\", \"'\", \"(\", \")\". Other characters will be deleted.`;\n    },\n    filePathHelpText () {\n      return 'Folder name can contain only letters, numbers, hyphens, underscores and spaces.';\n    },\n    fileTypeLocal : {\n      get () { return this.fileType; },\n      set (value) { this.$emit('update:fileType', value); }\n    },\n    pdfViewTypeLocal : {\n      get () { return this.pdfViewType; },\n      set (value) { this.$emit('update:pdfViewType', value); }\n    },\n    pdfPredefinedSizeLocal : {\n      get () { return this.pdfPredefinedSize; },\n      set (value) { this.$emit('update:pdfPredefinedSize', value); }\n    },\n    pdfPredefinedOrientationLocal : {\n      get () { return this.pdfPredefinedOrientation; },\n      set (value) { this.$emit('update:pdfPredefinedOrientation', value); }\n    },\n    pdfSizeUnitsLocal : {\n      get () { return this.pdfSizeUnits; },\n      set (value) { this.$emit('update:pdfSizeUnits', value); }\n    },\n    pdfCustomWidthLocal : {\n      get () { \n        if (this.v.schema.pdfCustomWidth.$error) this.pdfCustomWidthError = this.generateNumericInputError(this.pdfCustomWidth, true, 'pdfCustomSize');\n        return this.pdfCustomWidth; },\n      set (value) { this.$emit('update:pdfCustomWidth', value); }\n    },\n    pdfCustomHeightLocal : {\n      get () { \n        if (this.v.schema.pdfCustomHeight.$error) this.pdfCustomHeightError = this.generateNumericInputError(this.pdfCustomHeight, 'pdfCustomSize');\n        return this.pdfCustomHeight;\n      },\n      set (value) { this.$emit('update:pdfCustomHeight', value); }\n    },\n    headerTemplateLocal : {\n      get () { return this.headerTemplate; },\n      set (value) { this.$emit('update:headerTemplate', value); }\n    },\n    footerTemplateLocal : {\n      get () { return this.footerTemplate; },\n      set (value) { this.$emit('update:footerTemplate', value); }\n    },\n    backgroundToPdfLocal : {\n      get () { return this.backgroundToPdf; },\n      set (value) { this.$emit('update:backgroundToPdf', value); }\n    },\n    // marginUnitsLocal : {\n    //   get () { return this.marginUnits; },\n    //   set (value) { this.$emit('update:marginUnits', value); }\n    // },\n    topMarginLocal : {\n      get () { \n        if (this.v.schema.topMargin.$error) this.topMarginError = this.generateNumericInputError(this.topMargin);\n        return this.topMargin;\n      },\n      set (value) { this.$emit('update:topMargin', value); }\n    },\n    bottomMarginLocal : {\n      get () { \n        if (this.v.schema.bottomMargin.$error) this.bottomMarginError = this.generateNumericInputError(this.bottomMargin);\n        return this.bottomMargin;\n      },\n      set (value) { this.$emit('update:bottomMargin', value); }\n    },\n    leftMarginLocal : {\n      get () { \n        if (this.v.schema.leftMargin.$error) this.leftMarginError = this.generateNumericInputError(this.leftMargin);\n        return this.leftMargin;\n      },\n      set (value) { this.$emit('update:leftMargin', value); }\n    },\n    rightMarginLocal : {\n      get () { \n        if (this.v.schema.rightMargin.$error) this.rightMarginError = this.generateNumericInputError(this.rightMargin);\n        return this.rightMargin;\n      },\n      set (value) { this.$emit('update:rightMargin', value); }\n    },\n    imageFileTypeLocal : {\n      get () { return this.imageFileType; },\n      set (value) { this.$emit('update:imageFileType', value);\n      }\n    },\n    imageQualityLocal : {\n      get () { return this.imageQuality; },\n      set (value) { this.$emit('update:imageQuality', value);\n      }\n    },\n    imageSizeLocal : {\n      get () { return this.imageSize; },\n      set (value) { \n        if (value === 'clip') this.fullPageScreenShotLocal = false;\n        this.$emit('update:imageSize', value);\n      }\n    },\n    imageSizeCustomWidthLocal : {\n      get () { \n        if (this.v.schema.imageSizeCustomWidth.$error) this.imageSizeCustomWidthError = this.generateNumericInputError(this.imageSizeCustomWidth, true);\n        return this.imageSizeCustomWidth;\n      },\n      set (value) { this.$emit('update:imageSizeCustomWidth', value);\n      }\n    },\n    imageSizeCustomHeightLocal : {\n      get () { \n        if (this.v.schema.imageSizeCustomHeight.$error) this.imageSizeCustomHeightError = this.generateNumericInputError(this.imageSizeCustomHeight, true);\n        return this.imageSizeCustomHeight;\n      },\n      set (value) { this.$emit('update:imageSizeCustomHeight', value);\n      }\n    },\n    imageSizeClipWidthLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipWidth.$error) this.imageSizeClipWidthError = this.generateNumericInputError(this.imageSizeClipWidth, true);\n        return this.imageSizeClipWidth;\n      },\n      set (value) { this.$emit('update:imageSizeClipWidth', value);\n      }\n    },\n    imageSizeClipHeightLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipHeight.$error) this.imageSizeClipHeightError = this.generateNumericInputError(this.imageSizeClipHeight, true);\n        return this.imageSizeClipHeight;\n      },\n      set (value) { this.$emit('update:imageSizeClipHeight', value);\n      }\n    },\n    imageSizeClipXOffsetLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipXOffset.$error) this.imageSizeClipXOffsetError = this.generateNumericInputError(this.imageSizeClipXOffset, true, 'imgOffset');\n        return this.imageSizeClipXOffset;\n      },\n      set (value) { this.$emit('update:imageSizeClipXOffset', value);\n      }\n    },\n    imageSizeClipYOffsetLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipYOffset.$error) this.imageSizeClipYOffsetError = this.generateNumericInputError(this.imageSizeClipYOffset, true, 'imgOffset');\n        return this.imageSizeClipYOffset;\n      },\n      set (value) { this.$emit('update:imageSizeClipYOffset', value); }\n    },\n    backgroundToImageLocal : {\n      get () { return this.backgroundToImage; },\n      set (value) { this.$emit('update:backgroundToImage', value); }\n    },\n    // filePathComp() {\n    //   return _.get(this.pathFileData, '[0].data.Key', '').replace(/.+?(?=\\/)/, '');\n    // },\n    websitePrintVersionLocal : {\n      get () { return this.websitePrintVersion; },\n      set (value) { this.$emit('update:websitePrintVersion', value); }\n    },\n    fullPageScreenShotLocal : {\n      get () { return this.fullPageScreenShot; },\n      set (value) { \n        if (value && this.websiteResolutionLocal === 'custom') {\n          this.v.schema.customResolutionHeight.$touch()\n          this.customResolutionHeightLocal = '``';\n        }\n        this.$emit('update:fullPageScreenShot', value); \n      }\n    },\n    websiteResolutionLocal : {\n      get () { return this.websiteResolution; },\n      set (value) { \n        if (this.fullPageScreenShotLocal && value === 'custom') {\n          this.customResolutionHeightLocal = '``';\n        }\n\n        this.isMobileVersionLocal = value === 'phone' ? true : false;\n\n        this.$emit('update:websiteResolution', value); \n      }\n    },\n    customResolutionWidthLocal : {\n      get () { \n        if (this.v.schema.customResolutionWidth.$error) this.customResolutionWidthError = this.generateNumericInputError(this.customResolutionWidth, true);\n        return this.customResolutionWidth;\n      },\n      set (value) { this.$emit('update:customResolutionWidth', value); }\n    },\n    customResolutionHeightLocal : {\n      get () { \n        if (this.v.schema.customResolutionHeight.$error) this.customResolutionHeightError = this.generateNumericInputError(this.customResolutionHeight, true);\n        return this.customResolutionHeight;\n      },\n      set (value) { this.$emit('update:customResolutionHeight', value); }\n    },\n    isMobileVersionLocal : {\n      get () { return this.isMobileVersion; },\n      set (value) { this.$emit('update:isMobileVersion', value); }\n    }\n  },\n  \n  mounted () {\n    this.$emit('update:assetsUrl', `${this.$flow.customDataApiUrl}/api/v1/assets`);\n    this.$emit('update:authToken', this.$settings.token);\n\n    this.getImageQualityOptions();\n  },\n  \n  props : {\n    fileSourceType : {\n      type : String,\n      default : 'url'\n    },\n    urlSource : {\n      type : String,\n      default : '``'\n    },\n    htmlSource : {\n      type : String,\n      default : ''\n    },\n    newName : {\n      type : String,\n      default : '``'\n    },\n    filePath : {\n      type: 'String',\n      default: ''\n    },\n    fileType : {\n      type : String,\n      default : 'pdf'\n    },\n    pdfViewType : {\n      type : String,\n      default : 'predefined'\n    },\n    pdfPredefinedSize : {\n      type : String,\n      default : '`Letter`'\n    },\n    pdfPredefinedOrientation : {\n      type : String,\n      default : '`landscape`'\n    },\n    pdfSizeUnits : {\n      type : String,\n      default : 'px'\n    },\n    pdfCustomWidth : {\n      type : String,\n      default : '``'\n    },\n    pdfCustomHeight : {\n      type : String,\n      default : '``'\n    },\n    headerTemplate : {\n      type : String,\n      default : '``'\n    },\n    footerTemplate : {\n      type : String,\n      default : '``'\n    },\n    backgroundToPdf : {\n      type : Boolean,\n      default : true\n    },\n    // marginUnits : {\n    //   type : String,\n    //   default : 'px'\n    // },\n    topMargin : {\n      type : String,\n      default : '``'\n    },\n    bottomMargin : {\n      type : String,\n      default : '``'\n    },\n    leftMargin : {\n      type : String,\n      default : '``'\n    },\n    rightMargin : {\n      type : String,\n      default : '``'\n    },\n    imageFileType : {\n      type : String,\n      default : 'jpeg'\n    },\n    imageQuality : {\n      type : String,\n      default : '80'\n    },\n    imageSize : {\n      type : String,\n      default : 'full'\n    },\n    imageSizeCustomWidth : {\n      type : String,\n      default : '``'\n    },\n    imageSizeCustomHeight : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipWidth : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipHeight : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipXOffset : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipYOffset : {\n      type : String,\n      default : '``'\n    },\n    backgroundToImage : {\n      type : Boolean,\n      default : false\n    },\n    websitePrintVersion : {\n      type : Boolean,\n      default : false\n    },\n    fullPageScreenShot : {\n      type : Boolean,\n      default : false\n    },\n    websiteResolution : {\n      type : String,\n      default : 'screen'\n    },\n    customResolutionWidth : {\n      type : String,\n      default : '``'\n    },\n    customResolutionHeight : {\n      type : String,\n      default : '``'\n    },\n    isMobileVersion : {\n      type : Boolean,\n      default : false\n    },\n    assetsUrl : {\n      type : String,\n      default : ''\n    },\n    authToken : {\n      type : String,\n      default : ''\n    },\n    steps : '',\n    stepId : '',\n    processError : true,\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema: {htmlSource: {}}};\n      }\n    },\n  },\n  methods: {\n    openModal (ref) {\n        this.$refs[ref].open();\n    },\n    \n    closeModal (ref) {\n        this.$refs[ref].close();\n    },\n    \n    onFilePathInput () {\n      this.v.schema.filePath.$touch();\n      this.pathFileData = [];\n    },\n    \n    changeFileType (tabId) {\n      this.fileTypeLocal = tabId;\n    },\n        \n    getImageQualityOptions () {\n      for ( let i = 0; i <= 100; i += 1) {\n        this.imageQualityOptions.push({\n          value: i.toString(),\n          label: `${i}%`\n        })\n      };\n    },\n    \n    generateNumericInputError (value, isRequired = false, type = '') {\n      const containsMergeField = _.isString(value) && validators.validateExpression(value);\n      const regexTextMode = /^\\`.*\\`$/;\n      let errorText = '';\n      \n      if (regexTextMode.test(value)) {\n        if (isRequired && !value.slice(1, -1).length) {\n          errorText = 'The value is required';\n        } else if (isNaN(value.slice(1, -1))) {\n          errorText = 'Invalid number';\n        } else if (type === 'pdfCustomSize' && _.toNumber(value.slice(1, -1)) < 0.1) {\n          // if (this.pdfSizeUnits === 'px' && parseInt(value.slice(1, -1)) < 10) {\n          //   errorText = 'The value should be 10 pixels or greater.';\n          // } else if (this.pdfSizeUnits === 'in' && parseInt(value.slice(1, -1)) < 0.1) {\n          //   errorText = 'The value should be 0.1 inch or greater.';\n          // } else if (this.pdfSizeUnits === 'cm' && parseInt(value.slice(1, -1)) < 0.5) {\n          //   errorText = 'The value should be 0.5 centimeters or greater.';\n          // } else if (this.pdfSizeUnits === 'mm' && parseInt(value.slice(1, -1)) < 5) {\n          //   errorText = 'The value should be 5 millimeters or greater.';\n          // }\n          errorText = 'The value should be 0.1 inch or greater.';\n        } else if (type === 'imgOffset' && _.toNumber(value.slice(1, -1)) < 0) {\n          errorText = 'The value should be 0 or greater.';\n        } else if (!type.length && _.toNumber(value.slice(1, -1)) <= 0) {\n          errorText = 'The value should be a positive number.';\n        }\n      } else {\n        if (isRequired && !value.length) {\n          errorText = 'The value is required';\n        } else if (!validators.jsExpression(value)) {\n          errorText = 'Please enter a valid JavaScript expression.'\n        } else if (isNaN(value)) {\n          errorText = 'Invalid number';\n        } else if (type === 'pdfCustomSize' && _.toNumber(value) < 0.1) {\n          errorText = 'The value should be 0.1 inch or greater.';\n        } else if (type === 'imgOffset' && _.toNumber(value) < 0) {\n          errorText = 'The value should be 0 or greater.';\n        } else if (!type.length && _.toNumber(value) <= 0) {\n          errorText = 'The value should be a positive number.';\n        }\n      }\n\n      return errorText;\n    }\n  },\n  \n  watch: {\n    pathFileData (pathFileData) {\n      if (!pathFileData || !pathFileData.length) return;\n      const path =  _.get(pathFileData, '[0].key', '');\n      this.filePathLocal = '`' + path + '`';\n    }\n    // filePathComp(newPath) {\n    //   this.$emit('update:filePath', newPath);\n    // }\n  }\n}",
                "componentTemplate": "<or-collapsible title=\"Input options\"\r\n                :invalid=\"v.schema.urlSource.$error || v.schema.htmlSource.$error\"\r\n                open\r\n>  \r\n  <div class=\"header-with-dropdown source-header\">\r\n    <div class=\"source-header__label\">Source</div> \r\n    <or-select\r\n      name=\"fileSourceType\"\r\n      placeholder=\"Select source\"\r\n      :options=\"fileSourceTypeOptions\"\r\n      v-model=\"fileSourceTypeLocal\"\r\n      :disabled=\"readonly\"\r\n      class=\"source-header__type-select\"\r\n    >\r\n    </or-select>\r\n  </div>\r\n  <or-text-expression v-if=\"fileSourceType === 'url'\"\r\n    v-model=\"urlSourceLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"!urlSourceLocal.slice(1, -1).length ? 'The source is required.' : 'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.urlSource.$error\"\r\n    @input=\"v.schema.urlSource.$touch()\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  <or-code v-else\r\n    v-model=\"htmlSourceLocal\"\r\n    :readonly=\"readonly\"\r\n    mode=\"html\"\r\n    :error=\"!htmlSourceLocal.slice(1, -1).length ? 'The source is required.' : 'The value is not a valid HTML code.'\"\r\n    :invalid=\"v.schema.htmlSource.$error\"\r\n    @input=\"v.schema.htmlSource.$touch()\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-code>\r\n</or-collapsible>\r\n\r\n<or-collapsible title=\"Output options\"\r\n                :invalid=\"v.schema.newName.$error || v.schema.pdfCustomWidth.$error || v.schema.pdfCustomHeight.$error || v.schema.imageSizeCustomWidth.$error || v.schema.imageSizeCustomHeight.$error || v.schema.imageSizeClipWidth.$error || v.schema.imageSizeClipHeight.$error || v.schema.imageSizeClipXOffset.$error || v.schema.imageSizeClipYOffset.$error\"\r\n                open\r\n>\r\n  <or-text-expression \r\n    label=\"Name of result file\"\r\n    v-model=\"newNameLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"!newNameLocal.slice(1, -1).replace(/\\s/g, '').length? 'Name is required.' : 'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.newName.$error\"\r\n    @input=\"v.schema.newName.$touch()\"\r\n    :help-text=\"fileNameHelpText\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  \r\n  <or-text-expression \r\n    label=\"Upload to\"\r\n    v-model=\"filePathLocal\"\r\n    :readonly=\"readonly\"\r\n    placeholder=\"/folder-name/\"\r\n    :help-text=\"filePathHelpText\"\r\n    :error=\"!filePathLocal.slice(1, -1).length ? 'Value is required.' : 'Value is not a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.filePath.$error\"\r\n    @input=\"onFilePathInput\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  >  </or-text-expression>\r\n  \r\n  <!--<div class=\"path-helptext\"> {{filePathHelpText}} </div>-->\r\n  \r\n  <div class=\"upload-file\">\r\n    <!--<div class=\"upload-file__folder\"><b class=\"upload-file__text\">Upload to</b> ...<span class=\"upload-file__path\">{{ filePath }}</span></div>-->\r\n    <or-button\r\n      @click=\"openModal('assetPickerModal')\"\r\n      type=\"secondary\"\r\n      color=\"primary\"\r\n      class=\"upload-file__button-upload\"\r\n      :disabled=\"readonly\"\r\n    >\r\n      Choose folder\r\n    </or-button>\r\n  </div>\r\n  <or-modal \r\n    ref=\"assetPickerModal\" \r\n    class=\"or-ui-modal-container\" \r\n    title=\"Choose folder\" \r\n    size=\"large\">\r\n    <div slot=\"default\">\r\n        <div \r\n          class=\"Assets\" \r\n          v-if=\"assetsUrl\"\r\n        >\r\n          <p>Click on an file to use it.</p>\r\n          <or-asset-manager \r\n              :auth-token=\"$settings.token\" \r\n              :assets-url=\"`${this.$flow.customDataApiUrl}/api/v1/assets`\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              folder-mode\r\n              :allow-files-and-data=\"false\"\r\n              v-model=\"pathFileData\"\r\n          ></or-asset-manager>\r\n        </div>\r\n        <div class=\"EndpointSetup\" v-if=\"!assetsUrl\">\r\n            <span class=\"AuthTokenFound\">{{authToken\r\n                ? 'Authorization token found'\r\n                : 'Could not find authorization token'}}</span>\r\n            <or-button :disabled=\"!assetsUrl\" icon=\"refresh\"\r\n                       @click.stop.prevent=\"GetAssets\">Retry\r\n            </or-button>\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\">\r\n        <or-button type=\"primary\" @click=\"closeModal('assetPickerModal')\">Done</or-button>\r\n    </div>\r\n  </or-modal>\r\n  \r\n  <or-tabs\r\n    fullwidth\r\n    @tab-change=\"changeFileType\" \r\n    class=\"file-type-tabs flex-box\"\r\n  >\r\n    <or-tab \r\n      title=\"PDF\"\r\n      id=\"pdf\"\r\n      :selected=\"fileType === 'pdf'\"\r\n    >\r\n      <div class=\"file-options\">\r\n          <div class=\"header-with-dropdown file-options__header-with-dropdown\">\r\n            <div>Select size and format: </div>\r\n            <!--<or-select-->\r\n            <!--  v-if=\"pdfViewType === 'custom'\"-->\r\n            <!--  name=\"pdfSizeUnits\"-->\r\n            <!--  placeholder=\"Select units\"-->\r\n            <!--  :options=\"measurementUnitsOptions\"-->\r\n            <!--  v-model=\"pdfSizeUnitsLocal\"-->\r\n            <!--  :disabled=\"readonly\">-->\r\n            <!--</or-select>-->\r\n          </div>\r\n          \r\n          <div class=\"file-options__customize\">\r\n            <or-select\r\n              name=\"pdfViewType\"\r\n              placeholder=\"Select format type\"\r\n              label=\"View\"\r\n              :options=\"pdfViewTypeOptions\"\r\n              v-model=\"pdfViewTypeLocal\"\r\n              :disabled=\"readonly\"\r\n              class=\"file-format\"\r\n            >\r\n            </or-select>\r\n\r\n            <or-select-expression\r\n              v-if=\"pdfViewType === 'predefined'\"\r\n              placeholder=\"Select format\"\r\n              label=\"Size\"\r\n              :options.sync=\"pdfPredefinedSizeOptions\"\r\n              v-model=\"pdfPredefinedSizeLocal\"\r\n              has-search extendable-options only-merge-field\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" :step-id=\"stepId\"\r\n              :disabled=\"readonly\"\r\n              class=\"predefined-format-dropdown\"\r\n            ></or-select-expression>\r\n            \r\n            <or-select-expression\r\n              v-if=\"pdfViewType === 'predefined'\"\r\n              placeholder=\"Select orientation\"\r\n              label=\"Orientation\"\r\n              :options.sync=\"pdfPredefinedOrientationOptions\"\r\n              v-model=\"pdfPredefinedOrientationLocal\"\r\n              has-search extendable-options only-merge-field\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" :step-id=\"stepId\"\r\n              :disabled=\"readonly\"\r\n              class=\"predefined-orientation-dropdown\"\r\n            ></or-select-expression>\r\n            \r\n            <or-text-expression \r\n              v-if=\"pdfViewType === 'custom'\"\r\n              label=\"Width\"\r\n              v-model=\"pdfCustomWidthLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"pdfCustomWidthError\"\r\n              :invalid=\"v.schema.pdfCustomWidth.$error\"\r\n              @input=\"v.schema.pdfCustomWidth.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              v-if=\"pdfViewType === 'custom'\"\r\n              label=\"Height\"\r\n              v-model=\"pdfCustomHeightLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"pdfCustomHeightError\"\r\n              :invalid=\"v.schema.pdfCustomHeight.$error\"\r\n              @input=\"v.schema.pdfCustomHeight.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n            ></or-text-expression>\r\n          </div>\r\n          \r\n          <or-checkbox\r\n            v-model=\"backgroundToPdfLocal\"\r\n            :disabled=\"readonly\"\r\n          >Save background to pdf\r\n          </or-checkbox>\r\n      </div>  \r\n      \r\n      \r\n    </or-tab>\r\n    \r\n    <or-tab \r\n      title=\"Image\"\r\n      id=\"image\"\r\n      :selected=\"fileType === 'image'\"\r\n    >\r\n      <div class=\"file-options\">\r\n        <div class=\"header-with-dropdown file-options__header-with-dropdown\">\r\n          <div>Image settings: </div>\r\n        </div>\r\n        \r\n        <div class=\"file-options__customize\">\r\n          <or-select\r\n            name=\"imageFileType\"\r\n            label=\"Type:\"\r\n            placeholder=\"Select type\"\r\n            :options=\"imageFileTypeOptions\"\r\n            v-model=\"imageFileTypeLocal\"\r\n            :disabled=\"readonly\"\r\n            class=\"image-file-type\"\r\n          >\r\n          </or-select>\r\n          \r\n          <or-select\r\n            name=\"imageSize\"\r\n            label=\"Size:\"\r\n            placeholder=\"Select size\"\r\n            :options=\"imageSizeOptions\"\r\n            v-model=\"imageSizeLocal\"\r\n            :disabled=\"readonly\"\r\n            class=\"picture-size-dropdown\"\r\n          ></or-select>\r\n          \r\n          <or-select\r\n            name=\"imageQuality\"\r\n            label=\"Quality\"\r\n            :options=\"imageQualityOptions\"\r\n            v-model=\"imageQualityLocal\"\r\n            :disabled=\"readonly || (imageFileTypeLocal === 'png')\"\r\n            :steps=\"steps\" \r\n            :step-id=\"stepId\"\r\n            has-search\r\n          ></or-select>\r\n        </div>\r\n        \r\n        <!--<div v-if=\"imageSize === 'custom'\"-->\r\n        <!--     class=\"file-options__image-size\">-->\r\n        <!--  <or-text-expression -->\r\n        <!--    label=\"Width\"-->\r\n        <!--    v-model=\"imageSizeCustomWidthLocal\"-->\r\n        <!--    :readonly=\"readonly\"-->\r\n        <!--    :error=\"imageSizeCustomWidthError\"-->\r\n        <!--    :invalid=\"v.schema.imageSizeCustomWidth.$error\"-->\r\n        <!--    @input=\"v.schema.imageSizeCustomWidth.$touch()\"-->\r\n        <!--    :steps=\"steps\" -->\r\n        <!--    :step-id=\"stepId\">-->\r\n        <!--  </or-text-expression>-->\r\n          \r\n        <!--  <or-text-expression -->\r\n        <!--    label=\"Height\"-->\r\n        <!--    v-model=\"imageSizeCustomHeightLocal\"-->\r\n        <!--    :readonly=\"readonly\"-->\r\n        <!--    :error=\"imageSizeCustomHeightError\"-->\r\n        <!--    :invalid=\"v.schema.imageSizeCustomHeight.$error\"-->\r\n        <!--    @input=\"v.schema.imageSizeCustomHeight.$touch()\"-->\r\n        <!--    :steps=\"steps\" -->\r\n        <!--    :step-id=\"stepId\">-->\r\n        <!--  </or-text-expression>-->\r\n        <!--</div>-->\r\n        \r\n        <div v-if=\"imageSize === 'clip'\"\r\n             class=\"file-options__image-size\"\r\n        >\r\n          <div class=\"two-in-a-row\">\r\n            <or-text-expression \r\n              label=\"Width\"\r\n              v-model=\"imageSizeClipWidthLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipWidthError\"\r\n              :invalid=\"v.schema.imageSizeClipWidth.$error\"\r\n              @input=\"v.schema.imageSizeClipWidth.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n              class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              label=\"Height\"\r\n              v-model=\"imageSizeClipHeightLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipHeightError\"\r\n              :invalid=\"v.schema.imageSizeClipHeight.$error\"\r\n              @input=\"v.schema.imageSizeClipHeight.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n              class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n          </div>\r\n          \r\n          <div class=\"two-in-a-row\">\r\n            <or-text-expression \r\n              label=\"X-offset\"\r\n              v-model=\"imageSizeClipXOffsetLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipXOffsetError\"\r\n              :invalid=\"v.schema.imageSizeClipXOffset.$error\"\r\n              @input=\"v.schema.imageSizeClipXOffset.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n               class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              label=\"Y-offset\"\r\n              v-model=\"imageSizeClipYOffsetLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipYOffsetError\"\r\n              :invalid=\"v.schema.imageSizeClipYOffset.$error\"\r\n              @input=\"v.schema.imageSizeClipYOffset.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n               class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n          </div>\r\n        </div>\r\n        \r\n        <!--<or-checkbox-->\r\n        <!--  v-model=\"backgroundToImageLocal\"-->\r\n        <!--  :disabled=\"readonly\">-->\r\n        <!--  Omit background-->\r\n        <!--</or-checkbox>-->\r\n      </div>\r\n    </or-tab>\r\n  </or-tabs>\r\n</or-collapsible>\r\n\r\n<!--<or-collapsible title=\"Header & footer templates\"   -->\r\n<!--                v-if=\"fileType === 'pdf'\"-->\r\n<!--                :invalid=\"v.schema.headerTemplate.$error || v.schema.footerTemplate.$error\"-->\r\n<!--                open></or-collapsible>-->\r\n\r\n\r\n<!--  <or-text-expression -->\r\n<!--    label=\"Header\"-->\r\n<!--    v-model=\"headerTemplateLocal\"-->\r\n<!--    :readonly=\"readonly\"-->\r\n<!--    :error=\"'Please enter a valid JavaScript expression.'\"-->\r\n<!--    :invalid=\"v.schema.headerTemplate.$error\"-->\r\n<!--    @input=\"v.schema.headerTemplate.$touch()\"-->\r\n<!--    :steps=\"steps\" -->\r\n<!--    :step-id=\"stepId\">-->\r\n<!--  </or-text-expression>-->\r\n  \r\n<!--  <or-text-expression -->\r\n<!--    label=\"Footer\"-->\r\n<!--    v-model=\"footerTemplateLocal\"-->\r\n<!--    :readonly=\"readonly\"-->\r\n<!--    :error=\"'Please enter a valid JavaScript expression.'\"-->\r\n<!--    :invalid=\"v.schema.footerTemplate.$error\"-->\r\n<!--    @input=\"v.schema.footerTemplate.$touch()\"-->\r\n<!--    :steps=\"steps\" -->\r\n<!--    :step-id=\"stepId\">-->\r\n<!--  </or-text-expression>-->\r\n  \r\n<!--</or-collapsible>-->\r\n\r\n<or-collapsible\r\n                title=\"Extended settings\" \r\n                :invalid=\"v.schema.topMargin.$error || v.schema.bottomMargin.$error || v.schema.leftMargin.$error || v.schema.rightMargin.$error || v.schema.customResolutionWidth.$error || v.schema.customResolutionHeight.$error\"\r\n                open\r\n>\r\n  <!--<or-checkbox v-if=\"fileType === 'pdf'\"-->\r\n  <!--  v-model=\"websitePrintVersionLocal\"-->\r\n  <!--  :disabled=\"readonly\"-->\r\n  <!--  class=\"mt-1 mb-1\">-->\r\n  <!--Website print version</or-checkbox>-->\r\n\r\n  <or-text-expression v-if=\"fileType === 'pdf'\"\r\n    label=\"Header\"\r\n    v-model=\"headerTemplateLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.headerTemplate.$error\"\r\n    @input=\"v.schema.headerTemplate.$touch()\"\r\n    helpText=\"Make sure to set enough top margin to fit header content above the website content\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  \r\n  <or-text-expression v-if=\"fileType === 'pdf'\"\r\n    label=\"Footer\"\r\n    v-model=\"footerTemplateLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.footerTemplate.$error\"\r\n    @input=\"v.schema.footerTemplate.$touch()\"\r\n    helpText=\"Make sure to set enough bottom margin to fit header content under the website content\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n    \r\n  <!--<or-checkbox v-if=\"fileType === 'image' && imageSize !== 'clip'\"-->\r\n  <!--  v-model=\"fullPageScreenShotLocal\"-->\r\n  <!--  :disabled=\"readonly\"-->\r\n  <!--  class=\"mt-1 mb-1\">-->\r\n  <!--  Full page screenshot-->\r\n  <!--</or-checkbox>-->\r\n  \r\n  <div v-if=\"fileType === 'pdf'\">\r\n    <div class=\"header-with-dropdown\">\r\n      <div>Margin: </div>\r\n      <!--<or-select-->\r\n      <!--  name=\"marginUnits\"-->\r\n      <!--  placeholder=\"Select units\"-->\r\n      <!--  :options=\"measurementUnitsOptions\"-->\r\n      <!--  v-model=\"marginUnitsLocal\"-->\r\n      <!--  :disabled=\"readonly\"      ></or-select>-->\r\n    </div>\r\n    \r\n    <div class=\"two-in-a-row\">\r\n      <or-text-expression \r\n        label=\"Top\"\r\n        v-model=\"topMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"topMarginError\"\r\n        :invalid=\"v.schema.topMargin.$error\"\r\n        @input=\"v.schema.topMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Bottom\"\r\n        v-model=\"bottomMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"bottomMarginError\"\r\n        :invalid=\"v.schema.bottomMargin.$error\"\r\n        @input=\"v.schema.bottomMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n    <div class=\"two-in-a-row\">\r\n      <or-text-expression \r\n        label=\"Left\"\r\n        v-model=\"leftMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"leftMarginError\"\r\n        :invalid=\"v.schema.leftMargin.$error\"\r\n        @input=\"v.schema.leftMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Right\"\r\n        v-model=\"rightMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"rightMarginError\"\r\n        :invalid=\"v.schema.rightMargin.$error\"\r\n        @input=\"v.schema.rightMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n  </div>\r\n\r\n  <div v-if=\"fileType === 'image'\">\r\n    <div>\r\n      <div class=\"normal-header\">Website resolution: </div>\r\n      <or-select\r\n        name=\"websiteResolution\"\r\n        placeholder=\"Select resolution\"\r\n        :options=\"websiteResolutionOptions\"\r\n        v-model=\"websiteResolutionLocal\"\r\n        :disabled=\"readonly\"\r\n        class=\"full-size-dropdown\"\r\n      >\r\n      </or-select>\r\n    </div>\r\n    \r\n    <div v-if=\"websiteResolution === 'custom'\" \r\n      class=\"two-in-a-row\"\r\n    >\r\n      <or-text-expression \r\n        label=\"Width\"\r\n        v-model=\"customResolutionWidthLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"customResolutionWidthError\"\r\n        :invalid=\"v.schema.customResolutionWidth.$error\"\r\n        @input=\"v.schema.customResolutionWidth.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Height\"\r\n        v-model=\"customResolutionHeightLocal\"\r\n        :readonly=\"readonly || fullPageScreenShotLocal\"\r\n        :error=\"customResolutionHeightError\"\r\n        :invalid=\"v.schema.customResolutionHeight.$error\"\r\n        @input=\"v.schema.customResolutionHeight.$touch()\"\r\n        :placeholder=\"fullPageScreenShotLocal ? 'Max height' : null\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n    \r\n    <or-checkbox v-if=\"websiteResolution === 'custom'\" \r\n      v-model=\"isMobileVersionLocal\"\r\n      :disabled=\"readonly\"\r\n    >Mobile version of website\r\n    </or-checkbox>\r\n  </div>\r\n</or-collapsible>\r\n\r\n\r\n",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".or-collapsible {\n  > .header {\n      \n    .or-collapsible__description {\n      padding-bottom: 0;\n    }\n  }\n  \n  > .body-wrapper {\n    margin-top: -0.5rem;\n    padding-bottom: 0.5rem;\n    \n    > .body {\n      padding: 0 0 0 16px;\n    }\n  }\n}\n\n.ui-select:not(.full-size-dropdown) {\n  .ui-select__dropdown {\n    min-width: 100%;\n    width: auto;\n  }\n  \n  &.or-select-expression .ui-select__dropdown {\n    width: 100%;\n  }\n}\n\n.predefined-format-dropdown.ui-select,\n.predefined-orientation-dropdown.ui-select {\n  .ui-select__dropdown {\n    min-width: 120px;\n    \n    .ui-select__content .ui-select__add {\n      padding: 0 5px;\n    }\n    \n    .ui-select__search .or-text-expression .input-wrapper {\n      padding-right: 5px;\n    }\n    \n    .ui-select__search-input {\n      padding-right: 5px;\n    }\n  }\n}\n\n\n\n.mt-1 {\n  margin-top: 1rem;\n}\n\n.mb-1 {\n  margin-bottom: 1rem;\n}\n\n.file-type-tabs.ui-tabs.flex-box.ui-tabs--type-text {\n  .ui-tabs__header .ui-tabs__header-items {\n    padding: 0;\n  }\n  \n  &.flex-box>.ui-tabs__body>.ui-tab {\n    overflow: visible;\n  }\n  \n  .ui-select .ui-select__content .ui-select__label .ui-select__display {\n    padding: 2px 0 2px 7px;\n    \n    .ui-select__dropdown-button {\n      width: .7em;\n      height: .7em;\n      line-height: 0;\n      \n      svg {\n        width: .7em;\n        height: .7em;\n      }\n    }\n  }\n}\n\n.header-with-dropdown {\n  display: flex;\n  margin-top: 0.5rem;\n  \n  & > div {\n    font-size: 14px;\n    line-height: 27px;\n  }\n  \n  .ui-select {\n    margin-left: 1rem;\n    margin-bottom: 0;\n    \n    .ui-icon {\n      display: flex;\n      height: .6em;\n      width: .6em;\n      \n      svg {\n        height: .6em;\n        width: .6em;\n      }\n    }\n    \n    // &__options {\n    //   min-width: 50px;\n    // }\n    \n    &__content .ui-select__label .ui-select__display {\n      min-height: auto;\n      padding: 2px 5px;\n    }\n    \n    &:not(.is-multiple) .ui-select__display {\n      height: auto;\n    }\n  }\n  \n  &.source-header {\n    margin-bottom: -2rem;\n    \n    .source-header__label {\n      display: flex;\n      align-items: center;\n      font-size: 12px;\n      line-height: 1.3;\n      color: #91969d;\n    }\n    \n    .source-header__type-select.ui-select {\n      .ui-select__display {\n        border: none;\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n.normal-header {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 14px;\n}\n\n.pathFileData {\n  font-size: 12px;\n}\n\n.preview {\n  max-width: 100%;\n  padding-bottom: 15px;\n}\n\n.hide {\n  display: none;\n}\n\n.upload-file {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n  \n  &__text {\n    color: #0F232E;\n    padding-right: 15px;\n    font-weight: normal;\n  }\n  \n  &__folder {\n    white-space: nowrap;\n    overflow: hidden;\n    padding-right: 5px;\n    text-overflow: ellipsis;\n    display: inline-block;\n  }\n  \n  &__button-upload.ui-button.ui-button--size-normal {\n    white-space: nowrap;\n    min-width: 95px;\n    // padding: 0;\n    // border: none;\n  }\n}\n\n.file-type {\n  margin-top: 0.6rem;\n  margin-bottom: 0.6rem;\n}\n\n.ui-radio-group {\n  &__label-text {\n    color: rgb(0, 0, 0);\n  }\n  \n  &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n  &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n    color: rgb(0, 0, 0);\n  }\n}\n\n.file-options {\n  background-color: #f6f6f6;\n  padding: 10px;\n  margin-bottom: 1rem;\n  \n  &__customize {\n    display: flex;\n    justify-content: space-between;\n    \n    > div,\n    > form{\n      width: 33%;\n    }\n    \n    > div:not(:last-child),\n    > form:not(:last-child){\n      margin-right: 5px;\n    }\n    \n    .ui-select:not(.is-disabled) .ui-select__content .ui-select__label .ui-select__display,\n    .or-editable-wrapper {\n      background-color: #fff;\n    }\n  }\n  \n  .file-options__header-with-dropdown,\n  .file-options__image-size {\n    .ui-select:not(.is-disabled) .ui-select__content .ui-select__label .ui-select__display,\n    .or-editable-wrapper {\n      background-color: #fff;\n    }\n  }\n}\n\n.two-in-a-row {\n  display: flex;\n  \n  &__item {\n    width: 50%;\n    \n    &:first-child {\n      padding-right: 5px;\n    }\n    \n    &:nth-child(2) {\n      padding-left: 5px;\n    }\n  }\n}\n\n.image-file-type.ui-radio-group {\n  display: flex;\n  align-items: center;\n  \n  .ui-radio-group__label-text {\n    margin-right: 10px;\n  }\n}"
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "bc727ec7-af7f-43a8-9899-87cde7226c85",
              "data": {
                "open": true,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "f6f70299-b3a4-4864-9396-c1059d19f7bf",
                    "data": {
                      "data": "{\n  \"makeFilePrivate\": false,\n  \"maxNavigationTimeout\": \"`10 sec`\",\n  \"loadWaitingTime\": \"`3 sec`\"\n}",
                      "toJson": "return {\n  \"maxNavigationTimeout\": data.maxNavigationTimeout,\n  \"loadWaitingTime\": data.loadWaitingTime\n}",
                      "validators": "maxNavigationTimeout : {\n  jsExpression: validators.jsExpression,\n  jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n  required: validators.required,\n  custom: (value, ctx) => {\n\t  const containsMergeField = _.isString(value) && validators.validateExpression(value)\n    const regexTextMode = /^\\`.*\\`$/;\n    \n    if (!regexTextMode.test(value)) \n      return validators.jsExpression(value);\n      \n    if (containsMergeField)\n      return true;\n    \n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    \n    if (!_.isNaN(timeoutToNumber) && timeoutToNumber < 0)\n      return false\n    \n    let parsedTimeout;\n    \n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return parsedTimeout >= 1000 && parsedTimeout <= 30*1000;\n    } catch(e) {\n      return false;\n    }\n  }\n},\nloadWaitingTime : {\n  jsExpression: validators.jsExpression,\n  jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n  required: validators.required,\n  custom: (value, ctx) => {\n\t  const containsMergeField = _.isString(value) && validators.validateExpression(value)\n    const regexTextMode = /^\\`.*\\`$/;\n    \n    if (!regexTextMode.test(value)) \n      return validators.jsExpression(value);\n      \n    if (containsMergeField)\n      return true;\n    \n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    \n    if (!_.isNaN(timeoutToNumber) && timeoutToNumber < 0)\n      return false\n    \n    let parsedTimeout;\n    \n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return parsedTimeout >= 1000 && parsedTimeout <= 20*1000;\n    } catch(e) {\n      return false;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :make-file-private.sync=\"schema.makeFilePrivate\"\n  :max-navigation-timeout.sync=\"schema.maxNavigationTimeout\" \n  :load-waiting-time.sync=\"schema.loadWaitingTime\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"   \n  :steps=\"steps\"   \n  :readonly=\"readonly\"   \n  :v=\"$v\"\n></wildcard>",
                      "componentName": "or-wildcard-fsadwrzeoixjbtyvkhqpcglunm",
                      "componentLogic": "{\n  computed : {\n    makeFilePrivateLocal : {\n      get () { return this.makeFilePrivate; },\n      set (value) { this.$emit('update:makeFilePrivate', value); }\n    },\n    maxNavigationTimeoutLocal : {\n      get () { return this.maxNavigationTimeout; },\n      set (value) { this.$emit('update:maxNavigationTimeout', value); }\n    },\n    loadWaitingTimeLocal : {\n      get () { return this.loadWaitingTime; },\n      set (value) { this.$emit('update:loadWaitingTime', value); }\n    },\n  },\n  props : {\n    makeFilePrivate : {\n      type : Boolean,\n      default : false\n    },\n    maxNavigationTimeout: {\n      type: String,\n      default : '`10 sec`'\n    },\n    loadWaitingTime: {\n      type: String,\n      default : '`3 sec`'\n    },\n    mergeFields: Object,\n    stepId : '',\n    steps : '',\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema:{maxNavigationTimeout : {}}}\n      }\n    }\n  }\n}",
                      "componentTemplate": "<!--<or-checkbox -->\n<!--  :disabled=\"readonly\" -->\n<!--  v-model=\"makeFilePrivateLocal\">Encrypt URL to uploaded file-->\n<!--</or-checkbox>-->\n\n<or-text-expression \n  name=\"Timeout\"\n  label=\"Maximum navigation timeout\"\n  help-text=\"Min 1 sec, max 30 sec\" \n  placeholder=\"10 sec\"\n  v-model=\"maxNavigationTimeoutLocal\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :merge-fields=\"mergeFields\"\n  :invalid=\"v.schema.maxNavigationTimeout.$invalid\"\n  @input=\"v.schema.maxNavigationTimeout.$touch()\"\n  :error=\"!v.schema.maxNavigationTimeout.jsExpression ? 'The Timeout must be a valid Javascript code.' : 'Enter a valid timeout.'\" \n  :readonly=\"readonly\"\n></or-text-expression>\n\n<or-text-expression \n  name=\"Load waiting time\"\n  label=\"Time to wait for webpage to load\"\n  help-text=\"Min 1 sec, max 20 sec\" \n  placeholder=\"3 sec\"\n  v-model=\"loadWaitingTimeLocal\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :merge-fields=\"mergeFields\"\n  :invalid=\"v.schema.loadWaitingTime.$invalid\"\n  @input=\"v.schema.loadWaitingTime.$touch()\"\n  :error=\"!v.schema.loadWaitingTime.jsExpression ? 'The time must be a valid Javascript code.' : 'Enter a valid time.'\" \n  :readonly=\"readonly\"\n></or-text-expression>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "d7ee7229-c3e6-4595-a9c3-3da009d6c964",
                    "data": {
                      "label": "Merge field",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "defaultName": "htmlToPdf",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": false
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"url\": \"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  },
                  {
                    "id": "__error__",
                    "label": "error"
                  }
                ],
                "dataOut": "htmlToPdf",
                "newName": "``",
                "filePath": "``",
                "fileType": "pdf",
                "assetsUrl": "",
                "authToken": "",
                "imageSize": "full",
                "topMargin": "``",
                "urlSource": "``",
                "htmlSource": "",
                "leftMargin": "``",
                "marginUnits": "px",
                "pdfViewType": "predefined",
                "rightMargin": "``",
                "bottomMargin": "``",
                "imageQuality": "80",
                "pdfSizeUnits": "px",
                "processError": true,
                "imageFileType": "jpeg",
                "fileSourceType": "url",
                "footerTemplate": "``",
                "headerTemplate": "``",
                "pdfCustomWidth": "``",
                "backgroundToPdf": true,
                "makeFilePrivate": false,
                "pdfCustomHeight": "``",
                "backgroundToImage": false,
                "pdfPredefinedSize": "Letter",
                "websiteResolution": "screen",
                "fullPageScreenShot": false,
                "imageSizeClipWidth": "``",
                "imageSizeClipHeight": "``",
                "websitePrintVersion": false,
                "imageSizeClipXOffset": "``",
                "imageSizeClipYOffset": "``",
                "imageSizeCustomWidth": "``",
                "customResolutionWidth": "``",
                "imageSizeCustomHeight": "``",
                "customResolutionHeight": "``",
                "pdfPredefinedOrientation": "landscape"
              },
              "rawMode": false,
              "version": "08b9f7c2-e673-4e0b-bd2d-eda2fe950f87",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "dbaccacc-ecca-4e19-8443-2cddd33055c0",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": true
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.isMobileVersion = false",
            "version": "0.5.14"
          },
          {
            "sample": null,
            "script": "step.data['loadWaitingTime'] = \"`3 sec`\";\n",
            "version": "0.5.16"
          },
          {
            "sample": null,
            "script": "step.data['pdfPredefinedSize'] = \"`Letter`\";\n",
            "version": "0.5.18"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.19"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.20"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.21"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.22"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.23"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.24"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.25"
          },
          {
            "sample": null,
            "script": "step.data.useFiles = true;",
            "version": "0.5.26"
          }
        ],
        "dateModified": 1602087433390
      },
      {
        "id": "557b57fe-ff2e-486e-ae50-954e6ad128d9",
        "version": "0.5.29",
        "cacheVersion": "e78c3adb-94c6-46a8-b014-6070c9804f1d",
        "originalSource": "5a883f28-33ea-4abd-a993-2463157c3317",
        "label": "Convert HTML into PDF or Image Copy Copy",
        "icon": "convert_html_to_pdf",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "[alpha] Step allows to create PDF or Image based on data at the provided URL or based on HTML code.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Pre-release",
          "HTML",
          "PDF"
        ],
        "recommended": [],
        "tags": [],
        "template": "const Request   = require('or-sdk/request');\nconst request   = new Request(this);\nconst timestring = require('timestring');\n\nconst fileSettings = {\n  assetsUrl : assetsUrl, \n  fileName :  newName.slice(0, 99),\n  filePath : `/${filePath}`\n}\n\nconst fileSource = fileSourceType === 'url' ? urlSource : htmlSource;\n\nif (!fileSource) {\n  throw new Error('The source is not defined');\n}\n\nif (!fileSettings.fileName.replace(/\\s/g, '').length) {\n    throw new Error('File name can\\'t be empty');\n}\n\nif (!filePath.replace(/\\s/g, '').length) {\n    throw new Error('Folder name can\\'t be empty');\n}\n\nconst fileNameRegex = /^([\\w- '!_.*()]+){0,}$/;\nif (!fileNameRegex.test(fileSettings.fileName)) {\n    this.log.warn('File name will be changed according to naming standarts')\n}\n\n// Setting maximum navigation timeout\nlet defaultNavigationTimeout = 5 * 1000; // default value 5s\ntry {\n  defaultNavigationTimeout = timestring(_.isNumber(maxNavigationTimeout) ? `${maxNavigationTimeout} ms` : maxNavigationTimeout, 'ms');\n} catch (error) {\n    throw new Error(`Failed to parse timeout value \"${maxNavigationTimeout}\".`);\n}\n\nif (defaultNavigationTimeout === 0) {\n  throw new Error(`Failed to parse timeout value \"${defaultNavigationTimeout}\".`);\n}\n\nif (defaultNavigationTimeout < 1000 || defaultNavigationTimeout > 30000) {\n  throw new Error(`Timeout value must be in range from 1 second to 30 seconds.`);\n}\n\n// Setting webpage load waiting time\ntry {\n  loadWaitingTime = timestring(_.isNumber(loadWaitingTime) ? `${loadWaitingTime} ms` : loadWaitingTime, 'ms');\n} catch (error) {\n    throw new Error(`Failed to parse webpage load waiting time value \"${loadWaitingTime}\".`);\n}\n\nif (loadWaitingTime === 0) {\n  throw new Error(`Failed to parse webpage load waiting time value \"${loadWaitingTime}\".`);\n}\n\nif (loadWaitingTime < 1000 || loadWaitingTime > 20000) {\n  throw new Error(`Webpage load waiting time value must be in range from 1 second to 20 seconds.`);\n}\n\nlet body = {\n  src: fileSource,\n  //acl: makeFilePrivate ? \"private\" : \"public-read\",\n  // returnBuffer: false,\n  browser: {\n    javaScriptEnabled: true,\n    loadWaitingTime,\n    defaultNavigationTimeout\n  }\n}\n\nif (fileType === 'pdf') {\n  body.pdf = {\n    marginTop    : topMargin ? parseFloat(topMargin) : 0,\n    marginBottom : bottomMargin ? parseFloat(bottomMargin) : 0,\n    marginLeft   : leftMargin ? parseFloat(leftMargin) : 0,\n    marginRight  : rightMargin ? parseFloat(rightMargin) : 0\n  };\n  \n  let verticalMarginSize = body.pdf.marginTop + body.pdf.marginBottom;\n  let horizontalMarginSize = body.pdf.marginLeft + body.pdf.marginRight;\n  \n//   let verticalMarginSize;\n//   let horizontalMarginSize;\n//   switch (marginUnits) {\n//     case 'in':\n//       verticalMarginSize = topMargin + bottomMargin;\n//       horizontalMarginSize = leftMargin + rightMargin;\n//       break;\n      \n//     case 'px':\n//       // 1 inch equals to 96 vertical pixels and to 72 horizontal pixels\n//       verticalMarginSize = topMargin/96 + bottomMargin/96;\n//       horizontalMarginSize = leftMargin/72 + rightMargin/72;\n//       break;\n    \n//     case 'cm':\n//       let inchesInCm = 0.393701;\n//       verticalMarginSize = topMargin*inchesInCm + bottomMargin*inchesInCm;\n//       horizontalMarginSize = leftMargin*inchesInCm + rightMargin*inchesInCm;\n//       break;\n      \n//     case 'mm':\n//       let inchesInMm = 0.0393701;\n//       verticalMarginSize = topMargin*inchesInMm + bottomMargin*inchesInMm;\n//       horizontalMarginSize = leftMargin*inchesInMm + rightMargin*inchesInMm;\n//       break;\n      \n//     default:\n//       break;\n//   }\n\n  if (pdfViewType === 'predefined') {\n    body.pdf.landscape = pdfPredefinedOrientation.toLowerCase() === 'landscape' ? true : false;\n    pdfPredefinedSize = pdfPredefinedSize.toLowerCase();\n    \n    const printFormats = {\n      letter: {\n        width: 8.5,\n        height: 11\n      },\n      legal: {\n        width: 8.5,\n        height: 14\n      },\n      tabloid: {\n        width: 11,\n        height: 17\n      },\n      ledger: {\n        width: 17,\n        height: 11\n      },\n      a0: {\n        width: 33.1,\n        height: 46.8\n      },\n      a1: {\n        width: 23.4,\n        height: 33.1\n      },\n      a2: {\n        width: 16.5,\n        height: 23.4\n      }, \n      a3: {\n        width: 11.7,\n        height: 16.5\n      },\n      a4: {\n        width: 8.27,\n        height: 11.7\n      },\n      a5: {\n        width: 5.83,\n        height: 8.27\n      },\n      a6: {\n        width: 4.13,\n        height: 5.83\n      }\n    }\n\n    if (!printFormats[pdfPredefinedSize]) throw new Error('Invalid pdf format');\n    if (verticalMarginSize >= printFormats[pdfPredefinedSize].height) throw new Error('Page height must be greater than the vertical margin');\n    if (horizontalMarginSize >= printFormats[pdfPredefinedSize].width) throw new Error('Page width must be greater than the horizontal margin');\n\n    body.pdf.paperHeight = printFormats[pdfPredefinedSize].height;\n    body.pdf.paperWidth = printFormats[pdfPredefinedSize].width;\n    \n  } else if (pdfViewType === 'custom') {\n    if (pdfCustomHeight <= 0) throw new Error('Height must be greater than 0');\n    if (pdfCustomWidth <= 0) throw new Error('Width must be greater than 0');\n    \n//     let heightInInches;\n//     let widthInInches;\n//     switch (pdfSizeUnits) {\n//       case 'in':\n//         heightInInches = pdfCustomHeight;\n//         widthInInches = pdfCustomWidth;\n//         break;\n        \n//       case 'px':\n//         // 1 inch equals to 96 vertical pixels and to 72 horizontal pixels\n//         heightInInches = pdfCustomHeight/96;\n//         widthInInches = pdfCustomWidth/72;\n//         break;\n      \n//       case 'cm':\n//         let inchesInCm = 0.393701;\n//         heightInInches = pdfCustomHeight*inchesInCm;\n//         widthInInches = pdfCustomWidth*inchesInCm;\n//         break;\n        \n//       case 'mm':\n//         let inchesInMm = 0.0393701;\n//         heightInInches = pdfCustomHeight*inchesInMm;\n//         widthInInches = pdfCustomWidth*inchesInMm;\n//         break;\n        \n//       default:\n//         break;\n//     }\n\n    if (verticalMarginSize > pdfCustomHeight) throw new Error('Vertical margin is greater than print page height');\n    if (horizontalMarginSize > pdfCustomWidth) throw new Error('Horizontal margin is greater than print page width');\n\n    body.pdf.paperWidth = pdfCustomWidth;\n    body.pdf.paperHeight = pdfCustomHeight;\n  }\n\n  body.pdf.printBackground = backgroundToPdf;\n  body.pdf.displayHeaderFooter = headerTemplate || footerTemplate ? true : false;\n  if (headerTemplate) body.pdf.headerTemplate = headerTemplate;\n  if (footerTemplate) body.pdf.footerTemplate = footerTemplate;\n//   body.browser.emulateMedia = websitePrintVersion ? \"print\" : \"screen\";\n  // body.pdf.margin = {\n  //   top    : topMargin + marginUnits,\n  //   bottom : bottomMargin + marginUnits,\n  //   left   : leftMargin + marginUnits,\n  //   right  : rightMargin + marginUnits\n  // };\n\n} else if (fileType === 'image') {\n//   body.screenshot = {\n//     fullPage: fullPageScreenShot\n//   };\n  body.screenshot = {};\n  body.browser.viewport = {\n    mobile: isMobileVersion\n  };\n  \n  body.browser.userAgent = isMobileVersion ? \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Mobile Safari/537.36\"\n                                            : \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\n\n  if (imageSize === 'custom') {\n    body.resize = {\n      height: parseFloat(imageSizeCustomHeight),\n      width: parseFloat(imageSizeCustomWidth)\n    }\n  } else if (imageSize === 'clip') {\n    if (imageSizeClipHeight <= 0) throw new Error('Clip height must be greater than 0');\n    if (imageSizeClipWidth <= 0) throw new Error('Clip width must be greater than 0');\n    if (imageSizeClipHeight > 10000) throw new Error('Clip height can\\'t be greater than 10000');\n    if (imageSizeClipWidth > 10000) throw new Error('Clip width can\\'t be greater than 10000');\n    \n    body.screenshot.clip = {\n      x      : parseFloat(imageSizeClipXOffset),\n      y      : parseFloat(imageSizeClipYOffset),\n      width  : parseFloat(imageSizeClipWidth),\n      height : parseFloat(imageSizeClipHeight)\n    }\n  }\n\n  if (websiteResolution === 'screen') {\n    body.browser.viewport.width = 1366;\n    // body.browser.viewport.height = 768;\n  } else if (websiteResolution === 'tablet') {\n    body.browser.viewport.width = 768;\n    // body.browser.viewport.height = 1024;\n  } else if (websiteResolution === 'phone') {\n    body.browser.viewport.width = 375;\n    // body.browser.viewport.height = 667;\n  } else if (websiteResolution === 'custom') {\n    if (parseFloat(customResolutionWidth) < 0) throw new Error('Resolution width must be greater than 0');\n    if (parseFloat(customResolutionHeight) < 0) throw new Error('Resolution height width must be greater than 0');\n    if (parseFloat(customResolutionWidth) > 10000) throw new Error('Resolution width can\\'t be greater than 10000');\n    if (parseFloat(customResolutionHeight) > 10000) throw new Error('Resolution height can\\'t be greater than 10000');\n    body.browser.viewport.width = parseFloat(customResolutionWidth);\n    // body.browser.viewport.height = parseFloat(customResolutionHeight);\n  }\n\n  if (imageFileType !== 'png') body.screenshot.quality = parseFloat(imageQuality);\n//   body.screenshot.omitBackground = backgroundToImage;\n}\n\nconst fileExtension = fileType === 'pdf' ? fileType : imageFileType;\n// const converterUrl = `https://toolbox-staging.onereach.ai/convert/${fileSourceType}/${fileType}`;\n// // const converterUrl = `https://70e0772f.ngrok.io/convert/${fileSourceType}/${fileType}`\n// body.filename = `${fileSettings.filePath}${fileSettings.fileName}.${fileExtension}`.substr(1);\nbody.filename = `${fileSettings.fileName}.${fileExtension}`;\nbody.path = fileSettings.filePath;\n\n// const body = {\n//     \"src\": \"https://www.google.com\",\n//     \"filename\": \"converted.png\",\n//     \"browser\" : {\n//         \"javaScriptEnabled\": true,\n//         \"loadWaitingTime\": 1,\n//         \"viewport\": {\n//           \"screenOrientation\": {\n//             \"type\": \"portraitPrimary\",\n//             \"angle\": 45\n//           }\n//         }\n//     }\n// }\n// const converterUrl = `${this.helpers.toolboxUrl}/convert/url`\n\nconst sucessCallbackUrl = await request.post({\n  uri: `${this.helpers.toolboxUrl}/convert/${fileSourceType}`,\n  body,\n  headers: {\n    authorization: authToken\n  },\n  json: true,\n  resolveWithFullResponse: true\n}).then(response => {\n  return response.body.pollUrl;\n}, err => {\n  this.log.error('error', err);\n  throw new Error(err.error);\n});\n\nlet startExecution = new Date();\n\nconst pollingResult = (uri) => {\n  return request.get({\n    uri,\n    headers: {\n      authorization: authToken\n    },\n    json: true,\n    resolveWithFullResponse: true\n  }).then(response => {\n    if (response.statusCode === 202) {\n      let endExecution = new Date() - startExecution;\n      \n      // if (endExecution + 3000 > defaultNavigationTimeout) \n      //   throw new Error('Timeout error.')\n      \n      return Promise.delay(2000)\n        .then(() => pollingResult(uri))\n    } else {\n      return response\n    }\n  }, err => {\n    this.log.error('error', err)\n    throw new Error(err.error);\n  });\n}\n\nconst pollResult = await pollingResult(sucessCallbackUrl);\n\nreturn this.exitStep('next', { \"url\": pollResult.body.url });\n",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "name": "",
            "type": "session"
          },
          "newName": "``",
          "filePath": "``",
          "fileType": "pdf",
          "useFiles": true,
          "assetsUrl": "",
          "authToken": "",
          "imageSize": "full",
          "topMargin": "``",
          "urlSource": "``",
          "htmlSource": "",
          "leftMargin": "``",
          "pdfViewType": "predefined",
          "rightMargin": "``",
          "bottomMargin": "``",
          "imageQuality": "80",
          "pdfSizeUnits": "px",
          "processError": true,
          "imageFileType": "jpeg",
          "fileSourceType": "url",
          "footerTemplate": "``",
          "headerTemplate": "``",
          "pdfCustomWidth": "``",
          "backgroundToPdf": true,
          "isMobileVersion": false,
          "loadWaitingTime": "`3 sec`",
          "makeFilePrivate": false,
          "pdfCustomHeight": "``",
          "backgroundToImage": false,
          "pdfPredefinedSize": "`Letter`",
          "websiteResolution": "screen",
          "fullPageScreenShot": false,
          "imageSizeClipWidth": "``",
          "imageSizeClipHeight": "``",
          "websitePrintVersion": false,
          "imageSizeClipXOffset": "``",
          "imageSizeClipYOffset": "``",
          "imageSizeCustomWidth": "``",
          "maxNavigationTimeout": "`10 sec`",
          "customResolutionWidth": "``",
          "imageSizeCustomHeight": "``",
          "customResolutionHeight": "``",
          "pdfPredefinedOrientation": "`landscape`"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "url": ""
        },
        "help": "",
        "formBuilder": {
          "stepExits": [
            {
              "id": "dbaccacc-ecca-4e19-8443-2cddd33055c0",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "3674f1eb-179f-4c61-9b01-1f472727430d",
              "data": {
                "data": "{\n  \"fileSourceType\": \"url\",\n  \"urlSource\": \"``\",\n  \"htmlSource\": \"\",\n  \"newName\": \"``\",\n  \"filePath\": \"``\",\n  \"fileType\": \"pdf\",\n  \"pdfViewType\": \"predefined\",\n  \"pdfPredefinedSize\": \"`Letter`\",\n  \"pdfPredefinedOrientation\": \"`landscape`\",\n  \"pdfSizeUnits\": \"px\",\n  \"pdfCustomWidth\": \"``\",\n  \"pdfCustomHeight\": \"``\",\n  \"headerTemplate\": \"``\",\n  \"footerTemplate\": \"``\",\n  \"backgroundToPdf\": true,\n  \"topMargin\": \"``\",\n  \"bottomMargin\": \"``\",\n  \"leftMargin\": \"``\",\n  \"rightMargin\": \"``\",\n  \"imageFileType\": \"jpeg\",\n  \"imageQuality\": \"80\",\n  \"imageSize\": \"full\",\n  \"imageSizeCustomWidth\": \"``\",\n  \"imageSizeCustomHeight\": \"``\",\n  \"imageSizeClipWidth\": \"``\",\n  \"imageSizeClipHeight\": \"``\",\n  \"imageSizeClipXOffset\": \"``\",\n  \"imageSizeClipYOffset\": \"``\",\n  \"backgroundToImage\": false,\n  \"websitePrintVersion\": false,\n  \"fullPageScreenShot\": false,\n  \"websiteResolution\": \"screen\",\n  \"customResolutionWidth\": \"``\",\n  \"customResolutionHeight\": \"``\",\n  \"isMobileVersion\": false,\n  \"assetsUrl\": \"\",\n  \"authToken\": \"\",\n  \"useFiles\" : true\n}",
                "toJson": "return {\n  fileSourceType: JSON.stringify(data.fileSourceType),\n  urlSource: data.urlSource,\n  htmlSource: data.htmlSource === '``' ? data.htmlSource : `\\`${data.htmlSource}\\``,\n  // htmlSource: data.htmlSource,\n  useFiles: data.useFiles,\n  newName: data.newName,\n  filePath: data.filePath,\n  fileType: JSON.stringify(data.fileType),\n  pdfViewType: JSON.stringify(data.pdfViewType),\n  pdfPredefinedSize: data.pdfPredefinedSize,\n  pdfPredefinedOrientation: data.pdfPredefinedOrientation,\n  pdfSizeUnits: JSON.stringify(data.pdfSizeUnits),\n  pdfCustomWidth: data.pdfCustomWidth,\n  pdfCustomHeight: data.pdfCustomHeight,\n  headerTemplate: data.headerTemplate,\n  footerTemplate: data.footerTemplate,\n  backgroundToPdf: data.backgroundToPdf,\n  topMargin: data.topMargin,\n  bottomMargin: data.bottomMargin,\n  leftMargin: data.leftMargin,\n  rightMargin: data.rightMargin,\n  imageFileType: JSON.stringify(data.imageFileType),\n  imageQuality: JSON.stringify(data.imageQuality),\n  imageSize: JSON.stringify(data.imageSize),\n  imageSizeCustomWidth: data.imageSizeCustomWidth,\n  imageSizeCustomHeight: data.imageSizeCustomHeight,\n  imageSizeClipWidth: data.imageSizeClipWidth,\n  imageSizeClipHeight: data.imageSizeClipHeight,\n  imageSizeClipXOffset: data.imageSizeClipXOffset,\n  imageSizeClipYOffset: data.imageSizeClipYOffset,\n  backgroundToImage: data.backgroundToImage,\n  websitePrintVersion: data.websitePrintVersion,\n  fullPageScreenShot: data.fullPageScreenShot,\n  websiteResolution: JSON.stringify(data.websiteResolution),\n  customResolutionWidth: data.customResolutionWidth,\n  customResolutionHeight: data.customResolutionHeight,\n  assetsUrl: JSON.stringify(data.assetsUrl), \n  authToken: JSON.stringify(data.authToken), \n  makeFilePrivate: data.makeFilePrivate, \n  processError: data.processError,\n  isMobileVersion: data.isMobileVersion\n}",
                "validators": "urlSource: {\n  custom(value) {\n    if  (this.schema.fileSourceType === 'url') {\n      return value.slice(1, -1).length && validators.jsExpression(value)\n    }\n    return true\n  }\n},\nhtmlSource: {\n  custom(value) {\n    if  (this.schema.fileSourceType === 'html') {\n      // return validators.jsExpression(value);\n      return value.slice(1, -1).length\n    }\n    return true\n  }\n},\nnewName: {\n  custom(value) {\n    return value.slice(1, -1).replace(/\\s/g, '').length && validators.jsExpression(value)\n  }\n},\nfilePath: {\n  custom(value) {\n    return value.slice(1, -1).length && validators.jsExpression(value)\n  }\n},\npdfCustomWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'pdf' && this.schema.pdfViewType === 'custom') {\n      console.log('pdfwdth')\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0.1)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0.1)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\npdfCustomHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'pdf' && this.schema.pdfViewType === 'custom') {\n    console.log('pdfhgh')\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0.1)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)))\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\nheaderTemplate: {\n  custom(value) {\n    return validators.jsExpression(value)\n  }\n},\nfooterTemplate: {\n  custom(value) {\n    return validators.jsExpression(value)\n  }\n},\ntopMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nbottomMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nleftMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nrightMargin: {\n  custom(value) {\n    const containsMergeField = _.isString(value) && validators.validateExpression(value);\n\t  const regexTextMode = /^\\`.*\\`$/;\n\t  \n\t  if (containsMergeField)\n      return true;\n\t  \n    if (!regexTextMode.test(value)) {\n      if (!_.isNaN(value) && _.toNumber(value) < 0)\n        return false;\n      \n      return validators.jsExpression(value);\n    }\n    \n    if (!value.slice(1, -1))\n      return true;\n      \n    if (!_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n      return false;\n    \n    return validators.jsExpression(value)\n  }\n},\nimageSizeCustomWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    \n    return true;\n  }\n},\nimageSizeCustomHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipXOffset: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\nimageSizeClipYOffset: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.imageSize === 'clip') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) < 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) < 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\ncustomResolutionWidth: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.websiteResolution === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},\ncustomResolutionHeight: {\n  custom(value) {\n    if (this.schema.fileType === 'image' && this.schema.websiteResolution === 'custom') {\n  \t  const containsMergeField = _.isString(value) && validators.validateExpression(value);\n  \t  const regexTextMode = /^\\`.*\\`$/;\n  \t  \n      if (containsMergeField)\n        return true;\n\n      if (!regexTextMode.test(value)) {\n        if (!_.isNaN(value) && _.toNumber(value) <= 0)\n          return false;\n        \n        return validators.jsExpressionNonEmptyString(value) && validators.jsExpression(value);\n      }\n\n      if (!value.slice(1, -1).length || !_.toNumber(value.slice(1, -1)) || _.toNumber(value.slice(1, -1)) <= 0)\n        return false;\n  \n      return validators.jsExpression(value);\n    }\n    return true;\n  }\n},",
                "applyToJson": true,
                "formTemplate": "<or-wildcard-ctkiqvdglpyfrsuj \n  :v=\"$v\" \n  :file-source-type.sync=\"schema.fileSourceType\" \n  :url-source.sync=\"schema.urlSource\" \n  :html-source.sync=\"schema.htmlSource\" \n  :new-name.sync=\"schema.newName\" \n  :file-path.sync=\"schema.filePath\" \n  :file-type.sync=\"schema.fileType\" \n  :pdf-view-type.sync=\"schema.pdfViewType\" \n  :pdf-predefined-size.sync=\"schema.pdfPredefinedSize\" \n  :pdf-predefined-orientation.sync=\"schema.pdfPredefinedOrientation\" \n  :pdf-size-units.sync=\"schema.pdfSizeUnits\"\n  :pdf-custom-width.sync=\"schema.pdfCustomWidth\" \n  :pdf-custom-height.sync=\"schema.pdfCustomHeight\" \n  :header-template.sync=\"schema.headerTemplate\" \n  :footer-template.sync=\"schema.footerTemplate\"\n  :background-to-pdf.sync=\"schema.backgroundToPdf\"\n  :top-margin.sync=\"schema.topMargin\"\n  :bottom-margin.sync=\"schema.bottomMargin\"\n  :left-margin.sync=\"schema.leftMargin\"\n  :right-margin.sync=\"schema.rightMargin\"\n  :image-file-type.sync=\"schema.imageFileType\"\n  :image-quality.sync=\"schema.imageQuality\"\n  :image-size.sync=\"schema.imageSize\"\n  :image-size-custom-width.sync=\"schema.imageSizeCustomWidth\"\n  :image-size-custom-height.sync=\"schema.imageSizeCustomHeight\"\n  :image-size-clip-width.sync=\"schema.imageSizeClipWidth\"\n  :image-size-clip-height.sync=\"schema.imageSizeClipHeight\"\n  :image-size-clip-x-offset.sync=\"schema.imageSizeClipXOffset\"\n  :image-size-clip-y-offset.sync=\"schema.imageSizeClipYOffset\"\n  :background-to-image.sync=\"schema.backgroundToImage\"\n  :website-print-version.sync=\"schema.websitePrintVersion\"\n  :full-page-screen-shot.sync=\"schema.fullPageScreenShot\"\n  :website-resolution.sync=\"schema.websiteResolution\"\n  :custom-resolution-width.sync=\"schema.customResolutionWidth\"\n  :custom-resolution-height.sync=\"schema.customResolutionHeight\"\n  :is-mobile-version.sync=\"schema.isMobileVersion\"\n  :process-error.sync=\"schema.processError\" \n  :assets-url.sync=\"schema.assetsUrl\" \n  :auth-token.sync=\"schema.authToken\" \n  :merge-fields=\"mergeFields\"\n  :readonly=\"readonly\" \n  :steps=\"steps\" \n  :step-id=\"stepId\"\n></or-wildcard-ctkiqvdglpyfrsuj>",
                "componentName": "or-wildcard-txhwnliorqzpumyfgvdcejsbak",
                "componentLogic": "{\n  data() {\n    return {\n      pathFileData: [],\n      pdfCustomWidthError: '',\n      pdfCustomHeightError: '',\n      imageSizeCustomWidthError: '',\n      imageSizeCustomHeightError: '',\n      imageSizeClipWidthError: '',\n      imageSizeClipHeightError: '',\n      imageSizeClipXOffsetError: '',\n      imageSizeClipYOffsetError: '',\n      customResolutionWidthError: '',\n      customResolutionHeightError: '',\n      topMarginError: '',\n      bottomMarginError: '',\n      leftMarginError: '',\n      rightMarginError: '',\n      fileSourceTypeOptions: [\n        {\n            label : 'URL',\n            value : 'url'\n        },\n        {\n            label : 'HTML code',\n            value : 'html'\n        }\n      ],\n      fileTypeOptions: [\n        {\n            label : 'PDF',\n            value : 'pdf',\n            checked: 'checked'\n        },\n        {\n            label : 'Image',\n            value : 'image'\n        }\n      ],\n      pdfViewTypeOptions: [\n        {\n            label : 'Predefined',\n            value : 'predefined'\n        },\n        {\n            label : 'Custom',\n            value : 'custom'\n        }\n      ],\n      pdfPredefinedSizeOptions: [\n        {\n            label : 'Letter',\n            value : '`Letter`'\n        },\n        {\n            label : 'Legal',\n            value : '`Legal`'\n        },\n        {\n            label : 'Tabloid',\n            value : '`Tabloid`'\n        },\n        {\n            label : 'Ledger',\n            value : '`Ledger`'\n        },\n        {\n            label : 'A0',\n            value : '`A0`'\n        },\n        {\n            label : 'A1',\n            value : '`A1`'\n        },\n        {\n            label : 'A2',\n            value : '`A2`'\n        },\n        {\n            label : 'A3',\n            value : '`A3`'\n        },\n        {\n            label : 'A4',\n            value : '`A4`'\n        },\n        {\n            label : 'A5',\n            value : '`A5`'\n        },\n        {\n            label : 'A6',\n            value : '`A6`'\n        }\n      ],\n      pdfPredefinedOrientationOptions: [\n        {\n            label : 'Landscape',\n            value : '`landscape`'\n        },\n        {\n            label : 'Portrait',\n            value : '`portrait`'\n        }\n      ],\n      imageFileTypeOptions: [\n        {\n            label : 'JPEG',\n            value : 'jpeg'\n        },\n        {\n            label : 'PNG',\n            value : 'png'\n        }\n      ],\n      imageQualityOptions: [],\n      imageSizeOptions: [\n        {\n            label : 'Full',\n            value : 'full'\n        },\n        // {\n        //     label : 'Custom',\n        //     value : 'custom'\n        // },\n        {\n            label : 'Clip',\n            value : 'clip'\n        }\n      ],\n      measurementUnitsOptions : [ 'px', 'in', 'cm', 'mm' ],\n      websiteResolutionOptions : [\n        {\n            label : 'Large screen (1366x768)',\n            value : 'screen'\n        },\n        {\n            label : 'Tablet (768x1024)',\n            value : 'tablet'\n        },\n        {\n            label : 'Phone (375x667)',\n            value : 'phone'\n        },\n        {\n            label : 'Custom',\n            value : 'custom'\n        }\n      ]\n    }\n  },\n  \n  computed : {\n    fileSourceTypeLocal : {\n      get () { return this.fileSourceType; },\n      set (value) { this.$emit('update:fileSourceType', value); }\n    },\n    urlSourceLocal : {\n      get () { return this.urlSource; },\n      set (value) { this.$emit('update:urlSource', value); }\n    },\n    htmlSourceLocal : {\n      get () { return this.htmlSource; },\n      set (value) { this.$emit('update:htmlSource', value); }\n    },\n    newNameLocal : {\n      get () { return this.newName; },\n      set (value) { this.$emit('update:newName', value); }\n    },\n    filePathLocal: {\n      get () { return this.filePath; },\n      set (value) {\n        this.$emit('update:filePath', value);\n      }\n    },\n    fileNameHelpText () {\n      return `File name can contain only letters, numbers, spaces and special characters \"!\", \"-\", \"_\", \".\", \"*\", \"'\", \"(\", \")\". Other characters will be deleted.`;\n    },\n    filePathHelpText () {\n      return 'Folder name can contain only letters, numbers, hyphens, underscores and spaces.';\n    },\n    fileTypeLocal : {\n      get () { return this.fileType; },\n      set (value) { this.$emit('update:fileType', value); }\n    },\n    pdfViewTypeLocal : {\n      get () { return this.pdfViewType; },\n      set (value) { this.$emit('update:pdfViewType', value); }\n    },\n    pdfPredefinedSizeLocal : {\n      get () { return this.pdfPredefinedSize; },\n      set (value) { this.$emit('update:pdfPredefinedSize', value); }\n    },\n    pdfPredefinedOrientationLocal : {\n      get () { return this.pdfPredefinedOrientation; },\n      set (value) { this.$emit('update:pdfPredefinedOrientation', value); }\n    },\n    pdfSizeUnitsLocal : {\n      get () { return this.pdfSizeUnits; },\n      set (value) { this.$emit('update:pdfSizeUnits', value); }\n    },\n    pdfCustomWidthLocal : {\n      get () { \n        if (this.v.schema.pdfCustomWidth.$error) this.pdfCustomWidthError = this.generateNumericInputError(this.pdfCustomWidth, true, 'pdfCustomSize');\n        return this.pdfCustomWidth; },\n      set (value) { this.$emit('update:pdfCustomWidth', value); }\n    },\n    pdfCustomHeightLocal : {\n      get () { \n        if (this.v.schema.pdfCustomHeight.$error) this.pdfCustomHeightError = this.generateNumericInputError(this.pdfCustomHeight, 'pdfCustomSize');\n        return this.pdfCustomHeight;\n      },\n      set (value) { this.$emit('update:pdfCustomHeight', value); }\n    },\n    headerTemplateLocal : {\n      get () { return this.headerTemplate; },\n      set (value) { this.$emit('update:headerTemplate', value); }\n    },\n    footerTemplateLocal : {\n      get () { return this.footerTemplate; },\n      set (value) { this.$emit('update:footerTemplate', value); }\n    },\n    backgroundToPdfLocal : {\n      get () { return this.backgroundToPdf; },\n      set (value) { this.$emit('update:backgroundToPdf', value); }\n    },\n    // marginUnitsLocal : {\n    //   get () { return this.marginUnits; },\n    //   set (value) { this.$emit('update:marginUnits', value); }\n    // },\n    topMarginLocal : {\n      get () { \n        if (this.v.schema.topMargin.$error) this.topMarginError = this.generateNumericInputError(this.topMargin);\n        return this.topMargin;\n      },\n      set (value) { this.$emit('update:topMargin', value); }\n    },\n    bottomMarginLocal : {\n      get () { \n        if (this.v.schema.bottomMargin.$error) this.bottomMarginError = this.generateNumericInputError(this.bottomMargin);\n        return this.bottomMargin;\n      },\n      set (value) { this.$emit('update:bottomMargin', value); }\n    },\n    leftMarginLocal : {\n      get () { \n        if (this.v.schema.leftMargin.$error) this.leftMarginError = this.generateNumericInputError(this.leftMargin);\n        return this.leftMargin;\n      },\n      set (value) { this.$emit('update:leftMargin', value); }\n    },\n    rightMarginLocal : {\n      get () { \n        if (this.v.schema.rightMargin.$error) this.rightMarginError = this.generateNumericInputError(this.rightMargin);\n        return this.rightMargin;\n      },\n      set (value) { this.$emit('update:rightMargin', value); }\n    },\n    imageFileTypeLocal : {\n      get () { return this.imageFileType; },\n      set (value) { this.$emit('update:imageFileType', value);\n      }\n    },\n    imageQualityLocal : {\n      get () { return this.imageQuality; },\n      set (value) { this.$emit('update:imageQuality', value);\n      }\n    },\n    imageSizeLocal : {\n      get () { return this.imageSize; },\n      set (value) { \n        if (value === 'clip') this.fullPageScreenShotLocal = false;\n        this.$emit('update:imageSize', value);\n      }\n    },\n    imageSizeCustomWidthLocal : {\n      get () { \n        if (this.v.schema.imageSizeCustomWidth.$error) this.imageSizeCustomWidthError = this.generateNumericInputError(this.imageSizeCustomWidth, true);\n        return this.imageSizeCustomWidth;\n      },\n      set (value) { this.$emit('update:imageSizeCustomWidth', value);\n      }\n    },\n    imageSizeCustomHeightLocal : {\n      get () { \n        if (this.v.schema.imageSizeCustomHeight.$error) this.imageSizeCustomHeightError = this.generateNumericInputError(this.imageSizeCustomHeight, true);\n        return this.imageSizeCustomHeight;\n      },\n      set (value) { this.$emit('update:imageSizeCustomHeight', value);\n      }\n    },\n    imageSizeClipWidthLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipWidth.$error) this.imageSizeClipWidthError = this.generateNumericInputError(this.imageSizeClipWidth, true);\n        return this.imageSizeClipWidth;\n      },\n      set (value) { this.$emit('update:imageSizeClipWidth', value);\n      }\n    },\n    imageSizeClipHeightLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipHeight.$error) this.imageSizeClipHeightError = this.generateNumericInputError(this.imageSizeClipHeight, true);\n        return this.imageSizeClipHeight;\n      },\n      set (value) { this.$emit('update:imageSizeClipHeight', value);\n      }\n    },\n    imageSizeClipXOffsetLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipXOffset.$error) this.imageSizeClipXOffsetError = this.generateNumericInputError(this.imageSizeClipXOffset, true, 'imgOffset');\n        return this.imageSizeClipXOffset;\n      },\n      set (value) { this.$emit('update:imageSizeClipXOffset', value);\n      }\n    },\n    imageSizeClipYOffsetLocal : {\n      get () { \n        if (this.v.schema.imageSizeClipYOffset.$error) this.imageSizeClipYOffsetError = this.generateNumericInputError(this.imageSizeClipYOffset, true, 'imgOffset');\n        return this.imageSizeClipYOffset;\n      },\n      set (value) { this.$emit('update:imageSizeClipYOffset', value); }\n    },\n    backgroundToImageLocal : {\n      get () { return this.backgroundToImage; },\n      set (value) { this.$emit('update:backgroundToImage', value); }\n    },\n    // filePathComp() {\n    //   return _.get(this.pathFileData, '[0].data.Key', '').replace(/.+?(?=\\/)/, '');\n    // },\n    websitePrintVersionLocal : {\n      get () { return this.websitePrintVersion; },\n      set (value) { this.$emit('update:websitePrintVersion', value); }\n    },\n    fullPageScreenShotLocal : {\n      get () { return this.fullPageScreenShot; },\n      set (value) { \n        if (value && this.websiteResolutionLocal === 'custom') {\n          this.v.schema.customResolutionHeight.$touch()\n          this.customResolutionHeightLocal = '``';\n        }\n        this.$emit('update:fullPageScreenShot', value); \n      }\n    },\n    websiteResolutionLocal : {\n      get () { return this.websiteResolution; },\n      set (value) { \n        if (this.fullPageScreenShotLocal && value === 'custom') {\n          this.customResolutionHeightLocal = '``';\n        }\n\n        this.isMobileVersionLocal = value === 'phone' ? true : false;\n\n        this.$emit('update:websiteResolution', value); \n      }\n    },\n    customResolutionWidthLocal : {\n      get () { \n        if (this.v.schema.customResolutionWidth.$error) this.customResolutionWidthError = this.generateNumericInputError(this.customResolutionWidth, true);\n        return this.customResolutionWidth;\n      },\n      set (value) { this.$emit('update:customResolutionWidth', value); }\n    },\n    customResolutionHeightLocal : {\n      get () { \n        if (this.v.schema.customResolutionHeight.$error) this.customResolutionHeightError = this.generateNumericInputError(this.customResolutionHeight, true);\n        return this.customResolutionHeight;\n      },\n      set (value) { this.$emit('update:customResolutionHeight', value); }\n    },\n    isMobileVersionLocal : {\n      get () { return this.isMobileVersion; },\n      set (value) { this.$emit('update:isMobileVersion', value); }\n    }\n  },\n  \n  mounted () {\n    this.$emit('update:assetsUrl', `${this.$flow.customDataApiUrl}/api/v1/assets`);\n    this.$emit('update:authToken', this.$settings.token);\n\n    this.getImageQualityOptions();\n  },\n  \n  props : {\n    fileSourceType : {\n      type : String,\n      default : 'url'\n    },\n    urlSource : {\n      type : String,\n      default : '``'\n    },\n    htmlSource : {\n      type : String,\n      default : ''\n    },\n    newName : {\n      type : String,\n      default : '``'\n    },\n    filePath : {\n      type: 'String',\n      default: ''\n    },\n    fileType : {\n      type : String,\n      default : 'pdf'\n    },\n    pdfViewType : {\n      type : String,\n      default : 'predefined'\n    },\n    pdfPredefinedSize : {\n      type : String,\n      default : '`Letter`'\n    },\n    pdfPredefinedOrientation : {\n      type : String,\n      default : '`landscape`'\n    },\n    pdfSizeUnits : {\n      type : String,\n      default : 'px'\n    },\n    pdfCustomWidth : {\n      type : String,\n      default : '``'\n    },\n    pdfCustomHeight : {\n      type : String,\n      default : '``'\n    },\n    headerTemplate : {\n      type : String,\n      default : '``'\n    },\n    footerTemplate : {\n      type : String,\n      default : '``'\n    },\n    backgroundToPdf : {\n      type : Boolean,\n      default : true\n    },\n    // marginUnits : {\n    //   type : String,\n    //   default : 'px'\n    // },\n    topMargin : {\n      type : String,\n      default : '``'\n    },\n    bottomMargin : {\n      type : String,\n      default : '``'\n    },\n    leftMargin : {\n      type : String,\n      default : '``'\n    },\n    rightMargin : {\n      type : String,\n      default : '``'\n    },\n    imageFileType : {\n      type : String,\n      default : 'jpeg'\n    },\n    imageQuality : {\n      type : String,\n      default : '80'\n    },\n    imageSize : {\n      type : String,\n      default : 'full'\n    },\n    imageSizeCustomWidth : {\n      type : String,\n      default : '``'\n    },\n    imageSizeCustomHeight : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipWidth : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipHeight : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipXOffset : {\n      type : String,\n      default : '``'\n    },\n    imageSizeClipYOffset : {\n      type : String,\n      default : '``'\n    },\n    backgroundToImage : {\n      type : Boolean,\n      default : false\n    },\n    websitePrintVersion : {\n      type : Boolean,\n      default : false\n    },\n    fullPageScreenShot : {\n      type : Boolean,\n      default : false\n    },\n    websiteResolution : {\n      type : String,\n      default : 'screen'\n    },\n    customResolutionWidth : {\n      type : String,\n      default : '``'\n    },\n    customResolutionHeight : {\n      type : String,\n      default : '``'\n    },\n    isMobileVersion : {\n      type : Boolean,\n      default : false\n    },\n    assetsUrl : {\n      type : String,\n      default : ''\n    },\n    authToken : {\n      type : String,\n      default : ''\n    },\n    steps : '',\n    stepId : '',\n    processError : true,\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema: {htmlSource: {}}};\n      }\n    },\n  },\n  methods: {\n    openModal (ref) {\n        this.$refs[ref].open();\n    },\n    \n    closeModal (ref) {\n        this.$refs[ref].close();\n    },\n    \n    onFilePathInput () {\n      this.v.schema.filePath.$touch();\n      this.pathFileData = [];\n    },\n    \n    changeFileType (tabId) {\n      this.fileTypeLocal = tabId;\n    },\n        \n    getImageQualityOptions () {\n      for ( let i = 0; i <= 100; i += 1) {\n        this.imageQualityOptions.push({\n          value: i.toString(),\n          label: `${i}%`\n        })\n      };\n    },\n    \n    generateNumericInputError (value, isRequired = false, type = '') {\n      const containsMergeField = _.isString(value) && validators.validateExpression(value);\n      const regexTextMode = /^\\`.*\\`$/;\n      let errorText = '';\n      \n      if (regexTextMode.test(value)) {\n        if (isRequired && !value.slice(1, -1).length) {\n          errorText = 'The value is required';\n        } else if (isNaN(value.slice(1, -1))) {\n          errorText = 'Invalid number';\n        } else if (type === 'pdfCustomSize' && _.toNumber(value.slice(1, -1)) < 0.1) {\n          // if (this.pdfSizeUnits === 'px' && parseInt(value.slice(1, -1)) < 10) {\n          //   errorText = 'The value should be 10 pixels or greater.';\n          // } else if (this.pdfSizeUnits === 'in' && parseInt(value.slice(1, -1)) < 0.1) {\n          //   errorText = 'The value should be 0.1 inch or greater.';\n          // } else if (this.pdfSizeUnits === 'cm' && parseInt(value.slice(1, -1)) < 0.5) {\n          //   errorText = 'The value should be 0.5 centimeters or greater.';\n          // } else if (this.pdfSizeUnits === 'mm' && parseInt(value.slice(1, -1)) < 5) {\n          //   errorText = 'The value should be 5 millimeters or greater.';\n          // }\n          errorText = 'The value should be 0.1 inch or greater.';\n        } else if (type === 'imgOffset' && _.toNumber(value.slice(1, -1)) < 0) {\n          errorText = 'The value should be 0 or greater.';\n        } else if (!type.length && _.toNumber(value.slice(1, -1)) <= 0) {\n          errorText = 'The value should be a positive number.';\n        }\n      } else {\n        if (isRequired && !value.length) {\n          errorText = 'The value is required';\n        } else if (!validators.jsExpression(value)) {\n          errorText = 'Please enter a valid JavaScript expression.'\n        } else if (isNaN(value)) {\n          errorText = 'Invalid number';\n        } else if (type === 'pdfCustomSize' && _.toNumber(value) < 0.1) {\n          errorText = 'The value should be 0.1 inch or greater.';\n        } else if (type === 'imgOffset' && _.toNumber(value) < 0) {\n          errorText = 'The value should be 0 or greater.';\n        } else if (!type.length && _.toNumber(value) <= 0) {\n          errorText = 'The value should be a positive number.';\n        }\n      }\n\n      return errorText;\n    }\n  },\n  \n  watch: {\n    pathFileData (pathFileData) {\n      if (!pathFileData || !pathFileData.length) return;\n      const path =  _.get(pathFileData, '[0].key', '');\n      this.filePathLocal = '`' + path + '`';\n    }\n    // filePathComp(newPath) {\n    //   this.$emit('update:filePath', newPath);\n    // }\n  }\n}",
                "componentTemplate": "<or-collapsible title=\"Input options\"\r\n                :invalid=\"v.schema.urlSource.$error || v.schema.htmlSource.$error\"\r\n                open\r\n>  \r\n  <div class=\"header-with-dropdown source-header\">\r\n    <div class=\"source-header__label\">Source</div> \r\n    <or-select\r\n      name=\"fileSourceType\"\r\n      placeholder=\"Select source\"\r\n      :options=\"fileSourceTypeOptions\"\r\n      v-model=\"fileSourceTypeLocal\"\r\n      :disabled=\"readonly\"\r\n      class=\"source-header__type-select\"\r\n    >\r\n    </or-select>\r\n  </div>\r\n  <or-text-expression v-if=\"fileSourceType === 'url'\"\r\n    v-model=\"urlSourceLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"!urlSourceLocal.slice(1, -1).length ? 'The source is required.' : 'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.urlSource.$error\"\r\n    @input=\"v.schema.urlSource.$touch()\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  <or-code v-else\r\n    v-model=\"htmlSourceLocal\"\r\n    :readonly=\"readonly\"\r\n    mode=\"html\"\r\n    :error=\"!htmlSourceLocal.slice(1, -1).length ? 'The source is required.' : 'The value is not a valid HTML code.'\"\r\n    :invalid=\"v.schema.htmlSource.$error\"\r\n    @input=\"v.schema.htmlSource.$touch()\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-code>\r\n</or-collapsible>\r\n\r\n<or-collapsible title=\"Output options\"\r\n                :invalid=\"v.schema.newName.$error || v.schema.pdfCustomWidth.$error || v.schema.pdfCustomHeight.$error || v.schema.imageSizeCustomWidth.$error || v.schema.imageSizeCustomHeight.$error || v.schema.imageSizeClipWidth.$error || v.schema.imageSizeClipHeight.$error || v.schema.imageSizeClipXOffset.$error || v.schema.imageSizeClipYOffset.$error\"\r\n                open\r\n>\r\n  <or-text-expression \r\n    label=\"Name of result file\"\r\n    v-model=\"newNameLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"!newNameLocal.slice(1, -1).replace(/\\s/g, '').length? 'Name is required.' : 'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.newName.$error\"\r\n    @input=\"v.schema.newName.$touch()\"\r\n    :help-text=\"fileNameHelpText\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  \r\n  <or-text-expression \r\n    label=\"Upload to\"\r\n    v-model=\"filePathLocal\"\r\n    :readonly=\"readonly\"\r\n    placeholder=\"/folder-name/\"\r\n    :help-text=\"filePathHelpText\"\r\n    :error=\"!filePathLocal.slice(1, -1).length ? 'Value is required.' : 'Value is not a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.filePath.$error\"\r\n    @input=\"onFilePathInput\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  >  </or-text-expression>\r\n  \r\n  <!--<div class=\"path-helptext\"> {{filePathHelpText}} </div>-->\r\n  \r\n  <div class=\"upload-file\">\r\n    <!--<div class=\"upload-file__folder\"><b class=\"upload-file__text\">Upload to</b> ...<span class=\"upload-file__path\">{{ filePath }}</span></div>-->\r\n    <or-button\r\n      @click=\"openModal('assetPickerModal')\"\r\n      type=\"secondary\"\r\n      color=\"primary\"\r\n      class=\"upload-file__button-upload\"\r\n      :disabled=\"readonly\"\r\n    >\r\n      Choose folder\r\n    </or-button>\r\n  </div>\r\n  <or-modal \r\n    ref=\"assetPickerModal\" \r\n    class=\"or-ui-modal-container\" \r\n    title=\"Choose folder\" \r\n    size=\"large\">\r\n    <div slot=\"default\">\r\n        <div \r\n          class=\"Assets\" \r\n          v-if=\"assetsUrl\"\r\n        >\r\n          <p>Click on an file to use it.</p>\r\n          <or-asset-manager \r\n              :auth-token=\"$settings.token\" \r\n              :assets-url=\"`${this.$flow.customDataApiUrl}/api/v1/assets`\"\r\n              :files-api-url=\"$flow.filesApiUrl\"\r\n              folder-mode\r\n              :allow-files-and-data=\"false\"\r\n              v-model=\"pathFileData\"\r\n          ></or-asset-manager>\r\n        </div>\r\n        <div class=\"EndpointSetup\" v-if=\"!assetsUrl\">\r\n            <span class=\"AuthTokenFound\">{{authToken\r\n                ? 'Authorization token found'\r\n                : 'Could not find authorization token'}}</span>\r\n            <or-button :disabled=\"!assetsUrl\" icon=\"refresh\"\r\n                       @click.stop.prevent=\"GetAssets\">Retry\r\n            </or-button>\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\">\r\n        <or-button type=\"primary\" @click=\"closeModal('assetPickerModal')\">Done</or-button>\r\n    </div>\r\n  </or-modal>\r\n  \r\n  <or-tabs\r\n    fullwidth\r\n    @tab-change=\"changeFileType\" \r\n    class=\"file-type-tabs flex-box\"\r\n  >\r\n    <or-tab \r\n      title=\"PDF\"\r\n      id=\"pdf\"\r\n      :selected=\"fileType === 'pdf'\"\r\n    >\r\n      <div class=\"file-options\">\r\n          <div class=\"header-with-dropdown file-options__header-with-dropdown\">\r\n            <div>Select size and format: </div>\r\n            <!--<or-select-->\r\n            <!--  v-if=\"pdfViewType === 'custom'\"-->\r\n            <!--  name=\"pdfSizeUnits\"-->\r\n            <!--  placeholder=\"Select units\"-->\r\n            <!--  :options=\"measurementUnitsOptions\"-->\r\n            <!--  v-model=\"pdfSizeUnitsLocal\"-->\r\n            <!--  :disabled=\"readonly\">-->\r\n            <!--</or-select>-->\r\n          </div>\r\n          \r\n          <div class=\"file-options__customize\">\r\n            <or-select\r\n              name=\"pdfViewType\"\r\n              placeholder=\"Select format type\"\r\n              label=\"View\"\r\n              :options=\"pdfViewTypeOptions\"\r\n              v-model=\"pdfViewTypeLocal\"\r\n              :disabled=\"readonly\"\r\n              class=\"file-format\"\r\n            >\r\n            </or-select>\r\n\r\n            <or-select-expression\r\n              v-if=\"pdfViewType === 'predefined'\"\r\n              placeholder=\"Select format\"\r\n              label=\"Size\"\r\n              :options.sync=\"pdfPredefinedSizeOptions\"\r\n              v-model=\"pdfPredefinedSizeLocal\"\r\n              has-search extendable-options only-merge-field\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" :step-id=\"stepId\"\r\n              :disabled=\"readonly\"\r\n              class=\"predefined-format-dropdown\"\r\n            ></or-select-expression>\r\n            \r\n            <or-select-expression\r\n              v-if=\"pdfViewType === 'predefined'\"\r\n              placeholder=\"Select orientation\"\r\n              label=\"Orientation\"\r\n              :options.sync=\"pdfPredefinedOrientationOptions\"\r\n              v-model=\"pdfPredefinedOrientationLocal\"\r\n              has-search extendable-options only-merge-field\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" :step-id=\"stepId\"\r\n              :disabled=\"readonly\"\r\n              class=\"predefined-orientation-dropdown\"\r\n            ></or-select-expression>\r\n            \r\n            <or-text-expression \r\n              v-if=\"pdfViewType === 'custom'\"\r\n              label=\"Width\"\r\n              v-model=\"pdfCustomWidthLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"pdfCustomWidthError\"\r\n              :invalid=\"v.schema.pdfCustomWidth.$error\"\r\n              @input=\"v.schema.pdfCustomWidth.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              v-if=\"pdfViewType === 'custom'\"\r\n              label=\"Height\"\r\n              v-model=\"pdfCustomHeightLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"pdfCustomHeightError\"\r\n              :invalid=\"v.schema.pdfCustomHeight.$error\"\r\n              @input=\"v.schema.pdfCustomHeight.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n            ></or-text-expression>\r\n          </div>\r\n          \r\n          <or-checkbox\r\n            v-model=\"backgroundToPdfLocal\"\r\n            :disabled=\"readonly\"\r\n          >Save background to pdf\r\n          </or-checkbox>\r\n      </div>  \r\n      \r\n      \r\n    </or-tab>\r\n    \r\n    <or-tab \r\n      title=\"Image\"\r\n      id=\"image\"\r\n      :selected=\"fileType === 'image'\"\r\n    >\r\n      <div class=\"file-options\">\r\n        <div class=\"header-with-dropdown file-options__header-with-dropdown\">\r\n          <div>Image settings: </div>\r\n        </div>\r\n        \r\n        <div class=\"file-options__customize\">\r\n          <or-select\r\n            name=\"imageFileType\"\r\n            label=\"Type:\"\r\n            placeholder=\"Select type\"\r\n            :options=\"imageFileTypeOptions\"\r\n            v-model=\"imageFileTypeLocal\"\r\n            :disabled=\"readonly\"\r\n            class=\"image-file-type\"\r\n          >\r\n          </or-select>\r\n          \r\n          <or-select\r\n            name=\"imageSize\"\r\n            label=\"Size:\"\r\n            placeholder=\"Select size\"\r\n            :options=\"imageSizeOptions\"\r\n            v-model=\"imageSizeLocal\"\r\n            :disabled=\"readonly\"\r\n            class=\"picture-size-dropdown\"\r\n          ></or-select>\r\n          \r\n          <or-select\r\n            name=\"imageQuality\"\r\n            label=\"Quality\"\r\n            :options=\"imageQualityOptions\"\r\n            v-model=\"imageQualityLocal\"\r\n            :disabled=\"readonly || (imageFileTypeLocal === 'png')\"\r\n            :steps=\"steps\" \r\n            :step-id=\"stepId\"\r\n            has-search\r\n          ></or-select>\r\n        </div>\r\n        \r\n        <!--<div v-if=\"imageSize === 'custom'\"-->\r\n        <!--     class=\"file-options__image-size\">-->\r\n        <!--  <or-text-expression -->\r\n        <!--    label=\"Width\"-->\r\n        <!--    v-model=\"imageSizeCustomWidthLocal\"-->\r\n        <!--    :readonly=\"readonly\"-->\r\n        <!--    :error=\"imageSizeCustomWidthError\"-->\r\n        <!--    :invalid=\"v.schema.imageSizeCustomWidth.$error\"-->\r\n        <!--    @input=\"v.schema.imageSizeCustomWidth.$touch()\"-->\r\n        <!--    :steps=\"steps\" -->\r\n        <!--    :step-id=\"stepId\">-->\r\n        <!--  </or-text-expression>-->\r\n          \r\n        <!--  <or-text-expression -->\r\n        <!--    label=\"Height\"-->\r\n        <!--    v-model=\"imageSizeCustomHeightLocal\"-->\r\n        <!--    :readonly=\"readonly\"-->\r\n        <!--    :error=\"imageSizeCustomHeightError\"-->\r\n        <!--    :invalid=\"v.schema.imageSizeCustomHeight.$error\"-->\r\n        <!--    @input=\"v.schema.imageSizeCustomHeight.$touch()\"-->\r\n        <!--    :steps=\"steps\" -->\r\n        <!--    :step-id=\"stepId\">-->\r\n        <!--  </or-text-expression>-->\r\n        <!--</div>-->\r\n        \r\n        <div v-if=\"imageSize === 'clip'\"\r\n             class=\"file-options__image-size\"\r\n        >\r\n          <div class=\"two-in-a-row\">\r\n            <or-text-expression \r\n              label=\"Width\"\r\n              v-model=\"imageSizeClipWidthLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipWidthError\"\r\n              :invalid=\"v.schema.imageSizeClipWidth.$error\"\r\n              @input=\"v.schema.imageSizeClipWidth.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n              class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              label=\"Height\"\r\n              v-model=\"imageSizeClipHeightLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipHeightError\"\r\n              :invalid=\"v.schema.imageSizeClipHeight.$error\"\r\n              @input=\"v.schema.imageSizeClipHeight.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n              class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n          </div>\r\n          \r\n          <div class=\"two-in-a-row\">\r\n            <or-text-expression \r\n              label=\"X-offset\"\r\n              v-model=\"imageSizeClipXOffsetLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipXOffsetError\"\r\n              :invalid=\"v.schema.imageSizeClipXOffset.$error\"\r\n              @input=\"v.schema.imageSizeClipXOffset.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n               class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n            \r\n            <or-text-expression \r\n              label=\"Y-offset\"\r\n              v-model=\"imageSizeClipYOffsetLocal\"\r\n              :readonly=\"readonly\"\r\n              :error=\"imageSizeClipYOffsetError\"\r\n              :invalid=\"v.schema.imageSizeClipYOffset.$error\"\r\n              @input=\"v.schema.imageSizeClipYOffset.$touch()\"\r\n              :merge-fields=\"mergeFields\"\r\n              :steps=\"steps\" \r\n              :step-id=\"stepId\"\r\n               class=\"two-in-a-row__item\"\r\n            ></or-text-expression>\r\n          </div>\r\n        </div>\r\n        \r\n        <!--<or-checkbox-->\r\n        <!--  v-model=\"backgroundToImageLocal\"-->\r\n        <!--  :disabled=\"readonly\">-->\r\n        <!--  Omit background-->\r\n        <!--</or-checkbox>-->\r\n      </div>\r\n    </or-tab>\r\n  </or-tabs>\r\n</or-collapsible>\r\n\r\n<!--<or-collapsible title=\"Header & footer templates\"   -->\r\n<!--                v-if=\"fileType === 'pdf'\"-->\r\n<!--                :invalid=\"v.schema.headerTemplate.$error || v.schema.footerTemplate.$error\"-->\r\n<!--                open></or-collapsible>-->\r\n\r\n\r\n<!--  <or-text-expression -->\r\n<!--    label=\"Header\"-->\r\n<!--    v-model=\"headerTemplateLocal\"-->\r\n<!--    :readonly=\"readonly\"-->\r\n<!--    :error=\"'Please enter a valid JavaScript expression.'\"-->\r\n<!--    :invalid=\"v.schema.headerTemplate.$error\"-->\r\n<!--    @input=\"v.schema.headerTemplate.$touch()\"-->\r\n<!--    :steps=\"steps\" -->\r\n<!--    :step-id=\"stepId\">-->\r\n<!--  </or-text-expression>-->\r\n  \r\n<!--  <or-text-expression -->\r\n<!--    label=\"Footer\"-->\r\n<!--    v-model=\"footerTemplateLocal\"-->\r\n<!--    :readonly=\"readonly\"-->\r\n<!--    :error=\"'Please enter a valid JavaScript expression.'\"-->\r\n<!--    :invalid=\"v.schema.footerTemplate.$error\"-->\r\n<!--    @input=\"v.schema.footerTemplate.$touch()\"-->\r\n<!--    :steps=\"steps\" -->\r\n<!--    :step-id=\"stepId\">-->\r\n<!--  </or-text-expression>-->\r\n  \r\n<!--</or-collapsible>-->\r\n\r\n<or-collapsible\r\n                title=\"Extended settings\" \r\n                :invalid=\"v.schema.topMargin.$error || v.schema.bottomMargin.$error || v.schema.leftMargin.$error || v.schema.rightMargin.$error || v.schema.customResolutionWidth.$error || v.schema.customResolutionHeight.$error\"\r\n                open\r\n>\r\n  <!--<or-checkbox v-if=\"fileType === 'pdf'\"-->\r\n  <!--  v-model=\"websitePrintVersionLocal\"-->\r\n  <!--  :disabled=\"readonly\"-->\r\n  <!--  class=\"mt-1 mb-1\">-->\r\n  <!--Website print version</or-checkbox>-->\r\n\r\n  <or-text-expression v-if=\"fileType === 'pdf'\"\r\n    label=\"Header\"\r\n    v-model=\"headerTemplateLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.headerTemplate.$error\"\r\n    @input=\"v.schema.headerTemplate.$touch()\"\r\n    helpText=\"Make sure to set enough top margin to fit header content above the website content\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n  \r\n  <or-text-expression v-if=\"fileType === 'pdf'\"\r\n    label=\"Footer\"\r\n    v-model=\"footerTemplateLocal\"\r\n    :readonly=\"readonly\"\r\n    :error=\"'Please enter a valid JavaScript expression.'\"\r\n    :invalid=\"v.schema.footerTemplate.$error\"\r\n    @input=\"v.schema.footerTemplate.$touch()\"\r\n    helpText=\"Make sure to set enough bottom margin to fit header content under the website content\"\r\n    :merge-fields=\"mergeFields\"\r\n    :steps=\"steps\" \r\n    :step-id=\"stepId\"\r\n  ></or-text-expression>\r\n    \r\n  <!--<or-checkbox v-if=\"fileType === 'image' && imageSize !== 'clip'\"-->\r\n  <!--  v-model=\"fullPageScreenShotLocal\"-->\r\n  <!--  :disabled=\"readonly\"-->\r\n  <!--  class=\"mt-1 mb-1\">-->\r\n  <!--  Full page screenshot-->\r\n  <!--</or-checkbox>-->\r\n  \r\n  <div v-if=\"fileType === 'pdf'\">\r\n    <div class=\"header-with-dropdown\">\r\n      <div>Margin: </div>\r\n      <!--<or-select-->\r\n      <!--  name=\"marginUnits\"-->\r\n      <!--  placeholder=\"Select units\"-->\r\n      <!--  :options=\"measurementUnitsOptions\"-->\r\n      <!--  v-model=\"marginUnitsLocal\"-->\r\n      <!--  :disabled=\"readonly\"      ></or-select>-->\r\n    </div>\r\n    \r\n    <div class=\"two-in-a-row\">\r\n      <or-text-expression \r\n        label=\"Top\"\r\n        v-model=\"topMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"topMarginError\"\r\n        :invalid=\"v.schema.topMargin.$error\"\r\n        @input=\"v.schema.topMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Bottom\"\r\n        v-model=\"bottomMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"bottomMarginError\"\r\n        :invalid=\"v.schema.bottomMargin.$error\"\r\n        @input=\"v.schema.bottomMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n    <div class=\"two-in-a-row\">\r\n      <or-text-expression \r\n        label=\"Left\"\r\n        v-model=\"leftMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"leftMarginError\"\r\n        :invalid=\"v.schema.leftMargin.$error\"\r\n        @input=\"v.schema.leftMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Right\"\r\n        v-model=\"rightMarginLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"rightMarginError\"\r\n        :invalid=\"v.schema.rightMargin.$error\"\r\n        @input=\"v.schema.rightMargin.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n  </div>\r\n\r\n  <div v-if=\"fileType === 'image'\">\r\n    <div>\r\n      <div class=\"normal-header\">Website resolution: </div>\r\n      <or-select\r\n        name=\"websiteResolution\"\r\n        placeholder=\"Select resolution\"\r\n        :options=\"websiteResolutionOptions\"\r\n        v-model=\"websiteResolutionLocal\"\r\n        :disabled=\"readonly\"\r\n        class=\"full-size-dropdown\"\r\n      >\r\n      </or-select>\r\n    </div>\r\n    \r\n    <div v-if=\"websiteResolution === 'custom'\" \r\n      class=\"two-in-a-row\"\r\n    >\r\n      <or-text-expression \r\n        label=\"Width\"\r\n        v-model=\"customResolutionWidthLocal\"\r\n        :readonly=\"readonly\"\r\n        :error=\"customResolutionWidthError\"\r\n        :invalid=\"v.schema.customResolutionWidth.$error\"\r\n        @input=\"v.schema.customResolutionWidth.$touch()\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n      <or-text-expression \r\n        label=\"Height\"\r\n        v-model=\"customResolutionHeightLocal\"\r\n        :readonly=\"readonly || fullPageScreenShotLocal\"\r\n        :error=\"customResolutionHeightError\"\r\n        :invalid=\"v.schema.customResolutionHeight.$error\"\r\n        @input=\"v.schema.customResolutionHeight.$touch()\"\r\n        :placeholder=\"fullPageScreenShotLocal ? 'Max height' : null\"\r\n        :merge-fields=\"mergeFields\"\r\n        :steps=\"steps\" \r\n        :step-id=\"stepId\"\r\n        class=\"two-in-a-row__item\"\r\n      ></or-text-expression>\r\n    </div>\r\n    \r\n    <or-checkbox v-if=\"websiteResolution === 'custom'\" \r\n      v-model=\"isMobileVersionLocal\"\r\n      :disabled=\"readonly\"\r\n    >Mobile version of website\r\n    </or-checkbox>\r\n  </div>\r\n</or-collapsible>\r\n\r\n\r\n",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".or-collapsible {\n  > .header {\n      \n    .or-collapsible__description {\n      padding-bottom: 0;\n    }\n  }\n  \n  > .body-wrapper {\n    margin-top: -0.5rem;\n    padding-bottom: 0.5rem;\n    \n    > .body {\n      padding: 0 0 0 16px;\n    }\n  }\n}\n\n.ui-select:not(.full-size-dropdown) {\n  .ui-select__dropdown {\n    min-width: 100%;\n    width: auto;\n  }\n  \n  &.or-select-expression .ui-select__dropdown {\n    width: 100%;\n  }\n}\n\n.predefined-format-dropdown.ui-select,\n.predefined-orientation-dropdown.ui-select {\n  .ui-select__dropdown {\n    min-width: 120px;\n    \n    .ui-select__content .ui-select__add {\n      padding: 0 5px;\n    }\n    \n    .ui-select__search .or-text-expression .input-wrapper {\n      padding-right: 5px;\n    }\n    \n    .ui-select__search-input {\n      padding-right: 5px;\n    }\n  }\n}\n\n\n\n.mt-1 {\n  margin-top: 1rem;\n}\n\n.mb-1 {\n  margin-bottom: 1rem;\n}\n\n.file-type-tabs.ui-tabs.flex-box.ui-tabs--type-text {\n  .ui-tabs__header .ui-tabs__header-items {\n    padding: 0;\n  }\n  \n  &.flex-box>.ui-tabs__body>.ui-tab {\n    overflow: visible;\n  }\n  \n  .ui-select .ui-select__content .ui-select__label .ui-select__display {\n    padding: 2px 0 2px 7px;\n    \n    .ui-select__dropdown-button {\n      width: .7em;\n      height: .7em;\n      line-height: 0;\n      \n      svg {\n        width: .7em;\n        height: .7em;\n      }\n    }\n  }\n}\n\n.header-with-dropdown {\n  display: flex;\n  margin-top: 0.5rem;\n  \n  & > div {\n    font-size: 14px;\n    line-height: 27px;\n  }\n  \n  .ui-select {\n    margin-left: 1rem;\n    margin-bottom: 0;\n    \n    .ui-icon {\n      display: flex;\n      height: .6em;\n      width: .6em;\n      \n      svg {\n        height: .6em;\n        width: .6em;\n      }\n    }\n    \n    // &__options {\n    //   min-width: 50px;\n    // }\n    \n    &__content .ui-select__label .ui-select__display {\n      min-height: auto;\n      padding: 2px 5px;\n    }\n    \n    &:not(.is-multiple) .ui-select__display {\n      height: auto;\n    }\n  }\n  \n  &.source-header {\n    margin-bottom: -2rem;\n    \n    .source-header__label {\n      display: flex;\n      align-items: center;\n      font-size: 12px;\n      line-height: 1.3;\n      color: #91969d;\n    }\n    \n    .source-header__type-select.ui-select {\n      .ui-select__display {\n        border: none;\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n.normal-header {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 14px;\n}\n\n.pathFileData {\n  font-size: 12px;\n}\n\n.preview {\n  max-width: 100%;\n  padding-bottom: 15px;\n}\n\n.hide {\n  display: none;\n}\n\n.upload-file {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n  \n  &__text {\n    color: #0F232E;\n    padding-right: 15px;\n    font-weight: normal;\n  }\n  \n  &__folder {\n    white-space: nowrap;\n    overflow: hidden;\n    padding-right: 5px;\n    text-overflow: ellipsis;\n    display: inline-block;\n  }\n  \n  &__button-upload.ui-button.ui-button--size-normal {\n    white-space: nowrap;\n    min-width: 95px;\n    // padding: 0;\n    // border: none;\n  }\n}\n\n.file-type {\n  margin-top: 0.6rem;\n  margin-bottom: 0.6rem;\n}\n\n.ui-radio-group {\n  &__label-text {\n    color: rgb(0, 0, 0);\n  }\n  \n  &:not(.is-disabled):not(.is-invalid):hover .ui-radio-group__label-text,\n  &:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n    color: rgb(0, 0, 0);\n  }\n}\n\n.file-options {\n  background-color: #f6f6f6;\n  padding: 10px;\n  margin-bottom: 1rem;\n  \n  &__customize {\n    display: flex;\n    justify-content: space-between;\n    \n    > div,\n    > form{\n      width: 33%;\n    }\n    \n    > div:not(:last-child),\n    > form:not(:last-child){\n      margin-right: 5px;\n    }\n    \n    .ui-select:not(.is-disabled) .ui-select__content .ui-select__label .ui-select__display,\n    .or-editable-wrapper {\n      background-color: #fff;\n    }\n  }\n  \n  .file-options__header-with-dropdown,\n  .file-options__image-size {\n    .ui-select:not(.is-disabled) .ui-select__content .ui-select__label .ui-select__display,\n    .or-editable-wrapper {\n      background-color: #fff;\n    }\n  }\n}\n\n.two-in-a-row {\n  display: flex;\n  \n  &__item {\n    width: 50%;\n    \n    &:first-child {\n      padding-right: 5px;\n    }\n    \n    &:nth-child(2) {\n      padding-left: 5px;\n    }\n  }\n}\n\n.image-file-type.ui-radio-group {\n  display: flex;\n  align-items: center;\n  \n  .ui-radio-group__label-text {\n    margin-right: 10px;\n  }\n}"
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "bc727ec7-af7f-43a8-9899-87cde7226c85",
              "data": {
                "open": true,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "f6f70299-b3a4-4864-9396-c1059d19f7bf",
                    "data": {
                      "data": "{\n  \"makeFilePrivate\": false,\n  \"maxNavigationTimeout\": \"`10 sec`\",\n  \"loadWaitingTime\": \"`3 sec`\"\n}",
                      "toJson": "return {\n  \"maxNavigationTimeout\": data.maxNavigationTimeout,\n  \"loadWaitingTime\": data.loadWaitingTime\n}",
                      "validators": "maxNavigationTimeout : {\n  jsExpression: validators.jsExpression,\n  jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n  required: validators.required,\n  custom: (value, ctx) => {\n\t  const containsMergeField = _.isString(value) && validators.validateExpression(value)\n    const regexTextMode = /^\\`.*\\`$/;\n    \n    if (!regexTextMode.test(value)) \n      return validators.jsExpression(value);\n      \n    if (containsMergeField)\n      return true;\n    \n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    \n    if (!_.isNaN(timeoutToNumber) && timeoutToNumber < 0)\n      return false\n    \n    let parsedTimeout;\n    \n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return parsedTimeout >= 1000 && parsedTimeout <= 30*1000;\n    } catch(e) {\n      return false;\n    }\n  }\n},\nloadWaitingTime : {\n  jsExpression: validators.jsExpression,\n  jsExpressionNonEmptyString: validators.jsExpressionNonEmptyString,\n  required: validators.required,\n  custom: (value, ctx) => {\n\t  const containsMergeField = _.isString(value) && validators.validateExpression(value)\n    const regexTextMode = /^\\`.*\\`$/;\n    \n    if (!regexTextMode.test(value)) \n      return validators.jsExpression(value);\n      \n    if (containsMergeField)\n      return true;\n    \n    const timeout = value.slice(1,-1);\n    const timeoutToNumber = _.toNumber(timeout);\n    \n    if (!_.isNaN(timeoutToNumber) && timeoutToNumber < 0)\n      return false\n    \n    let parsedTimeout;\n    \n    try {\n      parsedTimeout = libs.timestring(_.isNaN(timeoutToNumber) ? timeout : `${timeout} ms`, 'ms');\n      return parsedTimeout >= 1000 && parsedTimeout <= 20*1000;\n    } catch(e) {\n      return false;\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :make-file-private.sync=\"schema.makeFilePrivate\"\n  :max-navigation-timeout.sync=\"schema.maxNavigationTimeout\" \n  :load-waiting-time.sync=\"schema.loadWaitingTime\"\n  :merge-fields=\"mergeFields\"\n  :step-id=\"stepId\"   \n  :steps=\"steps\"   \n  :readonly=\"readonly\"   \n  :v=\"$v\"\n></wildcard>",
                      "componentName": "or-wildcard-fsadwrzeoixjbtyvkhqpcglunm",
                      "componentLogic": "{\n  computed : {\n    makeFilePrivateLocal : {\n      get () { return this.makeFilePrivate; },\n      set (value) { this.$emit('update:makeFilePrivate', value); }\n    },\n    maxNavigationTimeoutLocal : {\n      get () { return this.maxNavigationTimeout; },\n      set (value) { this.$emit('update:maxNavigationTimeout', value); }\n    },\n    loadWaitingTimeLocal : {\n      get () { return this.loadWaitingTime; },\n      set (value) { this.$emit('update:loadWaitingTime', value); }\n    },\n  },\n  props : {\n    makeFilePrivate : {\n      type : Boolean,\n      default : false\n    },\n    maxNavigationTimeout: {\n      type: String,\n      default : '`10 sec`'\n    },\n    loadWaitingTime: {\n      type: String,\n      default : '`3 sec`'\n    },\n    mergeFields: Object,\n    stepId : '',\n    steps : '',\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema:{maxNavigationTimeout : {}}}\n      }\n    }\n  }\n}",
                      "componentTemplate": "<!--<or-checkbox -->\n<!--  :disabled=\"readonly\" -->\n<!--  v-model=\"makeFilePrivateLocal\">Encrypt URL to uploaded file-->\n<!--</or-checkbox>-->\n\n<or-text-expression \n  name=\"Timeout\"\n  label=\"Maximum navigation timeout\"\n  help-text=\"Min 1 sec, max 30 sec\" \n  placeholder=\"10 sec\"\n  v-model=\"maxNavigationTimeoutLocal\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :merge-fields=\"mergeFields\"\n  :invalid=\"v.schema.maxNavigationTimeout.$invalid\"\n  @input=\"v.schema.maxNavigationTimeout.$touch()\"\n  :error=\"!v.schema.maxNavigationTimeout.jsExpression ? 'The Timeout must be a valid Javascript code.' : 'Enter a valid timeout.'\" \n  :readonly=\"readonly\"\n></or-text-expression>\n\n<or-text-expression \n  name=\"Load waiting time\"\n  label=\"Time to wait for webpage to load\"\n  help-text=\"Min 1 sec, max 20 sec\" \n  placeholder=\"3 sec\"\n  v-model=\"loadWaitingTimeLocal\" \n  :step-id=\"stepId\" \n  :steps=\"steps\" \n  :merge-fields=\"mergeFields\"\n  :invalid=\"v.schema.loadWaitingTime.$invalid\"\n  @input=\"v.schema.loadWaitingTime.$touch()\"\n  :error=\"!v.schema.loadWaitingTime.jsExpression ? 'The time must be a valid Javascript code.' : 'Enter a valid time.'\" \n  :readonly=\"readonly\"\n></or-text-expression>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "d7ee7229-c3e6-4595-a9c3-3da009d6c964",
                    "data": {
                      "label": "Merge field",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "defaultName": "htmlToPdf",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": false
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"url\": \"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "meta": {},
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  },
                  {
                    "id": "__error__",
                    "label": "error"
                  }
                ],
                "dataOut": "htmlToPdf",
                "newName": "``",
                "filePath": "``",
                "fileType": "pdf",
                "assetsUrl": "",
                "authToken": "",
                "imageSize": "full",
                "topMargin": "``",
                "urlSource": "``",
                "htmlSource": "",
                "leftMargin": "``",
                "marginUnits": "px",
                "pdfViewType": "predefined",
                "rightMargin": "``",
                "bottomMargin": "``",
                "imageQuality": "80",
                "pdfSizeUnits": "px",
                "processError": true,
                "imageFileType": "jpeg",
                "fileSourceType": "url",
                "footerTemplate": "``",
                "headerTemplate": "``",
                "pdfCustomWidth": "``",
                "backgroundToPdf": true,
                "makeFilePrivate": false,
                "pdfCustomHeight": "``",
                "backgroundToImage": false,
                "pdfPredefinedSize": "Letter",
                "websiteResolution": "screen",
                "fullPageScreenShot": false,
                "imageSizeClipWidth": "``",
                "imageSizeClipHeight": "``",
                "websitePrintVersion": false,
                "imageSizeClipXOffset": "``",
                "imageSizeClipYOffset": "``",
                "imageSizeCustomWidth": "``",
                "customResolutionWidth": "``",
                "imageSizeCustomHeight": "``",
                "customResolutionHeight": "``",
                "pdfPredefinedOrientation": "landscape"
              },
              "rawMode": false,
              "version": "08b9f7c2-e673-4e0b-bd2d-eda2fe950f87",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "dbaccacc-ecca-4e19-8443-2cddd33055c0",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": true
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.isMobileVersion = false",
            "version": "0.5.14"
          },
          {
            "sample": null,
            "script": "step.data['loadWaitingTime'] = \"`3 sec`\";\n",
            "version": "0.5.16"
          },
          {
            "sample": null,
            "script": "step.data['pdfPredefinedSize'] = \"`Letter`\";\n",
            "version": "0.5.18"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.19"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.20"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.21"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.22"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.23"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.24"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.5.25"
          },
          {
            "sample": null,
            "script": "step.data.useFiles = true;",
            "version": "0.5.26"
          }
        ],
        "dateModified": 1602087433390
      },
      {
        "id": "ec28190a-e1ba-42bd-a254-418270f832d9",
        "version": "0.0.3",
        "cacheVersion": "4a5f257f-85f8-489a-863f-714db4c2f958",
        "label": "Convert Object or Array to HTML Table",
        "icon": "map_values",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "[alpha] Given any JSON object or array, generates HTML tables that represent its contents. In the case of arrays containing objects (hash tables), it will optionally generate a table with a header row containing the key names of the object found in the first element of the array.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Pre-release",
          "HTML"
        ],
        "recommended": [],
        "tags": [],
        "template": "const removeMapHeaders = !doMapHeaders\n\nlet html = tableify(input);\n\nif (removeMapHeaders) {\n  html = _.chain(html)\n    .replace(/<thead>.*?(<tbody>)/g, '')\n    .replace(/<\\/tbody>/g, '')\n    .value();\n}\n\nreturn this.exitStep('next', {html});",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            }
          ],
          "input": "",
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "doMapHeaders": false
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "html": "HTML presentation of table"
        },
        "help": "## Release notes\n### 0.0.3\n- remove EJS from step logic",
        "formBuilder": {
          "stepExits": [
            {
              "id": "40d96b70-0b4d-4843-8f8f-0a744b10d14c",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "21c010e1-0200-457c-84f7-bb3655c66a5d",
              "data": {
                "mode": "json",
                "jsEnv": "ecma6",
                "label": "JSON object or array",
                "helpText": "",
                "variable": "input",
                "warnings": true,
                "autocomplete": true,
                "defaultValue": "",
                "validateCode": false,
                "renderCondition": "",
                "disableVariables": false,
                "validateRequired": true,
                "disabledCondition": "",
                "validateExpression": true,
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCode"
            },
            {
              "id": "35712214-f993-4531-b13f-696f5b30cac6",
              "data": {
                "label": "Add a header row with property names for arrays containing objects",
                "helpText": "",
                "variable": "doMapHeaders",
                "labelLeft": false,
                "trueLabel": "",
                "trueValue": "",
                "falseLabel": "",
                "falseValue": "",
                "isHtmlLabel": false,
                "switchColor": "primary",
                "advancedHelp": {
                  "link": {
                    "url": "",
                    "icon": "help",
                    "iconHelp": "",
                    "tooltipPosition": "top center"
                  },
                  "modal": {
                    "icon": "help",
                    "title": "",
                    "content": "",
                    "iconHelp": "",
                    "tooltipPosition": "top center"
                  },
                  "tooltip": {
                    "icon": "help",
                    "content": "",
                    "openTooltipOn": "hover",
                    "tooltipPosition": "top center"
                  }
                },
                "defaultValue": false,
                "allowCodeMode": true,
                "isHtmlHelpText": false,
                "switchPosition": "left",
                "isHtmlTrueLabel": false,
                "overwriteLabels": false,
                "overwriteValues": false,
                "renderCondition": "",
                "isHtmlFalseLabel": false,
                "disabledCondition": "",
                "helpDisplayOption": "hover",
                "iconHelpTextOption": "none",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formSwitch"
            },
            {
              "id": "0394cebf-1cee-4f87-971d-feac9c29d775",
              "data": {
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "3ffe0763-9178-4151-bbda-478e734d5b6d",
                    "data": {
                      "meta": {},
                      "label": "Merge field",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "dataTable",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  html: 'HTML presentation of table'\n}",
          "hasProcessError": false,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "input": "",
                "dataOut": "dataTable",
                "doMapHeaders": false
              },
              "rawMode": false,
              "version": "ca4f84f1-5566-4994-a9ce-272a05fd6a3c",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "40d96b70-0b4d-4843-8f8f-0a744b10d14c",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processError'])) step.data['processError'] = true;\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.2"
          },
          {
            "script": "",
            "version": "0.0.3"
          }
        ],
        "modules": [
          {
            "name": "tableify",
            "version": "",
            "variable": "tableify"
          },
          {
            "name": "lodash",
            "version": "",
            "variable": "_"
          }
        ],
        "dateModified": 1605020963159
      },
      {
        "id": "5fddb866-8bd4-4eed-9090-99541ec8af5a",
        "version": "1.0.10",
        "cacheVersion": "c73863c8-b513-478b-8f60-24ddcba8380b",
        "label": "Conditional Selection",
        "icon": "conditional_selection",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "Step allows you to have different output data depending on the conditions in the flow logic.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "let makeCompare = (rule) => {\n  let firstValue = rule.valueType === 'string' ?  rule.firstValue.trim() : rule.firstValue;\n  let secondValue = rule.valueType === 'string' ?  rule.secondValue.trim() : rule.secondValue;\n  \n  if (!isCaseSensitive && rule.valueType === 'string') {\n    firstValue = firstValue.toLowerCase();\n    secondValue = secondValue.toLowerCase();\n  }\n  \n  if (rule.valueType === 'number') {\n    firstValue = isNaN(rule.firstValue) ? NaN : parseFloat(rule.firstValue);\n    secondValue = isNaN(rule.secondValue) ? NaN : parseFloat(rule.secondValue);\n  }\n\n  if (rule.valueType === 'advanced') {\n    const flowContext = this;\n    return new Function('_', `let codeValue = arguments[0]; return codeValue`).bind(flowContext)(rule.codeValue, _)\n  } else {\n    let compareMethod = rule.compareMethod;\n    return compareMethod(firstValue, secondValue) \n  }\n}\n\nlet isMatch = false;\nlet dataOut;\n// let noConditionDataOut = { \"output\" : noConditionDataOutValue };\n\ntry {\n  _.forEach(conditionGroups, group => {\n    let isRule = (group.trueValue === 'any') ? _.some(group.rules, rule => makeCompare(rule)) : _.every(group.rules, rule => makeCompare(rule))\n\n    if (isRule) {\n      dataOut = { \"output\" : group.dataOut };\n      isMatch = true;\n      return false;\n    }\n  })\n\n} catch (error) {\n  if (processError) { \n    throw error\n  }\n}\n\nreturn isMatch ? this.exitStep('next', dataOut) : isElseExit ? this.exitStep('__else__', { \"output\" : noConditionDataOutValue })\n                                                            : this.exitStep('next', { \"output\" : noConditionDataOutValue });\n\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "isElseExit": false,
          "elseExitName": "else",
          "isSingleExit": true,
          "processError": true,
          "conditionGroups": [
            {
              "label": "`New Group 1`",
              "rules": [
                {
                  "vforkey": "c1354f4c-f903-42df-ab1b-460067c0dd0f",
                  "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                  "codeValue": "``",
                  "valueType": "string",
                  "firstValue": "``",
                  "secondValue": "``",
                  "isDisabledSecondValue": false
                }
              ],
              "dataOut": "``",
              "trueValue": "any",
              "description": "``",
              "isNotCollapsed": true,
              "isEditableHeader": false
            }
          ],
          "isCaseSensitive": false,
          "elseExitNameFinal": "else",
          "hasNoConditionDataOut": true,
          "dynamicExitsArrayStart": 1,
          "conditionRuleHasDataOut": true,
          "noConditionDataOutValue": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "output": "any type"
        },
        "help": "When the step is reached in the flow, each _condition group_ will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. There is no limit on the number of groups, but the step will choose only one during an execution. If none of the rules were met, the step will exit through the *else* leg and output the data set in *If no condition is met*.\n\n### Condition groups\nEvery condition group is defined by the *condition rules* that must be met for the flow to select that group and the *data to output* field, in which you specify the output data manually, via *merge field values* or in *code mode* in case that group is selected. At least one condition group must be defined. \n\nTo add a new group click *Add new group* button, to delete one click on X. You can change the order of your groups using the drag handle.\n\nEach condition rule is validated for the details to be set properly. The condition group edge will be highlighted in red if any data requires correction.\n\nThe *name* of a group is set by default and can be manually changed. The *description* is empty by default and can be manually added but it is not required and will not affect the flow execution.\n\n### Condition rules\nEach rule is created using a *data type*, *input values* and a *logical operator* that is predefined in a dropdown and varies depending on the chosen *data type* (i.e. *\"contains\"*, *\"starts with\"*, *\">=\"*, *\"is empty\"*, *\"is exactly same as\"*, etc.). At least one rule for every condition group must be defined but you can have as many rules as you need. To add a new rule click *Add rule* button.\n\nYou can compare different data types, like *string*, *number*, *object or array* (see example below). Both input fields can be filled in manually or with a merge field value by clicking on the `{x}` icon. Make sure that the value stored in the merge field matches with the chosen data type. *String* data is case-insensitive by default but you can change this parameter in **_Advanced settings_**.\n\nIf you need to apply more complex logic for data validation, choose *advanced* data type and describe the query in JS/JSON format. Please note that once you switch to *advanced* or *object or array* and make any changes to the data, the data will be lost if you select another *data type*.\n\nExample of *object or array* data type:\nInput value\n`this.get('myObject')` \nis exactly same as:\n```json\n{\n  \"OneReach\": {\n    \"chatBots\": [\"sms\", \"slack\",\"facebook\",\"e-mail\",\"telegram\"],\n    \"voice\": \"telephony\",\n    \"http\": \"http flow\"\n  },\n  \"Apple\": \"hardware\",\n  \"MS\": \"software\"\n}\n```\n\nExample of advanced data type:\n`(this.get(‘myString’)).length > 3`\n\n### Match type\nBy default, all rules in one condition group are set with *any* match type meaning the flow select this group if at least one rule is met. Choose *all* if you want exact match with every condition rule.\n\n### Advanced settings\nThe output data of the step will be stored under the name provided in the *Merge field name*. If you use the same step multiple times in a flow, please customize the *merge field name* for each step because otherwise the last instance of a step will overwrite the data of the previous instances. The merge field name is required for this step.\n\nTurn _Handle all other cases separately through the else leg_ to _ON_ to add the separate _else_ leg.  \nThe label for *else* exit leg can be changed in this section.\n\nThe toggle *Case sensitive* allows you to control case sensitivity for the data set in input fields. Please note that the option doesn't work in *code mode*.\n\n### Error handling\n*Process error* is on by default and adds an *error* leg to the step. The flow will exit through this leg if any error was encountered during the execution of the step.\n\n### Reporting events\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "318dac79-80ac-4548-b553-2db6896f2b8a",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "f0b6cb93-00a7-4a24-aaa4-7d2ca7c7993f",
              "data": {
                "index": 1
              },
              "component": "exitDynamic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "feb7cc29-fd58-4388-b56e-355bbceee50f",
              "data": {
                "open": true,
                "header": "Condition groups",
                "inputs": [
                  {
                    "id": "0b358529-4929-4f5d-87b8-1299a0725bb0",
                    "data": {
                      "inputs": [],
                      "isSingleExit": true,
                      "addButtonText": "",
                      "isSingleGroup": false,
                      "conditionExits": [],
                      "conditionTitle": "",
                      "conditionGroups": [
                        {
                          "label": "`New Group 1`",
                          "rules": [
                            {
                              "vforkey": "c1354f4c-f903-42df-ab1b-460067c0dd0f",
                              "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                              "codeValue": "``",
                              "valueType": "string",
                              "firstValue": "``",
                              "secondValue": "``",
                              "isDisabledSecondValue": false
                            }
                          ],
                          "dataOut": "``",
                          "trueValue": "any",
                          "description": "``",
                          "isNotCollapsed": true,
                          "isEditableHeader": false
                        }
                      ],
                      "renderCondition": "",
                      "usePredefinedValue": false,
                      "isNegativeLeftMargin": true,
                      "hasNoConditionDataOut": true,
                      "predefinedVariableName": "schema.inputData",
                      "conditionRuleHasDataOut": true,
                      "noConditionDataOutValue": "``"
                    },
                    "meta": {
                      "name": "condition-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "0.9.0"
                    },
                    "label": "Conditon builder v0.9.0",
                    "compiled": {},
                    "component": [
                      "condition-builder-component",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "abf04f8c-ca9a-4f83-9056-3559741a5716",
              "data": {
                "meta": {},
                "label": "Merge field name",
                "helpText": "The output data of the step will be stored under this name and can be reused further in the flow.",
                "defaultTTL": 86400000,
                "dataOutMeta": "{}",
                "defaultName": "conditionalSelection",
                "defaultType": "session",
                "placeholder": "",
                "defaultValue": "",
                "renderCondition": "",
                "validateRequired": true
              },
              "compiled": {},
              "component": "formDataOut"
            },
            {
              "id": "14467a92-491e-4d53-bf2f-0c5f0de9291d",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "99166855-f0eb-4405-9c38-636c8ef52024",
                    "data": {
                      "label": "Handle all other cases separately through the else leg",
                      "helpText": "",
                      "variable": "isElseExit",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formSwitch",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Switch",
                    "compiled": {},
                    "component": "formSwitch",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formSwitch\"]"
                    ]
                  },
                  {
                    "id": "86a02b63-9f7e-4d30-ba1a-9b940e253f4a",
                    "data": {
                      "data": "{\n  \"elseExitName\": \"else\",\n  \"elseExitNameFinal\": \"else\"\n}",
                      "toJson": "return {\n  elseExitNameFinal: JSON.stringify(data.elseExitNameFinal)\n}",
                      "validators": "elseExitName: {\n  custom(value) {\n    return !_.isEmpty(value.trim())\n  }\n},",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :else-exit-name.sync=\"schema.elseExitName\" \n  :else-exit-name-final.sync=\"schema.elseExitNameFinal\"\n  :is-else-exit=\"schema.isElseExit\"\n  :v=\"$v\"\n  :readonly=\"readonly\" \n  :step=\"step\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-eaflqzcrumdwjhpsginobvyktx",
                      "componentLogic": "{\n  computed : {\n    elseExitNameLocal : {\n      get () { \n        return this.elseExitName\n      },\n      set (value) { \n        this.changeElseLegName(value);\n        this.$emit('update:elseExitName', value);\n      }\n    },\n    \n    _elseExitNameFinal : {\n      get () { \n        return this.elseExitNameFinal\n      },\n      set (value) { \n        this.$emit('update:elseExitNameFinal', value);\n      }\n    },\n  },\n  \n  props : {\n    elseExitName : {\n      type : String,\n      default : ''\n    },\n    elseExitNameFinal : {\n      type : String,\n      default : ''\n    },\n    isElseExit: Boolean,\n    step : Object,\n    steps : '',\n    stepId : '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    schema : Object,\n    v : {\n      type: Object,\n      default() {\n        return {schema: {}};\n      }\n    },\n  },\n  \n  methods: {\n    changeElseLegName (value) {\n      _.map(this.step.data.exits, exit => {\n        if (exit.id !== 'next' && exit.id !== '__error__') {\n          this._elseExitNameFinal = value\n          this.$nextTick(() => {\n            exit.label = this._elseExitNameFinal || 'No Name';\n          })\n        }\n\n        return exit;\n     })\n    }\n  },\n  \n  watch : {\n    isElseExit (newValue) {\n      if (!_.isEmpty(this.step.data.exits)) {\n        const elseLegIndex = _.findIndex(this.step.data.exits, { id : '__else__' });\n        \n        if (newValue && elseLegIndex === -1) {\n            this.step.data.exits.splice(1, 0, {\n              id : '__else__', \n              label : this.elseExitNameLocal, \n              stepId : '',\n              dynamic: true\n            });\n        } else if (!newValue && elseLegIndex !== -1) {\n            this.step.data.exits.splice(elseLegIndex, 1);\n        }\n      }\n    }\n  },\n  \n  mounted () {\n    this.changeElseLegName(this.elseExitNameLocal);\n  }\n}",
                      "componentTemplate": "<or-textbox v-if=\"isElseExit\"\n  label=\"Else exit leg name\"\n  v-model=\"elseExitNameLocal\"\n  :readonly=\"readonly\"\n  error=\"The field is required\"\n  :invalid=\"v.schema.elseExitName.$error\"\n  @input=\"v.schema.elseExitName.$touch()\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  class=\"else-leg-name\"\n  required\n></or-textbox>\n",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".switch {\n  &__header {\n    display: flex;\n    flex-direction: row;\n    min-height: 36px;\n    \n    .label {\n      display: flex;\n      align-items: center;\n      flex-grow: 1;\n      font-size: 12px;\n      line-height: 1.3;\n      color: #91969d;\n      transition: color .1s ease;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "2f1d0ec6-58bb-4cb6-b7e3-f676b8fc9f88",
                    "data": {
                      "label": "Case sensitive",
                      "helpText": "",
                      "variable": "isCaseSensitive",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "formSwitch"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  output: \"any type\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  },
                  {
                    "id": "13d65c96-1804-4ce1-a14a-ced809eb0ef8",
                    "label": "else"
                  }
                ],
                "dataOut": "conditionalSelection",
                "elseExitName": "`else`",
                "isSingleExit": true,
                "stepVariable": "defaultValue",
                "toIgnoreCase": true,
                "conditionExits": [],
                "conditionGroups": [],
                "conditionRuleHasDataOut": true
              },
              "rawMode": false,
              "version": "18a112b7-4925-4aa2-b8df-e4951db0d5bd",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "318dac79-80ac-4548-b553-2db6896f2b8a",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  },
                  {
                    "id": "59862ccc-8f3c-4e65-afd2-466d64310450",
                    "data": {
                      "id": "13d65c96-1804-4ce1-a14a-ced809eb0ef8",
                      "label": "else"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.isElseExit = true;\nstep.data.exits[1].id = '__else__';",
            "version": "1.0.3"
          },
          {
            "sample": null,
            "script": "const data = step.data;\n\nstep.data.isSingleExit = true;\nstep.data.hasNoConditionDataOut = true;\n\n_.forEach(data.conditionGroups, condition => {\n  delete condition.mountedFlag;\n  \n  condition.rules = _.map(condition.rules, rule => _.omit(rule, ['mountedFlag', 'calculatedFlag', 'isValid']))\n})\n\ndelete data.mountedFlag;",
            "version": "1.0.8"
          },
          {
            "sample": null,
            "script": "",
            "version": "1.0.10"
          }
        ],
        "dateModified": 1591011444289
      },
      {
        "id": "88e7cd37-10dd-42e4-9f31-93875e70ed3a",
        "version": "1.0.2",
        "cacheVersion": "5e4363bc-c885-440d-a437-8a380615d439",
        "label": "Generate Short URL",
        "icon": "parse_url",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "Use this step to generate a short URL.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "const Request = require('or-sdk/request');\nconst request = new Request(this);\nconst shortenerUrl = this.helpers.urlShortenerUrl;\nconst result = {};\nconst errorMessage = \"Invalid URL.\";\nconst authHeaders = {\n  Authorization  : this.config.authorization, \n  'Content-Type' : 'application/json;charset=UTF-8'\n};\nlet url;\ntry{\n  new URL(urlData.sourceURL);\n  url = urlData.sourceURL;\n}catch(e){\n  throw new Error(errorMessage);\n}\nconst pattern = new RegExp('^(https?:\\\\/\\\\/)?'+'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_#.~+]*)*'+'(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+'(\\\\#[-a-z\\\\d_]*)?$','i');\n \nif(!pattern.test(url)){\n  throw new Error(errorMessage);\n}\n\nconst shortURLRequest = await request.post({\n    uri     : `${shortenerUrl}/acc/${this.config.accountId}/link`,\n    headers : authHeaders,\n    body    : {\n      url,\n      deepLink : isDeepLink\n    },\n    json    : true\n}).catch(error => this.log.error(error));\n_.set(result, 'generatedURL', shortURLRequest.shortUrl)\nthis.exitStep(\"next\", result);",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "urlData": {
            "shortURL": "",
            "sourceURL": "``",
            "showPreview": false,
            "disableButton": false
          },
          "isDeepLink": false,
          "processError": true
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "generatedURL": ""
        },
        "help": "Use this step to generate a short URL. Set the *source URL* manually, using merge field values or in code mode. When the step is reached during flow execution, a *short URL* is generated and will be stored in the output. Multiple *Generate short URL* steps can be used in a flow.\n\nThe source URL must begin with `http://` or `https://`, may be a deep link and may contain query string parameters that will be included in the short URL, for example:\n```\nhttp://example.net/\nhttps://example.com/contact-us?name=James+Johnson&phone=15551234567\n```\n\nIf you set *source URL* manually, the *Generate* button becomes active. Click it to create a short URL in the step details pane without the need to activate your flow. Note that this URL will not match the short URL generated during flow execution but will lead to the same source URL.\n\n### Advanced settings\nThe output data of the step will be stored under the name provided in the *merge field name*.\n\nTo be able to generate a short URL that supports adding query parameters further in the flow, turn on the respective option.\n\nFor example:\n\nSource URL\n`https://example.com/contact-us?name=James+Johnson&phone=15551234567`\nGenerated short URL\n`https://xn--ew8h.o-o.ai/GBgHsR6iT`\nShort URL with added query parameter:\n`https://xn--ew8h.o-o.ai/GBgHsR6iT?email=jj@email.com`\nFull URL:\n`https://example.com/contact-us?name=James+Johnson&phone=15551234567&email=jj@email.com`\n\nNote that switching the option on or off deletes the URL generated in the step detail pane. \n\n### Error handling\n*Process error* is on by default and adds an *error* leg to the step. The flow will exit through this leg if any error was encountered during the execution of the step (e.g. *Source URL* is invalid).\n\n### Reporting events\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "22c8c0d4-7988-47ca-ba4f-90418ad95c05",
              "data": {
                "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "d318135a-dd89-4bf7-af85-aabaf41bcda7",
              "data": {
                "data": "{\n  \"urlData\":{\n    \"sourceURL\": \"``\",\n    \"shortURL\":\"\",\n    \"showPreview\": false,\n    \"disableButton\":false\n  }\n}",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value, key)}`).join(',')}}`;\n    }\n    if(_.isEqual(key,'sourceURL')) return data\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                "validators": "{\n  urlData:{\n    sourceURL :{\n      custom(value, ctx){\n        if(this.schema.urlData && this.schema.urlData.isCodeMode) return validators.jsExpression(value);\n        const containsMergeField = _.isString(value) && validators.validateExpression(value);\n        if(containsMergeField) return true;\n        try{\n          const url = new URL(`${value.slice(1,-1)}`);\n          return true;\n        }catch(e){\n          return false \n        }\n      }\n    }\n  }\n}",
                "applyToJson": true,
                "formTemplate": "<wildcard \n  :v=\"$v\" \n  :shortURL.sync=\"schema.urlData.shortURL\" \n  :showPreview.sync=\"schema.urlData.showPreview\" \n  :disableButton.sync=\"schema.urlData.disableButton\" \n  :sourceURL.sync=\"schema.urlData.sourceURL\" \n  :isCodeMode.sync=\"schema.urlData.isCodeMode\"\n  :isDeepLink=\"schema.isDeepLink\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :merge-fields=\"mergeFields\">\n</wildcard>",
                "componentName": "or-wildcard-dtzewlmycvxqisbgafrphknuoj",
                "componentLogic": "{\n  data(){\n    return {\n      loading:false\n    }\n  },\n  computed : {\n    localIsCodeMode: {\n      get () { return this.isCodeMode; },\n      set (value) {\n        this.$emit('update:isCodeMode', value);\n      }\n    },\n    errorText(){\n      if(this.localIsCodeMode) return \"Invalid JS expression.\";\n      if(_.isEmpty(this.sourceURL) || _.isEqual(this.sourceURL,'``'))\n        return \"The Source URL is required.\";\n      return \"The Source URL is invalid.\";\n    },\n    localDisableButton:{\n      get () { return this.disableButton },\n      set (value) { \n        this.$emit('update:disableButton', value); \n      }\n    },\n    localShowPreview : {\n      get () { return this.showPreview },\n      set (value) { \n        this.$emit('update:showPreview', value); \n      }\n    },\n    localSourceURL : {\n      get () { return this.sourceURL },\n      set (value) { \n        this.localShowPreview = false;\n        this.localDisableButton = this.containsMergeField(value) ? true : false;\n        this.$emit('update:sourceURL', value); \n      }\n    },\n    localShortURL : {\n      get () { return this.shortURL },\n      set (value) { \n        this.$emit('update:shortURL', value); \n      }\n    }\n  },\n  methods:{\n    handleModeChange(){\n        this.localIsCodeMode = _.isEqual(_.get(this,`$refs.source.mode`), 'code') ? true : false;\n    },\n    containsMergeField(value){\n      return _.isString(value) && validators.validateExpression(value);\n    },\n    generateURL() {\n      this.localDisableButton = true;\n      const headers = {\n        Authorization  : this.$flow.token, \n        'Content-Type' : 'application/json;charset=UTF-8'\n      }\n      let url;\n      try{\n        new URL(this.sourceURL.slice(1,-1));\n        url = this.sourceURL.slice(1,-1);\n      }catch{}\n      this.loading = true;\n      this.$http.post(`${this.$flow.urlShortenerUrl}/acc/${this.$flow.accountId}/link`,{ url, deepLink : this.isDeepLink }, { headers })\n      .then(res =>{\n        this.localShortURL = _.get(res, 'body.shortUrl');\n        this.localShowPreview = true;\n      })\n      .catch(err => {\n        this.localShowPreview = false;\n        this.localDisableButton = false;\n      }).finally(()=>{\n        this.loading = false;\n      });\n    },\n    copyUrl () {\n      this.$refs.previewURL.$refs.input.focus()\n      this.$refs.previewURL.$refs.input.setSelectionRange(0, this.$refs.previewURL.value.length)\n      document.execCommand(\"copy\", false, this.$refs.previewURL.value)\n    }\n  },\n  watch:{\n    isDeepLink:{\n      handler(value){\n        this.localShowPreview = false;\n        this.localDisableButton = false;\n      }\n    }\n  },\n  mounted(){\n    this.localIsCodeMode = _.isEqual(_.get(this,`$refs.source.mode`), 'code') ? true : false;\n  },\n  props : {\n    isDeepLink:{\n      type:Boolean,\n      default: false\n    },\n    isCodeMode:{\n      type:Boolean,\n      default: false\n    },\n    sourceURL:{\n      type: String,\n      default : \"``\"\n    },\n    shortURL:{\n      type: String,\n      default : \"``\"\n    },\n    showPreview:{\n      type: Boolean,\n      default : false\n    },\n    disableButton:{\n      type: Boolean,\n      default : false\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    steps:()=>[],\n    stepId:{\n      type:String,\n      default: ''\n    },\n    mergeFields: {\n      type: Array\n    },\n    v: {\n      schema: {\n        urlData:{\n          sourceURL: \"``\"  \n        }\n      }\n    }\n  }\n}",
                "componentTemplate": "<div>\n  <or-text-expression \n    :merge-fields=\"mergeFields\"\n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :readonly=\"readonly\"\n    placeholder=\"Examples: https://example.com, http://example.com/test\"\n    ref=\"source\"\n    @mode-changed=\"handleModeChange()\"\n    label=\"Source URL\" \n    :error=\"errorText\"\n    :invalid=\"(!isNew || v.schema.urlData.sourceURL.$dirty) && v.schema.urlData.sourceURL.$invalid\"\n    @input=\"v.schema.urlData.sourceURL.$touch\"\n    v-model=\"localSourceURL\">\n  </or-text-expression>\n  <or-button\n    class=\"preview-button\"\n    :disabled=\"readonly || localIsCodeMode || localDisableButton || v.schema.urlData.sourceURL.$invalid\"\n    v-show=\"!localShowPreview\"\n    size=\"normal\"\n    :loading=\"loading\"\n    @click=\"generateURL\"\n  >Generate</or-button>\n   <or-textbox \n    v-show=\"localShowPreview\"\n    v-model=\"localShortURL\"\n    :readonly=\"true\" \n    label=\"Short URL\" \n    iconPosition=\"right\"\n    ref=\"previewURL\"\n  >\n    <div slot=\"icon\">\n      <or-icon-button \n        @click=\"copyUrl\" \n        icon=\"content_copy\" \n        type=\"secondary\" \n        color=\"default\" \n        size=\"small\" \n        ariaLabel=\"copy\" \n        tooltip=\"Copied\" \n        tooltipPosition=\"top center\"\n        openTooltipOn=\"click\"\n      ></or-icon-button>\n    </div>\n  </or-textbox>\n</div>",
                "wildcardTemplates": [],
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".preview-button{\n  margin-bottom: 10px;\n}"
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "77fefe42-9cda-4232-ab13-165ab6400051",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "34f3057e-b0fb-48b7-99ac-bf93636266ef",
                    "data": {
                      "label": "Allow adding query parameters to the generated short URL",
                      "variable": "isDeepLink",
                      "labelLeft": false,
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "formSwitch"
                  },
                  {
                    "id": "017fbc3a-a022-47c0-ab7e-2006bdee56c1",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "The output data of the step will be stored under this name and can be reused further in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "shortURL",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  }
                ],
                "description": "",
                "rememberedState": true,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  \"generatedURL\":\"\"\n}",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['source'])) step.data['source'] = \"``\";\n",
            "version": "0.0.2"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"\",\"type\":\"session\",\"ttl\":86400000};\n",
            "version": "0.0.3"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['sourceURL'])) step.data['sourceURL'] = \"``\";\nif(_.isUndefined(step.data['shortURL'])) step.data['shortURL'] = \"\";\n",
            "version": "0.0.4"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['urlData'])) step.data['urlData'] = {\"sourceURL\":\"``\",\"shortURL\":\"\"};\n",
            "version": "0.0.5"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['urlData'])) step.data['urlData'] = {\"sourceURL\":\"``\",\"shortURL\":\"\",\"showPreview\":false};\n",
            "version": "0.0.6"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processError'])) step.data['processError'] = true;\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.7"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['urlData'])) step.data['urlData'] = {\"sourceURL\":\"``\",\"shortURL\":\"\",\"showPreview\":false,\"disableButton\":false};\n",
            "version": "0.0.8"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.9"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.10"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.11"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.12"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.13"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"shortUrl\",\"type\":\"session\",\"ttl\":86400000};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.14"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.15"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"shortName\",\"type\":\"session\",\"ttl\":86400000};\n",
            "version": "0.0.16"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.17"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.18"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.19"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.20"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.21"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['processError'])) step.data['processError'] = true;\napplyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.22"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.23"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "0.0.24"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "applyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.2"
          }
        ],
        "modules": [],
        "dateCreated": 1573033447454,
        "dateModified": 1583338277192
      },
      {
        "id": "14d1ca2c-9bdd-40c1-be51-5a65c59b3525",
        "version": "1.1.24",
        "cacheVersion": "0208120e-ef38-4c8a-8e89-8d02db801899",
        "label": "Check Condition",
        "icon": "condition",
        "iconType": "default",
        "iconUrl": "",
        "shape": "diamond",
        "description": "Use this step to take the flow down different paths according to conditions in the flow logic.",
        "isGatewayStep": false,
        "publishedBy": "OneReach.ai",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "let makeCompare = (rule) => {\n  let firstValue = rule.valueType === 'string' ? rule.firstValue.trim() : rule.firstValue;\n  let secondValue = rule.valueType === 'string' ? rule.secondValue.trim() : rule.secondValue;\n  \n  if (!isCaseSensitive && rule.valueType === 'string') {\n    firstValue = firstValue.toLowerCase();\n    secondValue = secondValue.toLowerCase();\n  }\n    \n  if (rule.valueType === 'number') {\n    firstValue = isNaN(rule.firstValue) ? NaN : parseFloat(rule.firstValue);\n    secondValue = isNaN(rule.secondValue) ? NaN : parseFloat(rule.secondValue);\n  }\n\n  if (rule.valueType === 'advanced') {\n    const flowContext = this;\n    return new Function('_', `let codeValue = arguments[0]; return codeValue`).bind(flowContext)(rule.codeValue, _)\n  } else {\n    let compareMethod = rule.compareMethod;\n    return compareMethod(firstValue, secondValue) \n  }\n}\n\nlet exitId;\nlet isCondition = false;\n_.forEach(conditionExits, exit => {\n  let isRule = (exit.trueValue === 'any') ? _.some(exit.rules, rule => makeCompare(rule)) : _.every(exit.rules, rule => makeCompare(rule))\n\n  if (isRule) {\n    isCondition = true;\n    exitId = exit.id;\n    return false\n  }\n})\n\ntry {\n  return isCondition ? this.exitStep(exitId) : this.exitStep('else');\n} catch(error) {\n  throw error\n}\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "else",
              "label": "else",
              "condition": ""
            }
          ],
          "elseExitName": "else",
          "isSingleExit": false,
          "conditionExits": [],
          "isCaseSensitive": false,
          "hasNoConditionDataOut": true,
          "dynamicExitsArrayStart": 0,
          "conditionRuleHasDataOut": true,
          "noConditionDataOutValue": "``"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "When the step is reached in the flow, each _condition exit_ will be evaluated in order from top to bottom (or left to right in the flow tree, respectively). The flow proceeds down the first exit for which the associated rules are met. There is no limit on the number of exits, but the step will choose only one during an execution. If none of the rules were met, the step will exit through the *else* leg.\n\n### Condition exits\nEvery condition exit is defined by the _condition rules_ that must be met for the flow to proceed down that exit, and at least one exit must be defined. \nTo add a new condition exit, click *Add new exit* button. \nYou can change the order of your exits using the drag handle; the order of the legs on the flow tree will be updated accordingly. To delete a condition exit click X, but note that all the steps added to that leg in the flow tree will be also deleted.\nEach condition rule is validated for the details to be set properly. The condition exit edge will be highlighted in red if any data requires correction.\n\nThe *name* of an exit is set by default, and it is shown above the corresponding leg on the flow tree and can be manually changed in the *step details pane*. The *description* is empty by default and can be manually added; it is not required and will not affect the flow execution.\n\n### Condition rules\nEach rule is created using a *data type*, *input values* and a *logical operator* that is predefined in a dropdown and varies depending on the chosen *data type* (i.e. *\"contains\"*, *\"starts with\"*, *\">=\"*, *\"is empty\"*, *\"is exactly same as\"*, etc.). At least one rule for every condition exit must be defined but you can have as many rules as you need. To add a new rule click *Add rule* button.\n\nYou can compare different data types, like *string*, *number*, *object or array* (see example below). Both input fields can be filled in manually or with a merge field value by clicking on the `{x}` icon. Make sure that the value stored in the merge field matches with the chosen data type. *String* data is case-insensitive by default but you can change this parameter in **_Advanced settings_**.\n\nIf you need to apply more complex logic for data validation, choose *advanced* data type and describe the query in JS/JSON format. Please note that once you switch to *advanced* or *object or array* and make any changes to the data, the data will be lost if you select another *data type*.\n\nExample of *object or array* data type:\nInput value\n`this.get('myObject')` \nis exactly same as:\n``` json\n{\n  \"OneReach\": {\n    \"chatBots\": [\"sms\", \"slack\",\"facebook\",\"e-mail\",\"telegram\"],\n    \"voice\": \"telephony\",\n    \"http\": \"http flow\"\n  },\n  \"Apple\": \"hardware\",\n  \"MS\": \"software\"\n}\n```\nExample of advanced data type:\n`(this.get(‘myString’)).length > 3`\n\n### Match type\nBy default, all rules in one condition exit are set with *any* match type meaning the flow will go through this exit if at least one rule is met. Choose *all* if you want exact match with every condition rule.\n\n### Advanced settings\nThe toggle *Ignore text case* allows you to control case sensitivity for the data set in input fields. Please note that the option doesn't work in code mode.\nThe label for *Else* exit leg can be changed in this section.\n\n### Reporting events\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.",
        "formBuilder": {
          "formCode": "return {\n    props : ['schema']\n};",
          "stepExits": [
            {
              "id": "3cc12b35-2706-4c0d-899f-78c5407bfe33",
              "data": {
                "index": 0
              },
              "component": "exitDynamic"
            },
            {
              "id": "0534ef79-02d1-48f5-b709-41bd4a893d21",
              "data": {
                "id": "else",
                "label": "else",
                "condition": ""
              },
              "compiled": {
                "exits": [
                  {
                    "id": "else",
                    "label": "else"
                  }
                ]
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "afda3f10-41ef-4d40-8596-4dfc86100435",
              "data": {
                "open": true,
                "header": "Condition exits",
                "inputs": [
                  {
                    "id": "d4b351ab-622a-4059-9c8c-9be0d2bf8670",
                    "data": {
                      "inputs": [],
                      "isSingleExit": false,
                      "addButtonText": "",
                      "conditionExits": [],
                      "conditionTitle": "",
                      "conditionGroups": [
                        {
                          "label": "`New Group 1`",
                          "rules": [
                            {
                              "vforkey": "5d0eb7ad-650e-4195-8865-116da8a7b21e",
                              "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                              "codeValue": "``",
                              "valueType": "string",
                              "firstValue": "``",
                              "secondValue": "``",
                              "isDisabledSecondValue": false
                            }
                          ],
                          "dataOut": "``",
                          "trueValue": "any",
                          "description": "``",
                          "isNotCollapsed": true,
                          "isEditableHeader": false
                        }
                      ],
                      "renderCondition": "",
                      "usePredefinedValue": false,
                      "isNegativeLeftMargin": true,
                      "hasNoConditionDataOut": true,
                      "conditionRuleHasDataOut": true,
                      "noConditionDataOutValue": "``"
                    },
                    "meta": {
                      "name": "condition-builder-component",
                      "type": "onereach-studio-form-input",
                      "version": "0.9.0"
                    },
                    "label": "Conditon builder v0.9.0",
                    "compiled": {},
                    "component": [
                      "condition-builder-component",
                      "https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js"
                    ],
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]",
                      "onereach-studio-form-input[\"https://qa-filesanddata-asset-manager-xux8mqnqka.s3-us-west-2.amazonaws.com/03db4abe-0477-47c0-ae4e-4c68f1047d59/components/condition-builder_v0-9-0/index.js\"][\"condition-builder-component\"]"
                    ]
                  }
                ],
                "description": "",
                "rememberedState": true,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "aca909ad-073f-42c8-8057-2969891f6b82",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "377bd0c9-10ef-4818-b5a7-05eb1d23edf5",
                    "data": {
                      "data": "{\n  \"elseExitName\": \"else\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "elseExitName: {\n  custom(value) {\n    return !_.isEmpty(value.trim())\n  }\n},",
                      "applyToJson": false,
                      "formTemplate": "<wildcard \n  :else-exit-name.sync=\"schema.elseExitName\" \n  :v=\"$v\" \n  :readonly=\"readonly\" \n  :steps=\"steps\" \n  :step-id=\"stepId\"\n></wildcard>",
                      "componentName": "or-wildcard-ptuiywojmknzvdeglhfsacxrbq",
                      "componentLogic": "{\n  computed : {\n    elseExitNameLocal : {\n      get () { \n        return this.elseExitName\n      },\n      set (value) { \n        //this.validateElseExitName(value);\n        this.changeElseLegName(value);\n        this.$emit('update:elseExitName', value);\n      }\n    },\n    \n    // _elseExitName : {\n    //   get () { \n    //     return this.elseExitName\n    //   },\n    //   set (value) { \n    //     this.$emit('update:elseExitName', value);\n    //   }\n    // },\n  },\n  \n  // data () {\n  //   return {\n  //     elseExitNameLocal: \"\"\n  //   }\n  // },\n  \n  props : {\n    elseExitName : {\n      type : String,\n      default : ''\n    },\n    // elseExitNameFinal : {\n    //   type : String,\n    //   default : ''\n    // },\n    steps : '',\n    stepId : '',\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {schema: {}};\n      }\n    },\n  },\n  \n  methods: {\n    changeElseLegName (value) {\n      _.map(this.$parent.schema.exits, exit => {\n        if (exit.id === 'else') {\n          //this._elseExitName = value.length > 10 ? value.slice(0,10) + '...' : value\n          // this.$nextTick(() => {\n          //   exit.label = this._elseExitName || 'No Name';\n          // })\n          exit.label = value.length > 10 ? value.slice(0,10) + '...' : value || 'No Name';\n        }\n\n        return exit;\n     })\n    }\n  },\n  \n  // watch: {\n  //   elseExitNameLocal (value) {\n  //     this.changeElseLegName(value);\n  //   }\n  // }\n}",
                      "componentTemplate": "<or-textbox \n  label=\"Else exit leg name\"\n  v-model=\"elseExitNameLocal\"\n  :readonly=\"readonly\"\n  error=\"The field is required.\"\n  :invalid=\"v.schema.elseExitName.$error\"\n  @input=\"v.schema.elseExitName.$touch()\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  class=\"else-leg-name\"\n  required\n></or-textbox>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".switch {\n  &__header {\n    display: flex;\n    flex-direction: row;\n    min-height: 36px;\n    \n    .label {\n      display: flex;\n      align-items: center;\n      flex-grow: 1;\n      font-size: 12px;\n      line-height: 1.3;\n      color: #91969d;\n      transition: color .1s ease;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n  }\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  },
                  {
                    "id": "b70da44b-5a78-4af2-81bd-fdb455d0df31",
                    "data": {
                      "label": "Case sensitive",
                      "variable": "isCaseSensitive",
                      "labelLeft": false,
                      "defaultValue": false,
                      "allowCodeMode": true,
                      "renderCondition": "",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "formSwitch"
                  }
                ],
                "description": "",
                "rememberedState": false,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "ruleType": "",
                      "codeValue": "qa.content@onereach.com",
                      "valueType": "advanced",
                      "firstValue": "``",
                      "secondValue": "``",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "hasProcessError": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "else",
                    "label": "else"
                  }
                ],
                "elseExitName": "`else`",
                "isSingleExit": false,
                "stepVariable": "defaultValue",
                "toIgnoreCase": true,
                "conditionExits": [],
                "conditionGroups": [],
                "dynamicExitsArrayStart": 0,
                "conditionRuleHasDataOut": true
              },
              "rawMode": false,
              "version": "71eebe4f-eb12-41e7-9c54-88770f96cf4d",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "3cc12b35-2706-4c0d-899f-78c5407bfe33",
                    "data": {
                      "index": 0
                    },
                    "component": "exitDynamic"
                  },
                  {
                    "id": "0534ef79-02d1-48f5-b709-41bd4a893d21",
                    "data": {
                      "id": "else",
                      "label": "else"
                    },
                    "compiled": {
                      "exits": [
                        {
                          "id": "else",
                          "label": "else"
                        }
                      ]
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "const data = step.data;\nconst conditionExits = [];\nconst ruleTypesVocabulary = {\n  \"includes\": {\n    \"valueType\" : \"string\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.includes(firstValue, secondValue); }`\n  },\n  \"!includes\" : {\n    \"valueType\" : \"string\",\n    \"rule\" : `function (firstValue, secondValue) { return !_.includes(firstValue, secondValue); }`\n  },\n  \"startsWith\" : {\n    \"valueType\" : \"string\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.startsWith(firstValue, secondValue); }`\n  },\n  \"endsWith\" : {\n    \"valueType\" : \"string\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.endsWith(firstValue, secondValue); }`\n  },\n  \"==\" : {\n    \"valueType\" : \"advanced\",\n    \"rule\"  : `function (firstValue, secondValue) { return _.isEqual(firstValue, secondValue); }`\n  },\n  \"!=\" : {\n    \"valueType\" : \"advanced\",\n    \"rule\"  : ``\n  }\n};\n\n_.forEach(data.conditions, (condition, index) => {\n  data.exits[index].id = condition.vforkey;\n  data.exits[index].label = condition.label.length > 10 ? condition.label.slice(0,10) + '...' : condition.label;\n\n  conditionExits.push({\n    label            : \"`\" + condition.label + \"`\",\n    description      : \"`\" + (condition.description || '').replace(/`/g, \"\\\\`\") + \"`\",\n    trueValue        : condition.rulesType,\n    isEditableHeader : false, \n    isNotCollapsed   : true,\n    rules            : [],\n    vforkey          : condition.vforkey,\n    mountedFlag      : false,\n  });\n  \n  _.forEach(condition.rules, rule => {\n    const valueType = ruleTypesVocabulary[rule.condition].valueType;\n    const ruleValue = ruleTypesVocabulary[rule.condition].rule;\n    const isUiMode = rule.ui;\n    const isUiAndNoAdvanced = isUiMode && valueType !== 'advanced';\n   \n    conditionExits[index].rules.push({\n      firstValue            : isUiAndNoAdvanced ? \"`${this.get(\\'\" + rule.left + \"\\')}`\" : \"``\",\n      secondValue           : isUiAndNoAdvanced ? rule.right : \"``\",\n      ruleType              : isUiAndNoAdvanced ? ruleValue : ruleTypesVocabulary[\"includes\"].rule,\n      valueType             : isUiMode || valueType === 'advanced' ? valueType : !isUiMode ? \"advanced\" : \"string\",\n      codeValue             : isUiAndNoAdvanced ? \"``\" : rule.code,\n      isDisabledSecondValue : false,\n      isValid               : true,\n      mountedFlag           : false,\n      calculatedFlag        : false\n    })\n  });\n})\n\ndata.conditionExits = conditionExits\ndata.elseExitName = \"else\";\ndata.conditionRuleHasDataOut = false;\ndata.hasNoConditionDataOut = false;\ndelete data.conditions;",
            "version": "1.0.8"
          },
          {
            "sample": null,
            "script": "const data = step.data;\n\ndata.isSingleExit = false;\ndata.hasNoConditionDataOut = false;\n\nif (!_.has(data, 'isCaseSensitive'))\n  data.isCaseSensitive = false\n\n_.forEach(data.conditionExits, condition => {\n  delete condition.mountedFlag;\n  \n  condition.rules = _.map(condition.rules, rule => _.omit(rule, ['mountedFlag', 'calculatedFlag', 'isValid']))\n})\n\ndelete data.mountedFlag;",
            "version": "1.1.20"
          },
          {
            "sample": null,
            "script": "_.forEach(step.data.conditionExits, exit => {\n  _.forEach(exit.rules, rule => {\n    if (rule.valueType !== 'advanced')\n      rule.codeValue = '``';\n  });\n});",
            "version": "1.1.23"
          },
          {
            "sample": null,
            "script": "",
            "version": "1.1.24"
          }
        ],
        "dateModified": 1591200107336
      },
      {
        "id": "39c8bcee-82f4-453b-ac8d-c1677f9260e9",
        "version": "2.1.0",
        "cacheVersion": "0855ea3f-b4b5-443e-a4a5-ef8fdd41e73e",
        "label": "Get Value from a Storage",
        "icon": "database",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "Use this step to get the value of the selected key in a chosen key-value storage collection.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Key-Value Storage"
        ],
        "recommended": [],
        "tags": [],
        "template": "const Storage = require('or-sdk/storage');\n\nif (!_.isString(collection) || !_.isString(key) || !_.isString(prefix))\n  throw new Error('\"collection\", \"key\" and \"prefix\" has to be a string');\n\ncollection = _.trim(collection);\nprefix = _.trim(prefix);\nkey = _.trim(key);\n\nif (_.includes(['undefined', 'null', '[object Object]'], collection) || _.isEmpty(collection))\n  throw new Error('Invalid collection name: cannot be undefined, empty or an object');\n\nif (_.includes(['undefined', 'null', '[object Object]'], key) || _.isEmpty(key))\n  throw new Error('Invalid key name: cannot be undefined, empty or an object');\n\nif (_.includes(['undefined', 'null', '[object Object]'], prefix))\n  throw new Error(`Invalid prefix name: \"${prefix}\"`);\n\nif (_.includes(collection, '/'))\n  throw new Error('Collection name cannot contain \"/\"');\n\nconst prefixedKey = prefix ? `${prefix}${key}` : key;\n\nthis.log.debug(`Getting value for key '${key}' in a collection '${collection} with ${prefix || 'no prefix'}'...`);\nconst storage = new Storage(this);\nconst value = await storage.get(collection, prefixedKey);\n\n// handle value does not exist\nif (_.isUndefined(value)) {\n  if (!notFound) throw new Error('Value is not found');\n  return this.exitStep('not found');\n}\n\nreturn this.exitStep('next', {value});",
        "form": {
          "component": null
        },
        "data": {
          "key": "``",
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "3effbf22-00d4-428a-802d-83ae1208d412",
              "label": "not found",
              "condition": "schema.notFound"
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "prefix": "``",
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "notFound": true,
          "collection": "``",
          "processError": true,
          "valueOutputExample": null,
          "dynamicExitsArrayStart": 1
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "outputExample": {
          "value": {}
        },
        "help": "Use this step to get the value of the selected key in a chosen key-value storage collection. You set the names of the collection and key, and when the step is reached in the flow, it adds the respective value to its output and proceeds down the *next* exit. If the selected collection and/or key does not exist or the value of that key was deleted, the flow will proceed down the *not found* exit. Only one pair of key-value can be retrieved during step execution.\n\n## Storage settings\n*Collection* is the name of the top level of your key-value storage. *Key* is the name of the entity that stores a value. Both collection and key inputs are required and expected as *string* values. Collection cannot contain the `/` symbol. Both inputs can be set manually, declared with a *merge field value* or written in code mode. For example, if you set:\n```\nCollection: Temperature\nKey: USA/Missouri/St.Loius\n```\nthe step retrieves the value of the key \"USA/Missouri/St.Loius\" in the \"Temperature\" collection, if such collection, key, and value exist.\n\n## Advanced settings\n*Prefix* is part of the name of the key that is added to its front. The field is not required but can be used to clarify the key in a collection. Using a single `/` symbol in the key name also works as a prefix. If you wish for the prefix to be separated from the key, end it with the `/` symbol. For example, if you set:\n```\nCollection: Temperature\nKey: USA/Missouri/St.Loius\nPrefix: 2019/09/01/\n```\nor\n```\nCollection: Temperature\nKey: 2019/09/01/USA/Missouri/St.Loius\n```\nthe execution result will be the same: the step retrieves the value of the same key (2019/09/01/USA/Missouri/St.Loius) in the \"Temperature\" collection, if such collection, key, and value exist.\n\n## Merge field settings\n\nThe output data of the step will be stored under the name provided in the *merge field name*. The retrieved value of the selected key in the chosen collection is returned.\n\nAlso, it is possible to define the structure of the value in the _Value output example_ field.\n\n## Error handling\n\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed through it if any error was encountered during the execution of the step (e.g. Collection or Key inputs are `undefined` or `null`; collection input contains the `/` symbol).\n\n## Reporting events\n\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n## Release notes\n### 2.1.0\n- add the ability to define output example for value\n- disable global code mode for _Process key not being found separately from error_ switch\n### 2.0.0\n- initial release",
        "formBuilder": {
          "stepExits": [
            {
              "id": "2715ee6d-7a2e-4b18-9d38-00aace756893",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "9abaa2a5-ca3f-467f-8cbf-dbb2fdff3f91",
              "data": {
                "index": 1
              },
              "component": "exitDynamic"
            },
            {
              "id": "2e267232-1bc0-416c-a310-6eead6ca0f13",
              "data": {
                "id": "3effbf22-00d4-428a-802d-83ae1208d412",
                "label": "not found",
                "condition": "schema.notFound"
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "7982ecf9-1025-448a-a3b4-e6786f877429",
              "data": {
                "open": true,
                "header": "Storage settings",
                "inputs": [
                  {
                    "id": "94d1bf86-c3d4-412f-95ce-544021118ee4",
                    "data": {
                      "data": "{\n  \"collection\": \"``\",\n  \"key\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) { \n   if (_.isEqual(key, 'collection') || _.isEqual(key, 'key')) {\n    return data;\n  }\n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "collection : {\n  custom(value){\n    if(_.isEmpty(value)||!validators.jsExpressionNonEmptyString(value)){\n      return false\n    }\n    return true\n  },\n  code(value){\n    if(!validators.jsExpression(value)){\n      return false\n    }\n    return true\n  },\n  slash(value){\n    if(/\\//g.test(value)){\n      return false\n    }\n    return true\n  }\n},\nkey : {\n  custom(value){\n    if(_.isEmpty(value)||!validators.jsExpressionNonEmptyString(value)){\n      return false\n    }\n    return true\n  },\n  code(value){\n    if(!validators.jsExpression(value)){\n      return false\n    }\n    return true\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n      :collection.sync=\"schema.collection\" \n      :key.sync=\"schema.key\" \n      :is-new=\"isNew\" \n      :readonly=\"readonly\"\n      :steps=\"steps\" \n      :stepId=\"stepId\"\n      :v=\"$v\"\n      :mergeFields=\"mergeFields\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-fdwnmizyqsejoaglpbtkxucvrh",
                      "componentLogic": "{\n  computed : {\n    localCollection : {\n      get () { return this.collection; },\n      set (value) { this.$emit('update:collection', value); }\n    },\n    collectionErrorText(){\n      if(!this.v.schema.collection.custom){\n        return \"Collection name is required.\"\n      }else if(!this.v.schema.collection.code){\n        return \"Invalid JavaScript expression.\"\n      }else if(!this.v.schema.collection.slash){\n        return 'Collection name cannot contain \"/\".'\n      }\n    },\n    keyErrorText(){\n      if(!this.v.schema.key.custom){\n        return \"Key name is required.\"\n      }else if(!this.v.schema.key.code){\n        return \"Invalid JavaScript expression.\"\n      }\n    },\n    localKey : {\n      get () { return this.key; },\n      set (value) { this.$emit('update:key', value); }\n    }\n  },\n  methods: {\n  },\n  props : {\n    collection : {\n      type : String,\n      default : '``'\n    },\n    key : {\n      type : String,\n      default : '``'\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    stepId: {\n      type: String\n    },\n    steps: {\n      type: Object\n    },\n    v: {\n      type:Object,\n      default: ()=>({\n        schema:{\n          key:{},\n          collection:{}\n        }\n      })\n    },\n    mergeFields: {\n      type: Object\n    }\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "\n<div>\n  <or-text-expression \n    v-model=\"localCollection\"\n    :readonly=\"readonly\"\n    :mergeFields=\"mergeFields\"\n    :invalid=\"(!isNew || v.schema.collection.$dirty) && v.schema.collection.$invalid\"\n    @input=\"v.schema.collection.$touch\"\n    :error=\"collectionErrorText\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    label=\"Collection\"\n    help-text=\"Name of a collection\"\n  ></or-text-expression>\n  <or-text-expression \n    v-model=\"localKey\"\n    :readonly=\"readonly\"\n    :invalid=\"(!isNew || v.schema.key.$dirty) && v.schema.key.$invalid\"\n    @input=\"v.schema.key.$touch\"\n    :error=\"keyErrorText\"\n    :mergeFields=\"mergeFields\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    label=\"Key\"\n    help-text=\"Name of a key\"\n  ></or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "a32eada8-69fc-4d4a-a425-11688c4cc3c4",
                    "data": {
                      "label": "Process key not being found separately from error",
                      "helpText": "",
                      "variable": "notFound",
                      "labelLeft": false,
                      "trueLabel": "",
                      "trueValue": "",
                      "falseLabel": "",
                      "falseValue": "",
                      "isHtmlLabel": false,
                      "switchColor": "primary",
                      "advancedHelp": {
                        "link": {
                          "url": "",
                          "icon": "help",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "modal": {
                          "icon": "help",
                          "title": "",
                          "content": "",
                          "iconHelp": "",
                          "tooltipPosition": "top center"
                        },
                        "tooltip": {
                          "icon": "help",
                          "content": "",
                          "openTooltipOn": "hover",
                          "tooltipPosition": "top center"
                        }
                      },
                      "defaultValue": true,
                      "allowCodeMode": false,
                      "isHtmlHelpText": false,
                      "switchPosition": "left",
                      "isHtmlTrueLabel": false,
                      "overwriteLabels": false,
                      "overwriteValues": false,
                      "renderCondition": "",
                      "isHtmlFalseLabel": false,
                      "disabledCondition": "",
                      "helpDisplayOption": "hover",
                      "iconHelpTextOption": "none",
                      "validationConditions": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "compiled": {},
                    "component": "formSwitch"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "7ed86eba-b0a6-4632-9192-251a8c09904c",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "678ff681-2377-4c87-bafc-025f38f690f9",
                    "data": {
                      "label": "Prefix",
                      "helpText": "",
                      "variable": "prefix",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "renderCondition": "",
                      "trimWhitespaces": true,
                      "validateRequired": false,
                      "disabledCondition": ""
                    },
                    "meta": {
                      "name": "formTextBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text box",
                    "compiled": {},
                    "component": "formTextBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formTextBox\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "1358e915-8cdb-4ed7-b342-58a8aefe6a16",
              "data": {
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "f0b920b8-1a3d-49d2-babe-46b47f9ed12c",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "storageValue",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  },
                  {
                    "id": "3ef04185-3c47-48d6-bf0f-53c0ced02bd9",
                    "data": {
                      "data": "{\n  \"valueOutputExample\" : null\n}",
                      "toJson": "return {}",
                      "validators": "{\n  valueOutputExample : {\n    jsExpression: validators.jsExpression,\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :readonly=\"readonly\" \n  :output-example.sync=\"step.outputExample.value\"\n  v-model=\"schema.valueOutputExample\"\n  :v=\"$v\"\n  >\n</wildcard>",
                      "allowCodeMode": false,
                      "componentName": "or-wildcard-jyapmwnkxutzlhifsbeogqcvrd",
                      "componentLogic": "{\n  computed: {\n    outputExampleLocal: {\n      get () {\n        return _.isNil(this.value)\n          ? JSON.stringify(this.outputExample, null, 2)\n          : this.value;\n      },\n      set (value) {\n        const parsedValue = this.parseJsonValue(value);\n\n        this.$emit('input', value);\n        if (parsedValue) this.$emit('update:outputExample', parsedValue);\n      }\n    },\n    \n    errorMessage () {\n      return this.v.schema.valueOutputExample.$error\n        ? 'Invalid JSON'\n        : ''\n    }\n  },\n  \n  methods: {\n    parseJsonValue (value) {\n      try {\n        return new Function(`return ${value};`)();\n      } catch (error) {}\n    }\n  },\n  \n  props: {\n    outputExample : {\n      type : [Object, Array, String]\n    },\n    value : {\n      type : String,\n      default : null\n    },\n    readonly: {\n      type    : Boolean,\n      default : false\n    },\n    v : Object\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<or-code\n  :readonly=\"readonly\" \n  name=\"OutputExample\" \n  label=\"Value output example\" \n  v-model=\"outputExampleLocal\" \n  mode=\"json\"\n  :invalid=\"v.schema.valueOutputExample.$error\"\n  :error=\"errorMessage\"\n  :disableWarnings=\"true\"\n  >\n</or-code>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": false,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": true,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "{\n  value: {}\n}",
          "hasProcessError": true,
          "hasProcessTimeout": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "key": "``",
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "table": "``",
                "dataOut": "storageValue",
                "accountId": "``",
                "processError": false
              },
              "rawMode": false,
              "version": "086cb701-d9a2-4b77-8179-cac9f6431d23",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "2715ee6d-7a2e-4b18-9d38-00aace756893",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": true
              }
            },
            "script": null,
            "version": "0.5.0"
          },
          {
            "sample": null,
            "script": "const data = step.data;\n\n// skip migration if prefix is empty\nif (step.data.prefix === '``') return;\nif (step.data.prefix.match(/^`(?:\\\\`|[^`])+`$/))\n  // add '/' in the end of static prefix\n  step.data.prefix = step.data.prefix.replace(/^`(.+)`$/, '`$1/`');\nelse\n  // asume it's a code mode so adding `+'/'` in the end of expression\n  step.data.prefix = `${step.data.prefix}+'/'`;\n  \nstep.data.notFound = true;",
            "version": "0.6.0"
          },
          {
            "sample": null,
            "script": "// change outputExample.value to be an object\nconst outputExampleValue = _.get(step, ['outputExample', 'value'])\nif (_.isString(outputExampleValue)) {\n  step.outputExample.value = {}\n}\n\n// add field 'valueOutputExample'\nif (_.isUndefined(step.data.valueOutputExample)) {\n  step.data.valueOutputExample = null\n}\n",
            "version": "2.1.0"
          }
        ],
        "modules": [
          {
            "name": "lodash",
            "version": "",
            "variable": "_"
          }
        ],
        "dateModified": 1607446485016
      },
      {
        "id": "43d3d9da-bc39-44d3-953c-64a4d01b0f62",
        "version": "2.0.1",
        "cacheVersion": "aa2ec7e0-7e3d-4cfb-99b7-0f1652a58892",
        "label": "Add Item to Existing or New Array",
        "icon": "add_item_to_array",
        "iconType": "default",
        "iconUrl": "",
        "shape": "sun",
        "description": "Use this step to add specified items to an existing array or create  a new array with items.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Logical"
        ],
        "recommended": [],
        "tags": [],
        "template": "let sourceArr = [];\r\nlet parts = (mergeField||\"\").split('.');\r\nlet mergeFieldName = parts[0];\r\nlet path = parts.slice(1).join('.')\r\nlet result = {};\r\nlet firstToAdd = positionToAddInputData === 'firstAdded';\r\n\r\nif (isMergeField == \"existing\") {\r\n  sourceArr = _.cloneDeep(await this.mergeFields[mergeFieldName].get({\r\n    path\r\n  }));\r\n} else {\r\n  sourceArr = _.cloneDeep(await this.mergeFields[dataOut.name].get()) || []\r\n}\r\n\r\nif (!Array.isArray(sourceArr)) throw new Error('Source is not Array');\r\nif (items.includes(`error`)) throw new Error('Items are required');\r\n\r\nswitch (arrayInputBehavior) {\r\n  case 'wholeArray':\r\n    sourceArr[firstToAdd ? 'unshift' : 'push'](items);\r\n    break;\r\n  case 'individually':\r\n    sourceArr = firstToAdd ?\r\n      [...items, ...sourceArr] :\r\n      [...sourceArr, ...items];\r\n    break;\r\n  default:\r\n    throw new Error(`Option ${arrayInputBehavior} is not supported`);\r\n}\r\n\r\nif (isMergeField == \"existing\") {\r\n  await this.mergeFields[mergeFieldName].set(sourceArr, path);\r\n  \r\n  return this.exitStep('next');\r\n\r\n}\r\n\r\nreturn this.exitStep('next', sourceArr);",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "items": [],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "mergeField": [],
          "isMergeField": "existing",
          "processError": true,
          "arrayInputBehavior": "`individually`",
          "positionToAddInputData": "`lastAdded`"
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Use this step to add specified items to an existing array or create a new array with items. If you choose the *existing array* option, the source array will be updated with the defined items. Choosing the *new array* option will create a new array with items, that will be stored in the output of the step.\n\n### Add item options\nThe *Source* field input can be chosen from the list of *merge fields*. Its value is expected as a JSON array.\n\nMultiple items can be added via *Add new item* button. The value of each item can contain any data type and can be declared via a *merge field* or in code mode.\n\nYou can choose to add each item either *as an array of items in the input array* or *each as a separate item of the input array*, and place them either as the *first* or the *last* item of the input array. For example:\n\n```\nInput data:\nSource: [1, 2, 3, 4]\nItem 1: 1\nItem 2: `text`\nItem 3: {\n         \"item 3\": \"3\"\n         }\nItem 4: this.get('item4.value')\nPosition: first \n```\nIf you choose the option *as an array of items in the input array*, the output will be:\n```\n[[1, `text`, {\"item 3\": \"3\"}, item4.value], 1, 2, 3, 4]\n```\nIf you choose the option *each as a separate item of the input array*, the output will be:\n```\n[1, `text`, {\"item 3\": \"3\"}, item4.value, 1, 2, 3, 4]\n```\n\nThe output data of the step will be stored under the name provided in *merge field name*. If *existing array* option is chosen, the output will be empty. If *new array* option is chosen,    an array with defined items will be added.\n\n### Error handling\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed down this exit if any error was encountered during the execution of the step, e.g. if the source of the input data isn't an array.\n\n### Reporting events\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n### Release notes\n#### 2.0.1\n- The step output has been changed from an object to an array.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "4ab5c261-9ad2-4507-b91d-89330db2e56d",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "08e11409-65a1-4128-a8e1-fd81ec6c9d60",
              "data": {
                "data": "{\n  \"isMergeField\":\"existing\",\n  \"dataOut\":{}\n}",
                "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data,(v,k)=>_.includes(['source'],k)?v:toJson(v));",
                "validators": "{\n  mergeField:{\n    custom(value,ctx){\n      if(ctx.isMergeField === 'existing')\n        return !_.isEmpty(value)\n      return true\n    }\n  }\n}",
                "applyToJson": false,
                "formTemplate": "<wildcard \n  :isMergeField.sync=\"schema.isMergeField\"\n  :source.sync=\"schema.source\"\n  :step-name=\"schema.dataOut.name\"\n  :is-new=\"isNew\" \n  :readonly=\"readonly\" \n  :merge-fields=\"mergeFields\" \n  :v=\"$v\"\n  :step-id=\"stepId\"\n  :steps=\"steps\"\n></wildcard>",
                "allowCodeMode": true,
                "componentName": "or-wildcard-hipufjngqrdawzvsbkxemctlyo",
                "componentLogic": "{\n  data(){\n    return {\n      options:[\n        {\n          label:\"Existing array\",\n          value:\"existing\"\n        },{\n          label:\"New array\",\n          value:\"new\"\n        }\n      ]\n    }\n  },\n  computed : {\n\n      listOfMergeFields(){\n        return _\n          .chain(this.mergeFields)\n          .flatMap('variables')\n          .map('variableName')\n          .value()\n      },\n      // localMergeField : {\n      //     get () { return this.mergeField; },\n      //     set (value) { \n      //       this.$emit('update:mergeField', value);\n      //     }\n      // },\n      localIsMergeField : {\n          get () { return this.isMergeField; },\n          set (value) { \n            this.$emit('update:isMergeField', value);\n          }\n      },\n    },\n    mounted(){\n      // this.localMergeField = _.find(this.listOfMergeFields,v=>v===this.localMergeField)||\"\";\n    },\n    props : {\n        // mergeField : String,\n        // source : String,\n        isMergeField : String,\n        stepName : String,\n        \n        isNew : Boolean,\n        readonly: {\n            type : Boolean \n        },\n        mergeFields: {\n            type: Array\n        },\n        steps: {\n            type: Array,\n            default: () => {\n                return []\n            }\n        },\n        stepId: {\n            type : String,\n            default : ''\n        },\n        v :{\n          type:Object,\n          default: ()=>({})\n        }\n    }\n}",
                "renderCondition": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentTemplate": "<div>\n  <or-alert v-show=\"localIsMergeField === 'existing'\" :dismissible=\"false\">\n    In case of using existing array, step will not produce any data. It will only change the array passed to it.\n  </or-alert>\n  <or-radio-group v-model=\"localIsMergeField\" :disabled='readonly' :options=\"options\"></or-radio-group>\n  <!--<or-select\n    label=\"Source\"\n    v-if=\"localIsMergeField==='existing'\"\n    placeholder=\"Select source\"\n    v-model=\"localMergeField\" \n    :options=\"listOfMergeFields\"\n    :disable=\"readonly\"  \n    :invalid=\"v.schema.mergeField.$error\"\n    error=\"Source is required\"\n    has-search\n  ></or-select>-->\n</div>",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ""
              },
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "6998d27b-a17b-406a-a1c8-7a059353d87b",
              "data": {
                "icon": "",
                "label": "Source",
                "options": [],
                "helpText": "",
                "multiple": false,
                "variable": "mergeField",
                "hasSearch": true,
                "optionsMode": "mergeFields",
                "placeholder": "Select source",
                "advancedHelp": {
                  "link": {
                    "url": "",
                    "icon": "help",
                    "iconHelp": "",
                    "tooltipPosition": "top center"
                  },
                  "modal": {
                    "icon": "help",
                    "title": "",
                    "content": "",
                    "iconHelp": "",
                    "tooltipPosition": "top center"
                  },
                  "tooltip": {
                    "icon": "help",
                    "content": "",
                    "openTooltipOn": "hover",
                    "tooltipPosition": "top center"
                  }
                },
                "defaultValue": [],
                "dropdownType": "basic",
                "iconPosition": true,
                "optionsArray": "[{ \"label\": \"OneReach\", \"value\": \"onereach\" }]",
                "allowCodeMode": true,
                "dynamicOptions": "",
                "optionsDefault": [],
                "optionsDynamic": "\n// if you need data from schema, use 'this.schema' object\nlet myArr = [];\nfor (let i = 0; i < 10; i++) {\n    myArr.push({ label: `Number ${i}`, value: i });\n}\nreturn myArr;",
                "renderCondition": "",
                "conditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "8941d5b5-3d2c-4966-9494-524505678edc",
                      "ruleType": {
                        "func": "{ return _.isEqual(firstValue, secondValue) }",
                        "type": "double",
                        "input": [
                          "mixed",
                          "mixed"
                        ],
                        "label": "exactly matches",
                        "modes": [
                          "strict"
                        ],
                        "category": "general"
                      },
                      "codeValue": "``",
                      "valueType": "general",
                      "firstValue": "schema.isMergeField",
                      "secondValue": "`existing`",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "mergeFieldsTypes": [
                  "session",
                  "shared",
                  "global"
                ],
                "validateRequired": false,
                "defaultArrayValue": [],
                "disabledCondition": "",
                "extendableOptions": false,
                "optionsKeysCustom": false,
                "iconHelpTextOption": "none",
                "mergeFieldsIsGroup": true,
                "allowUseMergeFields": false,
                "allowOnlyMergeFields": false,
                "validationConditions": [
                  {
                    "vforkey": "99f7e849-edca-48b3-b8ce-3635c782f5f4",
                    "errorMessage": "Source is required",
                    "validationCondition": {
                      "label": "`Validation condition`",
                      "rules": [
                        {
                          "modes": [],
                          "vforkey": "3a22e3fc-a3b7-4513-8bbe-6027302eb943",
                          "ruleType": {
                            "func": "{ return _.isNil(firstValue) || _.isEmpty(firstValue) }",
                            "type": "single",
                            "input": [
                              "mixed"
                            ],
                            "label": "doesn't have a value",
                            "modes": [
                              "trimQuotes"
                            ],
                            "category": "general"
                          },
                          "codeValue": "``",
                          "valueType": "general",
                          "firstValue": "schema.mergeField",
                          "secondValue": "``",
                          "caseInsensitive": true,
                          "isDisabledSecondValue": false
                        }
                      ],
                      "trueValue": "any",
                      "description": "``",
                      "defaultValue": false,
                      "isNotCollapsed": true,
                      "isEditableHeader": false
                    }
                  }
                ],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [
                    {
                      "modes": [],
                      "vforkey": "8941d5b5-3d2c-4966-9494-524505678edc",
                      "ruleType": {
                        "func": "{ return _.isEqual(firstValue, secondValue) }",
                        "type": "double",
                        "input": [
                          "mixed",
                          "mixed"
                        ],
                        "label": "exactly matches",
                        "modes": [
                          "strict"
                        ],
                        "category": "general"
                      },
                      "codeValue": "``",
                      "valueType": "general",
                      "firstValue": "schema.isMergeField",
                      "secondValue": "`existing`",
                      "caseInsensitive": true,
                      "isDisabledSecondValue": false
                    }
                  ],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formSelectExpression"
            },
            {
              "id": "44602787-f110-487d-8042-16c2e01d5b1c",
              "data": {
                "data": "{\n  \"items\": []\n}",
                "toJson": "function toJson(data, key) {\n  if (key === \"items\"){\n    const array = [];\n    _.forEach(data,function(item) {\n      let regex = RegExp(/this\\.get\\(\\'\\'\\)/);\n      if (!(!_.isEmpty(item.value) && !/get\\(''\\)/.test(item.value) && !/mergeFields\\[''\\]/.test(item.value)))\n      array.push(\"`error`\");\n      else array.push(item.value);\n    });\n    return `[${array.map(el=>`(${el})`).join(',')}]`;\n  }\n}\nreturn _.mapValues(data, toJson);",
                "validators": "items: {\n  $each: {\n    value: {\n        custom(value, ctx) {\n            if (!(!_.isEmpty(value) && !/get\\(''\\)/.test(value) && !/mergeFields\\[''\\]/.test(value) )|| !validators.jsExpression(value)){\n                return false;\n            }\n            return true;\n          }\n    }\n  }\n}\n\n",
                "applyToJson": true,
                "formTemplate": "<wildcard \n  :steps=\"steps\" \n  :stepId=\"stepId\"\n  :merge-fields=\"mergeFields\"\n  v-model=\"schema.items\" \n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :readonly=\"readonly\"\n></wildcard>",
                "allowCodeMode": true,
                "componentName": "or-wildcard-rqdoeafcujyslphngbxwzmvtik",
                "componentLogic": "{\n  mounted() {\n    if (this.$refs.itemList.items.length === 0){\n        this.$refs.itemList.addItem();\n      }\n  },\n  computed : {\n    items : {\n      get () { return this.value; },\n      set (newValue) {\n        this.$emit('input', newValue); \n      }\n    },\n    variableValueLocal: {\n      get() {\n            return this.variableValue;\n          },\n      set(newValue) {\n            this.$emit('update:variableValue', newValue);\n      }\n    }\n  },\n  methods: {\n    getValueErrorText (value) {\n      \n      if (!(!_.isEmpty(value) && !/get\\(''\\)/.test(value) && !/mergeFields\\[''\\]/.test(value)))\n      return 'Item is required';\n      if (!validators.jsExpression(value)) {\n        return 'Invalid JavaScript expression';\n      }\n      return '';\n    },\n    newListItemMethod() {\n      return {\n        value : \"\"\n      }\n    }\n  },\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    steps: null,\n    stepId: null,\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {items : []}\n        }\n      },\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    items: []\n  }\n}\n\n\n",
                "renderCondition": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentTemplate": "<div class=\"items_list\">\n<h4 class=\"m-b-0\"> Items to add </h4>\n  <or-list\n   class=\"width-100 variables-list\"\n    ref=\"itemList\"\n    v-model=\"items\" \n    :steps=\"steps\"\n    :step-id=\"stepId\"\n    :merge-fields=\"mergeFields\"\n    :new-item-method=\"newListItemMethod\"\n    add-button-label=\"Add new item\"\n    :readonly=\"readonly\"\n    :can-remove-last-item=\"false\"\n    :can-drag-items=\"false\"\n    can-delete-items\n    :prettify-drag=\"false\"\n  >\n    <template \n      slot-scope=\"item\"\n    >\n      <or-merge-tag-input\n        with-code-mode\n        :list-length=\"items.length\"\n        @remove-list-item=\"removeItem($refs.itemList.items.length, item.index)\"\n        v-model=\"item.item.value\"\n        :steps=\"item.steps\" \n        :step-id=\"item.stepId\"\n        :merge-fields=\"mergeFields\"\n        :label=\"`Item ${item.index+1}`\"\n        :readonly=\"item.readonly\"\n        :v=\"v.schema.items\"\n        :invalid=\"v.schema.items.$each[item.index].value.$error\"\n        @input=\"v.schema.items.$each[item.index].value.$touch()\"\n        :error=\"getValueErrorText(item.item.value)\"\n        :index=\"item.index\"\n      ></or-merge-tag-input>\n    </template>\n    <div slot=\"footer\">\n      <or-button \n        disableRipple\n        class=\"flat\"\n        type=\"secondary\"\n        color=\"primary\"\n        icon=\"add\"\n        :disabled=\"readonly\"\n        @click.stop.prevent=\"$refs.itemList.addItem\">\n        Add new item\n      </or-button>\n    </div>\n  </or-list>\n</div>",
                "wildcardTemplates": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "componentCompiledStyles": "",
                "componentOriginalStyles": ".items_list {\n  margin-top: 30px;\n  margin-bottom: 25px;\n}\n.m-b-5 {\n  margin-bottom: 5px;\n}\n.m-b-10 {\n  margin-bottom: 10px;\n}\n.m-b-0 {\n  margin-bottom: 0;\n}\n.or-list .list-item{\n  display: flex;\n}\n.or-list .list-item>.remove-button{\n   align-self: flex-start;\n   margin-top: 2.1rem;\n}\n.or-list-items .list-item {\n  padding-top: 0;\n}\n.width-100 {\n  width: 100%;\n}\n.display-flex {\n  display: flex;\n}\n.display-none {\n  display: none;\n}\n.sortable-handle {\n  margin-top: 22px;\n}\n.variables-list.or-list .list-item .sortable-handle {\n    align-self: flex-start;\n    margin-top: 2.6rem;\n}\n.items_list .or-text-expression{\n  width: 0;\n  flex :1;\n}\n\n"
              },
              "meta": {
                "name": "formWildcard",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Wildcard",
              "compiled": {},
              "component": "formWildcard"
            },
            {
              "id": "66c49515-f29f-4004-b977-f92b5b6eb08d",
              "data": {
                "open": true,
                "header": "Array settings",
                "inputs": [
                  {
                    "id": "d5e9c156-bedc-434d-a293-1850f43ddefd",
                    "data": {
                      "data": "{\n  \"arrayInputBehavior\": \"`individually`\",\n  \"positionToAddInputData\": \"`lastAdded`\"\n}",
                      "toJson": "function toJson(data, key) {\n if (key === \"arrayInputBehavior\"){\n   return data;\n }\n if (key === 'positionToAddInputData'){\n  return data;\n  }\n\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "\n",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  :steps=\"steps\" \n  :stepId=\"stepId\" \n  :array-input-behavior.sync=\"schema.arrayInputBehavior\"\n  :position-to-add-input-data.sync=\"schema.positionToAddInputData\"\n  :is-new=\"isNew\"\n  :v=\"$v\"\n  :readonly=\"readonly\"\n></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-cjtounwslfpqbvkregzdmhaxiy",
                      "componentLogic": "{\n  data () {\n    return {\n      radioOptionsType: [\n        { label: 'each as a separate item', value: \"`individually`\"},\n        { label: 'as an array of items', value: \"`wholeArray`\"}\n      ],\n      radioOptionsPlace: [\n        { label: 'first', value: \"`firstAdded`\"},\n        { label: 'last', value: \"`lastAdded`\"}\n        \n      ]\n    }\n  },\n  computed : {\n    arrayInputBehaviorLocal : {\n      get () { return this.arrayInputBehavior; },\n      set (value) { this.$emit('update:arrayInputBehavior', value); }\n    },\n    positionToAddInputDataLocal : {\n      get () { return this.positionToAddInputData; },\n      set (value) { this.$emit('update:positionToAddInputData', value); }\n    }\n  },\n  props : {\n    value : {\n      type : String,\n      default : ''\n    },\n    arrayInputBehavior : {\n      type : String,\n      default : \"`wholeArray`\"\n    },\n    positionToAddInputData : {\n      type : String,\n      default : \"`lastAdded`\"\n    },\n    steps: null,\n    stepId: null,\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  }\n}\n\n\n",
                      "renderCondition": "",
                      "componentTemplate": "<or-radio-group name=\"arrayBehaviorRadioGroup\" label=\"New items should be added:\" v-model=\"arrayInputBehaviorLocal\" :options=\"radioOptionsType\" :vertical=true :disabled=\"readonly\"></or-radio-group>\n<or-radio-group class=\"m-t-10\" name=\"positionRadioGroup\" label=\"New items position:\" v-model=\"positionToAddInputDataLocal\" :options=\"radioOptionsPlace\" :vertical=true :disabled=\"readonly\"></or-radio-group>",
                      "wildcardTemplates": [
                        {
                          "id": "98297a15-eb3d-46fc-a51a-213f74c5056e",
                          "mode": "html",
                          "title": "",
                          "template": "// <div class=\"display-flex width-100\">\n//       <or-text-expression \n//         @mode-changed=\"changeState\"\n//         ref=\"itemInput\"\n//         v-model=\"valueLocal\"\n//         :readonly=\"readonly\"\n//         :steps=\"steps\"\n//         :step-id=\"stepId\"\n//         :disable-code-mode=\"true\"\n//         :label=\"label\"\n//         :invalid=\"invalid\"\n//         error=\"This field is invalid\"\n//       ></or-text-expression>\n//       <or-icon-button :disabled=\"readonly\" disableRipple type=\"secondary\" class=\"popover-trigger\" has-dropdown icon=\"more_vert\" ref=\"dropdownButton\">\n//         <or-menu\n//         contain-focus\n//         has-icons\n//         slot=\"dropdown\"\n//         :options=\"menuOptions\"\n//         @close=\"$refs.dropdownButton.closeDropdown()\"\n//         @select=\"selectOptions\"\n//         ></or-menu>\n//       </or-icon-button>\n// </div>\n\n\n\n\n\n\n\n\n\n\n\n",
                          "variable": ""
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".m-t-10{\n  margin-top: 10px;\n}\n.ui-radio-group__label-text {\n  font-weight: 600;\n  color: black;\n  font-size: 0.8rem;\n}\n.ui-radio .ui-radio__input-wrapper {\n  margin-top: .1rem;\n}\n.ui-radio .ui-radio__label-text {\n  font-size: 14px;\n}\n.ui-radio-group:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text {\n  color: rgba(0,0,0,.75);\n}\n.ui-radio-group__label-text{\n  color: black;\n  font-size: 0.8rem;\n  font-weight: 600;\n}\n\n\n\n"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "bde577fa-1455-410b-9844-a8d294a44446",
              "data": {
                "meta": {
                  "containerFor": "formDataOut"
                },
                "open": false,
                "header": "Merge field settings",
                "inputs": [
                  {
                    "id": "98269f34-4a5b-410f-ac10-2da9c06e4ddc",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "Specify the name of the merge field where the step’s result will be stored and can be reused later in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": false
                    },
                    "meta": {
                      "name": "formDataOut",
                      "type": "onereach-studio-form-input",
                      "private": true,
                      "version": "1.0"
                    },
                    "label": "Merge field name",
                    "compiled": {},
                    "component": "formDataOut",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://components.staging.onereach.ai/index.js\"][\"formDataOut\"]"
                    ]
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "rememberedState": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "",
          "hasProcessError": true,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "items": [],
                "dataOut": "addItemToArray",
                "arrayInputBehavior": "`wholeArray`",
                "arrayForAddingItems": "",
                "positionToAddInputData": "",
                "changeArrayForAddingItems": true
              },
              "rawMode": false,
              "version": "a16f2409-95f6-488f-a5b2-aa89df9e32de",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "4ab5c261-9ad2-4507-b91d-89330db2e56d",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "step.data.isMergeField = \"new\";\nstep.data.mergeField = \"\";\nstep.data.source = step.data.arraySource||\"[]\";",
            "version": "1.0.0"
          },
          {
            "sample": null,
            "script": "step.outputExample = null\nstep.data.mergeField = `\\`${step.data.mergeField}\\``",
            "version": "2.0.1"
          }
        ],
        "dateModified": 1597421546096
      },
      {
        "id": "d042fa69-0da9-440b-90da-849d786ec514",
        "version": "2.0.0",
        "cacheVersion": "45462bda-a694-4ea0-b763-69800702932f",
        "label": "Set Value to a Storage",
        "icon": "database",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "Use this step to set a value to a key in a chosen key-value storage collection.",
        "isGatewayStep": false,
        "publishedBy": "Mustard Labs",
        "categories": [
          "Key-Value Storage"
        ],
        "recommended": [],
        "tags": [],
        "template": "const Storage = require('or-sdk/storage');\nconst timestring = require('timestring');\nconst moment = require('moment');\n\nif (!_.isString(collection) || !_.isString(key) || !_.isString(prefix))\n  throw new Error('\"collection\", \"key\" and \"prefix\" has to be a string');\n\ncollection = _.trim(collection);\nprefix = _.trim(prefix);\nkey = _.trim(key);\nttl_value_after = _.trim(ttl_value_after);\n\nif (_.includes(['undefined', 'null', '[object Object]'], collection) || _.isEmpty(collection))\n  throw new Error('Invalid collection name: cannot be undefined, empty or an object');\n\nif (_.includes(['undefined', 'null','[object Object]'], key) || _.isEmpty(key))\n  throw new Error('Invalid key name: cannot be undefined, empty or an object');\n\nif (_.includes(['undefined', 'null', '[object Object]'], prefix))\n  throw new Error(`Invalid prefix name: \"${prefix}\"`);\n\nif (_.includes(['[object Object]'], value))\n  throw new Error(`Invalid value: \"${value}\"`);\n\nif (ttl_label == \"After interval\" && _.includes(['', 'undefined'], ttl_value_after))\n  throw new Error(`Invalid value in \"After interval\" field: \"${ttl_value_after}\"`);\n\nif (_.includes(collection, '/'))\n  throw new Error('Collection name cannot contain \"/\"');\n\nconst pre_key = prefix ? `${prefix}${key}` : key;\nlet expire;\n\nswitch (ttl_label) {\n  case 'Never':\n    break;\n  case 'After interval':\n    let delay;\n    try{\n      delay = timestring(ttl_value_after, 'ms');\n    } catch(e) {\n      throw new Error('Please enter correct value of \"After interval\" field')\n    }\n    if(delay < 40){\n      throw new Error('Record expiration time cannot be less than 40 ms')\n    }\n    expire = Date.now() + delay;\n    break;\n  case 'On a specific date':\n    const ttlUntil = moment(ttl_value_until);\n    \n    if (!ttlUntil.isValid()) throw new Error(`Invalid specific date: \"${ttl_value_until}\"`);\n    \n    expire = ttlUntil.valueOf();\n    break;\n}\n\nthis.log.debug(`Setting value for key '${key}' in a collection '${collection} with ${prefix || 'no prefix'}'...`);\nconst storage = new Storage(this);\nawait storage.set(collection, pre_key, value, expire);\n\nreturn this.exitStep('next');\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "key": "``",
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "__error__",
              "label": "error",
              "condition": "processError"
            }
          ],
          "value": "``",
          "prefix": "``",
          "ttl_label": "After interval",
          "collection": "``",
          "processError": true,
          "ttl_value_after": "`10 d`",
          "ttl_value_until": null
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Use this step to set a value to a key in a chosen key-value storage collection. Only one key-value pair can be added during step execution.\n\n### Storage settings\n\n*Collection* is the name of the top level of your key-value storage. If a collection with chosen name does not exist, it will be created. *Key* is the name of the entity that will store a value. Both collection and key inputs are expected as *string* values, cannot be `null`, `undefined` or empty, and collection cannot contain the `/` symbol. The *Value* can be empty or contain any data type except `undefined`. If the defined key name already exists, its value and expiration time will be overwritten. All three fields can be set manually, declared with a *merge field value* or written in code mode. For example:\n```\nCollection: Temperature\nKey: USA/Missouri/St.Loius\nValue: +45F\n```\nWill set the \"+45F\" value to the \"USA/Missouri/St.Loius\" key in the \"Temperature\" collection.\n\nBy default, both key and its value will expire 10 days after they were added to the collection. You can change this time period the *Record expiration time* section. Minimal value is 40 ms, acceptable time formats: `4 weeks 5d 7h 3min`, `1y 2m 23d 15h`, `27h 59m`. Alternatively, you can choose to set a specific expiration date and time (hours and minutes) or keep the key-value indefinitely. Note that the step will choose the timezone of the device used to activate the flow.\n\n### Advanced settings\n*Prefix* is part of the name of the key that is added to its front. The field is not required but can be used to clarify or diversify the keys in a collection. Using a single `/` symbol in the key name also works like a prefix: it creates an extra hierarchical level in the path. If you wish for prefix to be easily separated from the key, end it with the `/` symbol, for example:\n```\nCollection: Temperature\nKey: USA/Missouri/St.Loius\nValue: +45F\nPrefix: 2019/09/01/\n```\nWill set the \"+45F\" value to the \"2019/09/01/USA/Missouri/St.Loius\" key in the \"Temperature\" collection. \n\n### Error handling\n\n*Process error* is on by default and adds an *error* exit to the step. The flow will proceed through it if any error was encountered during the execution of the step (e.g. *After interval* input is not valid).\n\n### Reporting events\n\n*Step* event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.",
        "formBuilder": {
          "stepExits": [
            {
              "id": "2715ee6d-7a2e-4b18-9d38-00aace756893",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "37714b3e-142c-4a20-aad3-dcd667f3cc8f",
              "data": {
                "open": true,
                "header": "Storage settings",
                "inputs": [
                  {
                    "id": "e6f738d9-205a-48c7-96e6-f8b5114a1e88",
                    "data": {
                      "data": "{\n  \"collection\": \"``\",\n  \"key\": \"``\"\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) { \n   if (_.isEqual(key, 'collection') || _.isEqual(key, 'key')) {\n    return data;\n  }\n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "collection : {\n  custom(value){\n    if(_.isEmpty(value)||!validators.jsExpressionNonEmptyString(value)){\n      return false\n    }\n    return true\n  },\n  code(value){\n    if(!validators.jsExpression(value)){\n      return false\n    }\n    return true\n  },\n  slash(value){\n    if(/\\//g.test(value)){\n      return false\n    }\n    return true\n  }\n},\nkey : {\n  custom(value){\n    if(_.isEmpty(value)||!validators.jsExpressionNonEmptyString(value)){\n      return false\n    }\n    return true\n  },\n  code(value){\n    if(!validators.jsExpression(value)){\n      return false\n    }\n    return true\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n      :collection.sync=\"schema.collection\" \n      :key.sync=\"schema.key\" \n      :is-new=\"isNew\" \n      :readonly=\"readonly\"\n      :steps=\"steps\" \n      :stepId=\"stepId\"\n      :v=\"$v\"\n      :mergeFields=\"mergeFields\">\n</wildcard>",
                      "componentName": "or-wildcard-kwilmaxbghscydenvftuqojprz",
                      "componentLogic": "{\n  computed : {\n    localCollection : {\n      get () { return this.collection; },\n      set (value) { this.$emit('update:collection', value); }\n    },\n    collectionErrorText(){\n      if(!this.v.schema.collection.custom){\n        return \"Collection name is required.\"\n      }else if(!this.v.schema.collection.code){\n        return \"Invalid JavaScript expression.\"\n      }else if(!this.v.schema.collection.slash){\n        return `Collection name cannot contains \"/\".`\n      }\n    },\n    keyErrorText(){\n      if(!this.v.schema.key.custom){\n        return \"Key name is required.\"\n      }else if(!this.v.schema.key.code){\n        return \"Invalid JavaScript expression.\"\n      }\n    },\n    localKey : {\n      get () { return this.key; },\n      set (value) { this.$emit('update:key', value); }\n    }\n  },\n  methods: {\n  },\n  props : {\n    collection : {\n      type : String,\n      default : '``'\n    },\n    key : {\n      type : String,\n      default : '``'\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    stepId: {\n      type: String\n    },\n    steps: {\n      type: Object\n    },\n    v: {\n      type:Object,\n      default: ()=>({\n        schema:{\n          key:{},\n          collection:{}\n        }\n      })\n    },\n    mergeFields: {\n      type: Object\n    }\n  }\n}",
                      "componentTemplate": "\n<div>\n  <or-text-expression \n    v-model=\"localCollection\"\n    :readonly=\"readonly\"\n    :mergeFields=\"mergeFields\"\n    :invalid=\"(!isNew || v.schema.collection.$dirty) && v.schema.collection.$invalid\"\n    @input=\"v.schema.collection.$touch\"\n    :error=\"collectionErrorText\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    label=\"Collection\"\n    help-text=\"Name of a collection\"\n  ></or-text-expression>\n  <or-text-expression \n    v-model=\"localKey\"\n    :readonly=\"readonly\"\n    :invalid=\"(!isNew || v.schema.key.$dirty) && v.schema.key.$invalid\"\n    @input=\"v.schema.key.$touch\"\n    :error=\"keyErrorText\"\n    :mergeFields=\"mergeFields\"\n    :steps=\"steps\" \n    :step-id=\"stepId\"\n    label=\"Key\"\n    help-text=\"Name of a key\"\n  ></or-text-expression>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "f415448b-7d10-472d-9ed5-cab036bf0d99",
                    "data": {
                      "label": "Value",
                      "helpText": "Enter a value",
                      "variable": "value",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "renderCondition": "",
                      "trimWhitespaces": true,
                      "validateRequired": false
                    },
                    "meta": {
                      "name": "formTextBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text box",
                    "compiled": {},
                    "component": "formTextBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formTextBox\"]"
                    ]
                  },
                  {
                    "id": "1ae8ae39-be89-47a1-b003-19c8c3686544",
                    "data": {
                      "data": "{ \"ttl_label\": \"After interval\",\n  \"ttl_value_after\": \"`10 d`\",\n  \"ttl_value_until\": null\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) {\n  if (_.isDate(data)) {\n      return JSON.stringify(data);\n  }\n  if (_.isEqual(key, \"ttl_value_after\")) {\n    return data;\n  }\n if (_.isArray(data)) {\n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n\n    return JSON.stringify(data);\n}\n\nreturn _.mapValues(data, toJson);",
                      "validators": "\nttl_value_after : {\n  custom(value,ctx){\n    if(ctx.ttl_label=='After interval' && (_.isEmpty(value)||!validators.jsExpressionNonEmptyString(value))){\n      return false\n    }\n    return true\n  },\n  code(value,ctx){\n    if(ctx.ttl_label=='After interval',!validators.jsExpression(value)){\n      return false\n    }\n    return true\n  },\n  \n},\nttl_value_until:{\n  custom(value,ctx){\n    if(ctx.ttl_label=='On a specific date' && (_.isNil(value) || _.isEmpty(value)||!validators.jsExpressionNonEmptyString(value))){\n      return false\n    }\n    return true\n  },\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard \n  v-model=\"schema.stepVariable\" \n  :schema=\"schema\"\n  :steps=\"steps\" \n  :step-id=\"stepId\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\" \n  :mergeFields=\"mergeFields\"\n  :v=\"$v\"\n  :ttl_label.sync=\"schema.ttl_label\"\n  :ttl_value_after.sync=\"schema.ttl_value_after\"\n  :ttl_value_until.sync=\"schema.ttl_value_until\">\n</wildcard>",
                      "componentName": "or-wildcard-jgleacvknxbiqwspofurdtmyzh",
                      "componentLogic": " {\n  computed : {\n    afterErrorText(){\n      if(!this.v.schema.ttl_value_after.custom){\n        return \"After interval is required.\"\n      }else if(!this.v.schema.ttl_value_after.code){\n        return \"Invalid JavaScript expression.\"\n      }\n    },\n    ttl_label_in : {\n      get () { return this.ttl_label; },\n      set (value) { \n      this.$emit('update:ttl_label', value);\n      }\n    },\n    \n    ttl_value_after_in : {\n      get () { return this.ttl_value_after; },\n      set (value) { \n      this.$emit('update:ttl_value_after', value);\n      }\n    },\n    ttl_value_until_in:{\n      get () { return this.ttl_value_until ? new Date(this.ttl_value_until) : null },\n      set (value) { \n        this.$emit('update:ttl_value_until', libs.moment(value).format('YYYY-MM-DD HH:mm Z'));\n      }\n    }\n  },\n  methods: {\n    pickerFormatter(date){\n      return libs.moment(date).format(\"YYYY-MM-DD  HH:mm\");\n    },\n    handleErrorText(value) {\n      return !_.isEmpty(value.slice(1,-1)) ? this.regexValidate(value) ? 'Enter valid value' : '' : 'Field is required';\n    },\n    regexValidate(value) {\n      const reduced = value.slice(1,-1);\n      const regex = /\\//g;\n      const emptyRegex = /^\\s+$/;\n      const res = regex.test(reduced) || _.isEmpty(reduced) || emptyRegex.test(reduced);\n      \n      return res;\n    }\n  },\n  watch:{\n      c (newValue) {\n        this.$emit('update:ttl_value_until', libs.moment(newValue).format(\"YYYY-MM-DD  HH:mm Z\"));\n    }\n  },\n  props : {\n    ttl_value_after: {\n      type : String,\n      default : \"`10 d`\"\n    },\n    v:{\n      type:Object,\n      default: ()=>({\n        schema:{\n          ttl_value_until: {},\n          ttl_value_after:{},\n          ttl_label: {}\n        }\n      })\n    },\n    ttl_value_until: {\n      type : String,\n      default : null\n    },\n    ttl_label: {\n      type : String,\n      default : \"Never\"\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean \n    },\n    mergeFields: {\n      type: Object\n    },\n    stepId: {\n      type: String\n    },\n    steps: {\n      type: Object\n    },\n    schema: ()=>{}\n  }\n}",
                      "componentTemplate": "<div class=\"m-t-20\">\n  <h5>Record expiration time</h5>\n  <div class=\"flex\">\n    <or-radio-group \n      vertical\n      :options=\"['Never', 'After interval', 'On a specific date']\" \n      :disabled=\"readonly\"\n      v-model=\"ttl_label_in\">\n    </or-radio-group>\n    <or-text-expression \n        class=\"m-l-10 w-1\"\n        :steps=\"steps\" \n        :step-id=\"stepId\"\n        :mergeFields=\"mergeFields\"\n        v-if=\"ttl_label_in===`After interval`\" \n        v-model=\"ttl_value_after_in\" \n        :readonly=\"readonly\"\n        help-text=\"For example 10d 2h 5m\"\n        :error=\"afterErrorText\"\n        :invalid=\"(!isNew || v.schema.ttl_value_after.$dirty) && v.schema.ttl_value_after.$invalid\"\n        @input=\"v.schema.ttl_value_after.$touch\">\n    </or-text-expression>\n    <or-datepicker \n      class=\"m-l-10 w-1 m-t-65\"\n      :disabled=\"readonly\"\n      v-if=\"ttl_label_in===`On a specific date`\" \n      with-time placeholder=\"YYYY-MM-DD  HH:mm\"\n      :invalid=\"(!isNew || v.schema.ttl_value_until.$dirty) && v.schema.ttl_value_until.$invalid\"\n      @input=\"v.schema.ttl_value_until.$touch\"\n      error=\"On a specific date is requried.\"\n      v-model=\"ttl_value_until_in\" \n      :custom-formatter=\"pickerFormatter\">\n    </or-datepicker>\n  </div>\n  </div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".flex{\n  display:flex;\n  flex: 1\n}\n.m-t-65{\n  margin-top: 65px;\n}\n.m-t-20{\n  margin-top: 20px;\n}\n.ui-radio-group:not(.is-disabled):not(.is-invalid).is-active .ui-radio-group__label-text{\n  color: black;\n}\n.m-l-10{\n  margin-left: 10px;\n}\n.w-1{\n  flex-grow: 1;\n  width: 0;\n}\nh5{\n  margin-top: 20px;\n  margin-bottom: 0;\n}"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            },
            {
              "id": "66a1039f-34a2-457f-8d84-a8c3f5f2ed0f",
              "data": {
                "open": false,
                "header": "Advanced settings",
                "inputs": [
                  {
                    "id": "54af89a7-bdbe-4615-9824-51064fc38675",
                    "data": {
                      "label": "Prefix",
                      "helpText": "",
                      "variable": "prefix",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "renderCondition": "",
                      "trimWhitespaces": true,
                      "validateRequired": false
                    },
                    "meta": {
                      "name": "formTextBox",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Text box",
                    "compiled": {},
                    "component": "formTextBox",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formTextBox\"]"
                    ]
                  }
                ],
                "description": "",
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": null,
          "hasProcessError": true
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": "const data = step.data;\r\n\r\n// skip migration if prefix is empty\r\nif (step.data.prefix === '``') return;\r\n\r\nif (step.data.prefix.match(/^`(?:\\\\`|[^`])+`$/))\r\n  // add '/' in the end of static prefix\r\n  step.data.prefix = step.data.prefix.replace(/^`(.+)`$/, '`$1/`');\r\nelse\r\n  // asume it's a code mode so adding `+'/'` in the end of expression\r\n  step.data.prefix = `${step.data.prefix}+'/'`;\r\n",
            "version": "0.6.0"
          },
          {
            "sample": null,
            "script": "",
            "version": "2.0.0"
          }
        ],
        "dateModified": 1585751528707
      },
      {
        "id": "65a68cc4-a982-41ea-b046-d39bbd3971f7",
        "version": "1.0.2",
        "cacheVersion": "8dc0731d-a8b2-49ec-8eca-7de30e8db8cb",
        "label": "Find & Replace the Text",
        "icon": "text",
        "iconType": "default",
        "iconUrl": "",
        "shape": "circle",
        "description": "[qa_ready] Checks to see whether the input text (string) includes the target text. This step can check whether the input text contains, ends with, starts with, or is exactly the target text. It can test multiple target text values, which is useful for checking the source text for keywords.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Pre-release"
        ],
        "recommended": [],
        "tags": [],
        "template": "let arr_targets = [<%- flowStep.data.frTargets.map(el=>JSON.stringify(el.target)).join(',') %>];\nlet arr_replace = [<%- flowStep.data.frTargets.map(el=>el.replace).join(',') %>];\nconst replace = <%- flowStep.data.replace %>;\nconst targets = <%- JSON.stringify(flowStep.data.frTargets) %>;\nif(typeof text !==\"string\"){\n  text = JSON.stringify(text);\n}\ntargets.forEach((el,i)=>{\n  el.target = (arr_targets[i]);\n  el.replace = (arr_replace[i]);\n})\nif (replace) {\n  let matches = [];\n  let result = targets.reduce(\n    (res, target) =>{\n      let matchesOnce= [];\n      \n      res = res.replace(\n       target.regExp\n          ? new RegExp(target.target.replace(/\\\\\\\\/g,\"\\\\\"), target.flags.join(\"\"))\n          : new RegExp(target.target.replace(/\\W/gi, \"\\\\$\"+\"&\"), `g${!target.caseSentensive?\"i\":\"\"}`),\n        (match, ...args) => {\n          matchesOnce.push({\n            match,\n            index: args.slice(-2, -1)[0],\n            groups:args.slice(0, -2)\n          });\n          return target.replace;\n        }\n      )\n      matches.push((matchesOnce.length)?matchesOnce:null);\n      return res;\n    },\n    text\n  );\n  return this.exitStep((matches.some(el=>el))?'next':'no-match', {result, matches});\n} else {\n  let matches = [];\n  targets.forEach(target =>{\n    let matchesOnce= [];\n    text.replace(\n      target.regExp\n        ? new RegExp(target.target.replace(/\\\\\\\\/g,\"\\\\\"), target.flags.join(\"\"))\n        : new RegExp(target.target.replace(/\\W/gi, \"\\\\$\"+\"&\"), `g${!target.caseSentensive?\"i\":\"\"}`),\n      (match, ...args) => {\n        matchesOnce.push({\n          match,\n          index: args.slice(-2, -1)[0],\n          groups:args.slice(0, -2)\n        });\n        return match;\n      }\n    )\n    matches.push((matchesOnce.length)?matchesOnce:null);\n  }\n  );\n  return this.exitStep((matches.some(el=>el))?'next':'no-match',{matches});\n}\n\n",
        "form": {
          "code": null,
          "style": null,
          "template": null,
          "component": null
        },
        "data": {
          "text": "this.get('')",
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            },
            {
              "id": "1e9f354a-e1b6-4528-9fc0-bd0022c61c24",
              "label": "no-match",
              "condition": ""
            }
          ],
          "dataOut": {
            "ttl": 86400000,
            "meta": {},
            "name": "",
            "type": "session"
          },
          "replace": false,
          "frTargets": []
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "",
        "formBuilder": {
          "stepExits": [
            {
              "id": "2962d939-23fe-4f09-b747-ed6917366a02",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            },
            {
              "id": "cd218fd6-0877-478d-922c-330b7c38517c",
              "data": {
                "id": "1e9f354a-e1b6-4528-9fc0-bd0022c61c24",
                "label": "no-match",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": true,
          "stepInputs": [
            {
              "id": "2088a486-83aa-47e6-adb3-5561d7ef9a74",
              "data": {
                "open": true,
                "header": "Source text & matching",
                "inputs": [
                  {
                    "id": "c6d039dc-7d2c-4259-b766-b6d47e8e3e89",
                    "data": {
                      "label": "Source text",
                      "helpText": "",
                      "variable": "text",
                      "placeholder": "",
                      "defaultValue": "this.get('')",
                      "renderCondition": "",
                      "validateRequired": false,
                      "disabledCondition": "",
                      "validationConditions": [
                        {
                          "errorMessage": "The Source text is required.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "ruleType": {
                                  "func": "{ return !validators.validateMergeTagInput(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "merge tag doesn't have value",
                                  "modes": false,
                                  "category": "mergeTags"
                                },
                                "codeValue": "``",
                                "valueType": "mergeTags",
                                "firstValue": "schema.text",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        },
                        {
                          "errorMessage": "The Source text is not a valid JavaScript expression.",
                          "validationCondition": {
                            "label": "`Validation condition`",
                            "rules": [
                              {
                                "modes": [],
                                "ruleType": {
                                  "func": "{ return !validators.jsExpression(firstValue) }",
                                  "type": "single",
                                  "input": [
                                    "string"
                                  ],
                                  "label": "invalid JS expression",
                                  "modes": [],
                                  "category": "code"
                                },
                                "codeValue": "``",
                                "valueType": "code",
                                "firstValue": "schema.text",
                                "secondValue": "``",
                                "caseInsensitive": true,
                                "isDisabledSecondValue": false
                              }
                            ],
                            "trueValue": "any",
                            "description": "``",
                            "defaultValue": true,
                            "isNotCollapsed": true,
                            "isEditableHeader": false
                          }
                        }
                      ],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "disableConditionBuilder": {
                        "label": "`Conditional disablement`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": false,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      }
                    },
                    "meta": {
                      "name": "formMergeTagInput",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Merge Tag Input",
                    "compiled": {},
                    "component": "formMergeTagInput",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"https://new-shared.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"https://new-shared.components.staging.onereach.ai/index.js\"][\"formMergeTagInput\"]"
                    ]
                  },
                  {
                    "id": "dff1b91a-4cfd-4e93-97ba-26b1be58a6b0",
                    "data": {
                      "data": "{\n  \"frTargets\": [],\n  \"replace\":false\n}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data, key) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    if(_.isEqual(key,'text') || _.isEqual(key,'replace')){\n      return data;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "{\n  frTargets:{\n    valid(value){\n      return value.every(el=>!_.isEmpty(el.target));\n    }\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard :fr-targets.sync=\"schema.frTargets\" :text.sync=\"schema.text\" :replace.sync=\"schema.replace\" :is-new=\"isNew\" :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\" :$v=\"$v\"></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-nvdhgzfarjkqbmlpcoisywuetx",
                      "componentLogic": "{\n  data(){\n    return {\n      exmpl_target:\"\",\n      exmpl_flags:[],\n      exmpl_result:[],\n      exmpl_edit:false,\n      menuTarget:[\n        {\n          label:\"Contains\",\n          value:\"default\"\n        },\n        {\n          label:\"Start with\",\n          value:\"start\"\n        },\n        {\n          label:\"End with\",\n          value:\"end\"\n        },\n       {\n          label:\"Equal\",\n          value:\"equal\"\n        },\n        {\n          type:\"divider\"\n        },\n        {\n          label:\"Custom RegExp\",\n          value:\"custom\"\n        }\n        \n      ],\n      exmpl_replace:\"$&\",\n      lorem:\"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Placeat exercitationem assumenda incidunt hic nulla alias labore perferendis, vitae non voluptas nobis. Atque voluptas nisi numquam soluta unde sit, nesciunt quibusdam?\",\n      flags:[\n        {          \n          value:\"g\",\n          label:\"g\",\n          help:\"Don't return after first match\",\n          title:\"global\"\n        },{          \n          value:\"m\",\n          label:\"m\",\n          help:\"^ and $ match start/end of line\",\n          title:\"multi line\"\n        },{          \n          value:\"i\",\n          label:\"i\",\n          help:\"Case insensitive match\",\n          title:\"insensitive\"\n        },{          \n          value:\"y\",\n          label:\"y\",\n          help:\"Proceed matching from where previous match ended only\",\n          title:\"sticky\"\n        },{          \n          value:\"u\",\n          label:\"u\",\n          help:\"Match with full unicode\",\n          title:\"unicode\"\n        },{\n          label:\"s\",\n          value:\"s\",\n          help:\"Dot matches newline\",\n          title:\"single line\"\n        }\n      ],\n      fr_targets:[],\n      prev_targets:[]\n    }  \n  },\n  watch:{\n    fr_targets:{\n      handler(value){\n        for(let i = 0; i < value.length; i++){\n          if(!_.isEqual(value[i].target,this.prev_targets[i].target)){\n            value[i].dirty = true;\n            }\n        }\n        this.prev_targets = _.cloneDeep(this.fr_targets);\n        this.$emit(\"update:frTargets\",value);\n      },\n      deep:true\n      \n    }\n  },\n  computed : {\n    highlight() {\n      let target = this.exmpl_target.replace(/\\\\\\\\/g,\"\\\\\");\n      let result = [];\n      let regExp = new RegExp(target, this.exmpl_flags.join(\"\"));\n      if(!target) {\n        this.exmpl_result=[];\n        return this.lorem;\n      }\n      let html = this.lorem.replace(regExp, (match,...args) => {\n        let replace = match.replace(regExp,this.exmpl_replace);\n        result.push({\n          groups:args.slice(0,-2),\n          range:`${args.slice(-2,-1)[0]} - ${match.length+args.slice(-2,-1)[0]}`,\n          match,\n          replace\n        });\n        return `<span class=\"highlightText\">${replace}</span>`;\n      });\n      this.exmpl_result = result;\n      return html;\n    },\n    localReplace:{\n      get(){  \n        return this.replace;\n      },\n      set(value){\n        return this.$emit(\"update:replace\",value);\n      }\n    }\n  },\n  methods:{\n    closeMenu(item){\n      for(let i = 0; i < item.items.length; i++){\n        if(this.$refs['dropdownMenu1'+i]){\n          this.$refs['dropdownMenu1'+i].closeDropdown();\n        }\n        if(this.$refs['dropdownMenu2'+i]){\n          this.$refs['dropdownMenu2'+i].closeDropdown();\n        }\n      }\n      \n    },\n    closeAddTargetDropdown(){\n      if(this.$refs.dropdownButton1){\n        this.$refs.dropdownButton1.closeDropdown();\n      }\n      if(this.$refs.dropdownButton2){\n        this.$refs.dropdownButton2.closeDropdown();\n      }\n    },\n    validate(item){\n      return !item.item.target && !(this.isNew && !this.fr_targets[item.index].dirty);\n    },\n    menuOptions(item,index){\n        return [\n          {\n            label:item.regExp?\"Use Simple Text\":\"Use RegExp\",\n            icon:item.regExp?\"text_fields\":\"icon-link\",\n            iconProps:{\n              useSvg:!item.regExp\n            },\n            index,\n            value:\"regExp\"\n          },\n          {\n            label:item.caseSentensive?\"Case Insensetive\":\"Case Sensetive\",\n            icon:item.caseSentensive?\"format_strikethrough\":\"title\",\n            index,\n            value:\"case\"\n          },\n          {\n            type:\"divider\"\n          },\n          {\n            label:\"Remove\",\n            icon:\"delete_forever\",\n            value:\"delete\",\n            index,\n            disabled:this.fr_targets.length<2\n          }\n        ]\n      },\n    selectMenu(option){\n      switch(option.value){\n        case(\"regExp\"):\n          this.fr_targets[option.index].regExp=!this.fr_targets[option.index].regExp;\n          break;\n        case(\"case\"):\n          this.fr_targets[option.index].caseSentensive=!this.fr_targets[option.index].caseSentensive;\n          if(this.fr_targets[option.index].flags.includes(\"i\")){\n            this.fr_targets[option.index].flags.splice(this.fr_targets[option.index].flags.indexOf(\"i\"),1)\n          }else{\n            this.fr_targets[option.index].flags.push(\"i\")\n          }\n          break;\n        case(\"delete\"):\n          console.log(option.index);\n          this.fr_targets.splice(option.index,1)\n          break;\n      }\n    },\n    addTarget(value){\n      let obj;\n      switch(value.value){\n        case('start'):\n          obj = {\n            dirty:false,\n            target:\"^your-text\",\n            replace:\"``\",\n            regExp:true,\n            flags:[\"g\",\"m\"],\n            caseSentensive:true\n          };  \n          break;\n        case('end'):\n          obj = {\n            dirty:false,\n            target:\"your-text$\",\n            replace:\"``\",\n            regExp:true,\n            flags:[\"g\",\"m\"],\n            caseSentensive:true\n          };  \n          break;\n        case('custom'):\n          obj = {\n            dirty:false,\n            target:\"\",\n            replace:\"``\",\n            regExp:true,\n            flags:[\"g\"],\n            caseSentensive:true\n          };  \n          break;\n        case('equal'):  \n          obj = {\n            dirty:false,\n            target:\"^your-text$\",\n            replace:\"``\",\n            regExp:true,\n            flags:[\"g\",\"m\"],\n            caseSentensive:true\n          };\n          break\n          default:\n          obj = {\n            dirty:false,\n            target:\"\",\n            replace:\"``\",\n            regExp:false,\n            flags:[\"g\"],\n            caseSentensive:true\n          };\n      }\n      this.fr_targets.push(obj);\n      this.prev_targets.push(obj);\n    },\n    changeTab(tab){\n      this.localReplace = tab===\"replace\"\n    }\n  },\n  props : {\n    steps:{},\n    stepId:{},\n    mergeFields: {\n      type: Array,\n      default () {\n        return [];\n      }\n    },\n    frTargets:{\n      type:Array,\n      default:()=>[]\n    },\n    replace:{\n      type:Boolean,\n      default:false\n    },\n    isNew : Boolean,\n    readonly: {\n      type : Boolean,\n      default:false\n    },\n    $v:{\n      schema:{\n        frTargets:{}\n      }\n    }\n  },\n  mounted(){\n    this.prev_targets = _.cloneDeep(this.frTargets);\n    this.fr_targets = _.cloneDeep(this.frTargets);\n    this.$nextTick(()=>{\n      if(!this.fr_targets.length)\n        this.addTarget({});\n      this.$refs.tabs.setActiveTab(this.localReplace?\"replace\":\"find\");\n    })\n  }\n}",
                      "componentTemplate": "    <or-tabs disableRipple ref=\"tabs\" @tab-change=\"changeTab\" :disabled=\"readonly\" class=\"flex-box\" fullwidth>\n        <or-tab id=\"find\" title=\"Find\">\n            <div class=\"header_info\">\n                <div>\n                    <h5>Target(s)</h5>\n                </div>\n                <or-icon-button disableRipple dropdownPosition=\"bottom\" hasDropdown type=\"secondary\" icon=\"info\">\n                    <template class=\"custom-popover-content\" slot=\"dropdown\">\n                      <div style=\"padding:10px\">\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td style=\"white-space:nowrap\" >.</td><td >Any character except newline</td></tr><tr>\n                            <td style=\"white-space:nowrap\" >a</td><td >The character a</td></tr><tr>\n                            <td style=\"white-space:nowrap\" >ab</td><td >The string ab</td></tr><tr>\n                            <td style=\"white-space:nowrap\" >a|b</td><td >a or b</td></tr><tr>\n                            <td style=\"white-space:nowrap\" >a*</td><td >0 or more a's</td></tr><tr>\n                            <td style=\"white-space:nowrap\" >\\</td><td >Escapes a special character</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      </div>\n                    </template>\n                </or-icon-button>\n            </div>\n            <div class=\"list--empty\" v-if=\"!fr_targets.length\">\n              List is empty\n            </div>\n            <or-list  :canDeleteItems=\"false\" :readonly=\"readonly\"  addButtonLabel=\"Add new target\" v-model=\"fr_targets\">\n                <template scope=\"item\">\n                    <div else class=\"flex_box\">\n                        <div class=\"flex_box__single\" v-if=\"!item.item.regExp\">\n                            <or-textbox floatingLabel :invalid=\"validate(item)\" placeholder=\"Target\" disableCodeMode v-model=\"item.item.target\"\n                            :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\" >\n                            </or-textbox>\n                        </div>\n                        <div class=\"flex_box__single\" v-else>\n                            <or-textbox floatingLabel class=\"or-text-expression--reg\" placeholder=\"RegExp\" disableCodeMode\n                            v-model=\"item.item.target\" :invalid=\"validate(item)\" :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\">\n                            </or-textbox>\n                            <or-select multipleDelimiter=\"\" multiple placeholder=\"Flags\" v-model=\"item.item.flags\" :invalid=\"validate(item)\"\n                            :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :disabled=\"readonly\" :options=\"flags\">\n                                <template slot-scope=\"props\" slot=\"option\">\n                                    <div>{{ props.option.title }}\n                                        <br>\n                                        <span class=\"help\">{{ props.option.help }}</span>\n                                    </div>\n                                    <or-icon class=\"icon_selected\" v-if=\"props.selected\" icon=\"done\"></or-icon>\n                                </template>\n                            </or-select>\n                        </div>\n                        <or-icon-button  disableRipple icon=\"more_vert\" class=\"flat btn\" has-dropdown :disabled=\"readonly\" type=\"secondary\" :ref=\"'dropdownMenu1'+item.index\">\n                          <or-menu disableRipple contain-focus has-icons @select=\"selectMenu\"  slot=\"dropdown\"  :options=\"menuOptions(item.item,item.index)\" @close=\"closeMenu(item)\"></or-menu>\n                        </or-icon-button>\n                    </div>\n                </template>\n                \n                <template slot=\"footer\">\n                  <or-button :disabled=\"readonly\" disableRipple icon=\"add\" type=\"secondary\" class=\"list-add-target\" color=\"primary\" has-dropdown ref=\"dropdownButton1\">\n                    <or-menu @select=\"addTarget\" class=\"list-add-menu\" contain-focus slot=\"dropdown\" :options=\"menuTarget\" @close=\"closeAddTargetDropdown\"></or-menu>\n                    Add Target\n                  </or-button>\n                </template>\n            </or-list>\n        </or-tab>\n        <or-tab id=\"replace\" title=\"Find & Replace\">\n            <div class=\"header_info\">\n                <div>\n                    <h5>Target(s)</h5>\n                </div>\n                <or-icon-button disableRipple dropdownPosition=\"bottom\" hasDropdown type=\"secondary\" icon=\"info\">\n                    <template class=\"custom-popover-content\" slot=\"dropdown\">\n                      <div style=\"padding:10px\">\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td style=\"white-space:nowrap\" >.</td><td >Any character except newline</td></tr><tr ng-repeat=\"v in filtList\" class=\"ng-scope\">\n                            <td style=\"white-space:nowrap\" >a</td><td >The character a</td></tr><tr ng-repeat=\"v in filtList\" class=\"ng-scope\">\n                            <td style=\"white-space:nowrap\" >ab</td><td >The string ab</td></tr><tr ng-repeat=\"v in filtList\" class=\"ng-scope\">\n                            <td style=\"white-space:nowrap\" >a|b</td><td >a or b</td></tr><tr ng-repeat=\"v in filtList\" class=\"ng-scope\">\n                            <td style=\"white-space:nowrap\" >a*</td><td >0 or more a's</td></tr><tr ng-repeat=\"v in filtList\" class=\"ng-scope\">\n                            <td style=\"white-space:nowrap\" >\\</td><td >Escapes a special character</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      </div>\n                    </template>\n                </or-icon-button>\n            </div>\n            <div class=\"list--empty\" v-if=\"!fr_targets.length\">\n              List is empty\n            </div>\n            <or-list :canDeleteItems=\"false\" :readonly=\"readonly\" addButtonLabel=\"Add new target\" v-model=\"fr_targets\">\n                <template slot-scope=\"item\">\n                    <div class=\"flex_box\">\n                        <div v-if=\"!item.item.regExp\" class=\"flex_box__item\">\n                            <or-textbox floatingLabel :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\" :invalid=\"validate(item)\"\n                            placeholder=\"Target\" disableCodeMode v-model=\"item.item.target\">\n                            </or-textbox>\n                        </div>\n                        <div v-else class=\"flex_box__item\">\n                            <or-textbox floatingLabel :invalid=\"validate(item)\" :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\" \n                            class=\"or-text-expression--reg\" placeholder=\" RegExp\" disableCodeMode v-model=\"item.item.target\">\n                            </or-textbox>\n                            <or-select multipleDelimiter=\"\" :disabled=\"readonly\" multiple :invalid=\"validate(item)\"\n                            placeholder=\"Flags\" v-model=\"item.item.flags\" :options=\"flags\">\n                                <template slot-scope=\"props\" slot=\"option\">\n                                    <div>{{ props.option.value }}\n                                        <br>\n                                        <span class=\"help\">{{ props.option.help }}</span>\n                                    </div>\n                                    <or-icon class=\"icon_selected\" v-if=\"props.selected\" icon=\"done\"></or-icon>\n                                </template>\n                            </or-select>\n                        </div>\n                        <div class=\"flex_box__item\">\n                            <or-text-expression :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\"\n                            placeholder=\"Replace with\" disableCodeMode v-model=\"item.item.replace\">\n                            </or-text-expression>\n                        </div>\n                    </div>\n                    <or-icon-button disableRipple icon=\"more_vert\" class=\"flat btn\" has-dropdown :disabled=\"readonly\" type=\"secondary\" :ref=\"'dropdownMenu2'+item.index\">\n                      <or-menu disableRipple contain-focus has-icons @select=\"selectMenu\"  slot=\"dropdown\"  :options=\"menuOptions(item.item,item.index)\" @close=\"closeMenu(item)\"></or-menu>\n                    </or-icon-button>\n                </template>\n                \n                <template slot=\"footer\">\n                  <or-button :disabled=\"readonly\" disableRipple icon=\"add\" type=\"secondary\" class=\"list-add-target\" color=\"primary\" has-dropdown ref=\"dropdownButton2\">\n                    <or-menu @select=\"addTarget\" class=\"list-add-menu\" contain-focus slot=\"dropdown\" :options=\"menuTarget\" @close=\"closeAddTargetDropdown\"></or-menu>\n                    Add Target\n                  </or-button>\n                </template>\n            </or-list>\n\n        </or-tab>\n    </or-tabs>\n<or-collapsible disableRipple title=\"Test your RegExp\">\n    <div class=\"flex_box\">\n      <div class=\"flex_box__item\">\n        <or-textbox :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\" class=\"or-text-expression--reg\" placeholder=\"RegExp\" disableCodeMode v-model=\"exmpl_target\">\n        </or-textbox>\n        <or-select multipleDelimiter=\"\" :disabled=\"readonly\" multiple placeholder=\"Flags\" v-model=\"exmpl_flags\" :options=\"flags\">\n           <template slot-scope=\"props\" slot=\"option\">\n               <div>{{ props.option.title }}\n                   <br>\n                   <span class=\"help\">{{ props.option.help }}</span>\n               </div>\n               <or-icon class=\"icon_selected\" v-if=\"props.selected\" icon=\"done\"></or-icon>\n           </template>\n        </or-select>\n      </div>\n      <div class=\"flex_box__item\">\n          <or-textbox :steps=\"steps\" :step-id=\"stepId\" :merge-fields=\"mergeFields\" :readonly=\"readonly\"\n          placeholder=\"Replace with\" disableCodeMode v-model=\"exmpl_replace\"></or-textbox>\n      </div>      \n    </div>\n    <div class=\"header_info\">\n     <div>\n       <h4>Example text for testing</h4>\n     </div>\n     <or-icon-button :disabled=\"readonly\" @click=\"exmpl_edit=!exmpl_edit\" disableRipple type=\"secondary\" :color=\"(exmpl_edit)?'black':'default'\" class=\"flat\" icon=\"edit\"></or-icon-button>\n    </div>\n    <div class=\"example_text\">\n      <p v-show=\"!exmpl_edit\" v-html=\"highlight\"></p>\n      <or-textbox multiLine rows=\"6\" v-show=\"exmpl_edit\" v-model=\"lorem\" maxlength=\"250\" enforceMaxlength=\"true\"></or-textbox>\n    </div>\n    <or-collapsible disableRipple borderless open >\n      <div slot=\"header\">\n        <h4>Matches</h4>\n      </div>\n      <div class=\"list--empty\" v-if=\"!exmpl_result.length\">\n      No matches\n    </div>\n    <div class=\"example_res\"  v-for=\"(match,i) in exmpl_result\">\n      <table>\n        <thead>\n          <tr>\n            <th colspan=\"3\"><span class=\"match_header\">Match {{++i}}</span></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><span style=\"background: rgb(116, 196, 255)\">Full match</span></td>\n            <td>`{{match.match}}` <or-icon icon=\"trending_flat\"></or-icon> `{{match.replace}}`</td>\n            <td><small>{{match.range}}</small></td>\n          </tr>\n          <tr v-for=\"(group,i) in match.groups\">\n            <td><span style=\"background:rgb(198, 233, 157)\">Group {{++i}}</span></td>\n            <td colspan=\"2\">`{{group}}`</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    </or-collapsible>\n    \n    \n  </or-collapsible>\n  \n  <div style=\"display: none;\">\n    <svg style=\"position: absolute; width: 0; height: 0; overflow: hidden;\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <defs>\n        <text id=\"icon-link\" style=\"font-size:16px\" x=\"0\" y=\"15\"  fill=\"black\">.*</text>\n      </defs>\n    </svg>\n  </div>\n  ",
                      "wildcardTemplates": [
                        {
                          "id": "bbe5afc3-2c2f-4012-9f19-76750ffdc455",
                          "mode": "html",
                          "title": "",
                          "template": "",
                          "variable": ""
                        }
                      ],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".list-item {\n  padding: 10px 0 !important;\n}\n.list--empty{\n  display:flex;\n  justify-content:center;\n  align-items:center;\n  height:63px;\n  width:100%;\n  color:#91969d;\n}\n.or-collapsible__description{\n  display:none;\n}\n.or-collapsible>.body-wrapper>.body{\n  padding-top:0;\n}\n.btn {\n  width: 24px;\n}\n.test_regexp {\n  border: none;\n  margin-left: 10px;\n  & > .body {\n    padding: 10px 16px;\n  }\n  & > .header {\n    padding: 0;\n    min-height: 20px;\n    \n    \n    .header-content {\n      font-size: 14px;\n      font-weight: 500;\n    }\n    .or-collapsible__description {\n      display: none;\n    }\n  }\n}\n\n.highlightText {\n  border: .5px dashed #f6f6f6;\n  background: #64b2da;\n}\n\n.flex_box {\n  display: flex;\n  flex-wrap:wrap;\n  width: calc(100% - 24px);\n  .ui-select {\n    width: 103px;\n    margin:0;\n    margin-left:-3px;\n    .ui-select__display {\n      height: 36px;\n    }\n    .icon_selected {\n      color: rgb(126, 211, 33);\n      font-size: 1.25em;\n      font-weight: 900;\n    }\n    .help {\n      line-height: 14px;\n      font-size: 80%;\n    }\n  }\n\n  .or-text-expression, .ui-textbox {\n    \n    width: 100%;\n    position: relative;\n    margin:0;\n    flex-direction: row-reverse;\n\n    .header {\n      position: absolute;\n      right: 0;\n      z-index: 2;\n    }\n    .input-wrapper {\n      width: 100%;\n    }\n    &--reg {\n      width: calc(100% - 100px);\n      position: relative;\n      margin: 0;\n      flex-direction: row-reverse;\n      .header {\n        position: absolute;\n        right: 0;\n        z-index: 2;\n      }\n      .input-wrapper {\n        width: 100%;\n      }\n    }\n    .or-editable-wrapper{\n      height:36px;\n    }\n  }\n  &__item {\n    display: flex;\n    flex-grow:1;\n    height: 42px;\n    width:200px;\n    padding: 3px;\n    .or-editable-wrapper.single-line {\n      padding-right: 30px;\n    }\n  }\n  &__single{\n    display:flex;\n    width: calc(100% - 24px);\n    padding:3px;\n    .or-editable-wrapper.single-line {\n      padding-right: 30px;\n    }\n  }\n}\n\n.header_info {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.btn--regexp {\n  .ui-icon-button__icon {\n    font-size: 18px;\n  }\n  &.active {\n    .ui-icon-button__icon {\n      color: #64b2da !important;\n    }\n  }\n}\n.example_text{\n  background-color: #F6F6F6;\n  padding: 8px 10px;\n  margin: 15px 0;\n  textarea{\n    line-height: 19px;\n  }\n}\n.example_res{\n  border-bottom:.5px solid #f6f6f6;\n  .match_header{\n    color:#64b2da;\n  }\n  td{\n    margin:5px 0;\n  }\n}\n\n.list-add-target{\n  border: none !important;\n}\n.list-add-menu .ui-menu-option{\n  font-size:14px; \n}\n\n.ui-tab {\n  overflow: visible !important;\n}\n.ui-tabs__header-items {\n  padding: 0 !important;\n}\n"
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "rememberedState": false,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"https://new-shared.components.staging.onereach.ai/index.js\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"https://new-shared.components.staging.onereach.ai/index.js\"][\"formCollapsible\"]"
              ]
            },
            {
              "id": "b31f8b9d-abc6-4ab8-b37e-4afd8008a11a",
              "data": {
                "open": false,
                "header": "Advanced options",
                "inputs": [
                  {
                    "id": "ebd0f2df-f626-4c31-9eaf-fccf0facafd4",
                    "data": {
                      "meta": {},
                      "label": "Merge field name",
                      "helpText": "The output data of the step will be stored under this name and can be reused further in the flow.",
                      "defaultTTL": 86400000,
                      "dataOutMeta": "{}",
                      "defaultName": "findMatches",
                      "defaultType": "session",
                      "placeholder": "Merge field name",
                      "defaultValue": "",
                      "renderCondition": "",
                      "validateRequired": true
                    },
                    "compiled": {},
                    "component": "formDataOut"
                  },
                  {
                    "id": "edcd50d1-d587-4a04-a5b6-e85b3b62aee8",
                    "data": {
                      "data": "{}",
                      "toJson": "//function that describe how to serialize wildcard data \n function toJson(data) { \n if (_.isArray(data)) { \n    return `[${_.map(data, toJson).join(',')}]`;\n    }\n    if (_.isObject(data)) {\n        return `{${_.map(data, (value, key) => `${key}: ${toJson(value)}`).join(',')}}`;\n    }\n    return JSON.stringify(data);\n}\n \nreturn _.mapValues(data, toJson);",
                      "validators": "",
                      "applyToJson": false,
                      "formTemplate": "<wildcard :replace.sync=\"schema.replace\" :output-example.sync=\"step.outputExample\">></wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-mlwxcorphsvdjeyaqigzknbfut",
                      "componentLogic": "{\n  computed: {\n    output: {\n      get() {\n         let value = this.replace?JSON.stringify({\n          matches:[[\n            {\n              groups:[],\n              match:\"\",\n              index:0\n            }\n          ]],\n          result:\"\"\n         },null,2):JSON.stringify({\n          matches:[[\n            {\n              groups:[],\n              match:\"\",\n              index:0\n            }\n          ]]\n         },null,2);\n          try{\n            this.$emit(\"update:outputExample\",new Function(`return ${value}`)())\n          }\n          catch(e){}\n        return value;\n      }\n    }\n  },\n  props: {\n    replace:{\n      type:Boolean\n    },\n    outputExample : {\n      type : [Object, Array, String]\n    }\n  }\n}",
                      "componentTemplate": "<div>\n  <or-code readonly name=\"OutputExample\" label=\"Result Example\" v-model=\"output\"></or-code>\n</div>",
                      "wildcardTemplates": [],
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ""
                    },
                    "compiled": {},
                    "component": "formWildcard"
                  }
                ],
                "description": "",
                "rememberedState": true,
                "renderCondition": "",
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "compiled": {},
              "component": "formCollapsible"
            }
          ],
          "outputExample": "",
          "hasProcessError": false,
          "allowSkipStepLogic": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": null,
            "script": null,
            "version": "1.0.0"
          },
          {
            "sample": null,
            "script": "if(_.isUndefined(step.data['dataOut'])) step.data['dataOut'] = {\"name\":\"findMatches\",\"type\":\"session\",\"ttl\":86400000};\napplyExitsMigration(step, stepTemplate); \n",
            "version": "1.0.1"
          },
          {
            "sample": null,
            "script": "",
            "version": "1.0.2"
          }
        ],
        "dateModified": 1587065670946
      },
      {
        "id": "e1a9d280-cc03-4fa4-abc6-15636a2917b5",
        "version": "3.2.10",
        "cacheVersion": "982b7944-a8bf-488c-b99f-11f9d0adeb46",
        "originalSource": "0ec3751d-cf6c-4df4-82fa-1add57b1b7d6",
        "label": "Return Result to Another Flow",
        "icon": "success",
        "iconType": "default",
        "iconUrl": "",
        "shape": "arrow-right",
        "description": "Sends selected data as a result of one flow execution to another.",
        "isGatewayStep": false,
        "publishedBy": "",
        "categories": [
          "Trigger"
        ],
        "recommended": [],
        "tags": [],
        "template": "const event = await this.mergeFields[conversation].get();\nconst {\n  callback,\n  params,\n  id,\n  availableExits,\n  targetAccountId\n} = event;\nconst {\n  isSync,\n  flowId,\n  eventId,\n  doNotSendResultBack\n} = params;\nconst data = executionResult;\n\n\nif (!_.includes(availableExits, selectedExit)) throw new Error(`Unable to find exit ${selectedExit}. Check step settings`)\n\nif (isSync) {\n  await this.eventManager.callbackResolve(callback, {\n    result: {\n      data,\n      selectedExit\n    }\n  });\n  return this.exitStep('next');\n}\n\nif (!doNotSendResultBack) {\n  const emitResult = await this.emitAsync({\n    name: `result/${id}`,\n    params: {\n      data,\n      selectedExit\n    },\n    target: targetAccountId\n  })\n} else {\n  this.log.warn('Parent flow do not expect for result');\n}\n\n\nreturn this.exitStep('next')",
        "form": {
          "component": null
        },
        "data": {
          "exits": [
            {
              "id": "next",
              "label": "next",
              "condition": ""
            }
          ],
          "conversation": "",
          "selectedExit": "",
          "executionResult": "``",
          "selectedStepExits": []
        },
        "reporting": {
          "step": {
            "tags": [],
            "type": "step",
            "label": "Step",
            "enabled": true
          }
        },
        "help": "Sends selected data as a result of one flow execution to another.\n\n**How can I use this Step?**\nUse this step to send selected data of the current flow's (Subflow) execution to another flow (Main Flow). Step works together with *Wait for Trigger from Another Flow*, *Trigger Another Flow and Wait for Result*, *Trigger Another Flow and Proceed* and *Fetch Result from Another Flow* steps.\n\nTo execute this step properly, please follow these instructions:\n1. Build and activate a Subflow using the *Wait for Trigger from Another Flow* step. Use *Return Result to Another Flow* should conclude the Subflow's logic with a predefined **exit**. *Return Error to Another Flow* step may be used to indicate errors.\n2. Build a separate, Main Flow, using either:\n   -- *Trigger Another Flow and Wait for Result* step;\n   -- *Trigger Another Flow and Proceed* and *Fetch Result From Another Flow* steps.\n\n   Connect both the Main Flow and the Subflow by choosing the **flow to trigger** from the dropdown or using a **custom trigger name**.\n3. Activate the Main Flow. When the connected *Trigger Another Flow and Wait for Result* or *Trigger Another Flow and Proceed* step is reached in the Main Flow, the Subflow is triggered. If the *Return Result to Another Flow* step is reached in the Subflow, it sends the data set in the **result** field and takes the Main Flow down the matching **exit** of the *Trigger Another Flow and Wait for Result* or the *Fetch Result From Another Flow* step of the Main Flow.\n\n## <a name=\"content\"></a>Help content:\n\n- [Result returned to the main flow](#returned-result)\n- [Reporting](#reporting)\n- [Services dependencies](#services-dependencies)\n- [Release notes](#release-notes)\n \n## <a name=\"returned-result\"></a>Result returned to the main flow\n\nTo return the result of the Sublow's execution to the Main Flow, do the following steps:\n1. Choose the name of the *Wait for Trigger from Another Flow* step that was triggered by the Main Flow in the respective dropdown.\n2. Select the **exit** the Main Flow will take in case multiple exits were defined.\n3. Define the data sent to the Main Flow in the **result** field.\n\n[Back to content](#content)\n\n## <a name=\"reporting\"></a>Reporting\n\n**Step** event is reported once the flow exits the step. It collects the data which can be used further in reports. You can specify tags to organize the collected data.\n\n[Back to content](#content)\n\n##  <a name=\"services-dependencies\"></a>Services dependencies\n\n-   flow builder v2.25.3\n-   event-manager v2.0.1\n-   deployer 2.7.1\n-   library content 2.25.6\n\n[Back to content](#content)\n\n## <a name=\"release-notes\"></a>Release notes\n\n**v3.2.10**\n\n- Add option to allow subflow sharing with another account\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.2.10\n-   Trigger Another Flow and Wait for Result v3.2.10\n-   Wait for Trigger from Another Flow v3.2.10\n-   Fetch Result from Another Flow v3.2.10\n-   Return Result to Another Flow v3.2.10\n-   Return Error to Another Flow v3.2.10\n\n**v3.0.0**\n\n-   Option to select the Wait for Trigger step (including via shared merge field) that will return the result to the main flow.\n-   Option to select the exit down which the main flow will proceed.\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v3.0.0\n-   Trigger Another Flow and Wait for Result v3.0.0\n-   Wait for Trigger from Another Flow v3.0.0\n-   Fetch Result from Another Flow v3.0.0\n-   Return Result to Another Flow v3.0.0\n-   Return Error to Another Flow v3.0.0\n\n**v2.0.0**\n\n-   UI validation\n\nNote, that the following steps should be updated to work correctly in the solution:\n\n-   Trigger Another Flow and Proceed v2.0.0\n-   Trigger Another Flow and Wait for Result v2.0.0\n-   Wait for Trigger from Another Flow v2.0.0\n-   Fetch Result from Another Flow v2.0.0\n-   Return Result to Another Flow v2.0.0\n-   Return Error to Another Flow v2.0.0\n\n[Back to content](#content)",
        "formBuilder": {
          "formCode": "return {\n    props       : {\n        stepId : String,\n        steps : Array,\n        schema : {type : Object, required : true, twoWay : true},\n        validationSchema : {type : Object, default : () => ({})}\n    }\n};",
          "stepExits": [
            {
              "id": "9d44bed0-f148-470b-8e3b-70fc98650ec0",
              "data": {
                "id": "next",
                "label": "next",
                "condition": ""
              },
              "component": "exitStatic"
            }
          ],
          "hasDataOut": false,
          "stepInputs": [
            {
              "id": "d00bece5-d948-4e95-a849-07f0c64b99e6",
              "data": {
                "stepTemplateIds": [
                  {
                    "id": "1fb553cd-3072-4dc2-9989-eaacf9e9552c",
                    "major": "3",
                    "minor": "2",
                    "patch": "",
                    "vforkey": "348935fa-db7a-4994-9743-3d0e074d1858",
                    "stepLabel": "Wait For Trigger From Another Flow",
                    "allowUpdate": true
                  }
                ]
              },
              "meta": {
                "name": "version-compatibility-checker",
                "type": "onereach-studio-form-input",
                "version": "0.0.1"
              },
              "label": "Version compatibility checker",
              "compiled": {},
              "component": [
                "version-compatibility-checker",
                "https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js"
              ],
              "pluginRefs": [
                "onereach-studio-plugin[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]",
                "onereach-studio-form-input[\"https://content-assets.onereach.ai/component/version-compatibility-checker/beta/index.js\"][\"version-compatibility-checker\"]"
              ]
            },
            {
              "id": "30fb4e20-8d95-47d8-a359-a895cfab91ff",
              "data": {
                "open": true,
                "header": "Result returned to the main flow",
                "inputs": [
                  {
                    "id": "57bf3c81-2935-4dcc-9762-f6417d8b2213",
                    "data": {
                      "data": "{\n  \"conversation\": \"\",\n  \"selectedExit\": \"\",\n  \"selectedStepExits\": []\n}",
                      "toJson": "return {\n  conversation : JSON.stringify(data.conversation),\n  selectedExit: JSON.stringify(data.selectedExit)\n};",
                      "validators": "conversation: {\n  jsExpression : validators.required,\n\n  custom (value, schema) {\n    // console.log('MERGEFIELD: ', mergeFields)\n    // console.log('steps: ', this.steps)\n    const flowMergeTags =  _.chain(mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const sharedMergeTags =  _.chain(mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const globalMergeTags =  _.chain(mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const options = _.chain([])\n      .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n      .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'subflow' && _.get(tag, 'meta.conversationStepType') === 'wait_for_trigger')\n      .map('name')\n      .uniq()\n      .value();\n\n    return _.includes(options, value);\n  }\n},\n\nselectedExit: {\n  custom (value, schema) {\n    // console.log('MERGEFIELD: ', mergeFields)\n    // console.log('steps: ', this.steps)\n    const flowMergeTags =  _.chain(mergeFields).find({title : 'Flow'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const sharedMergeTags =  _.chain(mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n\n    const globalMergeTags =  _.chain(mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n      name  : _.get(tag, 'name'),\n      meta  : _.get(tag, 'meta')\n    })).filter('name').value();\n    \n    const options = _.chain([])\n      .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n      .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'subflow' && _.get(tag, 'meta.conversationStepType') === 'wait_for_trigger')\n      .find({name : schema.conversation})\n      .get('meta.exits')\n      .map('name')\n      .value();\n      \n    return _.includes(options, value);\n  }\n}",
                      "applyToJson": true,
                      "formTemplate": "<wildcard\n  :merge-fields=\"mergeFields\"\n  :conversation.sync=\"schema.conversation\"\n  :selected-exit.sync=\"schema.selectedExit\"\n  :selectedStepExits.sync=\"schema.selectedStepExits\"\n  :is-new=\"isNew\"\n  :readonly=\"readonly\"\n  :steps=\"steps\"\n  :step-id=\"stepId\"\n  :v=\"$v\">\n</wildcard>",
                      "allowCodeMode": true,
                      "componentName": "or-wildcard-gizjytfxsmwnlqcuhkrdbeaopv",
                      "componentLogic": "{\n  props : {\n    mergeFields : {\n        type    : Array,\n        default () {\n            return [];\n        }\n    },\n    selectedStepExits : {\n        type    : Array,\n        default () {\n            return [];\n        }\n    },\n    selectedExit: String,\n    conversation : {\n      type : Object,\n      default : ''\n    },\n    stepId : String,\n    steps : {\n      type : Array,\n      default () {\n        return [];\n      }\n    },\n    readonly : {\n      type : Boolean,\n      default : false\n    },\n    v : {\n      type: Object,\n      default() {\n        return {\n          schema: {\n            conversation: '',\n            selectedExit: ''\n          }\n        };\n      }\n    }\n  },\n\n  data() {\n    return {\n      options : this.fillOptions(),\n      conversationRequiredMessage: 'The Wait for Trigger step is required.',\n      selectedExitRequiredMessage: 'The Exit is required.'\n    }\n  },\n\n  computed: {\n    selectedStepId () {\n        return this._findStepIdByDataOut(this.conversation);\n    },\n\n    selectedConversation : {\n      get () {\n        return this.conversation;\n      },\n      set (value) {\n        if (!_.isEmpty(value))\n          this.$emit('update:conversation', value);\n      }\n    },\n    selectedExitLocal: {\n      get () {\n       if (_.isEmpty(this.selectedExit)) {\n          return this.exitsList[0].value;\n        }\n        return this.selectedExit;\n      },\n      set (value) {\n        this.$emit('update:selectedExit', value);\n      }\n    },\n    exitsList: {\n      get() {\n        return this.selectedStepExits;\n      },\n      set (value) {\n        let avalibleExits = _.chain(value)\n          .filter(item => !_.isEmpty(item.name))\n          .map((exit) => {\n            return {\n              value: exit.name,\n              label: exit.name\n            }\n          })\n          .value();\n        \n        if (value.length > 0) {\n          this.$emit('update:selectedStepExits', avalibleExits);\n          if (_.isEmpty(this.selectedExit)) {\n            this.selectedExitLocal = avalibleExits[0].value;\n          }\n        } else {\n          this.$emit('update:selectedStepExits', [])\n          this.selectedExitLocal = 'result';\n        }\n        \n      }\n    }\n  },\n\n  methods : {\n    _getDataOutName (dataOut) {\n      return _.get(dataOut, 'name', dataOut);\n    },\n\n    _findStepIdByDataOut (mergeFieldMeta) {\n      return _.chain(this.steps)\n      .find(step => this._getDataOutName(_.get(step, 'data.dataOut')) === this._getDataOutName(mergeFieldMeta))\n      .get('id')\n      .value();\n    },\n\n    highlightConversationOn(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOn({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOff(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    highlightConversationOffOnMouseout(mergeFieldMeta) {\n      const stepId = this._findStepIdByDataOut(mergeFieldMeta);\n      if (stepId && stepId !== this.selectedStepId) {\n        this.$flow.highlightStepOff({stepId, highlightClass : 'hover'});\n      }\n    },\n\n    zoomInOnStep () {\n      if (this.selectedStepId) {\n        this.$flow.zoomInOnStep(this.selectedStepId);\n      }\n    },\n\n    fillOptions () {\n      const flowMergeTags = _.chain(this.mergeFields).find({title : 'Flow'}).get('variables').map(tag => {\n        return {\n          name  : _.get(tag, 'name'),\n          meta  : _.get(tag, 'meta')\n        }\n      }).filter('name').value();\n\n      const sharedMergeTags =  _.chain(this.mergeFields).find({title : 'Shared'}).get('variables').map(tag => ({\n        name   : _.get(tag, 'name'),\n        meta   : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const globalMergeTags =  _.chain(this.mergeFields).find({title : 'Global'}).get('variables').map(tag => ({\n        name   : _.get(tag, 'name'),\n        meta   : _.get(tag, 'meta')\n      })).filter('name').value();\n\n      const options = _.chain([])\n        .concat(flowMergeTags, sharedMergeTags, globalMergeTags)\n        .filter(tag => _.get(tag, 'meta.conversationStarter') && _.get(tag, 'meta.conversationType') === 'subflow' && _.get(tag, 'meta.conversationStepType') === 'wait_for_trigger')\n        .uniqBy('name')\n        .sortBy('name')\n        .map(tag => {\n          return {\n            value : tag.name,\n            label : tag.name,\n            exits: tag.meta.exits || []\n          }\n        })\n        .value();\n\n      return options;\n    },\n    updateExitsOptions(mergeFieldName) {\n      const option = _.find(this.options, {value: mergeFieldName})\n      this.exitsList = _.get(option, 'exits', [])\n    }\n  },\n  \n  mounted(){\n    if (_.isEmpty(this.conversation) && this.options && this.options.length === 1) {\n      this.selectedConversation = _.get(this.options, '0.value');\n    } else if (!_.isEmpty(this.conversation) && this.options.length === 1 && !_.some(this.options, {value: this.conversation})) {\n      this.selectedConversation = _.get(this.options, '0.value');\n    }\n    \n    this.$nextTick(() => {\n      this.highlightConversationOn(this.conversation);\n      this.updateExitsOptions(this.conversation)\n    });\n  },\n\n  created () {\n    \n  },\n\n  beforeDestroy () {\n    this.highlightConversationOff(this.conversation);\n  }\n}",
                      "renderCondition": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentTemplate": "<div class=\"select-conversation\">\n  <div class=\"select-conversation-wr\" v-if=\"options.length > 1\">\n    <or-select has-search\n      class=\"select-conversation\"\n      placeholder=\"Select a Wait fot Trigger step\"\n      label=\"Wait for Trigger step\"\n      search-placeholder=\"Type to search\"\n      :options=\"options\"\n      v-model=\"selectedConversation\"\n      :invalid=\"v.schema.conversation.$error\"\n      :error=\"conversationRequiredMessage\"\n      :disabled=\"readonly\"\n      @change=\"updateExitsOptions\">\n      <template slot-scope=\"props\" slot=\"option\">\n        <div\n          class=\"ui-select-option__basic\"\n          @mouseenter=\"highlightConversationOn(props.option.value)\"\n          @mouseout=\"highlightConversationOffOnMouseout(props.option.value)\"\n          @click=\"highlightConversationOn(props.option.value)\">\n          {{props.option.label}}\n        </div>\n      </template>\n    </or-select>\n    <or-icon-button\n      class=\"zoom-in-button\"\n      icon=\"zoom_in\"\n      type=\"secondary\"\n      color=\"primary\"\n      @click=\"zoomInOnStep\"\n      tooltip=\"Show Conversation Step\"\n      tooltip-position=\"top right\"\n      :disabled=\"!selectedStepId\">\n    </or-icon-button>\n  </div>\n  <or-select v-if=\"selectedConversation && exitsList.length\"\n    placeholder=\"Exit\"\n    label=\"Exit\"\n    :options=\"exitsList\"\n    v-model=\"selectedExitLocal\"\n    :disabled=\"readonly\"\n    :invalid=\"v.schema.selectedExit.$error\"\n    :error=\"selectedExitRequiredMessage\"\n    >\n  </or-select>\n</div>",
                      "wildcardTemplates": [],
                      "renderConditionBuilder": {
                        "label": "`Conditional visibility`",
                        "rules": [],
                        "trueValue": "any",
                        "description": "``",
                        "defaultValue": true,
                        "isNotCollapsed": false,
                        "isEditableHeader": false
                      },
                      "componentCompiledStyles": "",
                      "componentOriginalStyles": ".select-conversation {\n  .select-conversation-header {\n    position: relative;\n    height: 36px;\n    display: flex;\n    h4 {\n      margin-top: 0.2rem;\n      flex-grow: 1;\n    }\n  }\n\n  .select-conversation-wr {\n    position: relative;\n  }\n\n  .select-conversation {\n    width: calc(100% - 40px);\n  }\n\n  .zoom-in-button {\n    position: absolute;\n    top: 36px;\n    right: 0;\n    z-index: 1;\n  }\n}"
                    },
                    "meta": {
                      "name": "formWildcard",
                      "type": "onereach-studio-form-input",
                      "version": "1.0"
                    },
                    "label": "Wildcard",
                    "compiled": {},
                    "component": "formWildcard",
                    "pluginRefs": [
                      "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                      "onereach-studio-form-input[\"or-ui-components@env\"][\"formWildcard\"]"
                    ]
                  },
                  {
                    "id": "03efb1f0-21a6-4810-ba58-fd5808ae0237",
                    "data": {
                      "label": "Result",
                      "helpText": "",
                      "variable": "executionResult",
                      "multiline": false,
                      "placeholder": "",
                      "defaultValue": "``",
                      "renderCondition": "",
                      "trimWhitespaces": false,
                      "validateRequired": true,
                      "disabledCondition": ""
                    },
                    "compiled": {},
                    "component": "formTextBox"
                  }
                ],
                "description": "",
                "allowCodeMode": true,
                "rememberState": false,
                "preserveInvalid": false,
                "renderCondition": "",
                "disabledCondition": "",
                "forceOpenWhenInvalid": true,
                "validationConditions": [],
                "renderConditionBuilder": {
                  "label": "`Conditional visibility`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": true,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                },
                "disableConditionBuilder": {
                  "label": "`Conditional disablement`",
                  "rules": [],
                  "trueValue": "any",
                  "description": "``",
                  "defaultValue": false,
                  "isNotCollapsed": false,
                  "isEditableHeader": false
                }
              },
              "meta": {
                "name": "formCollapsible",
                "type": "onereach-studio-form-input",
                "version": "1.0"
              },
              "label": "Collapsible Group",
              "compiled": {},
              "component": "formCollapsible",
              "pluginRefs": [
                "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                "onereach-studio-form-input[\"or-ui-components@env\"][\"formCollapsible\"]"
              ]
            }
          ],
          "outputExample": null,
          "hasProcessError": false,
          "hasProcessTimeout": false
        },
        "rawMode": false,
        "tour": [],
        "migrations": [
          {
            "sample": {
              "data": {
                "exits": [
                  {
                    "id": "next",
                    "label": "next"
                  }
                ],
                "executionResult": "``"
              },
              "rawMode": false,
              "version": "5bb3ce5b-f296-4ee3-a34d-bfd10d5beca9",
              "formBuilder": {
                "stepExits": [
                  {
                    "id": "9d44bed0-f148-470b-8e3b-70fc98650ec0",
                    "data": {
                      "id": "next",
                      "label": "next"
                    },
                    "component": "exitStatic"
                  }
                ],
                "hasProcessError": false
              }
            },
            "script": null,
            "version": "0.0.1"
          },
          {
            "sample": null,
            "script": "const waitForTrigger = _.head(steps);\r\n\r\nif (waitForTrigger) {\r\n  step.data.conversation = {\r\n    name: _.get(waitForTrigger, 'data.dataOut.name', ''),\r\n    exits: _.get(waitForTrigger, 'data.dataOut.exits', [])\r\n  }\r\n}\r\n\r\nif (typeof step.data.selectedExit === 'undefined')  step.data.selectedExit = ''",
            "version": "2.6.1"
          },
          {
            "sample": null,
            "script": "const waitForTrigger = _.head(steps);\r\n\r\nif (waitForTrigger) {\r\n  step.data.conversation = _.get(waitForTrigger, 'data.dataOut.name', '')\r\n  \r\n  if (_.isUndefined(step.data.selectedStepExits)) step.data.selectedStepExits = []\r\n  if (_.isUndefined(step.data.selectedExit)) step.data.selectedExit = ''\r\n  \r\n  const exits = _.get(waitForTrigger, 'data.dataOut.meta.exits', [])\r\n  step.data.selectedStepExits = _.map(exits, exit => {\r\n    return {\r\n      value: exit.name,\r\n      label: exit.name\r\n    }\r\n  })\r\n  \r\n  step.data.selectedExit = _.get(step.data.selectedStepExits, '[0].value', '')\r\n\r\n}",
            "version": "2.6.12"
          },
          {
            "script": "",
            "version": "3.2.10"
          }
        ],
        "dateModified": 1663943719583
      }
    ],
    "trees": {
      "main": {
        "position": {
          "x": 0,
          "y": 0
        },
        "steps": [
          {
            "id": "51d0a6f3-7f71-4420-97ce-b79d74c1784a",
            "label": "wait request",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "d51593b3-7c89-44bc-9961-d7f08922ca14",
            "description": "",
            "isGatewayStep": true,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "trigger",
                  "label": "trigger",
                  "stepId": "8433172e-2ab1-4a8c-b9ff-050976d0d1bd",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "exits": [
                    {
                      "name": "result",
                      "vforkey": "2b11b92e-c356-4610-881c-51c2961a43d0"
                    }
                  ],
                  "conversationType": "subflow",
                  "conversationStarter": true,
                  "conversationStepType": "wait_for_trigger"
                },
                "name": "waitRequest",
                "type": "session"
              },
              "parameters": [
                {
                  "name": "userName",
                  "vforkey": "2ea93794-1b40-4843-93bc-288afbd5fbec"
                },
                {
                  "name": "userContactId",
                  "vforkey": "abc9c23e-a302-4420-beb6-1093899cc89a"
                },
                {
                  "name": "convOutput",
                  "vforkey": "a2ce5bbd-d87b-4e0c-b6eb-ce3e451d4ef0"
                },
                {
                  "name": "bioimage",
                  "vforkey": "fbba3447-2baa-4e3e-a1d3-fb6d61005cf5"
                },
                {
                  "name": "wikiName",
                  "vforkey": "b9e0d0d9-313c-484b-82fc-b00f9bfc9eff"
                },
                {
                  "name": "sessionID",
                  "vforkey": "a0fc2d5a-314e-4fb6-b3ad-8d72e419225e"
                },
                {
                  "name": "figureTypeID",
                  "vforkey": "f297dd40-9713-47a3-a665-e3956c32fffd"
                },
                {
                  "name": "figureFullName",
                  "vforkey": "7623e45b-fc6e-4ada-9587-717ae4d346d9"
                },
                {
                  "name": "title",
                  "vforkey": "0cd24456-b406-4e81-bf2c-4fad3f0b5c31"
                },
                {
                  "name": "biography",
                  "vforkey": "91f994b3-1d41-46ea-b271-c4af4c4243ad"
                },
                {
                  "name": "year",
                  "vforkey": "f93f9fa7-22de-4bdb-8f97-13fbe4a21c4b"
                }
              ],
              "__codeModes": {},
              "resultExits": [
                {
                  "name": "result",
                  "vforkey": "2b11b92e-c356-4610-881c-51c2961a43d0"
                }
              ],
              "triggerExist": false,
              "customFlowName": "`TM-Share-Exp`",
              "sessionTimeout": {
                "input": "`2 hours`",
                "outputMode": "ms"
              },
              "flowIdToTrigger": "8c89e332-00a8-4b97-be13-082fe02ffe68",
              "skipStepLogicExit": {
                "id": "trigger",
                "label": "trigger",
                "stepId": "8433172e-2ab1-4a8c-b9ff-050976d0d1bd",
                "condition": ""
              },
              "useCustomFlowName": true
            },
            "stepInputData": {
              "parameters": "[{name: \"userName\",vforkey: \"2ea93794-1b40-4843-93bc-288afbd5fbec\"},{name: \"userContactId\",vforkey: \"abc9c23e-a302-4420-beb6-1093899cc89a\"},{name: \"convOutput\",vforkey: \"a2ce5bbd-d87b-4e0c-b6eb-ce3e451d4ef0\"},{name: \"bioimage\",vforkey: \"fbba3447-2baa-4e3e-a1d3-fb6d61005cf5\"},{name: \"wikiName\",vforkey: \"b9e0d0d9-313c-484b-82fc-b00f9bfc9eff\"},{name: \"sessionID\",vforkey: \"a0fc2d5a-314e-4fb6-b3ad-8d72e419225e\"},{name: \"figureTypeID\",vforkey: \"f297dd40-9713-47a3-a665-e3956c32fffd\"},{name: \"figureFullName\",vforkey: \"7623e45b-fc6e-4ada-9587-717ae4d346d9\"},{name: \"title\",vforkey: \"0cd24456-b406-4e81-bf2c-4fad3f0b5c31\"},{name: \"biography\",vforkey: \"91f994b3-1d41-46ea-b271-c4af4c4243ad\"},{name: \"year\",vforkey: \"f93f9fa7-22de-4bdb-8f97-13fbe4a21c4b\"}]",
              "resultExits": "[{name: \"result\",vforkey: \"2b11b92e-c356-4610-881c-51c2961a43d0\"}]",
              "customFlowName": "`TM-Share-Exp`",
              "sessionTimeout": "{input: `2 hours`,outputMode: \"ms\"}",
              "flowIdToTrigger": "\"8c89e332-00a8-4b97-be13-082fe02ffe68\"",
              "useCustomFlowName": "true"
            },
            "outputExample": {
              "params": {
                "year": "",
                "title": "",
                "bioimage": "",
                "userName": "",
                "wikiName": "",
                "biography": "",
                "sessionID": "",
                "convOutput": "",
                "figureTypeID": "",
                "userContactId": "",
                "figureFullName": ""
              }
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "session": {
                "tags": [],
                "type": "session",
                "label": "Session",
                "enabled": true,
                "canDisable": false
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "02b5b72e-d810-47ea-bb74-89665b93a4ff",
            "label": "checkShareOption",
            "icon": "condition",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "14d1ca2c-9bdd-40c1-be51-5a65c59b3525",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "3feb0df6-61cf-487c-b56a-0ec6a179cbdd",
                  "label": "email",
                  "stepId": "40155271-02b6-4591-9183-dd59638c12b7",
                  "dynamic": true
                },
                {
                  "id": "f0400750-97d3-41e1-8a3f-4f19f7ff6e3f",
                  "label": "phone",
                  "stepId": "3324e635-3530-435f-8653-46df28e310be",
                  "dynamic": true
                },
                {
                  "id": "6900b138-d19d-49c8-af50-ac4b40154dc9",
                  "label": "exit",
                  "stepId": "fd210c53-468b-42fc-9598-3d3400d91d63",
                  "dynamic": true
                },
                {
                  "id": "bab345ce-e6c2-4cfa-aadc-7a4d7ef468d6",
                  "label": "close",
                  "stepId": "d0c839b0-3073-47c6-a53e-34ab0613960a",
                  "dynamic": true
                },
                {
                  "id": "else",
                  "label": "error",
                  "stepId": "19c24026-1d46-400f-a24b-91d6ca084eaf",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "elseExitName": "error",
              "isSingleExit": false,
              "conditionExits": [
                {
                  "label": "`email`",
                  "rules": [
                    {
                      "vforkey": "8fcff2d7-c39c-4d00-a4a2-3a7b3fc85677",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['shareOption'].get({path: 'myData'})}`",
                      "secondValue": "`email`",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "``",
                  "vforkey": "3feb0df6-61cf-487c-b56a-0ec6a179cbdd",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                {
                  "label": "`phone`",
                  "rules": [
                    {
                      "vforkey": "74133b5e-9859-4f6c-b3ee-c804813e0981",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['shareOption'].get({path: 'myData'})}`",
                      "secondValue": "`phone`",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "``",
                  "vforkey": "f0400750-97d3-41e1-8a3f-4f19f7ff6e3f",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                {
                  "label": "`exit`",
                  "rules": [
                    {
                      "vforkey": "3d30618f-228d-4ef9-a506-53d69f4fa65f",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['shareOption'].get({path: 'myData'})}`",
                      "secondValue": "`exit`",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "``",
                  "vforkey": "6900b138-d19d-49c8-af50-ac4b40154dc9",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                },
                {
                  "label": "`close`",
                  "rules": [
                    {
                      "vforkey": "d3cb7b2c-9e00-40aa-a319-750a6cb84fb3",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['shareOption'].get({path: 'myData'})}`",
                      "secondValue": "`close`",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "``",
                  "vforkey": "bab345ce-e6c2-4cfa-aadc-7a4d7ef468d6",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              ],
              "isCaseSensitive": false,
              "hasNoConditionDataOut": true,
              "dynamicExitsArrayStart": 0,
              "conditionRuleHasDataOut": true,
              "noConditionDataOutValue": "``"
            },
            "stepInputData": {
              "elseExitName": "\"error\"",
              "isSingleExit": false,
              "conditionExits": "[{label: `email`,rules: [{vforkey: \"8fcff2d7-c39c-4d00-a4a2-3a7b3fc85677\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['shareOption'].get({path: 'myData'})}`,secondValue: `email`,isDisabledSecondValue: false}],dataOut: ``,id: \"3feb0df6-61cf-487c-b56a-0ec6a179cbdd\",trueValue: \"any\",description: ``,isNotCollapsed: true,isEditableHeader: false},{label: `phone`,rules: [{vforkey: \"74133b5e-9859-4f6c-b3ee-c804813e0981\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['shareOption'].get({path: 'myData'})}`,secondValue: `phone`,isDisabledSecondValue: false}],dataOut: ``,id: \"f0400750-97d3-41e1-8a3f-4f19f7ff6e3f\",trueValue: \"any\",description: ``,isNotCollapsed: true,isEditableHeader: false},{label: `exit`,rules: [{vforkey: \"3d30618f-228d-4ef9-a506-53d69f4fa65f\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['shareOption'].get({path: 'myData'})}`,secondValue: `exit`,isDisabledSecondValue: false}],dataOut: ``,id: \"6900b138-d19d-49c8-af50-ac4b40154dc9\",trueValue: \"any\",description: ``,isNotCollapsed: true,isEditableHeader: false},{label: `close`,rules: [{vforkey: \"d3cb7b2c-9e00-40aa-a319-750a6cb84fb3\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['shareOption'].get({path: 'myData'})}`,secondValue: `close`,isDisabledSecondValue: false}],dataOut: ``,id: \"bab345ce-e6c2-4cfa-aadc-7a4d7ef468d6\",trueValue: \"any\",description: ``,isNotCollapsed: true,isEditableHeader: false}]",
              "isCaseSensitive": "false",
              "hasNoConditionDataOut": true,
              "conditionRuleHasDataOut": true,
              "noConditionDataOutValue": "``"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "09161584-6084-4c29-b94a-186846a3b6ae",
            "label": "combineSharedAppUrlwithSameFigure",
            "icon": "combine_text",
            "iconType": "default",
            "iconUrl": "",
            "shape": "hexagon",
            "type": "066d6b8c-04ec-4b25-9b3d-ccaa191a8d4e",
            "description": "ex-combineParamsEmail",
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "c6367947-5ce0-45c2-969d-2dbf5d49a6ae",
                  "condition": ""
                }
              ],
              "method": "inputs",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "combineSharedAppUrlwithSameFigure",
                "type": "session"
              },
              "arrayData": {
                "jsonTable": "[]",
                "separator": "``"
              },
              "inputData": [
                {
                  "data": "`&receiverContactID=${await this.mergeFields['createOrFindReceiverContactEmail'].get({path: 'contactId'})}&receiverEmail=${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`",
                  "vforkey": "96e77fff-82d2-49ed-bed8-030544450ed9",
                  "separator": "``"
                }
              ],
              "separators": [
                {
                  "label": "None",
                  "value": "``"
                },
                {
                  "label": "New line",
                  "value": "`\n`"
                },
                {
                  "label": "Comma",
                  "value": "`,`"
                },
                {
                  "label": "Tab",
                  "value": "`\t`"
                },
                {
                  "label": "Break tag (HTML)",
                  "value": "`<br />`"
                },
                {
                  "label": "Space",
                  "value": "` `"
                }
              ],
              "__codeModes": {},
              "processError": false,
              "startingText": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "c52f334a-31cb-4ff1-a16c-73d26d1b2a0c",
                "condition": ""
              }
            },
            "stepInputData": {
              "method": "\"inputs\"",
              "arrayData": "{jsonTable: [],separator: ``}",
              "inputData": "[{data: `&receiverContactID=${await this.mergeFields['createOrFindReceiverContactEmail'].get({path: 'contactId'})}&receiverEmail=${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`,vforkey: \"96e77fff-82d2-49ed-bed8-030544450ed9\",separator: ``}]",
              "separators": "[{label: \"None\",value: ``},{label: \"New line\",value: `\n`},{label: \"Comma\",value: `,`},{label: \"Tab\",value: `\t`},{label: \"Break tag (HTML)\",value: `<br />`},{label: \"Space\",value: ` `}]",
              "processError": false,
              "startingText": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`"
            },
            "outputExample": {
              "value": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "1039b9b2-34f2-4694-95f9-9bf7f64427c7",
            "label": "reportingData",
            "icon": "create_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "1683b915-08e7-419c-b4b1-b99cdce7717b",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "47d3e4bf-5b8e-45d5-b15e-9d78f831e22c",
                  "condition": ""
                }
              ],
              "jsonE": {},
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "reportingData",
                "type": "session"
              },
              "valueType": "string",
              "variables": [
                {
                  "vforkey": "0344f79d-0ad3-4206-8e6a-f5cb82709b67",
                  "valueType": "code",
                  "variableName": "events",
                  "variableValue": "[]"
                }
              ],
              "mergeField": "",
              "nativeJson": {},
              "simpleData": "",
              "__codeModes": {},
              "virtualJson": [],
              "processError": false,
              "selectedMode": "Extended",
              "virtualJsonEditable": []
            },
            "stepInputData": {
              "jsonE": "{}",
              "valueType": "\"string\"",
              "variables": "[{vforkey: \"0344f79d-0ad3-4206-8e6a-f5cb82709b67\",valueType: \"code\",variableName: \"events\",variableValue: []}]",
              "mergeField": "\"\"",
              "nativeJson": "{}",
              "simpleData": "",
              "virtualJson": "[]",
              "processError": false,
              "selectedMode": "\"Extended\"",
              "virtualJsonEditable": "[]"
            },
            "outputExample": {
              "events": "[]"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "15614fea-9e8a-4409-91d2-464803c8da46",
            "label": "combineSharedAppUrl",
            "icon": "combine_text",
            "iconType": "default",
            "iconUrl": "",
            "shape": "hexagon",
            "type": "066d6b8c-04ec-4b25-9b3d-ccaa191a8d4e",
            "description": "",
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "324acc6c-877d-4aff-9054-425b082d20fd",
                  "condition": ""
                }
              ],
              "method": "inputs",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "combineSharedAppUrl",
                "type": "session"
              },
              "arrayData": {
                "jsonTable": "[]",
                "separator": "``"
              },
              "inputData": [
                {
                  "data": "`&sessionID=${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}&userContactID=${await this.mergeFields['waitRequest'].get({path: 'params.userContactId'})}`",
                  "vforkey": "48bde79c-cd18-46e2-b26d-d54387c0c0ea",
                  "separator": "``"
                },
                {
                  "data": "`&desc=${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`",
                  "vforkey": "79e1d400-de7e-4e73-ba84-240d29cf3e0d",
                  "separator": "``"
                },
                {
                  "data": "`&character=${await this.mergeFields['waitRequest'].get({path: 'params.wikiName'})}`",
                  "vforkey": "f2bbf28f-5318-4a61-a1a9-a6ba398d0163",
                  "separator": "``"
                },
                {
                  "data": "`&image=${await this.mergeFields['urlImage'].get({path: 'generatedURL'})}`",
                  "vforkey": "dc95d113-30ec-42a9-b4af-6d36c3a672e2",
                  "separator": "``"
                },
                {
                  "data": "`&shared=true`",
                  "vforkey": "1bfbcff7-4c0b-4cb1-babe-683a9738bc6a",
                  "separator": "``"
                }
              ],
              "separators": [
                {
                  "label": "None",
                  "value": "``"
                },
                {
                  "label": "New line",
                  "value": "`\n`"
                },
                {
                  "label": "Comma",
                  "value": "`,`"
                },
                {
                  "label": "Tab",
                  "value": "`\t`"
                },
                {
                  "label": "Break tag (HTML)",
                  "value": "`<br />`"
                },
                {
                  "label": "Space",
                  "value": "` `"
                }
              ],
              "__codeModes": {},
              "processError": false,
              "startingText": "`${await this.botConfig['botURL'].get()}portal?`",
              "_ignoreMFAlerts": [
                "ava"
              ],
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "f6f7eba4-56ab-4183-ab55-afbf3b46cab6",
                "condition": ""
              }
            },
            "stepInputData": {
              "method": "\"inputs\"",
              "arrayData": "{jsonTable: [],separator: ``}",
              "inputData": "[{data: `&sessionID=${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}&userContactID=${await this.mergeFields['waitRequest'].get({path: 'params.userContactId'})}`,vforkey: \"48bde79c-cd18-46e2-b26d-d54387c0c0ea\",separator: ``},{data: `&desc=${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`,vforkey: \"79e1d400-de7e-4e73-ba84-240d29cf3e0d\",separator: ``},{data: `&character=${await this.mergeFields['waitRequest'].get({path: 'params.wikiName'})}`,vforkey: \"f2bbf28f-5318-4a61-a1a9-a6ba398d0163\",separator: ``},{data: `&image=${await this.mergeFields['urlImage'].get({path: 'generatedURL'})}`,vforkey: \"dc95d113-30ec-42a9-b4af-6d36c3a672e2\",separator: ``},{data: `&shared=true`,vforkey: \"1bfbcff7-4c0b-4cb1-babe-683a9738bc6a\",separator: ``}]",
              "separators": "[{label: \"None\",value: ``},{label: \"New line\",value: `\n`},{label: \"Comma\",value: `,`},{label: \"Tab\",value: `\t`},{label: \"Break tag (HTML)\",value: `<br />`},{label: \"Space\",value: ` `}]",
              "processError": false,
              "startingText": "`${await this.botConfig['botURL'].get()}portal?`"
            },
            "outputExample": {
              "value": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "156f5ba6-2a24-4b0e-8ed5-adfeadf931e0",
            "label": "sendInvalidPhone",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-left",
            "type": "e3fa20e5-b840-4942-b31a-8f37005f35e0",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "9a44759f-752a-44b9-bbb0-dcc02ebf79ec",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-send-message"
                },
                "name": "sendInvalidPhone",
                "type": "session"
              },
              "message": {
                "messageType": "single",
                "randomMessage": [
                  {
                    "text": "``",
                    "media": {
                      "medias": [],
                      "renderAttachmentsAs": "media"
                    },
                    "weight": "`1`"
                  }
                ],
                "singleMessage": {
                  "text": "`<div class=\"bot-speaking-reqnumber bot-speaking\">Hmm, it seems that your phone is not valid! Could you please provide a US-based number? Or add your country code at the beginning of your number.</div>`",
                  "media": {
                    "medias": [],
                    "renderAttachmentsAs": "media"
                  }
                },
                "messageHelpText": "",
                "messageLimitCharter": 4000,
                "messageTemplateType": "custom",
                "messageTypeHelpText": "<h3 id=\"message-types\">Message types</h3>\n<p>By default, you can send a <code>Single</code> message by defining it via a text and/or media file(s).</p>\n<p>Choose the <code>Random</code> option to send one message from a list depending on probability. To create multiple messages use <em>add new message</em> option. Each message is defined by a text and/or media, as well as its individual weight. The weight is used to calculate the probability of that message being chosen from the list. It is expected as a positive number with point or comma used for decimals; its range is <code>&gt; 0</code> and <code>&lt; (2^53-1)</code>. If the weights are defined manually, the probabilities of each message being sent are calculated automatically and displayed next to each <em>weight</em>. When step is reached in the flow, it chooses one of the messages randomly and sends it to the end user.</p>\n<p>Use the <code>Condition</code> option to select the outgoing message depending on set conditions. To set up multiple messages use <em>add condition</em> option. Each message is defined by a text and/or media, as well as conditions that should be met for the step to select that message. There is no limit on the number of condition groups, but the step will choose only one during an execution. When step is reached in the flow, each group will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. If none of the rules were met, the step will send the message defined in the <em>If no condition is met</em> section. Additional information about condition builder can be found in the <em>Conditional Selection</em> step under the <em>Info</em> icon.</p>\n"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "__codeModes": {},
              "exactStepId": "156f5ba6-2a24-4b0e-8ed5-adfeadf931e0",
              "conversation": {
                "meta": {
                  "chat": "`01oywrs`",
                  "type": "rwc-init-chat",
                  "lookAndFeel": {
                    "theme": "Auto-detect",
                    "title": "",
                    "botIcon": {},
                    "footerJs": "",
                    "headerJs": "",
                    "footerCss": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
                    "headerCss": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
                    "useFooter": false,
                    "footerHtml": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
                    "headerHtml": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
                    "description": "",
                    "headerImage": {},
                    "customStyles": [],
                    "showFooterAt": [
                      "desktop",
                      "mobile",
                      "embed"
                    ],
                    "useCustomCss": false,
                    "botAnswerDelay": "`2 seconds`",
                    "closeEventType": "`command`",
                    "customizeHeader": false,
                    "closeEventCommand": "``",
                    "messageTimeFormat": "``",
                    "useGlobalCommands": false,
                    "globalCommandsList": [],
                    "allowRestoreSession": false,
                    "typingIndicatorTime": "`2 seconds`",
                    "allowStartNewSession": false,
                    "globalCommandsCustom": [],
                    "isCustomMessageTimeFormat": false
                  },
                  "conversationType": "rwc-chat",
                  "additionalContent": {
                    "type": "`empty`"
                  },
                  "conversationStarter": true
                },
                "name": "waitConv",
                "type": "session",
                "botId": "f37b7298-10b9-49dd-b085-a03a8661fca4",
                "value": {
                  "name": "waitConv"
                },
                "stepId": "88dc5d0d-f14b-4d57-8001-c7a8f0827d59",
                "thisBotId": "f37b7298-10b9-49dd-b085-a03a8661fca4"
              },
              "isSingleExit": true,
              "processError": false,
              "conditionGroups": [
                {
                  "label": "`New condition 1`",
                  "rules": [
                    {
                      "vforkey": "582b2577-34b1-4791-b5a0-26b2df9ff082",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "``",
                      "secondValue": "``",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "``",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "conditionMessage": {
                    "text": "``",
                    "media": {
                      "medias": [],
                      "renderAttachmentsAs": "media"
                    }
                  },
                  "isEditableHeader": false
                }
              ],
              "overrideBotIcon": {},
              "answerDelayDuration": {
                "input": "``",
                "outputMode": "ms"
              },
              "elseConditionMessage": {
                "text": "``",
                "media": {
                  "medias": [],
                  "renderAttachmentsAs": "media"
                }
              },
              "hasNoConditionDataOut": true,
              "conditionRuleHasDataOut": false,
              "noConditionDataOutValue": "``",
              "isOverrideBotIconAllowed": false,
              "overrideBotAnswerDelayDuration": false
            },
            "stepInputData": {
              "message": "{messageType: \"single\",singleMessage: {text: `<div class=\"bot-speaking-reqnumber bot-speaking\">Hmm, it seems that your phone is not valid! Could you please provide a US-based number? Or add your country code at the beginning of your number.</div>`,media: {medias: [],renderAttachmentsAs: \"media\"}}}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "exactStepId": "\"156f5ba6-2a24-4b0e-8ed5-adfeadf931e0\"",
              "processError": false,
              "elseConditionMessage": "{text: ``,media: {medias: [],renderAttachmentsAs: \"media\"}}",
              "isOverrideBotIconAllowed": "false",
              "overrideBotAnswerDelayDuration": "false"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "transcript": {
                "tags": [],
                "type": "transcript",
                "label": "Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "19c24026-1d46-400f-a24b-91d6ca084eaf",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "1eafdae2-0dbe-4509-8b40-a9a979fc89b0",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "24fae94b-5269-4f60-a2df-35b970828ef5",
            "label": "convString",
            "icon": "create_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "1683b915-08e7-419c-b4b1-b99cdce7717b",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "923e96a9-c6c8-4bd0-96c8-a2777471279e",
                  "condition": ""
                }
              ],
              "jsonE": {},
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "convString",
                "type": "session"
              },
              "valueType": "string",
              "variables": [
                {
                  "vforkey": "125124d0-18eb-4e64-8d24-807632ee7745",
                  "valueType": "code",
                  "variableName": "data",
                  "variableValue": "JSON.stringify(await this.mergeFields['waitRequest'].get({path: 'params.convOutput'}))"
                }
              ],
              "mergeField": "",
              "nativeJson": {},
              "simpleData": "",
              "__codeModes": {},
              "virtualJson": [],
              "processError": false,
              "selectedMode": "Extended",
              "virtualJsonEditable": []
            },
            "stepInputData": {
              "jsonE": "{}",
              "valueType": "\"string\"",
              "variables": "[{vforkey: \"125124d0-18eb-4e64-8d24-807632ee7745\",valueType: \"code\",variableName: \"data\",variableValue: JSON.stringify(await this.mergeFields['waitRequest'].get({path: 'params.convOutput'}))}]",
              "mergeField": "\"\"",
              "nativeJson": "{}",
              "simpleData": "",
              "virtualJson": "[]",
              "processError": false,
              "selectedMode": "\"Extended\"",
              "virtualJsonEditable": "[]"
            },
            "outputExample": {
              "data": "JSON.stringify(await this.mergeFields['waitRequest'].get({path: 'params.convOutput'}))"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "25111fc3-3455-4b6a-a3ce-516e825dc2fd",
            "label": "return error pdf",
            "icon": "error",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "37daafca-f609-4ef8-9f8c-f229ce92e765",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "cacb167a-1a81-46c6-9102-23a4f8f4eae2",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "triggerSharedConv",
              "executionError": "`tableAsImage step is having an error on share experience`"
            },
            "stepInputData": {
              "conversation": "\"triggerSharedConv\"",
              "executionError": "`tableAsImage step is having an error on share experience`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "25515674-7a87-4f1a-9ae5-7a968b353af6",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "25e0e033-6dc9-4902-8b8c-960068ca4554",
            "label": "validatedReceiverPhone",
            "icon": "interpret_phone_number",
            "iconType": "default",
            "iconUrl": "",
            "shape": "octagon",
            "type": "4b9817f4-230c-47a1-8365-40f054de7d87",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "doLog": false,
              "exits": [
                {
                  "id": "next",
                  "label": "valid",
                  "stepId": "b07c891e-af90-438d-a98b-598f5c08c519",
                  "condition": ""
                },
                {
                  "id": "9e3d66af-2e01-4730-b435-f9ce84a535bc",
                  "label": "invalid",
                  "stepId": "156f5ba6-2a24-4b0e-8ed5-adfeadf931e0",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "validatedReceiverPhone",
                "type": "session"
              },
              "isoCountry": "`US`",
              "__codeModes": {},
              "input_phone": "`${await this.mergeFields['requestReceiverPhone'].get({path: 'userReply'})}`",
              "outputFormat": "'e164'"
            },
            "stepInputData": {
              "doLog": "false",
              "isoCountry": "`US`",
              "input_phone": "`${await this.mergeFields['requestReceiverPhone'].get({path: 'userReply'})}`",
              "outputFormat": "'e164'"
            },
            "outputExample": {
              "type": "string",
              "phone": "string",
              "valid": true,
              "possible": true,
              "regionCode": "string",
              "possibility": "string",
              "canBeInternationallyDialled": true
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "267108e6-c49a-4b01-a395-84df98a69f91",
            "label": "return email finished",
            "icon": "success",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "e1a9d280-cc03-4fa4-abc6-15636a2917b5",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "1eafdae2-0dbe-4509-8b40-a9a979fc89b0",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "waitRequest",
              "selectedExit": "result",
              "executionResult": "`Finished`",
              "selectedStepExits": [
                {
                  "label": "result",
                  "value": "result"
                }
              ]
            },
            "stepInputData": {
              "conversation": "\"waitRequest\"",
              "selectedExit": "\"result\"",
              "executionResult": "`Finished`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "28ae91ac-8542-4fcc-a407-40b4d891d345",
            "label": "return timeout",
            "icon": "error",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "37daafca-f609-4ef8-9f8c-f229ce92e765",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "8c4c7db0-f75d-4b4b-bb20-bbf2f51c8431",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "waitRequest",
              "executionError": "`${await this.mergeFields['handleError'].get({path: 'error.message'})}`"
            },
            "stepInputData": {
              "conversation": "\"waitRequest\"",
              "executionError": "`${await this.mergeFields['handleError'].get({path: 'error.message'})}`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "29ba8d03-b72d-439d-81e8-a251508e5625",
            "label": "tinyURLSame",
            "icon": "parse_url",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "88e7cd37-10dd-42e4-9f31-93875e70ed3a",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                  "label": "next",
                  "stepId": "c904d3bc-e156-42c1-bfc1-94bb3ba34ad5",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "tinyUrlSame",
                "type": "session"
              },
              "urlData": {
                "shortURL": "",
                "sourceURL": "`${await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'})}`",
                "isCodeMode": false,
                "showPreview": false,
                "disableButton": true
              },
              "isDeepLink": false,
              "__codeModes": {},
              "processError": false,
              "skipStepLogicExit": {
                "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                "label": "next",
                "stepId": "419472f5-a952-4813-91c8-fa5a5c5d7ec2",
                "condition": ""
              }
            },
            "stepInputData": {
              "urlData": "{shortURL: \"\",sourceURL: `${await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'})}`,isCodeMode: false,showPreview: false,disableButton: true}",
              "isDeepLink": "false",
              "processError": false
            },
            "outputExample": {
              "generatedURL": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "324acc6c-877d-4aff-9054-425b082d20fd",
            "label": "sanitizingUrls1",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "42fd5f5e-b2d6-45cd-a7ee-fdfc2954e34f",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "combineSharedAppUrl.value"
                  },
                  "variableValue": "await this.mergeFields['combineSharedAppUrl'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "stepInputData": {
              "variables": "[{vforkey: \"c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a\",valueType: \"code\",variableName: {type: \"session\",label: \"combineSharedAppUrl.value\"},variableValue: await this.mergeFields['combineSharedAppUrl'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')}]",
              "mountedFlag": "true",
              "processError": false,
              "changeDataStepErrors": "[]",
              "additionalMergeFields": "[]",
              "isInvalidChangeDataStep": "false"
            },
            "outputExample": {
              "undefined": "await this.mergeFields['combineSharedAppUrl'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "3324e635-3530-435f-8653-46df28e310be",
            "label": "requestReceiverPhone",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "25e0e033-6dc9-4902-8b8c-960068ca4554",
                  "condition": ""
                }
              ],
              "medias": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-request-response"
                },
                "name": "requestReceiverPhone",
                "type": "session"
              },
              "videoSrc": {},
              "rateInput": true,
              "sliderMax": "``",
              "sliderMin": "``",
              "dataOutput": {
                "userReply": "String"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "sliderStep": "``",
              "sliderType": "single",
              "sliderUnit": "``",
              "__codeModes": {},
              "creditTerms": {},
              "savedStepId": "3324e635-3530-435f-8653-46df28e310be",
              "showBotIcon": false,
              "textMessage": "`<div class=\"bot-speaking-reqnumber bot-speaking\">In order to share this we need the receiver's phone number.</div>`",
              "videoPoster": {},
              "conversation": {},
              "processError": false,
              "radioDefault": "`No option`",
              "radioOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "signatureBtn": "``",
              "workingHours": {
                "to": null,
                "from": null,
                "timezone": {
                  "id": "1",
                  "zone": "GMT+00:00"
                },
                "timeFormat": "12"
              },
              "additionalCss": "",
              "hasCancelExit": false,
              "skipStepLogic": false,
              "textInputType": "text",
              "videoAutoplay": true,
              "videoBtnLabel": "``",
              "videoUsedLink": false,
              "additionalHtml": "",
              "autoSuggestion": {
                "input": true,
                "isExtraLeg": false
              },
              "creditBtnLabel": "``",
              "geolocationBtn": "``",
              "geolocationLat": "``",
              "geolocationLng": "``",
              "inputComponent": "`textFiles`",
              "isPrivateFiles": false,
              "optionsButtons": [
                {
                  "label": "``",
                  "value": "``",
                  "buttonStyle": "default"
                }
              ],
              "processTimeout": false,
              "videoStartTime": "0",
              "carouselOptions": [
                {
                  "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
                  "image": {},
                  "title": "``",
                  "value": "``",
                  "video": {},
                  "hasModal": false,
                  "modalType": "default-modal",
                  "buttonLabel": "``",
                  "buttonStyle": "default",
                  "description": "``",
                  "childWindowType": "html",
                  "additionalContentLink": {},
                  "showModalButtonInUserResponse": true
                }
              ],
              "checkboxDefault": [],
              "checkboxOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "customVariables": [],
              "dropdownOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratePlaceholder": "``",
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": false,
              "additionalScript": "",
              "creditTermsLabel": "``",
              "customTemplateId": null,
              "datepickerFormat": "`MM-DD-YYYY`",
              "sliderDefaultEnd": "``",
              "timepickerFormat": "`auto`",
              "attachmentsNumber": "`0`",
              "optionListOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratingSubmitLabel": "``",
              "scheduleDisableMf": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "c5cb5b7c-0b9b-41db-bdbc-8098f8d92467",
                "condition": ""
              },
              "videoShowInThread": true,
              "autoSuggestionType": "`emty`",
              "customTemplateType": "`vue`",
              "ratingDiscardLabel": "``",
              "sliderCustomLabels": [
                {
                  "label": "``",
                  "value": "``"
                },
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "sliderDefaultStart": "``",
              "sliderDefaultValue": "``",
              "sliderUnitPosition": "`start`",
              "userAnswerFunction": "// You have access to userReply: string\nreturn ''",
              "videoTotalDuration": 0,
              "carouselAlternative": {
                "value": "``",
                "buttonLabel": "``",
                "buttonStyle": "default",
                "description": "``"
              },
              "carouselMultiselect": false,
              "dropdownPlaceholder": "``",
              "scheduleButtonLabel": "``",
              "scheduleDisableByMf": false,
              "scheduleOptionItems": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "creditCancelBtnLabel": "``",
              "datepickerBlockDates": false,
              "datepickerStartsFrom": "`0`",
              "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
              "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
              "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
              "geolocationSetDefault": false,
              "scheduleDisableManual": [],
              "sliderUseCustomLabels": false,
              "additionalContentVideo": [],
              "attachmentsAllowChosen": false,
              "carouselCancelBtnLabel": "``",
              "carouselHasAlternative": false,
              "carouselSubmitBtnLabel": "``",
              "customTempalateScripts": [],
              "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
              "textInputCustomPattern": "``",
              "additionalCardvariables": [],
              "attachmentsAllowedTypes": [],
              "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
              "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
              "recordMultimediaOptions": [
                "`audio`",
                "`video`",
                "`screen`",
                "`file`"
              ],
              "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
              "autoSubmitCustomTemplate": true,
              "datepickerBlockedOptions": [],
              "datepickerSuggestedDates": false,
              "scheduleAllowMultiselect": false,
              "videoStartTimeTimestring": "``",
              "autoSuggestionOptionsList": [
                {
                  "text": "``"
                }
              ],
              "customTemplateCompiledCSS": "",
              "scheduleDisableByFunction": false,
              "scheduleDisableByManually": false,
              "datepickerSuggestedOptions": [],
              "datepickerBlockedMergefield": "this.get('')",
              "scheduleMultiselectQuantity": "3",
              "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
              "showCustomComponentInMessage": true,
              "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
              "datepickerSuggestedMergefield": "this.get('')",
              "hideCustomComponentAfterSubmit": false,
              "additionalContentCardChangeType": "`append`",
              "autoSuggestionOptionsMergeField": "this.get('')",
              "customTemplateCSSWrapperClassName": ""
            },
            "stepInputData": {
              "medias": "[]",
              "dataOutput": "{\"userReply\": \"String\"}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "savedStepId": "\"3324e635-3530-435f-8653-46df28e310be\"",
              "textMessage": "`<div class=\"bot-speaking-reqnumber bot-speaking\">In order to share this we need the receiver's phone number.</div>`",
              "processError": false,
              "textInputType": "'text'",
              "autoSuggestion": "{input: true,isExtraLeg: false}",
              "inputComponent": "`textFiles`",
              "processTimeout": false,
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": "false",
              "autoSuggestionType": "`emty`"
            },
            "outputExample": {
              "userReply": "String"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "requestTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Request Transcript",
                "enabled": true
              },
              "responseTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Response Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "37f5053e-0204-4e72-94f0-20939abe2d8e",
            "label": "genericOrFigureShare",
            "icon": "conditional_selection",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "5fddb866-8bd4-4eed-9090-99541ec8af5a",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "09161584-6084-4c29-b94a-186846a3b6ae",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "genericOrFigureShare",
                "type": "session"
              },
              "isElseExit": false,
              "__codeModes": {},
              "elseExitName": "else",
              "isSingleExit": true,
              "processError": false,
              "conditionGroups": [
                {
                  "label": "`New Group 1`",
                  "rules": [
                    {
                      "vforkey": "c1354f4c-f903-42df-ab1b-460067c0dd0f",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`",
                      "secondValue": "`Generic`",
                      "isDisabledSecondValue": false
                    },
                    {
                      "vforkey": "d1376d9c-1278-459b-8a44-a8ce720f8ebe",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`",
                      "secondValue": "`Special`",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "`&figureTypeID=${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}&genericFigureName=${await this.mergeFields['gpt3Data'].get({path: 'genericFigureName'})}`",
                  "vforkey": "f7d93d3e-699e-4dd7-923b-018a5e60f31b",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              ],
              "isCaseSensitive": false,
              "elseExitNameFinal": "else",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "5e2ed555-0c0a-4e92-b0fb-6fa7f5d65bc9",
                "condition": ""
              },
              "hasNoConditionDataOut": true,
              "dynamicExitsArrayStart": 1,
              "conditionRuleHasDataOut": true,
              "noConditionDataOutValue": "`&figureTypeID=${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`"
            },
            "stepInputData": {
              "isElseExit": "false",
              "isSingleExit": true,
              "processError": false,
              "conditionGroups": "[{label: `New Group 1`,rules: [{vforkey: \"c1354f4c-f903-42df-ab1b-460067c0dd0f\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`,secondValue: `Generic`,isDisabledSecondValue: false},{vforkey: \"d1376d9c-1278-459b-8a44-a8ce720f8ebe\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`,secondValue: `Special`,isDisabledSecondValue: false}],dataOut: `&figureTypeID=${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}&genericFigureName=${await this.mergeFields['gpt3Data'].get({path: 'genericFigureName'})}`,id: \"f7d93d3e-699e-4dd7-923b-018a5e60f31b\",trueValue: \"any\",description: ``,isNotCollapsed: true,isEditableHeader: false}]",
              "isCaseSensitive": "false",
              "elseExitNameFinal": "\"else\"",
              "hasNoConditionDataOut": true,
              "conditionRuleHasDataOut": true,
              "noConditionDataOutValue": "`&figureTypeID=${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`"
            },
            "outputExample": {
              "output": "any type"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "3ae4dd3b-f8b2-43d4-8747-58461a4c0812",
            "label": "validatedReceiverEmail",
            "icon": "send_email",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "0796f3ac-2d14-4dda-8570-2f11760c6dd7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "a8b6511c-71ca-4f79-b991-57a3cb22ec1b"
                },
                {
                  "id": "invalid",
                  "label": "invalid",
                  "stepId": "7fe37019-96ba-4de0-9604-c75f335d4742",
                  "dynamic": true
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "name": "validatedReceiverEmail",
                "type": "session"
              },
              "inEmail": "`${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`",
              "__codeModes": {},
              "processError": false,
              "processInvalid": true,
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "2a1a23b6-12d7-4fbb-8b8c-cb23db62c404"
              },
              "dynamicExitsArrayStart": 1
            },
            "stepInputData": {
              "inEmail": "`${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`",
              "processError": false,
              "processInvalid": "true"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "40155271-02b6-4591-9183-dd59638c12b7",
            "label": "requestReceiverEmail",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "3ae4dd3b-f8b2-43d4-8747-58461a4c0812",
                  "condition": ""
                }
              ],
              "medias": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-request-response"
                },
                "name": "requestReceiverEmail",
                "type": "session"
              },
              "videoSrc": {},
              "rateInput": true,
              "sliderMax": "``",
              "sliderMin": "``",
              "dataOutput": {
                "userReply": "String"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "sliderStep": "``",
              "sliderType": "single",
              "sliderUnit": "``",
              "__codeModes": {},
              "creditTerms": {},
              "savedStepId": "40155271-02b6-4591-9183-dd59638c12b7",
              "showBotIcon": false,
              "textMessage": "`<div class=\"bot-speaking-reqnumber bot-speaking\">In order to share this we need the receiver's email.</div>`",
              "videoPoster": {},
              "conversation": {},
              "processError": false,
              "radioDefault": "`No option`",
              "radioOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "signatureBtn": "``",
              "workingHours": {
                "to": null,
                "from": null,
                "timezone": {
                  "id": "1",
                  "zone": "GMT+00:00"
                },
                "timeFormat": "12"
              },
              "additionalCss": "",
              "hasCancelExit": false,
              "skipStepLogic": false,
              "textInputType": "text",
              "videoAutoplay": true,
              "videoBtnLabel": "``",
              "videoUsedLink": false,
              "additionalHtml": "",
              "autoSuggestion": {
                "input": true,
                "isExtraLeg": false
              },
              "creditBtnLabel": "``",
              "geolocationBtn": "``",
              "geolocationLat": "``",
              "geolocationLng": "``",
              "inputComponent": "`textFiles`",
              "isPrivateFiles": false,
              "optionsButtons": [
                {
                  "label": "``",
                  "value": "``",
                  "buttonStyle": "default"
                }
              ],
              "processTimeout": false,
              "videoStartTime": "0",
              "carouselOptions": [
                {
                  "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
                  "image": {},
                  "title": "``",
                  "value": "``",
                  "video": {},
                  "hasModal": false,
                  "modalType": "default-modal",
                  "buttonLabel": "``",
                  "buttonStyle": "default",
                  "description": "``",
                  "childWindowType": "html",
                  "additionalContentLink": {},
                  "showModalButtonInUserResponse": true
                }
              ],
              "checkboxDefault": [],
              "checkboxOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "customVariables": [],
              "dropdownOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratePlaceholder": "``",
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": false,
              "additionalScript": "",
              "creditTermsLabel": "``",
              "customTemplateId": null,
              "datepickerFormat": "`MM-DD-YYYY`",
              "sliderDefaultEnd": "``",
              "timepickerFormat": "`auto`",
              "attachmentsNumber": "`0`",
              "optionListOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratingSubmitLabel": "``",
              "scheduleDisableMf": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "7462acd6-a0ef-4a2a-b214-d8d2e43b6e6c",
                "condition": ""
              },
              "videoShowInThread": true,
              "autoSuggestionType": "`emty`",
              "customTemplateType": "`vue`",
              "ratingDiscardLabel": "``",
              "sliderCustomLabels": [
                {
                  "label": "``",
                  "value": "``"
                },
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "sliderDefaultStart": "``",
              "sliderDefaultValue": "``",
              "sliderUnitPosition": "`start`",
              "userAnswerFunction": "// You have access to userReply: string\nreturn ''",
              "videoTotalDuration": 0,
              "carouselAlternative": {
                "value": "``",
                "buttonLabel": "``",
                "buttonStyle": "default",
                "description": "``"
              },
              "carouselMultiselect": false,
              "dropdownPlaceholder": "``",
              "scheduleButtonLabel": "``",
              "scheduleDisableByMf": false,
              "scheduleOptionItems": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "creditCancelBtnLabel": "``",
              "datepickerBlockDates": false,
              "datepickerStartsFrom": "`0`",
              "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
              "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
              "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
              "geolocationSetDefault": false,
              "scheduleDisableManual": [],
              "sliderUseCustomLabels": false,
              "additionalContentVideo": [],
              "attachmentsAllowChosen": false,
              "carouselCancelBtnLabel": "``",
              "carouselHasAlternative": false,
              "carouselSubmitBtnLabel": "``",
              "customTempalateScripts": [],
              "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
              "textInputCustomPattern": "``",
              "additionalCardvariables": [],
              "attachmentsAllowedTypes": [],
              "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
              "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
              "recordMultimediaOptions": [
                "`audio`",
                "`video`",
                "`screen`",
                "`file`"
              ],
              "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
              "autoSubmitCustomTemplate": true,
              "datepickerBlockedOptions": [],
              "datepickerSuggestedDates": false,
              "scheduleAllowMultiselect": false,
              "videoStartTimeTimestring": "``",
              "autoSuggestionOptionsList": [
                {
                  "text": "``"
                }
              ],
              "customTemplateCompiledCSS": "",
              "scheduleDisableByFunction": false,
              "scheduleDisableByManually": false,
              "datepickerSuggestedOptions": [],
              "datepickerBlockedMergefield": "this.get('')",
              "scheduleMultiselectQuantity": "3",
              "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
              "showCustomComponentInMessage": true,
              "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
              "datepickerSuggestedMergefield": "this.get('')",
              "hideCustomComponentAfterSubmit": false,
              "additionalContentCardChangeType": "`append`",
              "autoSuggestionOptionsMergeField": "this.get('')",
              "customTemplateCSSWrapperClassName": ""
            },
            "stepInputData": {
              "medias": "[]",
              "dataOutput": "{\"userReply\": \"String\"}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "savedStepId": "\"40155271-02b6-4591-9183-dd59638c12b7\"",
              "textMessage": "`<div class=\"bot-speaking-reqnumber bot-speaking\">In order to share this we need the receiver's email.</div>`",
              "processError": false,
              "textInputType": "'text'",
              "autoSuggestion": "{input: true,isExtraLeg: false}",
              "inputComponent": "`textFiles`",
              "processTimeout": false,
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": "false",
              "autoSuggestionType": "`emty`"
            },
            "outputExample": {
              "userReply": "String"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "requestTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Request Transcript",
                "enabled": true
              },
              "responseTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Response Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "42d649a5-91b9-44e0-a91c-a93ad4b06252",
            "label": "log file url",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "665a4a8a-206b-4b52-bfcc-356e47d79e4f"
                }
              ],
              "logData": "await this.mergeFields['tableAsImage'].get({path: 'url'})",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`====>File-Name-URL`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "await this.mergeFields['tableAsImage'].get({path: 'url'})",
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`====>File-Name-URL`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "42fd5f5e-b2d6-45cd-a7ee-fdfc2954e34f",
            "label": "sharedUrl",
            "icon": "parse_url",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "88e7cd37-10dd-42e4-9f31-93875e70ed3a",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                  "label": "next",
                  "stepId": "8a926464-aad9-4724-bd25-fb86ef9ed1b8",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "sharedUrl",
                "type": "session"
              },
              "urlData": {
                "shortURL": "https://xn--ew8h.o-o.ai/i1NIMdEZ7",
                "sourceURL": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`",
                "isCodeMode": false,
                "showPreview": false,
                "disableButton": true
              },
              "isDeepLink": false,
              "__codeModes": {},
              "processError": false
            },
            "stepInputData": {
              "urlData": "{shortURL: \"https://xn--ew8h.o-o.ai/i1NIMdEZ7\",sourceURL: `${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`,isCodeMode: false,showPreview: false,disableButton: true}",
              "isDeepLink": "false",
              "processError": false
            },
            "outputExample": {
              "generatedURL": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "47d3e4bf-5b8e-45d5-b15e-9d78f831e22c",
            "label": "addStepEventToNewArray",
            "icon": "add_item_to_array",
            "iconType": "default",
            "iconUrl": "",
            "shape": "sun",
            "type": "43d3d9da-bc39-44d3-953c-64a4d01b0f62",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "920ab4e5-d3ad-4028-8e3d-64a2d376e9c7",
                  "condition": ""
                }
              ],
              "items": [
                {
                  "value": "{\n  \"flowName\": this.config.flowLabel,\n  \"sessionID\": await this.mergeFields['waitRequest'].get({path: 'params.sessionID'}),\n  \"stepName\": await this.mergeFields['report'].get({path: 'event.EventValue.StepLabel'}),\n  \"date\": await this.mergeFields['report'].get({path: 'event.Timestamp'}),\n  \"stepID\": await this.mergeFields['report'].get({path: 'event.StepId'})\n}",
                  "vforkey": "9113b054-358d-43f3-8290-e6e42cfb7ba2"
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "addStepEventToNewArray",
                "type": "session"
              },
              "mergeField": "`reportingData.events`",
              "__codeModes": {},
              "isMergeField": "existing",
              "processError": false,
              "arrayInputBehavior": "`individually`",
              "positionToAddInputData": "`lastAdded`"
            },
            "stepInputData": {
              "items": "[({\n  \"flowName\": this.config.flowLabel,\n  \"sessionID\": await this.mergeFields['waitRequest'].get({path: 'params.sessionID'}),\n  \"stepName\": await this.mergeFields['report'].get({path: 'event.EventValue.StepLabel'}),\n  \"date\": await this.mergeFields['report'].get({path: 'event.Timestamp'}),\n  \"stepID\": await this.mergeFields['report'].get({path: 'event.StepId'})\n})]",
              "dataOut": "{\"ttl\": 86400000,\"meta\": {},\"name\": \"addStepEventToNewArray\",\"type\": \"session\"}",
              "mergeField": "`reportingData.events`",
              "isMergeField": "\"existing\"",
              "processError": false,
              "arrayInputBehavior": "`individually`",
              "positionToAddInputData": "`lastAdded`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "5a0f4005-e5f8-4c89-b4bc-79761aca012c",
            "label": "log file name",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "76d959fa-6fab-478f-be82-e7bee54e5af4"
                }
              ],
              "logData": "await this.mergeFields['generateTable'].get({path: 'html'})",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`====>File-Name`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "await this.mergeFields['generateTable'].get({path: 'html'})",
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`====>File-Name`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "5adb8996-3774-439c-9abc-03d9f0d40ca9",
            "label": "sanitizeImageName",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "15614fea-9e8a-4409-91d2-464803c8da46",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "urlImage.generatedURL"
                  },
                  "variableValue": "await this.mergeFields['urlImage'].get({path: 'generatedURL'}).replace('https://dmo.1re.ch/','').replace('https://xn--ew8h.o-o.ai/','')"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "stepInputData": {
              "variables": "[{vforkey: \"c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a\",valueType: \"code\",variableName: {type: \"session\",label: \"urlImage.generatedURL\"},variableValue: await this.mergeFields['urlImage'].get({path: 'generatedURL'}).replace('https://dmo.1re.ch/','').replace('https://xn--ew8h.o-o.ai/','')}]",
              "mountedFlag": "true",
              "processError": false,
              "changeDataStepErrors": "[]",
              "additionalMergeFields": "[]",
              "isInvalidChangeDataStep": "false"
            },
            "outputExample": {
              "undefined": "await this.mergeFields['urlImage'].get({path: 'generatedURL'}).replace('https://dmo.1re.ch/','').replace('https://xn--ew8h.o-o.ai/','')"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "5dd6b9d8-7391-4182-8098-45102c892405",
            "label": "sanitizingUrls",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "c6ba4659-68c9-44b3-8d75-9d37caf4c4c1",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "combineSharedAppUrlwithDifferentFigure.value"
                  },
                  "variableValue": "await this.mergeFields['combineSharedAppUrlwithDifferentFigure'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')"
                },
                {
                  "vforkey": "e6d7daac-b39a-4dbd-89ce-b56c52794325",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "combineSharedAppUrlwithSameFigure.value"
                  },
                  "variableValue": "await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "stepInputData": {
              "variables": "[{vforkey: \"c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a\",valueType: \"code\",variableName: {type: \"session\",label: \"combineSharedAppUrlwithDifferentFigure.value\"},variableValue: await this.mergeFields['combineSharedAppUrlwithDifferentFigure'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')},{vforkey: \"e6d7daac-b39a-4dbd-89ce-b56c52794325\",valueType: \"code\",variableName: {type: \"session\",label: \"combineSharedAppUrlwithSameFigure.value\"},variableValue: await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')}]",
              "mountedFlag": "true",
              "processError": false,
              "changeDataStepErrors": "[]",
              "additionalMergeFields": "[]",
              "isInvalidChangeDataStep": "false"
            },
            "outputExample": {
              "undefined": "await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'}).replaceAll('@','%40').replaceAll(' ','%20')"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "5f0bc8e1-ccce-4cf8-a5f9-193879dbeffd",
            "label": "sendSMS",
            "icon": "text",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-left",
            "type": "7cbb0341-55c0-42b8-962d-a8721585e89d",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "76bfba4f-830d-4ab4-abed-e5863b612619",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "conversationType": "sms",
                  "conversationStarter": true
                },
                "name": "sendSms",
                "type": "session"
              },
              "options": [
                {
                  "label": "+12019031504",
                  "value": "`+12019031504`",
                  "custom": true
                },
                {
                  "id": "+12019031504",
                  "label": "+12019031504 (+1 201-903-1504)",
                  "value": "`+12019031504`",
                  "fromProvider": true
                },
                {
                  "id": "+12053501504",
                  "label": "+12053501504 (+1 205-350-1504)",
                  "value": "`+12053501504`",
                  "fromProvider": true
                },
                {
                  "id": "+13032329272",
                  "label": "+13032329272 (GARTNER MQ - don't use anywhere else)",
                  "value": "`+13032329272`",
                  "fromProvider": true
                },
                {
                  "id": "+13033896624",
                  "label": "+13033896624 (+1 303-389-6624)",
                  "value": "`+13033896624`",
                  "fromProvider": true
                },
                {
                  "id": "+14632005071",
                  "label": "+14632005071 (+1 463-200-5071)",
                  "value": "`+14632005071`",
                  "fromProvider": true
                },
                {
                  "id": "+16072039725",
                  "label": "+16072039725 (+1 607-203-9725)",
                  "value": "`+16072039725`",
                  "fromProvider": true
                },
                {
                  "id": "+17192120828",
                  "label": "+17192120828 (+1 719-212-0828)",
                  "value": "`+17192120828`",
                  "fromProvider": true
                },
                {
                  "id": "+17202269480",
                  "label": "+17202269480 (la-webrtc-proxy (DO NOT REMOVE))",
                  "value": "`+17202269480`",
                  "fromProvider": true
                },
                {
                  "id": "PN8e21dab6dac3390182b2724f4958fe9e",
                  "label": "+18559374608 ((855) 937-4608)",
                  "value": "`+18559374608`",
                  "fromProvider": true
                },
                {
                  "id": "+19542670327",
                  "label": "+19542670327 (+1 954-267-0327)",
                  "value": "`+19542670327`",
                  "fromProvider": true
                },
                {
                  "id": "PN66b9900b2825c75665d051ba5ce51da2",
                  "label": "+19702367475 ((970) 236-7475)",
                  "value": "`+19702367475`",
                  "fromProvider": true
                },
                {
                  "id": "PN6e6244178706ef72100d52a4d4868eb9",
                  "label": "+19705128535 (GARTNER MQ MMS - don't use)",
                  "value": "`+19705128535`",
                  "fromProvider": true
                }
              ],
              "timeout": "`24h`",
              "useFiles": false,
              "botNumber": "`+12019031504`",
              "__codeModes": {},
              "activeTabId": "single",
              "checkStatus": false,
              "isSingleExit": true,
              "processError": false,
              "randomGroups": [
                {
                  "medias": [],
                  "weight": "`1`",
                  "message": "``",
                  "weightLabel": "Weight"
                }
              ],
              "endUserNumber": "`${await this.mergeFields['validatedReceiverPhone'].get({path: 'phone'})}`",
              "singleMessage": {
                "medias": [],
                "message": "`Your Contact ${await this.mergeFields['gpt3Data'].get({path: 'userName'})} is sharing this OneReach conversation ${await this.mergeFields['tinyPhoneUrl'].get({path: 'generatedURL'})}`",
                "useFiles": false
              },
              "_ignoreMFAlerts": [
                "gpt3Data"
              ],
              "conditionGroups": [
                {
                  "label": "`New condition 1`",
                  "rules": [
                    {
                      "vforkey": "f98ed2b1-4d26-4ad6-87c7-f8470e2c6f18",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "``",
                      "secondValue": "``",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "medias": [],
                  "weight": "`1`",
                  "dataOut": "``",
                  "message": "``",
                  "useFiles": false,
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              ],
              "conversationMeta": "",
              "noConditionMedias": [],
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "3f70757f-c9ce-4051-ac0f-2d48a365e96c",
                "condition": ""
              },
              "noConditionMessage": "``",
              "continueConversation": false,
              "hasNoConditionDataOut": false,
              "conditionRuleHasDataOut": false
            },
            "stepInputData": {
              "options": "[{label: \"+12019031504\",value: \"`+12019031504`\",custom: true},{id: \"+12019031504\",label: \"+12019031504 (+1 201-903-1504)\",value: \"`+12019031504`\",fromProvider: true},{id: \"+12053501504\",label: \"+12053501504 (+1 205-350-1504)\",value: \"`+12053501504`\",fromProvider: true},{id: \"+13032329272\",label: \"+13032329272 (GARTNER MQ - don't use anywhere else)\",value: \"`+13032329272`\",fromProvider: true},{id: \"+13033896624\",label: \"+13033896624 (+1 303-389-6624)\",value: \"`+13033896624`\",fromProvider: true},{id: \"+14632005071\",label: \"+14632005071 (+1 463-200-5071)\",value: \"`+14632005071`\",fromProvider: true},{id: \"+16072039725\",label: \"+16072039725 (+1 607-203-9725)\",value: \"`+16072039725`\",fromProvider: true},{id: \"+17192120828\",label: \"+17192120828 (+1 719-212-0828)\",value: \"`+17192120828`\",fromProvider: true},{id: \"+17202269480\",label: \"+17202269480 (la-webrtc-proxy (DO NOT REMOVE))\",value: \"`+17202269480`\",fromProvider: true},{id: \"PN8e21dab6dac3390182b2724f4958fe9e\",label: \"+18559374608 ((855) 937-4608)\",value: \"`+18559374608`\",fromProvider: true},{id: \"+19542670327\",label: \"+19542670327 (+1 954-267-0327)\",value: \"`+19542670327`\",fromProvider: true},{id: \"PN66b9900b2825c75665d051ba5ce51da2\",label: \"+19702367475 ((970) 236-7475)\",value: \"`+19702367475`\",fromProvider: true},{id: \"PN6e6244178706ef72100d52a4d4868eb9\",label: \"+19705128535 (GARTNER MQ MMS - don't use)\",value: \"`+19705128535`\",fromProvider: true}]",
              "timeout": "`24h`",
              "botNumber": "`+12019031504`",
              "activeTabId": "\"single\"",
              "checkStatus": "false",
              "processError": false,
              "endUserNumber": "`${await this.mergeFields['validatedReceiverPhone'].get({path: 'phone'})}`",
              "singleMessage": "{medias: [],message: `Your Contact ${await this.mergeFields['gpt3Data'].get({path: 'userName'})} is sharing this OneReach conversation ${await this.mergeFields['tinyPhoneUrl'].get({path: 'generatedURL'})}`,useFiles: false}",
              "conversationMeta": "\"\"",
              "continueConversation": "false"
            },
            "outputExample": {
              "botNumber": "+17205555555",
              "transcriptId": "",
              "endUserNumber": "+17205555551",
              "lastTranscriptId": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "transcript": {
                "tags": [],
                "type": "transcript",
                "label": "Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "665a4a8a-206b-4b52-bfcc-356e47d79e4f",
            "label": "sendEmail",
            "icon": "send_email",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "e56b38fd-146f-49f3-b77a-754ca873f9b9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "mode": "html",
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "267108e6-c49a-4b01-a395-84df98a69f91",
                  "condition": ""
                }
              ],
              "ccList": [],
              "toList": [
                "`${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`"
              ],
              "bccList": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "sendEmail",
                "type": "session"
              },
              "isReply": false,
              "replyTo": "``",
              "subject": "`💫 A conversation with ${await this.mergeFields['gpt3Data'].get({path: 'figureFullName'})}`",
              "nameFrom": "`Omni AI`",
              "useSource": false,
              "references": [],
              "useThreads": false,
              "__codeModes": {},
              "attachments": [],
              "emailConfig": {
                "id": "6729991c-1c38-4d4d-891b-e4681eb8dea8",
                "type": "botmail",
                "label": "rj6jw9l63owio7@stg.botmail.ai",
                "address": "rj6jw9l63owio7@stg.botmail.ai",
                "inbound": true,
                "outbound": true,
                "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
                "activated": true,
                "createdAt": "2022-07-27T14:16:06.536Z",
                "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByW2CeTOM892zP4io+olwuAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM0YDoqe2TQ2qRVrQ3AgEQgIIBG2UhJjb3B2nGSnrLTJvoFtNpOVNWw3cjqzDpbWmXdRIrUvJ7oGj5MaQ229iNoyMxExTtff3WbtklvIYqudTBZzOtVKlTXUlSRMS85Ivu3Z/Z2gQNlXLxAVPEqMa5kKvO5b+top50ieIpVLktDufHSXh6Knj4LuEht+yKWl0awU5Mpb3NROVreJtWyUTLN9A5Z0Bp8gNH1+74pbxSF8cn1edFqCzZFhIzHbQ4O0A+t0j+2ufdNFlopDt9oChTXc7dKCUe1Cofh5P5yKpB2wwZSJoMZgBAIAjjbBT8wLb3s3ylyp+/kSULnRs+sM/TuCBmyO8OAFMBFFIEoKYA65o7yfYwOoBTLTIzIYA8qeXw8/AL2e/J0CH9raizPKcAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOVGc1TWprME9UaDkuR1pRRE1jRFhSWVBVOV9teFVHZzE3a0Nid3Z4RUJQa3lNWWZncTVoVzFfSQ==",
                "mailOptions": [
                  {
                    "id": "6729991c-1c38-4d4d-891b-e4681eb8dea8",
                    "type": "botmail",
                    "label": "rj6jw9l63owio7@stg.botmail.ai",
                    "address": "rj6jw9l63owio7@stg.botmail.ai",
                    "inbound": true,
                    "outbound": true,
                    "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
                    "activated": true,
                    "createdAt": "2022-07-27T14:16:06.536Z",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByW2CeTOM892zP4io+olwuAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM0YDoqe2TQ2qRVrQ3AgEQgIIBG2UhJjb3B2nGSnrLTJvoFtNpOVNWw3cjqzDpbWmXdRIrUvJ7oGj5MaQ229iNoyMxExTtff3WbtklvIYqudTBZzOtVKlTXUlSRMS85Ivu3Z/Z2gQNlXLxAVPEqMa5kKvO5b+top50ieIpVLktDufHSXh6Knj4LuEht+yKWl0awU5Mpb3NROVreJtWyUTLN9A5Z0Bp8gNH1+74pbxSF8cn1edFqCzZFhIzHbQ4O0A+t0j+2ufdNFlopDt9oChTXc7dKCUe1Cofh5P5yKpB2wwZSJoMZgBAIAjjbBT8wLb3s3ylyp+/kSULnRs+sM/TuCBmyO8OAFMBFFIEoKYA65o7yfYwOoBTLTIzIYA8qeXw8/AL2e/J0CH9raizPKcAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOVGc1TWprME9UaDkuR1pRRE1jRFhSWVBVOV9teFVHZzE3a0Nid3Z4RUJQa3lNWWZncTVoVzFfSQ=="
                  },
                  {
                    "id": "01387a64-ce17-494f-a917-ae8a4be8ca66",
                    "type": "botmail",
                    "label": "Gartner 2022",
                    "address": "irtf9l77xxyoa@stg.botmail.ai",
                    "inbound": true,
                    "outbound": true,
                    "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
                    "activated": true,
                    "createdAt": "2022-08-24T18:19:57.531Z",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BM0GDMZEP7isrHIEctTiw4AAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMMUk39qpn96MkkfsgAgEQgIIBGysuIKa3H0vXjvHV3oXlE435ksKvobE3I0aPzwIfXUEC4cUDbT+o7A9Te6onAr3lNBav721Z6tN2GRzSOSOl7IWqEYldiEtV/DXT4C/tIWZ6GZWo8XsEDlBA7mur5tWywvMQTM75AFE22HBDmzGadPedLxk83i79AMgZqzAAfU7vp/yhy2KAYrZ+xHokCS54hsRpP/jrsiGXFypCwdZw0IreDV06NMIAw8TbAP+KyR8n9VfqGogXrpzL8jnx9NX971xHkgNqYpePw+qp1t60DvkSupl60pa1rp6BEfsHfmW+3NVuivtNlhpiVAUNiniG8aNEBLsNdl9cO0SPmq9aKoLauexsagTAXm/ZPLaCmXhCWK617/lrjgCkzR4AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lKaU1tTTVNamd4WXkwME5EZG1MVFE0T1RFdE9EWmlZUzAxT0RZeE9ETXhZV05pTnpVaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSXdOVGMxTldJME15MWhZbVV6TFRSbE5UTXRPREkyTWkxaU16bGxPV0ZqWTJZek1EVWlMQ0pwWVhRaU9qRTJOakV6TlRjMU1EUjkuWEsxQzMteWtzbUMxMlBnTnJMWThyYnRCYmZHOTQ4d2t0YUY5clJ3eVhqZw=="
                  },
                  {
                    "id": "cf89788e-9c92-416a-9763-72b8f41dd570",
                    "type": "botmail",
                    "label": "1e7isf59l7hqrzam@stg.botmail.ai",
                    "address": "1e7isf59l7hqrzam@stg.botmail.ai",
                    "inbound": true,
                    "outbound": true,
                    "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
                    "activated": true,
                    "createdAt": "2022-08-31T14:57:02.844Z",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BuxiKngWXhHDmyI3EZFPh6wAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMIhHdUMlQgv+bexFdAgEQgIIBG3oj4SUpwDSKZeH9gAFNFJRLU4jFQh0wWSxSIwCsDjzIxRtMFTCAd0UOG2YQz82C+CufmWjg3+UuVYLgbIcWlQ+a0MIGojoKag0A6GUAAi1ELUz++Jrvziyi1dMiaAxycht9TMTkYu2WKnCgLC8rNuHwEBdofA0L5ME8veppnWA7iUBCAIpQRMkrgN5JdrLGfP/UMp39PMbExm8aXYmS73bIUMIc2IkYKM9WvvE2f8FpF4dOPBugUNTcF11MFzgiS9FsnOUmTH/9tvllw0zGZwDmefrcY7ShGw639ubVwIS9of5+2My21Nx1ejjWgDx+Kxmuxn2dMI5qdsFL2js2vcjyla5+0d1lnSU+rIiCkOpodG7Suhf6kG/AW68AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOakUzT0RRMk9EQjkuRG5hQVUzSGMwREFXNWk4eXRiWENyejhtV3lHeDRLV2o0blBoSXlCMmNzaw=="
                  },
                  {
                    "id": "262c5926-1cd4-4e51-8e6b-cc6942b11862",
                    "type": "botmail",
                    "label": "OneReach.ai",
                    "address": "1df19l8w18f6x@stg.botmail.ai",
                    "inbound": true,
                    "outbound": true,
                    "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
                    "activated": true,
                    "createdAt": "2022-10-05T19:38:14.902Z",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BTwfbNFDXYWMdhSMtzN0SDQAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMi1rQc0T38m9qP5wjAgEQgIIBG1gAqbMF46fSkA4GDFtkiOvsXn2nZl5dRM3axt9ViaPQnQnjmpP+gLUL+syeuixAFMyuiRaZzcVeVDfNq3CtIl3FhgyrLxUO5X5DErPL8fOABefFxACuItzZmBBZWSsT5Fru8ngGQxvW5ADrqsBTOsw5lnBtgOjRwDcA0buqYvZCRcR0UwPyH7Y3lGGgLs5p4OLyQqc1eXUtMFH5nSwPB6ux581Ff+bp2L788RMbdOvaL/tMWy7H25RL/6knIB14Rj7PR0U9lkxMctdQLZO2kFkJf+qvGLtpucAp+hWYtYC8zwGCCzTXxn+j97MtHcNSNgCvnbXkKrgsDvg0ceNT1vheSP8D7g+Bhx9qM5/YMa8fd2hxh+Z/Oo0rMzUAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lKaU1tTTVNamd4WXkwME5EZG1MVFE0T1RFdE9EWmlZUzAxT0RZeE9ETXhZV05pTnpVaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSXdOVGMxTldJME15MWhZbVV6TFRSbE5UTXRPREkyTWkxaU16bGxPV0ZqWTJZek1EVWlMQ0pwWVhRaU9qRTJOalE1TURjeE1UZDkuYnNMUW1IQ1FGX0t2Ul94QmI5dUNXQnBkVno0YW8xUDlzTkFTblZfdmtfdw=="
                  },
                  {
                    "id": "b950d083-3e57-40d3-a878-67c42f51b532",
                    "type": "botmail",
                    "label": "2f9l94k4vys@stg.botmail.ai",
                    "address": "2f9l94k4vys@stg.botmail.ai",
                    "inbound": true,
                    "outbound": true,
                    "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
                    "activated": true,
                    "createdAt": "2022-10-11T18:49:32.129Z",
                    "userToken": "USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BtxwZ0t9Ord5lkCAJRPzzSAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMTSEP2cDutwvrfe45AgEQgIIBGxbDHR71vwlJBhBVUKZU0EQuVtSAlbnaBg/Sts/RfyXi1Et2VCVIvNa0O2xCwEWKBEuvVtz8o/BHxGU4raCWCkUuvWxCDr3MNVAPqxzQbdHZkq2w1hvS0a3JYtR6VjS0QMfqvtJycMoz4Evoejr0sck2cMyXR/War1v5/9Bu6st/nWMefJygZVgs4xnTxX9/csBAeJwYQkkiLba1KTASJPURTsnw2FyJytmlmaT+ZPETCQgRr8sSd52e2NwatR2uLSwgQ/CNVy2Y0y6oGYJIoxVbsKozMpj/aJsWGOnH5n7HE8VMyAsV9siaxrgggsfJvnLO5h8GvETwhNk0R77RO1k+b8DENoYiO+Q2IGs+g2VsYr+klGtgzpDGmCgAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lKaU9EazRZV0kyTmkwek56QmxMVFJoT1dFdFlXWXpNQzAzTWpObE56VTVNR00xWkdZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSXpZalZqWXpnM1pTMDVOREkwTFRRek9Ea3RPRE13T0Mxa056WTJObVpoTm1Wa05EWWlMQ0pwWVhRaU9qRTJOalUxTVRNM016SjkuRUJKcUpkdXFFOHV6am1qaUF3eUlpeGhwVjFMUzJ6R0FaTlo0LVBESW5BUQ=="
                  }
                ]
              },
              "hasShortUrl": false,
              "timeoutLeng": {
                "input": "`1 week`",
                "outputMode": "ms"
              },
              "wysiwygText": "``",
              "yourMessage": "`Here's a link of the conversation ${await this.mergeFields['tinyUrl'].get({path: 'generatedURL'})}.`",
              "attachmentsF": [],
              "hasOpenEvent": false,
              "processError": false,
              "stepVariable": "defaultValue",
              "attachmentsFD": [],
              "emailTemplate": {
                "pages": [
                  {
                    "id": "o3cWzfzZ5q4gAlPY",
                    "type": "main",
                    "frames": [
                      {
                        "component": {
                          "type": "wrapper",
                          "stylable": [
                            "background",
                            "background-color",
                            "background-image",
                            "background-repeat",
                            "background-attachment",
                            "background-position",
                            "background-size"
                          ],
                          "components": [
                            {
                              "type": "table",
                              "attributes": {
                                "id": "iwya"
                              },
                              "components": [
                                {
                                  "type": "tbody",
                                  "components": [
                                    {
                                      "type": "row",
                                      "components": [
                                        {
                                          "type": "cell",
                                          "attributes": {
                                            "id": "i84q"
                                          }
                                        },
                                        {
                                          "type": "cell",
                                          "attributes": {
                                            "id": "ial3"
                                          },
                                          "components": [
                                            {
                                              "type": "table",
                                              "attributes": {
                                                "id": "ibh4"
                                              },
                                              "components": [
                                                {
                                                  "type": "tbody",
                                                  "components": [
                                                    {
                                                      "type": "row",
                                                      "components": [
                                                        {
                                                          "type": "cell",
                                                          "attributes": {
                                                            "id": "ilhr5"
                                                          }
                                                        },
                                                        {
                                                          "type": "cell",
                                                          "classes": [
                                                            "divider"
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "cell",
                                          "attributes": {
                                            "id": "ibjcl"
                                          },
                                          "components": [
                                            {
                                              "type": "table",
                                              "attributes": {
                                                "id": "ixk6y"
                                              },
                                              "components": [
                                                {
                                                  "type": "tbody",
                                                  "components": [
                                                    {
                                                      "type": "row"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "cell",
                                          "attributes": {
                                            "id": "iipi"
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                ],
                "assets": [],
                "styles": [
                  {
                    "style": {
                      "width": "100%",
                      "height": "150px",
                      "margin": "0 auto 10px auto",
                      "padding": "5px 5px 5px 5px"
                    },
                    "selectors": [
                      "#iwya"
                    ]
                  },
                  {
                    "style": {
                      "color": "rgb(111, 119, 125)",
                      "width": "33.3333%",
                      "margin": "0",
                      "padding": "0",
                      "font-size": "12px",
                      "font-weight": "300",
                      "vertical-align": "top"
                    },
                    "selectors": [
                      "#i84q"
                    ]
                  },
                  {
                    "style": {
                      "color": "rgb(111, 119, 125)",
                      "width": "33.3333%",
                      "margin": "0",
                      "padding": "0",
                      "font-size": "12px",
                      "font-weight": "300",
                      "vertical-align": "top"
                    },
                    "selectors": [
                      "#ial3"
                    ]
                  },
                  {
                    "style": {
                      "color": "rgb(111, 119, 125)",
                      "width": "33.3333%",
                      "margin": "0",
                      "padding": "0",
                      "font-size": "12px",
                      "font-weight": "300",
                      "vertical-align": "top"
                    },
                    "selectors": [
                      "#iipi"
                    ]
                  },
                  {
                    "style": {
                      "width": "100%",
                      "height": "150px",
                      "margin": "0 auto 10px auto",
                      "padding": "5px 5px 5px 5px"
                    },
                    "selectors": [
                      "#ibh4"
                    ]
                  },
                  {
                    "style": {
                      "color": "rgb(111, 119, 125)",
                      "width": "30%",
                      "margin": "0",
                      "padding": "0",
                      "font-size": "12px",
                      "font-weight": "300",
                      "vertical-align": "top"
                    },
                    "selectors": [
                      "#ilhr5"
                    ]
                  },
                  {
                    "style": {
                      "color": "rgb(111, 119, 125)",
                      "width": "70%",
                      "margin": "0",
                      "padding": "0",
                      "font-size": "12px",
                      "font-weight": "300",
                      "vertical-align": "top"
                    },
                    "selectors": [
                      "#ibjcl"
                    ]
                  },
                  {
                    "style": {
                      "height": "1px",
                      "background-color": "rgba(0, 0, 0, 0.1)"
                    },
                    "selectors": [
                      "divider"
                    ]
                  },
                  {
                    "style": {
                      "width": "100%",
                      "margin-top": "10px",
                      "margin-bottom": "10px"
                    },
                    "selectors": [
                      "#ixk6y"
                    ]
                  }
                ],
                "inlinedHtml": "<body style=\"box-sizing: border-box; margin: 0;\"><table id=\"iwya\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"i84q\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td><td id=\"ial3\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"><table id=\"ibh4\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"ilhr5\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 30%;\" width=\"30%\" valign=\"top\"></td><td class=\"divider\" style=\"box-sizing: border-box; background-color: rgba(0, 0, 0, 0.1); height: 1px;\" height=\"1\" bgcolor=\"rgba(0, 0, 0, 0.1)\"></td></tr></tbody></table></td><td id=\"ibjcl\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 70%;\" width=\"70%\" valign=\"top\"><table id=\"ixk6y\" style=\"box-sizing: border-box; width: 100%; margin-top: 10px; margin-bottom: 10px;\" width=\"100%\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"></tr></tbody></table></td><td id=\"iipi\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td></tr></tbody></table></body>"
              },
              "senderAddress": "``",
              "useManualMode": false,
              "isRequestInput": false,
              "isSelectedStep": true,
              "replyToAddress": "``",
              "selectedStepId": null,
              "_ignoreMFAlerts": [
                "tinyUrl"
              ],
              "customMessageId": "this.get('')",
              "senderSubDomain": "``",
              "yourMessageHtml": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Mail</title>\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\"\r\n      rel=\"stylesheet\"\r\n    />\r\n\r\n    <style>\r\n      @import url(\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n\r\n      .body {\r\n        background: #324045;\r\n        font-family: \"Open Sans\", sans-serif;\r\n        padding: 20px;\r\n      }\r\n      p,\r\n      a {\r\n        font-family: \"Open Sans\", sans-serif;\r\n      }\r\n      a {\r\n        margin: 0 10px;\r\n      }\r\n      .button {\r\n        border-radius: 10px;\r\n        font-family: \"Open Sans\", sans-serif;\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        text-align: center;\r\n        letter-spacing: 0.1em;\r\n        text-transform: uppercase;\r\n        color: #fbfdfd;\r\n        width: 190px;\r\n      }\r\n      .button2 {\r\n        background: white;\r\n        border-radius: 10px;\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        text-align: center;\r\n        letter-spacing: 0.1em;\r\n        text-transform: uppercase;\r\n        width: 190px;\r\n      }\r\n      .text-white {\r\n        color: #fbfdfd;\r\n        font-family: \"Open Sans\", sans-serif;\r\n      }\r\n      .text-green {\r\n        color: #32817e;\r\n        font-family: \"Open Sans\", sans-serif;\r\n      }\r\n      .text-large {\r\n        font-size: 16px;\r\n      }\r\n      .text-no-underline {\r\n        text-decoration: none;\r\n      }\r\n      .margin {\r\n        margin-bottom: 40px;\r\n      }\r\n      .padding {\r\n        padding-bottom: 40px;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <p>Hello,</p>\r\n\r\n    <p>${await this.mergeFields['gpt3Data'].get({path: 'userName'})} thinks you’d enjoy having a conversation with ${await this.mergeFields['gpt3Data'].get({path: 'figureFullName'})}.</p>\r\n\r\n\r\n\r\n  <table>\r\n      <tr>\r\n        <td colspan=\"2\">\r\n          <div style=\"width: 400px; margin: 0 auto\">\r\n            <img\r\n              style=\"width: 400px; object-fit: cover\"\r\n              https\r\n              src=\"${await this.mergeFields['tableAsImage'].get({path: 'url'})}\"\r\n            />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\" style=\"padding-top: 25px; padding-bottom: 25px\">\r\n          <div\r\n            style=\"width: 500px; margin: 0 auto; border: 1px solid #cdcdcd\"\r\n          ></div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td style=\"text-align: center\">\r\n          <a\r\n            class=\"margin button text-large text-no-underline\"\r\n            href=\"${await this.mergeFields['tinyUrlSame'].get({path: 'generatedURL'})}\"\r\n          >\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/start-conversation.png\"\r\n              style=\"object-fit: contain; width: 190px\"\r\n              alt=\"\"\r\n            />\r\n          </a>\r\n        </td>\r\n        <td style=\"text-align: center\">\r\n          <a\r\n            class=\"button2 text-large text-no-underline\"\r\n            href=\"${await this.mergeFields['tinyUrlDifferent'].get({path: 'generatedURL'})}\"\r\n          >\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/talk-someone.png\"\r\n              style=\"object-fit: contain; width: 190px\"\r\n              alt=\"\"\r\n            />\r\n          </a>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\" style=\"text-align: center; padding-top: 20px\">\r\n          <div\r\n            style=\"\r\n              width: 450px;\r\n              background-color: #0b2b29;\r\n              border-bottom-right-radius: 12px;\r\n              border-bottom-left-radius: 12px;\r\n            \"\r\n          >\r\n            <span style=\"margin: 0 150px\">\r\n              <img\r\n                src=\"https://staging.thetimemachinecompany.ai/assets/mail/tm-full.png\"\r\n                style=\"width: 150px; height: 70px; object-fit: contain\"\r\n                alt=\"\"\r\n              />\r\n            </span>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\" style=\"text-align: center; padding-top: 20px\">\r\n          <div style=\"width: 450px; margin: 0 auto\">\r\n            <span style=\"margin: 0 125px\">\r\n              <img\r\n                src=\"https://staging.thetimemachinecompany.ai/assets/onereach.png\"\r\n                alt=\"\"\r\n                style=\"width: 150px; height: 20px; object-fit: contain\"\r\n              />\r\n            </span>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\">\r\n          <p style=\"text-align: center; font-size: 9px; color: #82898c\">\r\n            ©2022 OneReach. All rights reserved.\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n\r\n  </body>\r\n</html>\r\n",
              "bounceHandleType": "ignore",
              "differentReplyTo": false,
              "emailPreviewLink": "https://files.staging.api.onereach.ai/66aec359-ab58-4fba-8ee0-867c730be9b0/email/previews/emailPreviewe6faca60-16d7-4211-8892-becdb4bc4bb8.png?Expires=1659638731&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9maWxlcy5zdGFnaW5nLmFwaS5vbmVyZWFjaC5haS82NmFlYzM1OS1hYjU4LTRmYmEtOGVlMC04NjdjNzMwYmU5YjAvZW1haWwvcHJldmlld3MvZW1haWxQcmV2aWV3ZTZmYWNhNjAtMTZkNy00MjExLTg4OTItYmVjZGI0YmM0YmI4LnBuZyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTY1OTYzODczMX19fV19&Signature=Ab19UzP6g9AmMzuW2JOBt73GYj9hxuTZU3uWrfmFR~uO40qdSuwdQpHffO4ZcgdYBHcU0gd1wuFgh1n7-hiUna3-LG~Fv9valxMDcYDZNAK~KXbYoOnuTIOxR2~A6tYmm4QQTjRNprvSKbh0-qi5IKRNEiHLq9CEiUwqY~WmXLMYczVc7uNveTrE0VP0A4FHnlFFb1M67YPADn5Xy-JGgNGs1jwN5u10UzWgV-oMN-6UWw58Xxk0YBscbnXt8Pdhd9nSuP9kCxqGHSR0pZWQVw0MbBqa8XNEMT9WjCkLYioIcbEEFr1KyEO4uQPmxL3ruv-u4IJdmLO6y1S6J5Qx4g__&Key-Pair-Id=K33HFYYO5LG4DE",
              "emailTemplateStr": "<body style=\"box-sizing: border-box; margin: 0;\"><table id=\"iwya\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"i84q\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td><td id=\"ial3\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"><table id=\"ibh4\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"ilhr5\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 30%;\" width=\"30%\" valign=\"top\"></td><td class=\"divider\" style=\"box-sizing: border-box; background-color: rgba(0, 0, 0, 0.1); height: 1px;\" height=\"1\" bgcolor=\"rgba(0, 0, 0, 0.1)\"></td></tr></tbody></table></td><td id=\"ibjcl\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 70%;\" width=\"70%\" valign=\"top\"><table id=\"ixk6y\" style=\"box-sizing: border-box; width: 100%; margin-top: 10px; margin-bottom: 10px;\" width=\"100%\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"></tr></tbody></table></td><td id=\"iipi\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td></tr></tbody></table></body>",
              "handleComplaints": false,
              "replyToSubDomain": "``",
              "dynamicRecipients": "// [ \"recipient@domain.com\", \"John Doe <john@doe.com>\" ]\t// (all are 'To')\n   /* or */\n// [ { type: \"to\", recipient: \"recipient@domain.com\" }, { type: \"cc\", recipient: \"John Doe <john@doe.com>\" } ]",
              "emailTemplateData": {},
              "manualEmailConfig": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "9d3ce2b0-ae7e-4ea4-9ac5-85d2cf38e7c9",
                "condition": ""
              },
              "dynamicAttachments": "",
              "ignoreOtherBounces": true,
              "hasUrlClickTracking": false,
              "hasDynamicRecipients": false,
              "hasDynamicAttachments": false,
              "dynamicExitsArrayStart": 7,
              "isEmailInheritableStep": true,
              "__replyCollapsibleState": {
                "isOpen": true
              },
              "__bounceCollapsibleState": {
                "isOpen": false
              },
              "__messageCollapsibleState": {
                "isOpen": true
              },
              "__accountsCollapsibleState": {
                "isOpen": true,
                "_schemaValidators": {
                  "emailConfig": "!_.isEmpty(value)"
                }
              },
              "__responseCollapsibleState": {
                "isOpen": false
              },
              "emailTemplateMergeFieldsStr": "<body style=\"box-sizing: border-box; margin: 0;\"><table id=\"iwya\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"i84q\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td><td id=\"ial3\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"><table id=\"ibh4\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"ilhr5\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 30%;\" width=\"30%\" valign=\"top\"></td><td class=\"divider\" style=\"box-sizing: border-box; background-color: rgba(0, 0, 0, 0.1); height: 1px;\" height=\"1\" bgcolor=\"rgba(0, 0, 0, 0.1)\"></td></tr></tbody></table></td><td id=\"ibjcl\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 70%;\" width=\"70%\" valign=\"top\"><table id=\"ixk6y\" style=\"box-sizing: border-box; width: 100%; margin-top: 10px; margin-bottom: 10px;\" width=\"100%\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"></tr></tbody></table></td><td id=\"iipi\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td></tr></tbody></table></body>",
              "__recipientsCollapsibleState": {
                "isOpen": true
              }
            },
            "stepInputData": {
              "mode": "\"html\"",
              "ccList": "[]",
              "toList": "[`${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`]",
              "bccList": "[]",
              "isReply": "false",
              "replyTo": "``",
              "subject": "`💫 A conversation with ${await this.mergeFields['gpt3Data'].get({path: 'figureFullName'})}`",
              "nameFrom": "`Omni AI`",
              "useSource": "false",
              "references": "[]",
              "useThreads": "false",
              "attachments": "[]",
              "emailConfig": "{\"id\":\"6729991c-1c38-4d4d-891b-e4681eb8dea8\",\"type\":\"botmail\",\"label\":\"rj6jw9l63owio7@stg.botmail.ai\",\"address\":\"rj6jw9l63owio7@stg.botmail.ai\",\"inbound\":true,\"outbound\":true,\"accountId\":\"66aec359-ab58-4fba-8ee0-867c730be9b0\",\"activated\":true,\"createdAt\":\"2022-07-27T14:16:06.536Z\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByW2CeTOM892zP4io+olwuAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM0YDoqe2TQ2qRVrQ3AgEQgIIBG2UhJjb3B2nGSnrLTJvoFtNpOVNWw3cjqzDpbWmXdRIrUvJ7oGj5MaQ229iNoyMxExTtff3WbtklvIYqudTBZzOtVKlTXUlSRMS85Ivu3Z/Z2gQNlXLxAVPEqMa5kKvO5b+top50ieIpVLktDufHSXh6Knj4LuEht+yKWl0awU5Mpb3NROVreJtWyUTLN9A5Z0Bp8gNH1+74pbxSF8cn1edFqCzZFhIzHbQ4O0A+t0j+2ufdNFlopDt9oChTXc7dKCUe1Cofh5P5yKpB2wwZSJoMZgBAIAjjbBT8wLb3s3ylyp+/kSULnRs+sM/TuCBmyO8OAFMBFFIEoKYA65o7yfYwOoBTLTIzIYA8qeXw8/AL2e/J0CH9raizPKcAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOVGc1TWprME9UaDkuR1pRRE1jRFhSWVBVOV9teFVHZzE3a0Nid3Z4RUJQa3lNWWZncTVoVzFfSQ==\",\"mailOptions\":[{\"id\":\"6729991c-1c38-4d4d-891b-e4681eb8dea8\",\"type\":\"botmail\",\"label\":\"rj6jw9l63owio7@stg.botmail.ai\",\"address\":\"rj6jw9l63owio7@stg.botmail.ai\",\"inbound\":true,\"outbound\":true,\"accountId\":\"66aec359-ab58-4fba-8ee0-867c730be9b0\",\"activated\":true,\"createdAt\":\"2022-07-27T14:16:06.536Z\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8ByW2CeTOM892zP4io+olwuAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM0YDoqe2TQ2qRVrQ3AgEQgIIBG2UhJjb3B2nGSnrLTJvoFtNpOVNWw3cjqzDpbWmXdRIrUvJ7oGj5MaQ229iNoyMxExTtff3WbtklvIYqudTBZzOtVKlTXUlSRMS85Ivu3Z/Z2gQNlXLxAVPEqMa5kKvO5b+top50ieIpVLktDufHSXh6Knj4LuEht+yKWl0awU5Mpb3NROVreJtWyUTLN9A5Z0Bp8gNH1+74pbxSF8cn1edFqCzZFhIzHbQ4O0A+t0j+2ufdNFlopDt9oChTXc7dKCUe1Cofh5P5yKpB2wwZSJoMZgBAIAjjbBT8wLb3s3ylyp+/kSULnRs+sM/TuCBmyO8OAFMBFFIEoKYA65o7yfYwOoBTLTIzIYA8qeXw8/AL2e/J0CH9raizPKcAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOVGc1TWprME9UaDkuR1pRRE1jRFhSWVBVOV9teFVHZzE3a0Nid3Z4RUJQa3lNWWZncTVoVzFfSQ==\"},{\"id\":\"01387a64-ce17-494f-a917-ae8a4be8ca66\",\"type\":\"botmail\",\"label\":\"Gartner 2022\",\"address\":\"irtf9l77xxyoa@stg.botmail.ai\",\"inbound\":true,\"outbound\":true,\"accountId\":\"66aec359-ab58-4fba-8ee0-867c730be9b0\",\"activated\":true,\"createdAt\":\"2022-08-24T18:19:57.531Z\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BM0GDMZEP7isrHIEctTiw4AAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMMUk39qpn96MkkfsgAgEQgIIBGysuIKa3H0vXjvHV3oXlE435ksKvobE3I0aPzwIfXUEC4cUDbT+o7A9Te6onAr3lNBav721Z6tN2GRzSOSOl7IWqEYldiEtV/DXT4C/tIWZ6GZWo8XsEDlBA7mur5tWywvMQTM75AFE22HBDmzGadPedLxk83i79AMgZqzAAfU7vp/yhy2KAYrZ+xHokCS54hsRpP/jrsiGXFypCwdZw0IreDV06NMIAw8TbAP+KyR8n9VfqGogXrpzL8jnx9NX971xHkgNqYpePw+qp1t60DvkSupl60pa1rp6BEfsHfmW+3NVuivtNlhpiVAUNiniG8aNEBLsNdl9cO0SPmq9aKoLauexsagTAXm/ZPLaCmXhCWK617/lrjgCkzR4AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lKaU1tTTVNamd4WXkwME5EZG1MVFE0T1RFdE9EWmlZUzAxT0RZeE9ETXhZV05pTnpVaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSXdOVGMxTldJME15MWhZbVV6TFRSbE5UTXRPREkyTWkxaU16bGxPV0ZqWTJZek1EVWlMQ0pwWVhRaU9qRTJOakV6TlRjMU1EUjkuWEsxQzMteWtzbUMxMlBnTnJMWThyYnRCYmZHOTQ4d2t0YUY5clJ3eVhqZw==\"},{\"id\":\"cf89788e-9c92-416a-9763-72b8f41dd570\",\"type\":\"botmail\",\"label\":\"1e7isf59l7hqrzam@stg.botmail.ai\",\"address\":\"1e7isf59l7hqrzam@stg.botmail.ai\",\"inbound\":true,\"outbound\":true,\"accountId\":\"66aec359-ab58-4fba-8ee0-867c730be9b0\",\"activated\":true,\"createdAt\":\"2022-08-31T14:57:02.844Z\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BuxiKngWXhHDmyI3EZFPh6wAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMIhHdUMlQgv+bexFdAgEQgIIBG3oj4SUpwDSKZeH9gAFNFJRLU4jFQh0wWSxSIwCsDjzIxRtMFTCAd0UOG2YQz82C+CufmWjg3+UuVYLgbIcWlQ+a0MIGojoKag0A6GUAAi1ELUz++Jrvziyi1dMiaAxycht9TMTkYu2WKnCgLC8rNuHwEBdofA0L5ME8veppnWA7iUBCAIpQRMkrgN5JdrLGfP/UMp39PMbExm8aXYmS73bIUMIc2IkYKM9WvvE2f8FpF4dOPBugUNTcF11MFzgiS9FsnOUmTH/9tvllw0zGZwDmefrcY7ShGw639ubVwIS9of5+2My21Nx1ejjWgDx+Kxmuxn2dMI5qdsFL2js2vcjyla5+0d1lnSU+rIiCkOpodG7Suhf6kG/AW68AAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOakUzT0RRMk9EQjkuRG5hQVUzSGMwREFXNWk4eXRiWENyejhtV3lHeDRLV2o0blBoSXlCMmNzaw==\"},{\"id\":\"262c5926-1cd4-4e51-8e6b-cc6942b11862\",\"type\":\"botmail\",\"label\":\"OneReach.ai\",\"address\":\"1df19l8w18f6x@stg.botmail.ai\",\"inbound\":true,\"outbound\":true,\"accountId\":\"66aec359-ab58-4fba-8ee0-867c730be9b0\",\"activated\":true,\"createdAt\":\"2022-10-05T19:38:14.902Z\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BTwfbNFDXYWMdhSMtzN0SDQAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMi1rQc0T38m9qP5wjAgEQgIIBG1gAqbMF46fSkA4GDFtkiOvsXn2nZl5dRM3axt9ViaPQnQnjmpP+gLUL+syeuixAFMyuiRaZzcVeVDfNq3CtIl3FhgyrLxUO5X5DErPL8fOABefFxACuItzZmBBZWSsT5Fru8ngGQxvW5ADrqsBTOsw5lnBtgOjRwDcA0buqYvZCRcR0UwPyH7Y3lGGgLs5p4OLyQqc1eXUtMFH5nSwPB6ux581Ff+bp2L788RMbdOvaL/tMWy7H25RL/6knIB14Rj7PR0U9lkxMctdQLZO2kFkJf+qvGLtpucAp+hWYtYC8zwGCCzTXxn+j97MtHcNSNgCvnbXkKrgsDvg0ceNT1vheSP8D7g+Bhx9qM5/YMa8fd2hxh+Z/Oo0rMzUAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lKaU1tTTVNamd4WXkwME5EZG1MVFE0T1RFdE9EWmlZUzAxT0RZeE9ETXhZV05pTnpVaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSXdOVGMxTldJME15MWhZbVV6TFRSbE5UTXRPREkyTWkxaU16bGxPV0ZqWTJZek1EVWlMQ0pwWVhRaU9qRTJOalE1TURjeE1UZDkuYnNMUW1IQ1FGX0t2Ul94QmI5dUNXQnBkVno0YW8xUDlzTkFTblZfdmtfdw==\"},{\"id\":\"b950d083-3e57-40d3-a878-67c42f51b532\",\"type\":\"botmail\",\"label\":\"2f9l94k4vys@stg.botmail.ai\",\"address\":\"2f9l94k4vys@stg.botmail.ai\",\"inbound\":true,\"outbound\":true,\"accountId\":\"66aec359-ab58-4fba-8ee0-867c730be9b0\",\"activated\":true,\"createdAt\":\"2022-10-11T18:49:32.129Z\",\"userToken\":\"USER AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BtxwZ0t9Ord5lkCAJRPzzSAAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMTSEP2cDutwvrfe45AgEQgIIBGxbDHR71vwlJBhBVUKZU0EQuVtSAlbnaBg/Sts/RfyXi1Et2VCVIvNa0O2xCwEWKBEuvVtz8o/BHxGU4raCWCkUuvWxCDr3MNVAPqxzQbdHZkq2w1hvS0a3JYtR6VjS0QMfqvtJycMoz4Evoejr0sck2cMyXR/War1v5/9Bu6st/nWMefJygZVgs4xnTxX9/csBAeJwYQkkiLba1KTASJPURTsnw2FyJytmlmaT+ZPETCQgRr8sSd52e2NwatR2uLSwgQ/CNVy2Y0y6oGYJIoxVbsKozMpj/aJsWGOnH5n7HE8VMyAsV9siaxrgggsfJvnLO5h8GvETwhNk0R77RO1k+b8DENoYiO+Q2IGs+g2VsYr+klGtgzpDGmCgAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lKaU9EazRZV0kyTmkwek56QmxMVFJoT1dFdFlXWXpNQzAzTWpObE56VTVNR00xWkdZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSXpZalZqWXpnM1pTMDVOREkwTFRRek9Ea3RPRE13T0Mxa056WTJObVpoTm1Wa05EWWlMQ0pwWVhRaU9qRTJOalUxTVRNM016SjkuRUJKcUpkdXFFOHV6am1qaUF3eUlpeGhwVjFMUzJ6R0FaTlo0LVBESW5BUQ==\"}]}",
              "timeoutLeng": "{input: `1 week`,outputMode: \"ms\"}",
              "yourMessage": "`Here's a link of the conversation ${await this.mergeFields['tinyUrl'].get({path: 'generatedURL'})}.`",
              "attachmentsF": "[]",
              "hasOpenEvent": "false",
              "processError": false,
              "stepVariable": "\"defaultValue\"",
              "attachmentsFD": "[]",
              "senderAddress": "``",
              "useManualMode": "false",
              "isRequestInput": "false",
              "isSelectedStep": "true",
              "replyToAddress": "``",
              "customMessageId": "this.get('')",
              "senderSubDomain": "``",
              "yourMessageHtml": "`<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Mail</title>\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\"\r\n      rel=\"stylesheet\"\r\n    />\r\n\r\n    <style>\r\n      @import url(\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n\r\n      .body {\r\n        background: #324045;\r\n        font-family: \"Open Sans\", sans-serif;\r\n        padding: 20px;\r\n      }\r\n      p,\r\n      a {\r\n        font-family: \"Open Sans\", sans-serif;\r\n      }\r\n      a {\r\n        margin: 0 10px;\r\n      }\r\n      .button {\r\n        border-radius: 10px;\r\n        font-family: \"Open Sans\", sans-serif;\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        text-align: center;\r\n        letter-spacing: 0.1em;\r\n        text-transform: uppercase;\r\n        color: #fbfdfd;\r\n        width: 190px;\r\n      }\r\n      .button2 {\r\n        background: white;\r\n        border-radius: 10px;\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        text-align: center;\r\n        letter-spacing: 0.1em;\r\n        text-transform: uppercase;\r\n        width: 190px;\r\n      }\r\n      .text-white {\r\n        color: #fbfdfd;\r\n        font-family: \"Open Sans\", sans-serif;\r\n      }\r\n      .text-green {\r\n        color: #32817e;\r\n        font-family: \"Open Sans\", sans-serif;\r\n      }\r\n      .text-large {\r\n        font-size: 16px;\r\n      }\r\n      .text-no-underline {\r\n        text-decoration: none;\r\n      }\r\n      .margin {\r\n        margin-bottom: 40px;\r\n      }\r\n      .padding {\r\n        padding-bottom: 40px;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <p>Hello,</p>\r\n\r\n    <p>${await this.mergeFields['gpt3Data'].get({path: 'userName'})} thinks you’d enjoy having a conversation with ${await this.mergeFields['gpt3Data'].get({path: 'figureFullName'})}.</p>\r\n\r\n\r\n\r\n  <table>\r\n      <tr>\r\n        <td colspan=\"2\">\r\n          <div style=\"width: 400px; margin: 0 auto\">\r\n            <img\r\n              style=\"width: 400px; object-fit: cover\"\r\n              https\r\n              src=\"${await this.mergeFields['tableAsImage'].get({path: 'url'})}\"\r\n            />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\" style=\"padding-top: 25px; padding-bottom: 25px\">\r\n          <div\r\n            style=\"width: 500px; margin: 0 auto; border: 1px solid #cdcdcd\"\r\n          ></div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td style=\"text-align: center\">\r\n          <a\r\n            class=\"margin button text-large text-no-underline\"\r\n            href=\"${await this.mergeFields['tinyUrlSame'].get({path: 'generatedURL'})}\"\r\n          >\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/start-conversation.png\"\r\n              style=\"object-fit: contain; width: 190px\"\r\n              alt=\"\"\r\n            />\r\n          </a>\r\n        </td>\r\n        <td style=\"text-align: center\">\r\n          <a\r\n            class=\"button2 text-large text-no-underline\"\r\n            href=\"${await this.mergeFields['tinyUrlDifferent'].get({path: 'generatedURL'})}\"\r\n          >\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/talk-someone.png\"\r\n              style=\"object-fit: contain; width: 190px\"\r\n              alt=\"\"\r\n            />\r\n          </a>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\" style=\"text-align: center; padding-top: 20px\">\r\n          <div\r\n            style=\"\r\n              width: 450px;\r\n              background-color: #0b2b29;\r\n              border-bottom-right-radius: 12px;\r\n              border-bottom-left-radius: 12px;\r\n            \"\r\n          >\r\n            <span style=\"margin: 0 150px\">\r\n              <img\r\n                src=\"https://staging.thetimemachinecompany.ai/assets/mail/tm-full.png\"\r\n                style=\"width: 150px; height: 70px; object-fit: contain\"\r\n                alt=\"\"\r\n              />\r\n            </span>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\" style=\"text-align: center; padding-top: 20px\">\r\n          <div style=\"width: 450px; margin: 0 auto\">\r\n            <span style=\"margin: 0 125px\">\r\n              <img\r\n                src=\"https://staging.thetimemachinecompany.ai/assets/onereach.png\"\r\n                alt=\"\"\r\n                style=\"width: 150px; height: 20px; object-fit: contain\"\r\n              />\r\n            </span>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td colspan=\"2\">\r\n          <p style=\"text-align: center; font-size: 9px; color: #82898c\">\r\n            ©2022 OneReach. All rights reserved.\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n\r\n  </body>\r\n</html>\r\n`",
              "bounceHandleType": "\"ignore\"",
              "differentReplyTo": "false",
              "handleComplaints": "false",
              "replyToSubDomain": "``",
              "dynamicRecipients": "[]",
              "dynamicAttachments": "[]",
              "ignoreOtherBounces": "true",
              "hasUrlClickTracking": "false",
              "hasDynamicRecipients": "false",
              "hasDynamicAttachments": "false",
              "isEmailInheritableStep": "true",
              "__replyCollapsibleState": "{\"isOpen\": true}",
              "__bounceCollapsibleState": "{\"isOpen\": false}",
              "__messageCollapsibleState": "{\"isOpen\": true}",
              "__accountsCollapsibleState": "{\"isOpen\": true,\"_schemaValidators\": {\"emailConfig\": \"!_.isEmpty(value)\"}}",
              "__responseCollapsibleState": "{\"isOpen\": false}",
              "emailTemplateMergeFieldsStr": "`<body style=\"box-sizing: border-box; margin: 0;\"><table id=\"iwya\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"i84q\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td><td id=\"ial3\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"><table id=\"ibh4\" style=\"box-sizing: border-box; height: 150px; margin: 0 auto 10px auto; padding: 5px 5px 5px 5px; width: 100%;\" width=\"100%\" height=\"150\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td id=\"ilhr5\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 30%;\" width=\"30%\" valign=\"top\"></td><td class=\"divider\" style=\"box-sizing: border-box; background-color: rgba(0, 0, 0, 0.1); height: 1px;\" height=\"1\" bgcolor=\"rgba(0, 0, 0, 0.1)\"></td></tr></tbody></table></td><td id=\"ibjcl\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 70%;\" width=\"70%\" valign=\"top\"><table id=\"ixk6y\" style=\"box-sizing: border-box; width: 100%; margin-top: 10px; margin-bottom: 10px;\" width=\"100%\"><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"></tr></tbody></table></td><td id=\"iipi\" style=\"box-sizing: border-box; font-size: 12px; font-weight: 300; vertical-align: top; color: rgb(111, 119, 125); margin: 0; padding: 0; width: 33.3333%;\" width=\"33.3333%\" valign=\"top\"></td></tr></tbody></table></body>`",
              "__recipientsCollapsibleState": "{\"isOpen\": true}"
            },
            "outputExample": {
              "allResponses": [],
              "latestResponse": {
                "tag": {
                  "contents": "",
                  "attributes": {
                    "id": "",
                    "title": ""
                  }
                },
                "link": "",
                "type": "",
                "value": "",
                "datetime": "",
                "messageId": "",
                "eventSender": {
                  "name": "",
                  "email": ""
                }
              },
              "outgoingMessage": {
                "sender": {
                  "name": "",
                  "address": ""
                },
                "beacons": [],
                "content": {
                  "html": "",
                  "plain": "",
                  "trimmedHtml": "",
                  "trimmedText": ""
                },
                "subject": {
                  "text": "",
                  "trimmed": ""
                },
                "datetime": "",
                "inReplyTo": "",
                "messageId": "",
                "timestamp": "",
                "recipients": {
                  "cc": [],
                  "to": [],
                  "bcc": []
                },
                "references": [],
                "attachments": []
              }
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "transcript": {
                "tags": [],
                "type": "transcript",
                "label": "transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "76bfba4f-830d-4ab4-abed-e5863b612619",
            "label": "loggingPhoneurl",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "eefda9bb-12b3-45d8-9b15-0feb38768c1a"
                }
              ],
              "logData": "{}",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`${await this.mergeFields['tinyPhoneUrl'].get({path: 'generatedURL'})}`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "{}",
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`${await this.mergeFields['tinyPhoneUrl'].get({path: 'generatedURL'})}`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "76d959fa-6fab-478f-be82-e7bee54e5af4",
            "label": "tableAsImage",
            "icon": "convert_html_to_pdf",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "557b57fe-ff2e-486e-ae50-954e6ad128d9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "42d649a5-91b9-44e0-a91c-a93ad4b06252",
                  "condition": ""
                },
                {
                  "id": "__error__",
                  "label": "error",
                  "stepId": "25111fc3-3455-4b6a-a3ce-516e825dc2fd",
                  "condition": "processError"
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "name": "tableAsImage",
                "type": "session"
              },
              "newName": "`${new Date().valueOf()}`",
              "filePath": "`bioCardImages/`",
              "fileType": "image",
              "useFiles": true,
              "assetsUrl": "/api/v1/assets",
              "authToken": "AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BTZvWIxJgs3q9aiBjG4QhAwAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMPP6EUsHS+mfBRTTmAgEQgIIBGyKk1AMw1vbIVJpHKalRetLLq3cEFR5SYHeqmQXMbS77Iv+Fc/AsyGoEZBAWwkCvjpepdNH9yC61iHVYTOCxOSd71PxjcQEM58JHgcxT/7NEai/ccHHXPimReK+1YO0vvTaYVtaJ/Z0kL+KmrR9Q72MrDevvIqYBv63NS/CtOKWoGBILobSrHiB4G3qgZJzotFNegJDuMO6eHruzWAD3C1tVq/bFFwFdzyoEEwDuarCeOMfyGwc+pM931rHfpmcY/6yp2NAW5AEJXcnvZdVKbvg6E5/4le26qzn0kGyN5mmNRVTJ+4tTinQUQa2yeUpD6rhJjcU8//JsZn7rgohpzQcQB/CF8OQWAa1gLVQp0v4AADrCqK7F2G4E9XsAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOamcyT1RBNU1qaDkuSFFnbnY4dUtWUkNZbHVMdGhrRGlQYlZOeDFhRWJCTkpGOENPaEVZaWJnRQ==",
              "imageSize": "full",
              "topMargin": "``",
              "urlSource": "``",
              "htmlSource": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n\r\n\r\n    <style>\r\n          @import url(\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n\r\n      body {\r\n        background-color: transparent;\r\n      }\r\n      .table-content {\r\n        display: flex;\r\n        justify-content: start;\r\n        gap: 10px;\r\n        padding-bottom: 10px;\r\n            padding-right: 10px;\r\n  }\r\n      #el {\r\n        padding: 20px;\r\n        width: 320px;\r\n        background-color: white;\r\n      }\r\n      .string-human {\r\n        display: flex;\r\n        justify-content: end;\r\n        padding: 10px 16px;\r\n        margin-left: 25%;\r\n        font-family: \"Open Sans\";\r\n        font-style: normal;\r\n        font-weight: 400;\r\n        font-size: 11px;\r\n        line-height: 22px;\r\n        /* or 186% */\r\n\r\n        text-align: right;\r\n        letter-spacing: 0.0004em;\r\n\r\n        /* White */\r\n\r\n        color: #fbfdfd;\r\n        background: #32817e;\r\n        border-radius: 16px 16px 0px 16px;\r\n      }\r\n      .string-bot {\r\n        font-family: Open Sans;\r\n        padding: 10px 5px;\r\n        font-weight: 400;\r\n        line-height: 19px;\r\n        letter-spacing: 0.03999999910593033px;\r\n        font-size: 11px;\r\n        text-align: left;\r\n      }\r\n      .table-header {\r\n        width: 320px;\r\n        margin: 0 auto;\r\n        padding: 0px 20px;\r\n        background-color: #0b2b29;\r\n        border-top-right-radius: 12px;\r\n        border-top-left-radius: 12px;\r\n      }\r\n      .table-header > div {\r\n        margin: 0 auto;\r\n        width: 200px;\r\n      }\r\n      .table-header > div > img {\r\n        width: 200px;\r\n        height: 70px;\r\n        object-fit: contain;\r\n      }\r\n      .table-bottom {\r\n        width: 320px;\r\n        margin: 0 auto;\r\n        padding: 20px 20px;\r\n        background-color: #0b2b29;\r\n        border-bottom-right-radius: 12px;\r\n        border-bottom-left-radius: 12px;\r\n      }\r\n      .table-bottom > div {\r\n        margin: 0 auto;\r\n        width: 28px;\r\n      }\r\n      .table-bottom > div > img {\r\n        width: 28px;\r\n        height: 28px;\r\n        object-fit: contain;\r\n      }\r\n      .table-bio--avatar {\r\n        margin-top: 75px;\r\n        width: 50px;\r\n        height: 50px;\r\n      }\r\n      .table-bio--avatar > img {\r\n        width: 50px;\r\n        height: 50px;\r\n        object-fit: cover;\r\n        border-radius: 15px;\r\n        filter: grayscale(1);\r\n        background: white;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class=\"table-content\">\r\n      <div>\r\n        <div class=\"table-bio--avatar\">\r\n          <img\r\n            src=\"${await this.mergeFields['gpt3Data'].get({path: 'bioimage'})}\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div class=\"table-header\">\r\n          <div>\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/tm-full.png\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"el\">${await this.mergeFields['generateTable'].get({path: 'html'})}</div>\r\n        <div class=\"table-bottom\">\r\n          <div>\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/egg-simple.png\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </body>\r\n</html>\r\n",
              "leftMargin": "``",
              "__codeModes": {},
              "pdfViewType": "predefined",
              "rightMargin": "``",
              "bottomMargin": "``",
              "imageQuality": "80",
              "pdfSizeUnits": "px",
              "processError": true,
              "imageFileType": "png",
              "fileSourceType": "html",
              "footerTemplate": "``",
              "headerTemplate": "``",
              "pdfCustomWidth": "``",
              "backgroundToPdf": true,
              "isMobileVersion": false,
              "loadWaitingTime": "`3 sec`",
              "makeFilePrivate": false,
              "pdfCustomHeight": "``",
              "backgroundToImage": false,
              "pdfPredefinedSize": "`Letter`",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "58c7a475-2a25-4d8d-ac97-79b56e69a2d0",
                "condition": ""
              },
              "websiteResolution": "custom",
              "fullPageScreenShot": false,
              "imageSizeClipWidth": "``",
              "imageSizeClipHeight": "``",
              "websitePrintVersion": false,
              "imageSizeClipXOffset": "``",
              "imageSizeClipYOffset": "``",
              "imageSizeCustomWidth": "``",
              "maxNavigationTimeout": "`10 sec`",
              "customResolutionWidth": "`445`",
              "imageSizeCustomHeight": "``",
              "customResolutionHeight": "`1300`",
              "pdfPredefinedOrientation": "`landscape`"
            },
            "stepInputData": {
              "newName": "`${new Date().valueOf()}`",
              "filePath": "`bioCardImages/`",
              "fileType": "\"image\"",
              "useFiles": true,
              "assetsUrl": "\"/api/v1/assets\"",
              "authToken": "\"AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BTZvWIxJgs3q9aiBjG4QhAwAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMPP6EUsHS+mfBRTTmAgEQgIIBGyKk1AMw1vbIVJpHKalRetLLq3cEFR5SYHeqmQXMbS77Iv+Fc/AsyGoEZBAWwkCvjpepdNH9yC61iHVYTOCxOSd71PxjcQEM58JHgcxT/7NEai/ccHHXPimReK+1YO0vvTaYVtaJ/Z0kL+KmrR9Q72MrDevvIqYBv63NS/CtOKWoGBILobSrHiB4G3qgZJzotFNegJDuMO6eHruzWAD3C1tVq/bFFwFdzyoEEwDuarCeOMfyGwc+pM931rHfpmcY/6yp2NAW5AEJXcnvZdVKbvg6E5/4le26qzn0kGyN5mmNRVTJ+4tTinQUQa2yeUpD6rhJjcU8//JsZn7rgohpzQcQB/CF8OQWAa1gLVQp0v4AADrCqK7F2G4E9XsAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOamcyT1RBNU1qaDkuSFFnbnY4dUtWUkNZbHVMdGhrRGlQYlZOeDFhRWJCTkpGOENPaEVZaWJnRQ==\"",
              "imageSize": "\"full\"",
              "topMargin": "``",
              "urlSource": "``",
              "htmlSource": "`<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n\r\n\r\n    <style>\r\n          @import url(\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n\r\n      body {\r\n        background-color: transparent;\r\n      }\r\n      .table-content {\r\n        display: flex;\r\n        justify-content: start;\r\n        gap: 10px;\r\n        padding-bottom: 10px;\r\n            padding-right: 10px;\r\n  }\r\n      #el {\r\n        padding: 20px;\r\n        width: 320px;\r\n        background-color: white;\r\n      }\r\n      .string-human {\r\n        display: flex;\r\n        justify-content: end;\r\n        padding: 10px 16px;\r\n        margin-left: 25%;\r\n        font-family: \"Open Sans\";\r\n        font-style: normal;\r\n        font-weight: 400;\r\n        font-size: 11px;\r\n        line-height: 22px;\r\n        /* or 186% */\r\n\r\n        text-align: right;\r\n        letter-spacing: 0.0004em;\r\n\r\n        /* White */\r\n\r\n        color: #fbfdfd;\r\n        background: #32817e;\r\n        border-radius: 16px 16px 0px 16px;\r\n      }\r\n      .string-bot {\r\n        font-family: Open Sans;\r\n        padding: 10px 5px;\r\n        font-weight: 400;\r\n        line-height: 19px;\r\n        letter-spacing: 0.03999999910593033px;\r\n        font-size: 11px;\r\n        text-align: left;\r\n      }\r\n      .table-header {\r\n        width: 320px;\r\n        margin: 0 auto;\r\n        padding: 0px 20px;\r\n        background-color: #0b2b29;\r\n        border-top-right-radius: 12px;\r\n        border-top-left-radius: 12px;\r\n      }\r\n      .table-header > div {\r\n        margin: 0 auto;\r\n        width: 200px;\r\n      }\r\n      .table-header > div > img {\r\n        width: 200px;\r\n        height: 70px;\r\n        object-fit: contain;\r\n      }\r\n      .table-bottom {\r\n        width: 320px;\r\n        margin: 0 auto;\r\n        padding: 20px 20px;\r\n        background-color: #0b2b29;\r\n        border-bottom-right-radius: 12px;\r\n        border-bottom-left-radius: 12px;\r\n      }\r\n      .table-bottom > div {\r\n        margin: 0 auto;\r\n        width: 28px;\r\n      }\r\n      .table-bottom > div > img {\r\n        width: 28px;\r\n        height: 28px;\r\n        object-fit: contain;\r\n      }\r\n      .table-bio--avatar {\r\n        margin-top: 75px;\r\n        width: 50px;\r\n        height: 50px;\r\n      }\r\n      .table-bio--avatar > img {\r\n        width: 50px;\r\n        height: 50px;\r\n        object-fit: cover;\r\n        border-radius: 15px;\r\n        filter: grayscale(1);\r\n        background: white;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class=\"table-content\">\r\n      <div>\r\n        <div class=\"table-bio--avatar\">\r\n          <img\r\n            src=\"${await this.mergeFields['gpt3Data'].get({path: 'bioimage'})}\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div class=\"table-header\">\r\n          <div>\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/tm-full.png\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"el\">${await this.mergeFields['generateTable'].get({path: 'html'})}</div>\r\n        <div class=\"table-bottom\">\r\n          <div>\r\n            <img\r\n              src=\"https://staging.thetimemachinecompany.ai/assets/mail/egg-simple.png\"\r\n              alt=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </body>\r\n</html>\r\n`",
              "leftMargin": "``",
              "pdfViewType": "\"predefined\"",
              "rightMargin": "``",
              "bottomMargin": "``",
              "imageQuality": "\"80\"",
              "pdfSizeUnits": "\"px\"",
              "processError": true,
              "imageFileType": "\"png\"",
              "fileSourceType": "\"html\"",
              "footerTemplate": "``",
              "headerTemplate": "``",
              "pdfCustomWidth": "``",
              "backgroundToPdf": true,
              "isMobileVersion": false,
              "loadWaitingTime": "`3 sec`",
              "pdfCustomHeight": "``",
              "backgroundToImage": false,
              "pdfPredefinedSize": "`Letter`",
              "websiteResolution": "\"custom\"",
              "fullPageScreenShot": false,
              "imageSizeClipWidth": "``",
              "imageSizeClipHeight": "``",
              "websitePrintVersion": false,
              "imageSizeClipXOffset": "``",
              "imageSizeClipYOffset": "``",
              "imageSizeCustomWidth": "``",
              "maxNavigationTimeout": "`10 sec`",
              "customResolutionWidth": "`445`",
              "imageSizeCustomHeight": "``",
              "customResolutionHeight": "`1300`",
              "pdfPredefinedOrientation": "`landscape`"
            },
            "outputExample": {
              "url": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "78403bc1-92a2-4e05-b91a-b2f19ec559ef",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "7bff1055-0475-4265-9f01-907d95be4727",
            "label": "return error",
            "icon": "error",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "37daafca-f609-4ef8-9f8c-f229ce92e765",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "b39aa5cb-e416-4db4-a843-9396d42260a7",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "waitRequest",
              "executionError": "`${await this.mergeFields['handleError'].get({path: 'error.message'})}`"
            },
            "stepInputData": {
              "conversation": "\"waitRequest\"",
              "executionError": "`${await this.mergeFields['handleError'].get({path: 'error.message'})}`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "7fc1e3ac-f7f6-4c45-91bb-5c7e9a6e8490",
            "label": "go to request receiver email",
            "icon": "goto",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [],
              "firstEnter": true,
              "gotoStepId": "`40155271-02b6-4591-9183-dd59638c12b7`",
              "__codeModes": {},
              "handleLimit": false,
              "selectedStep": {
                "label": "requestReceiverEmail",
                "value": "`40155271-02b6-4591-9183-dd59638c12b7`"
              },
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "textExpressionMode": "text"
            },
            "stepInputData": {
              "firstEnter": true,
              "gotoStepId": "`40155271-02b6-4591-9183-dd59638c12b7`",
              "handleLimit": false,
              "selectedStep": "{label: \"requestReceiverEmail\",value: \"`40155271-02b6-4591-9183-dd59638c12b7`\"}",
              "loopDetection": true,
              "numberOfPasses": "`10`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "7fe37019-96ba-4de0-9604-c75f335d4742",
            "label": "sendInvalidEmail",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-left",
            "type": "e3fa20e5-b840-4942-b31a-8f37005f35e0",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "7fc1e3ac-f7f6-4c45-91bb-5c7e9a6e8490",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-send-message"
                },
                "name": "sendInvalidEmail",
                "type": "session"
              },
              "message": {
                "messageType": "single",
                "randomMessage": [
                  {
                    "text": "``",
                    "media": {
                      "medias": [],
                      "renderAttachmentsAs": "media"
                    },
                    "weight": "`1`"
                  }
                ],
                "singleMessage": {
                  "text": "`<div class=\"bot-speaking-reqnumber bot-speaking\">Hmm, it seems that your email is not valid! Could you please provide a valid email?</div>`",
                  "media": {
                    "medias": [],
                    "renderAttachmentsAs": "media"
                  }
                },
                "messageHelpText": "",
                "messageLimitCharter": 4000,
                "messageTemplateType": "custom",
                "messageTypeHelpText": "<h3 id=\"message-types\">Message types</h3>\n<p>By default, you can send a <code>Single</code> message by defining it via a text and/or media file(s).</p>\n<p>Choose the <code>Random</code> option to send one message from a list depending on probability. To create multiple messages use <em>add new message</em> option. Each message is defined by a text and/or media, as well as its individual weight. The weight is used to calculate the probability of that message being chosen from the list. It is expected as a positive number with point or comma used for decimals; its range is <code>&gt; 0</code> and <code>&lt; (2^53-1)</code>. If the weights are defined manually, the probabilities of each message being sent are calculated automatically and displayed next to each <em>weight</em>. When step is reached in the flow, it chooses one of the messages randomly and sends it to the end user.</p>\n<p>Use the <code>Condition</code> option to select the outgoing message depending on set conditions. To set up multiple messages use <em>add condition</em> option. Each message is defined by a text and/or media, as well as conditions that should be met for the step to select that message. There is no limit on the number of condition groups, but the step will choose only one during an execution. When step is reached in the flow, each group will be evaluated in order from top to bottom. The flow will select the first group for which the associated rules are met. If none of the rules were met, the step will send the message defined in the <em>If no condition is met</em> section. Additional information about condition builder can be found in the <em>Conditional Selection</em> step under the <em>Info</em> icon.</p>\n"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "__codeModes": {},
              "exactStepId": "6a2f9115-21a1-4f21-877f-3f1d2cf84ae7",
              "conversation": {
                "meta": {
                  "chat": "`01oywrs`",
                  "type": "rwc-init-chat",
                  "lookAndFeel": {
                    "theme": "Auto-detect",
                    "title": "",
                    "botIcon": {},
                    "footerJs": "",
                    "headerJs": "",
                    "footerCss": ".custom-footer {\n  text-align: center;\n  font-size: 12px;\n}",
                    "headerCss": ".custom-header * {\n  font-size: 12px;\n  color: var(--textColor);\n}\n\n.custom-header p {\n  margin: 16px;\n}\n\n.custom-header img {\n  display: inline-block;\n  margin-right: 8px;\n}\n\n.header.header--active {\n  padding-top: 0;\n  padding-bottom: 0;\n}",
                    "useFooter": false,
                    "footerHtml": "<div class=\"custom-footer\">\n  <p>\n  Powered by\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    </a>\n  </p>\n</div>",
                    "headerHtml": "<div class=\"custom-header\">\n  <p>\n    <a href=\"https://onereach.ai\">\n      <img src=\"\n    https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://onereach.ai/wp-content/uploads/2017/09/LogoMaster_Oct29_18_LargeForNav-e1571323917293.png\" width=\"88\" height=\"12\">\n    Rich Web Chat\n    </a>\n  </p>\n</div>",
                    "description": "",
                    "headerImage": {},
                    "customStyles": [],
                    "showFooterAt": [
                      "desktop",
                      "mobile",
                      "embed"
                    ],
                    "useCustomCss": false,
                    "botAnswerDelay": "`2 seconds`",
                    "closeEventType": "`command`",
                    "customizeHeader": false,
                    "closeEventCommand": "``",
                    "messageTimeFormat": "``",
                    "useGlobalCommands": false,
                    "globalCommandsList": [],
                    "allowRestoreSession": false,
                    "typingIndicatorTime": "`2 seconds`",
                    "allowStartNewSession": false,
                    "globalCommandsCustom": [],
                    "isCustomMessageTimeFormat": false
                  },
                  "conversationType": "rwc-chat",
                  "additionalContent": {
                    "type": "`empty`"
                  },
                  "conversationStarter": true
                },
                "name": "waitConv",
                "type": "session",
                "botId": "f37b7298-10b9-49dd-b085-a03a8661fca4",
                "value": {
                  "name": "waitConv"
                },
                "stepId": "88dc5d0d-f14b-4d57-8001-c7a8f0827d59",
                "thisBotId": "f37b7298-10b9-49dd-b085-a03a8661fca4"
              },
              "isSingleExit": true,
              "processError": false,
              "conditionGroups": [
                {
                  "label": "`New condition 1`",
                  "rules": [
                    {
                      "vforkey": "582b2577-34b1-4791-b5a0-26b2df9ff082",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "``",
                      "secondValue": "``",
                      "isDisabledSecondValue": false
                    }
                  ],
                  "dataOut": "``",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "conditionMessage": {
                    "text": "``",
                    "media": {
                      "medias": [],
                      "renderAttachmentsAs": "media"
                    }
                  },
                  "isEditableHeader": false
                }
              ],
              "overrideBotIcon": {},
              "answerDelayDuration": {
                "input": "``",
                "outputMode": "ms"
              },
              "elseConditionMessage": {
                "text": "``",
                "media": {
                  "medias": [],
                  "renderAttachmentsAs": "media"
                }
              },
              "hasNoConditionDataOut": true,
              "conditionRuleHasDataOut": false,
              "noConditionDataOutValue": "``",
              "isOverrideBotIconAllowed": false,
              "overrideBotAnswerDelayDuration": false
            },
            "stepInputData": {
              "message": "{messageType: \"single\",singleMessage: {text: `<div class=\"bot-speaking-reqnumber bot-speaking\">Hmm, it seems that your email is not valid! Could you please provide a valid email?</div>`,media: {medias: [],renderAttachmentsAs: \"media\"}}}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "exactStepId": "\"6a2f9115-21a1-4f21-877f-3f1d2cf84ae7\"",
              "processError": false,
              "elseConditionMessage": "{text: ``,media: {medias: [],renderAttachmentsAs: \"media\"}}",
              "isOverrideBotIconAllowed": "false",
              "overrideBotAnswerDelayDuration": "false"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "transcript": {
                "tags": [],
                "type": "transcript",
                "label": "Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "8433172e-2ab1-4a8c-b9ff-050976d0d1bd",
            "label": "handle error",
            "icon": "error",
            "iconType": "default",
            "iconUrl": "",
            "shape": "hexagon",
            "type": "3a40f4a9-1968-4c0b-8380-027c14109208",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "b01fddef-1ffa-484e-b450-3bcb0ab36c6a",
                  "condition": ""
                },
                {
                  "id": "6c91fc56-1b1d-427a-8917-2c04f4f1455a",
                  "label": "timeout",
                  "stepId": "a5817feb-7715-4977-aac8-57b93dd8994c",
                  "condition": "handleTimeout"
                },
                {
                  "id": "6ca007c0-8947-4747-b6ca-14bab8412680",
                  "label": "error",
                  "stepId": "e3576b46-7ba7-4494-ade8-422d1058a92c",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "handleError",
                "type": "session"
              },
              "__codeModes": {},
              "handleTimeout": true,
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "ignoreEmptyErrorHandlers": true,
              "ignoreEmptyTimeoutHandlers": true
            },
            "stepInputData": {
              "handleTimeout": "true",
              "loopDetection": "true",
              "numberOfPasses": "`10`",
              "ignoreEmptyErrorHandlers": "true",
              "ignoreEmptyTimeoutHandlers": "true"
            },
            "outputExample": {
              "time": "2011-10-05T14:48:00.000Z",
              "error": {
                "name": "Error",
                "stack": "error stack",
                "message": "error message",
                "formattedStack": []
              },
              "rawError": {
                "name": "Error",
                "stack": "error stack",
                "message": "error message"
              },
              "isTimeout": false,
              "timestamp": 1615202652220,
              "errorsCounter": 1,
              "flowWithError": {
                "id": "flow id",
                "bot": {
                  "id": "bot id"
                },
                "url": "URL of the flow",
                "label": "flow label"
              },
              "stepWithError": {
                "id": "step id",
                "label": "label of a step that caused the error",
                "template": {
                  "id": "step template id",
                  "label": "step template label",
                  "version": "step template version"
                }
              },
              "sessionWithError": {
                "sessionId": "session id",
                "previousSessionId": "previous session id",
                "beginningSessionId": "beginning session id"
              },
              "isInstanceOfError": true
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "869b80e7-ff13-410c-88ac-40b21df09067",
            "label": "urlImage",
            "icon": "parse_url",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "88e7cd37-10dd-42e4-9f31-93875e70ed3a",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                  "label": "next",
                  "stepId": "5adb8996-3774-439c-9abc-03d9f0d40ca9",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "urlImage",
                "type": "session"
              },
              "urlData": {
                "shortURL": "",
                "sourceURL": "`${await this.mergeFields['generateImageMetaTags'].get({path: 'url'})}`",
                "isCodeMode": false,
                "showPreview": false,
                "disableButton": true
              },
              "isDeepLink": false,
              "__codeModes": {},
              "processError": false,
              "skipStepLogicExit": {
                "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                "label": "next",
                "stepId": "52f8e7d6-e5e6-474c-b1b5-b1b9aa4ab9c1",
                "condition": ""
              }
            },
            "stepInputData": {
              "urlData": "{shortURL: \"\",sourceURL: `${await this.mergeFields['generateImageMetaTags'].get({path: 'url'})}`,isCodeMode: false,showPreview: false,disableButton: true}",
              "isDeepLink": "false",
              "processError": false
            },
            "outputExample": {
              "generatedURL": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "8a926464-aad9-4724-bd25-fb86ef9ed1b8",
            "label": "shareOption",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "be8c5b0f-f0a6-4150-85c3-7150ed6c0451",
                  "condition": ""
                }
              ],
              "medias": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-request-response"
                },
                "name": "shareOption",
                "type": "session"
              },
              "videoSrc": {},
              "rateInput": true,
              "sliderMax": "``",
              "sliderMin": "``",
              "dataOutput": {},
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "sliderStep": "``",
              "sliderType": "single",
              "sliderUnit": "``",
              "__codeModes": {},
              "creditTerms": {},
              "savedStepId": "8a926464-aad9-4724-bd25-fb86ef9ed1b8",
              "showBotIcon": false,
              "textMessage": "``",
              "videoPoster": {},
              "conversation": {},
              "processError": false,
              "radioDefault": "`No option`",
              "radioOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "signatureBtn": "``",
              "workingHours": {
                "to": null,
                "from": null,
                "timezone": {
                  "id": "1",
                  "zone": "GMT+00:00"
                },
                "timeFormat": "12"
              },
              "additionalCss": "",
              "hasCancelExit": false,
              "skipStepLogic": false,
              "textInputType": "text",
              "videoAutoplay": true,
              "videoBtnLabel": "``",
              "videoUsedLink": false,
              "additionalHtml": "",
              "autoSuggestion": {
                "input": false,
                "isExtraLeg": false
              },
              "creditBtnLabel": "``",
              "geolocationBtn": "``",
              "geolocationLat": "``",
              "geolocationLng": "``",
              "inputComponent": "`custom`",
              "isPrivateFiles": false,
              "optionsButtons": [
                {
                  "label": "`Email`",
                  "value": "`email`",
                  "vforkey": "2ccd0f21-6e5f-44ce-944f-f253e817236a",
                  "buttonStyle": "filled"
                },
                {
                  "label": "`Phone`",
                  "value": "`phone`",
                  "vforkey": "93f91158-c72c-40b2-ae7e-8ec3f9659e46",
                  "buttonStyle": "outlined"
                },
                {
                  "label": "`URL`",
                  "value": "`url`",
                  "vforkey": "95052a65-e8c5-4038-a708-d54785e23417",
                  "buttonStyle": "default"
                }
              ],
              "processTimeout": false,
              "videoStartTime": "0",
              "carouselOptions": [
                {
                  "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
                  "image": {},
                  "title": "``",
                  "value": "``",
                  "video": {},
                  "hasModal": false,
                  "modalType": "default-modal",
                  "buttonLabel": "``",
                  "buttonStyle": "default",
                  "description": "``",
                  "childWindowType": "html",
                  "additionalContentLink": {},
                  "showModalButtonInUserResponse": true
                }
              ],
              "checkboxDefault": [],
              "checkboxOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "customVariables": [
                {
                  "varName": "`historyConversation`",
                  "vforkey": "f71833dd-e851-42fe-95ba-9940074fd925",
                  "varValue": "`${await this.mergeFields['convString'].get({path: 'data'})}`"
                },
                {
                  "varName": "`urlBase`",
                  "vforkey": "6cba746d-22bd-45ab-b69f-7349d7702ef0",
                  "varValue": "`${await this.mergeFields['sharedUrl'].get({path: 'generatedURL'})}`"
                },
                {
                  "varName": "`guide`",
                  "vforkey": "389925ef-7f1b-400d-850e-05cfd22d10c5",
                  "varValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.figureFullName'})}`"
                },
                {
                  "varName": "`user`",
                  "vforkey": "84e1cfa3-b7e1-44a0-b239-d3ed40e60f9a",
                  "varValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`"
                },
                {
                  "varName": "`title`",
                  "vforkey": "713a39fb-ca91-4b57-abec-cc7292c6b9b5",
                  "varValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.title'})}`"
                },
                {
                  "varName": "`biography`",
                  "vforkey": "3d45cc74-e9ec-4971-aeb2-22337e405702",
                  "varValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.biography'})}`"
                },
                {
                  "varName": "`bioimage`",
                  "vforkey": "648f86c2-eddd-4162-a3a6-5635b2e0912e",
                  "varValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.bioimage'})}`"
                },
                {
                  "varName": "`year`",
                  "vforkey": "a00bcf82-21ef-493a-b64a-8159abe4ee62",
                  "varValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.year'})}`"
                }
              ],
              "dropdownOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratePlaceholder": "``",
              "textPlaceholder": "``",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": false,
              "additionalScript": "",
              "creditTermsLabel": "``",
              "customTemplateId": "buttons_with_css_f3bda400-85e5-4d13-b26f-d7a2abeea90f",
              "datepickerFormat": "`MM-DD-YYYY`",
              "sliderDefaultEnd": "``",
              "timepickerFormat": "`auto`",
              "attachmentsNumber": "`0`",
              "optionListOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratingSubmitLabel": "``",
              "scheduleDisableMf": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "f35d5737-9730-4d3c-bccd-10b7a4a2c912",
                "condition": ""
              },
              "videoShowInThread": true,
              "autoSuggestionType": "`emty`",
              "customTemplateType": "`vue`",
              "ratingDiscardLabel": "``",
              "sliderCustomLabels": [
                {
                  "label": "``",
                  "value": "``"
                },
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "sliderDefaultStart": "``",
              "sliderDefaultValue": "``",
              "sliderUnitPosition": "`start`",
              "userAnswerFunction": "",
              "videoTotalDuration": 0,
              "carouselAlternative": {
                "value": "``",
                "buttonLabel": "``",
                "buttonStyle": "default",
                "description": "``"
              },
              "carouselMultiselect": false,
              "dropdownPlaceholder": "``",
              "scheduleButtonLabel": "``",
              "scheduleDisableByMf": false,
              "scheduleOptionItems": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "creditCancelBtnLabel": "``",
              "datepickerBlockDates": false,
              "datepickerStartsFrom": "`0`",
              "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
              "customTemplateCSSCode": "@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n\r\n.share-area {\r\n  background: #323232ab;\r\n  font-family: \"Poppins\";\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999999999;\r\n  width: 100vw;\r\n  height: 100vh;\r\n}\r\n\r\n.share-content {\r\n  max-width: 480px;\r\n  min-width: 300px;\r\n  min-height: 400px;\r\n  max-height: 90%;\r\n\r\n  background: #fbfdfd;\r\n  box-shadow: 0px 0px 40px rgba(12, 13, 13, 0.7);\r\n  border-radius: 8px;\r\n  padding: 18px 20px 2px 20px;\r\n  position: relative;\r\n}\r\n\r\n.share-title {\r\n  display: flex;\r\n  padding-bottom: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: #324045;\r\n}\r\n\r\n.list-button {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding: 20px 0;\r\n  overflow-x: auto;\r\n  margin: 0 10px;\r\n}\r\n\r\n.share-button {\r\n  height: 40px;\r\n  width: 52px;\r\n  min-height: 40px;\r\n  min-width: 52px;\r\n  border-radius: 8px;\r\n  padding: 0;\r\n  border: 1px solid #f1f1f1;\r\n  padding: 0 16px;\r\n}\r\n\r\n.share-image-button {\r\n  height: 20px;\r\n  width: 20px;\r\n  object-fit: contain;\r\n  cursor: pointer;\r\n}\r\n\r\n.share-area-copy {\r\n  max-width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 30px 5%;\r\n  gap: 13px;\r\n}\r\n\r\n.share-area-copy-button {\r\n  border: none;\r\n  font-family: \"Poppins\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 18px;\r\n  /* identical to box height */\r\n  letter-spacing: 0.2em;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  background-color: #32817e;\r\n  cursor: pointer;\r\n  width: 80%;\r\n  height: 40px;\r\n  border-radius: 8px;\r\n}\r\n.share-area-copy-button:hover{\r\n  background-color: #3a8e8b;\r\n  \r\n}\r\n.share-area-copy-input {\r\n  border: 0px;\r\n  border-radius: 6px;\r\n  padding: 10px 5px;\r\n  font-size: 16px;\r\n  line-height: 18px;\r\n  /* identical to box height */\r\n  background-color: white;\r\n  color: #3fa2a0;\r\n  cursor: pointer;\r\n  width: 70%;\r\n}\r\n\r\n.share-footer {\r\n  display: flex;\r\n  justify-content: end;\r\n  padding: 20px 0 5px;\r\n  background: none;\r\n}\r\n\r\n.share-footer-button {\r\n  border: none;\r\n  font-family: \"Poppins\";\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 18px;\r\n  /* identical to box height */\r\n  text-align: right;\r\n  letter-spacing: 0.2em;\r\n  text-transform: uppercase;\r\n  color: #3fa2a0;\r\n  cursor: pointer;\r\n  max-width: 20%;\r\n  background: none;\r\n}\r\n\r\n.list-button::-webkit-scrollbar {\r\n  width: 0px !important;\r\n  height: 5px !important;\r\n}\r\n\r\n.list-button::-webkit-scrollbar-track {\r\n  box-shadow: inset 0 0 6px #e7e7e7 !important;\r\n}\r\n\r\n.list-button::-webkit-scrollbar-thumb {\r\n  background-color: #d6d7d9 !important;\r\n  outline: 0px solid #aeaeae !important;\r\n}\r\n\r\n.share-button-name {\r\n  visibility: hidden;\r\n  position: absolute;\r\n  text-align: center;\r\n  color: white;\r\n  background: #0B2B29;\r\nborder-radius: 4px;\r\n  font-size: 10px;\r\n  padding: 5px;\r\n  top: -10px;\r\n  left: 15px;\r\n  z-index: 999;\r\n  width: 115%;\r\n}\r\n\r\n.share-button:hover {\r\n  background: #85E1DF;\r\n}\r\n\r\n.share-button-item:hover .share-image-button {\r\n  filter: contrast(0%);\r\n\r\n}\r\n.share-button-item:hover .share-button-name {\r\n  visibility: visible;\r\n}\r\n\r\n.share-button-item {\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.button-close {\r\n  color: #82898c;\r\n  font-size: 32px;\r\n  font-weight: lighter;\r\n  cursor: pointer;\r\n  border: none;\r\n  background: none;\r\n}\r\n\r\n.share-check-label {\r\n  font-family: \"Poppins\";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 12px;\r\n  line-height: 18px;\r\n\r\n  letter-spacing: 0.2em;\r\n  text-transform: uppercase;\r\n\r\n  color: #aeb0b5;\r\n}\r\n\r\n.share-check-input {\r\n  border: 1px solid #d6d7d9;\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  border-radius: 8px;\r\n}\r\n.share-check-input-selected{\r\n  border: 1px solid #d6d7d9;\r\n  width: 24px;\r\n  height: 24px;\r\nbackground: #32817E;\r\n  border-radius: 8px;\r\n  \r\n}\r\n\r\n.share-check-input-selected-icon{\r\n  margin-top: 1px;\r\n    margin-left: 3px;\r\n}\r\n\r\n.share-input-group {\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.share-selects-full-group {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding: 10px 0;\r\n  position: relative;\r\n}\r\n\r\n.share-selects-item {\r\n  width: 200px;\r\n  position: relative;\r\n}\r\n\r\n.share-selects-group {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: #FBFDFD;\r\n  /* background/gray-lighter */\r\n  padding: 10px;\r\n  border: 1px solid #D6D7D9;\r\n  border-radius: 8px;\r\n  width: 200px;\r\n  \r\n}\r\n\r\n.share-selects-content {\r\n\r\n  font-family: 'Poppins';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 18px;\r\n  /* identical to box height */\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n    overflow: hidden;\r\n    max-width: 200px;\r\n  letter-spacing: 0.2em;\r\n  text-transform: uppercase;\r\n\r\n  /* background/gray-medium */\r\n\r\n  color: #82898C;\r\n}\r\n\r\n.share-select-list {\r\n  position: absolute;\r\n  background: #FBFDFD;\r\n  box-shadow: 0px 8px 16px rgba(21, 29, 28, 0.16);\r\n  border-radius: 8px;\r\n  left: 3px;\r\n  top: 57px;\r\n  z-index: 999;\r\n  width: 220px;\r\n  max-height: 276px;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.share-select-list-elements>li {\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: start;\r\n  padding: 6px 5px;\r\n  line-height: 18px;\r\n  font-family: 'Poppins';\r\nfont-style: normal;\r\nfont-weight: 400;\r\nfont-size: 14px;\r\nline-height: 21px;\r\ndisplay: flex;\r\nalign-items: center;\r\ncolor: #324045;\r\n}\r\n.share-active-element:hover, .share-active-element:hover>div {\r\n  font-family: 'Poppins';\r\n  background: #F1F1F1;\r\n  border-radius: 4px;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  color: #3FA2A0;\r\n      text-overflow: initial;\r\n    white-space: pre-wrap;\r\n    overflow: visible;\r\n}\r\n.share-list-guide-avatar{\r\n  \r\n  font-family: 'Poppins';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 18px;\r\n  \r\n  letter-spacing: 0.2em;\r\n  text-transform: uppercase;\r\n    \r\n  color: #3FA2A0;\r\n}\r\n\r\n.share-select-list-elements{\r\n  padding: 0;\r\n}\r\n\r\n.share-selec-list-text{\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    width: 155px;\r\n    overflow: hidden;\r\n}\r\n  \r\n  .share-selec-list-text-tooltip{\r\n    visibility: hidden;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    \r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  .share-select-list-elements>li:hover:hover .share-selec-list-text-tooltip {\r\n  visibility: hidden;\r\n}\r\n.share-area-copy-button-copied{\r\n    color: #32817E;\r\n    position: absolute;\r\n    bottom: 95px;\r\n    right: 0px;\r\n    left: 70%;\r\n}\r\n\r\n.spin-animation{\r\n   \tanimation: rotate-animation 3s infinite linear;\r\n}\r\n\r\n@keyframes rotate-animation {\r\n  from { transform: rotate(0); }\r\n  to { transform: rotate(-360deg); }\r\n}\r\n.hidden{\r\n  visibility: hidden\r\n}\r\n\r\n\r\n@media (max-width: 600px) {\r\n\r\n.share-selects-content, .share-selects-group,.share-selects-item,{\r\n  width:100%;\r\n  max-width: 100%;\r\n  text-align: left;\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n",
              "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
              "geolocationSetDefault": false,
              "scheduleDisableManual": [],
              "sliderUseCustomLabels": false,
              "additionalContentVideo": [],
              "attachmentsAllowChosen": false,
              "carouselCancelBtnLabel": "``",
              "carouselHasAlternative": false,
              "carouselSubmitBtnLabel": "``",
              "customTempalateScripts": [],
              "customTemplateHtmlCode": "",
              "textInputCustomPattern": "``",
              "additionalCardvariables": [],
              "attachmentsAllowedTypes": [],
              "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n      openListLeft: false,\n      openListRight: false,\n      newURL: '',\n      initials: 'TG',\n      startChat: '',\n      endChat: '',\n      startIndex: 0,\n      endIndex: 99999,\n      shareAll: true,\n      copied: false\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n     mounted() {\n\n      window.parent.postMessage(\"unselectShare\", '*');\n\n    this.newURL = this.urlBase.replaceAll('/', '%2F');\n    this.newURL = this.newURL.replaceAll(':', '%3A');\n    this.historyConversation = JSON.parse(this.historyConversation);\n    let init = this.guide.split(' ');\n    this.initials = init.lengt > 1 ? init[0]+init[1] : init[0].substring(0,2);\n    setTimeout(()=>{\n      this.selectConv('start', 0, true);\n      this.endIndex = this.historyConversation.length -1;\n      this.selectConv('end', this.historyConversation.length -1, true);\n    }, 1000)\n  \n  },\n  methods: {\n    selectConv(type, index, all){\n      if(type == 'start' && index > this.endIndex) return;\n      if(type == 'end' && index < this.startIndex) return;\n      this.shareAll = all;\n      type == 'start' ? this.startChat = Object.values(this.historyConversation[index])[0] : this.endChat = Object.values(this.historyConversation[index])[0];\n      if (type == 'start') {\n        this.startIndex= index;\n        const items = document.getElementsByClassName('share-select-list-element-right')\n        Array.prototype.forEach.call(items, function(el, ind) {\n          if (ind > index)\n          el.classList.add('share-active-element')\n          else\n          el.classList.remove('share-active-element')\n        })        \n      } else {\n        this.endIndex= index;\n        const items = document.getElementsByClassName('share-select-list-element-left')\n        Array.prototype.forEach.call(items, function(el, ind) {\n          if (ind < index)\n          el.classList.add('share-active-element')\n          else\n          el.classList.remove('share-active-element')\n          \n        })        \n \n        \n      }\n      \n   this.openListLeft = false;\n   this.openListRight = false;\n    },\n    shareAllConv(){\n      this.selectConv('start', 0,this.shareAll);\n      this.endIndex = this.historyConversation.length -1;\n      this.selectConv('end', this.historyConversation.length -1,this.shareAll);\n      this.shareAll = !this.shareAll;\n    },\n    twitter() {\n      let link = 'https://twitter.com/intent/tweet?text=Your%20Contact%20' + this.user + '%20is%20sharing%20their%20conversation%20with%20' + this.guide + '%20%20' + this.newURL + '%20&hashtags=AI,TimeMachine';\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n    facebook() {\n      let link = 'https://www.facebook.com/sharer/sharer.php?u=' + this.newURL;\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n\n    linkedin() {\n      let link = 'https://www.linkedin.com/sharing/share-offsite/?url=' + this.newURL;\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n    whatsapp() {\n      let link = 'https://wa.me/?text=Your%20Contact%20' + this.user + '%20is%20sharing%20their%20conversation%20with%20' + this.guide + '%20%20' + this.newURL;\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n    copyUrl(){\n    let copyTextarea = document.createElement(\"textarea\");\n    copyTextarea.style.position = \"fixed\";\n    copyTextarea.style.opacity = \"0\";\n    copyTextarea.textContent = this.urlBase;\n \n    document.body.appendChild(copyTextarea);\n    copyTextarea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(copyTextarea);\n    this.copied = true;\n    setTimeout(()=>{\n      this.copied = false;\n    }, 5000)\n    this.send('exit');\n\n    },\n\n    send(msg) {\n      let close = document.getElementById('close');\n      close.classList.add('hidden')\n      let spin = document.getElementById('spin');\n      spin.classList.remove('hidden')\n      \n\n      \n      /**\n       * `message` field will be sent as user reply and will NOT be stored in mergeField\n       * `myData` field will be stored in mergeField\n      **/\n      let a = this.historyConversation.slice(this.startIndex, this.endIndex+1);\n      if(this.startIndex %2 == 1){\n        let c  = {\"Bot\": ''};\n        a.unshift(c)\n      }\n      const bio = {\n        figureFullName:this.guide,\n        title: this.title,\n        biography: this.biography,\n        bioimage: this.bioimage,\n        year: this.year\n      }\n      let b = \n      {\n        \"conv\": a,\n        \"init\": this.startIndex,\n        \"bioCard\": bio,\n        \"friend\": this.user,\n      }\n      \n      window.parent.postMessage(\"enableShare\", '*');\n      this.sendMessage({\n        message: \"\",\n        myData: msg,\n        newConv: b\n      });\n    }\n   }\n  }\n}",
              "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
              "recordMultimediaOptions": [
                "`audio`",
                "`video`",
                "`screen`",
                "`file`"
              ],
              "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
              "autoSubmitCustomTemplate": false,
              "datepickerBlockedOptions": [],
              "datepickerSuggestedDates": false,
              "scheduleAllowMultiselect": false,
              "videoStartTimeTimestring": "``",
              "autoSuggestionOptionsList": [
                {
                  "text": "``"
                }
              ],
              "customTemplateCompiledCSS": "@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\n.custom-component-cf74c2149a2149e992308c75aa227c27 { }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area {\n    background: #323232ab;\n    font-family: \"Poppins\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 999999999;\n    width: 100vw;\n    height: 100vh; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-content {\n    max-width: 480px;\n    min-width: 300px;\n    min-height: 400px;\n    max-height: 90%;\n    background: #fbfdfd;\n    box-shadow: 0px 0px 40px rgba(12, 13, 13, 0.7);\n    border-radius: 8px;\n    padding: 18px 20px 2px 20px;\n    position: relative; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-title {\n    display: flex;\n    padding-bottom: 20px;\n    justify-content: space-between;\n    align-items: center;\n    color: #324045; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button {\n    display: flex;\n    gap: 10px;\n    padding: 20px 0;\n    overflow-x: auto;\n    margin: 0 10px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button {\n    height: 40px;\n    width: 52px;\n    min-height: 40px;\n    min-width: 52px;\n    border-radius: 8px;\n    padding: 0;\n    border: 1px solid #f1f1f1;\n    padding: 0 16px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-image-button {\n    height: 20px;\n    width: 20px;\n    object-fit: contain;\n    cursor: pointer; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy {\n    max-width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 30px 5%;\n    gap: 13px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-button {\n    border: none;\n    font-family: \"Poppins\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 18px;\n    /* identical to box height */\n    letter-spacing: 0.2em;\n    text-transform: uppercase;\n    color: white;\n    background-color: #32817e;\n    cursor: pointer;\n    width: 80%;\n    height: 40px;\n    border-radius: 8px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-button:hover {\n    background-color: #3a8e8b; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-input {\n    border: 0px;\n    border-radius: 6px;\n    padding: 10px 5px;\n    font-size: 16px;\n    line-height: 18px;\n    /* identical to box height */\n    background-color: white;\n    color: #3fa2a0;\n    cursor: pointer;\n    width: 70%; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-footer {\n    display: flex;\n    justify-content: end;\n    padding: 20px 0 5px;\n    background: none; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-footer-button {\n    border: none;\n    font-family: \"Poppins\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 18px;\n    /* identical to box height */\n    text-align: right;\n    letter-spacing: 0.2em;\n    text-transform: uppercase;\n    color: #3fa2a0;\n    cursor: pointer;\n    max-width: 20%;\n    background: none; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button::-webkit-scrollbar {\n    width: 0px !important;\n    height: 5px !important; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px #e7e7e7 !important; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button::-webkit-scrollbar-thumb {\n    background-color: #d6d7d9 !important;\n    outline: 0px solid #aeaeae !important; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-name {\n    visibility: hidden;\n    position: absolute;\n    text-align: center;\n    color: white;\n    background: #0B2B29;\n    border-radius: 4px;\n    font-size: 10px;\n    padding: 5px;\n    top: -10px;\n    left: 15px;\n    z-index: 999;\n    width: 115%; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button:hover {\n    background: #85E1DF; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-item:hover .share-image-button {\n    filter: contrast(0%); }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-item:hover .share-button-name {\n    visibility: visible; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-item {\n    position: relative;\n    cursor: pointer; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .button-close {\n    color: #82898c;\n    font-size: 32px;\n    font-weight: lighter;\n    cursor: pointer;\n    border: none;\n    background: none; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-label {\n    font-family: \"Poppins\";\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 18px;\n    letter-spacing: 0.2em;\n    text-transform: uppercase;\n    color: #aeb0b5; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-input {\n    border: 1px solid #d6d7d9;\n    width: 24px;\n    height: 24px;\n    border-radius: 8px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-input-selected {\n    border: 1px solid #d6d7d9;\n    width: 24px;\n    height: 24px;\n    background: #32817E;\n    border-radius: 8px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-input-selected-icon {\n    margin-top: 1px;\n    margin-left: 3px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-input-group {\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    gap: 10px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-full-group {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 10px;\n    padding: 10px 0;\n    position: relative; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-item {\n    width: 200px;\n    position: relative; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-group {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background: #FBFDFD;\n    /* background/gray-lighter */\n    padding: 10px;\n    border: 1px solid #D6D7D9;\n    border-radius: 8px;\n    width: 200px; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-content {\n    font-family: 'Poppins';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 18px;\n    /* identical to box height */\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    max-width: 200px;\n    letter-spacing: 0.2em;\n    text-transform: uppercase;\n    /* background/gray-medium */\n    color: #82898C; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list {\n    position: absolute;\n    background: #FBFDFD;\n    box-shadow: 0px 8px 16px rgba(21, 29, 28, 0.16);\n    border-radius: 8px;\n    left: 3px;\n    top: 57px;\n    z-index: 999;\n    width: 220px;\n    max-height: 276px;\n    padding: 10px;\n    overflow-y: auto; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list-elements > li {\n    display: flex;\n    gap: 10px;\n    justify-content: start;\n    padding: 6px 5px;\n    line-height: 18px;\n    font-family: 'Poppins';\n    font-style: normal;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 21px;\n    display: flex;\n    align-items: center;\n    color: #324045; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-active-element:hover, .custom-component-cf74c2149a2149e992308c75aa227c27 .share-active-element:hover > div {\n    font-family: 'Poppins';\n    background: #F1F1F1;\n    border-radius: 4px;\n    font-style: normal;\n    font-weight: 600;\n    color: #3FA2A0;\n    text-overflow: initial;\n    white-space: pre-wrap;\n    overflow: visible; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-list-guide-avatar {\n    font-family: 'Poppins';\n    font-style: normal;\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 18px;\n    letter-spacing: 0.2em;\n    text-transform: uppercase;\n    color: #3FA2A0; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list-elements {\n    padding: 0; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selec-list-text {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 155px;\n    overflow: hidden; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selec-list-text-tooltip {\n    visibility: hidden;\n    position: absolute;\n    top: 0;\n    left: 0; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list-elements > li:hover:hover .share-selec-list-text-tooltip {\n    visibility: hidden; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-button-copied {\n    color: #32817E;\n    position: absolute;\n    bottom: 95px;\n    right: 0px;\n    left: 70%; }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .spin-animation {\n    animation: rotate-animation 3s infinite linear; }\n\n@keyframes rotate-animation {\n  from {\n    transform: rotate(0); }\n  to {\n    transform: rotate(-360deg); } }\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .hidden {\n    visibility: hidden; }\n  @media (max-width: 600px) {\n    .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-content, .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-group, .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-item {\n      width: 100%;\n      max-width: 100%;\n      text-align: left; } }\n",
              "scheduleDisableByFunction": false,
              "scheduleDisableByManually": false,
              "datepickerSuggestedOptions": [],
              "datepickerBlockedMergefield": "this.get('')",
              "scheduleMultiselectQuantity": "3",
              "customTemplateJavaScriptCode": "",
              "showCustomComponentInMessage": false,
              "customTemplateVueHtmlTemplate": "  <div class=\"share-area\">\r\n    <div class=\"share-content\">\r\n      <div class=\"share-title\">\r\n        <div>Share</div>\r\n        <button class=\" button-close\" @click=\"send('close')\">&times;</button>\r\n      </div>\r\n      <div>\r\n        <div class=\"share-input-group\">\r\n            <div class=\"share-check-input-selected\"  @click=\"shareAllConv()\" v-if=\"shareAll\">\r\n              \r\n                <svg\r\n                class=\"share-check-input-selected-icon\"\r\n    width=\"16\"\r\n    height=\"20\"\r\n    viewBox=\"0 0 14 11\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      fill-rule=\"evenodd\"\r\n      clip-rule=\"evenodd\"\r\n      d=\"M13.7071 0.483811C14.0976 0.874335 14.0976 1.5075 13.7071 1.89802L5.70711 9.89802C5.31658 10.2885 4.68342 10.2885 4.29289 9.89802L0.292893 5.89802C-0.0976311 5.5075 -0.0976311 4.87434 0.292893 4.48381C0.683417 4.09329 1.31658 4.09329 1.70711 4.48381L5 7.7767L12.2929 0.483811C12.6834 0.0932869 13.3166 0.0932869 13.7071 0.483811Z\"\r\n      fill=\"white\"\r\n    />\r\n  </svg>\r\n\r\n            </div>\r\n          <div v-else class=\"share-check-input\" @click=\"shareAllConv()\">\r\n          </div>\r\n          <label for=\"share-checkbox\" class=\"share-check-label\" @click=\"shareAllConv()\">Share complete conversation</label>\r\n        </div>\r\n        <div class=\"share-selects-full-group\">\r\n          <div class=\"share-selects-item\">\r\n            <button class=\"share-selects-group\" @click=\"openListLeft = !openListLeft\">\r\n              <div class=\"share-selects-content\">\r\n                START: {{startChat}}\r\n              </div>\r\n              <div>\r\n                <img class=\"share-image-button\"\r\n                  src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/chevron-down.png\"\r\n                  alt=\"\" />\r\n              </div>\r\n            </button>\r\n            <div class=\"share-select-list\" v-show=\"openListLeft\">\r\n\r\n              <ul class=\"share-select-list-elements\">\r\n                <li v-for=\"item, index in historyConversation\" :key='item+index' @click=\"selectConv('start', index, false)\" class=\"share-select-list-element-left \">\r\n                  <div v-if=\"Object.keys(item)[0] == 'Bot'\" class=\"share-list-guide-avatar\">{{initials}}</div>\r\n                  <div v-else>\r\n                    <img class=\"share-image-button\"\r\n                      src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/user.png\"\r\n                      alt=\"\" />\r\n                  </div>\r\n                  <div class=\"share-selec-list-text\">{{ Object.values(item)[0] }}</div>\r\n                  <div class=\"share-selec-list-text-tooltip\">{{ Object.values(item)[0] }}</div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"share-selects-item\">\r\n            <button class=\"share-selects-group\"  @click=\"openListRight = !openListRight\">\r\n              <div class=\"share-selects-content\">\r\n                END: {{endChat}}\r\n              </div>\r\n              <div>\r\n                <img class=\"share-image-button\"\r\n                  src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/chevron-down.png\" alt=\"\" />\r\n              </div>\r\n            </button>\r\n            <div class=\"share-select-list\" v-show=\"openListRight\">\r\n                          <ul class=\"share-select-list-elements\">\r\n                <li v-for=\"item, index in historyConversation\" :key='item+index' @click=\"selectConv('end', index, false)\" class=\"share-select-list-element-right \">\r\n                  <div v-if=\"Object.keys(item)[0] == 'Bot'\" class=\"share-list-guide-avatar\">{{initials}}</div>\r\n                  <div v-else>\r\n                    <img class=\"share-image-button\"\r\n                      src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/user.png\"\r\n                      alt=\"\" />\r\n                  </div>\r\n                  <div class=\"share-selec-list-text\">{{ Object.values(item)[0] }}</div>\r\n                  <div class=\"share-selec-list-text-tooltip\">{{ Object.values(item)[0] }}</div>\r\n                </li>\r\n              </ul>\r\n\r\n          </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"list-button\">\r\n        <div class=\"share-button-item\" @click=\"send('email')\">\r\n          <button class=\"share-button\">\r\n            <img class=\"share-image-button\"\r\n              src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/mail.png\" alt=\"\" />\r\n          </button>\r\n          <div class=\"share-button-name\">E-Mail</div>\r\n        </div>\r\n        <div class=\"share-button-item\">\r\n          <button class=\"share-button\" @click=\"send('phone')\">\r\n            <img class=\"share-image-button\"\r\n              src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/sms.png\" alt=\"\" />\r\n          </button>\r\n          <div class=\"share-button-name\">SMS</div>\r\n        </div>\r\n        <div class=\"share-button-item\">\r\n          <button class=\"share-button\" @click=\"whatsapp()\">\r\n            <img class=\"share-image-button\"\r\n              src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/wsp.png\" alt=\"\" />\r\n          </button>\r\n          <div class=\"share-button-name\">WhatsApp</div>\r\n        </div>\r\n        <div class=\"share-button-item\">\r\n          <button class=\"share-button\" @click=\"facebook()\">\r\n            <img class=\"share-image-button\"\r\n              src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/fb.png\" alt=\"\" />\r\n          </button>\r\n          <div class=\"share-button-name\" >Facebook</div>\r\n        </div>\r\n        <div class=\"share-button-item\">\r\n          <button class=\"share-button\" @click=\"twitter()\">\r\n            <img class=\"share-image-button\"\r\n              src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/twitter.png\" alt=\"\" />\r\n          </button>\r\n          <div class=\"share-button-name\">Twitter</div>\r\n        </div>\r\n        <div class=\"share-button-item\">\r\n          <button class=\"share-button\" @click=\"linkedin()\">\r\n            <img class=\"share-image-button\"\r\n              src=\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/linkedin.png\" alt=\"\" />\r\n          </button>\r\n          <div class=\"share-button-name\">LinkedIn</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"share-area-copy\">\r\n        <button class=\"share-area-copy-button\" @click=\"copyUrl()\">COPY URL</button>\r\n      </div>\r\n      <div v-show=\"copied\" class=\"share-area-copy-button-copied\">\r\n        Copied!\r\n      </div>\r\n      <div class=\"share-footer\">\r\n        <button class=\"share-footer-button\" @click=\"send('close')\">\r\n          <span id=\"close\">Close</span>\r\n          <span id=\"spin\" class=\"hidden\">\r\n            <svg style=\"width:30px;height:30px\" class=\"spin-animation\" viewBox=\"0 0 24 24\">\r\n    <path fill=\"#3a8e8b\" d=\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\" />\r\n</svg>\r\n            \r\n          </span>\r\n          \r\n          </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"dot-inactive\"></div>\r\n  </div>",
              "datepickerSuggestedMergefield": "this.get('')",
              "hideCustomComponentAfterSubmit": true,
              "additionalContentCardChangeType": "`append`",
              "autoSuggestionOptionsMergeField": "this.get('')",
              "customTemplateCSSWrapperClassName": "custom-component-cf74c2149a2149e992308c75aa227c27"
            },
            "stepInputData": {
              "dataOutput": "{}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "savedStepId": "\"8a926464-aad9-4724-bd25-fb86ef9ed1b8\"",
              "showBotIcon": "false",
              "textMessage": "``",
              "processError": false,
              "autoSuggestion": "{input: false,isExtraLeg: false}",
              "inputComponent": "`custom`",
              "processTimeout": false,
              "customVariables": "[{varName: `historyConversation`, varValue: `${await this.mergeFields['convString'].get({path: 'data'})}`}, {varName: `urlBase`, varValue: `${await this.mergeFields['sharedUrl'].get({path: 'generatedURL'})}`}, {varName: `guide`, varValue: `${await this.mergeFields['waitRequest'].get({path: 'params.figureFullName'})}`}, {varName: `user`, varValue: `${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`}, {varName: `title`, varValue: `${await this.mergeFields['waitRequest'].get({path: 'params.title'})}`}, {varName: `biography`, varValue: `${await this.mergeFields['waitRequest'].get({path: 'params.biography'})}`}, {varName: `bioimage`, varValue: `${await this.mergeFields['waitRequest'].get({path: 'params.bioimage'})}`}, {varName: `year`, varValue: `${await this.mergeFields['waitRequest'].get({path: 'params.year'})}`}]",
              "timeoutDuration": "`1h`",
              "customTemplateId": "\"buttons_with_css_f3bda400-85e5-4d13-b26f-d7a2abeea90f\"",
              "customTemplateType": "`vue`",
              "customTemplateCSSCode": "\"@import url(\\\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\\\");\\r\\n\\r\\n.share-area {\\r\\n  background: #323232ab;\\r\\n  font-family: \\\"Poppins\\\";\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  bottom: 0;\\r\\n  right: 0;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  z-index: 999999999;\\r\\n  width: 100vw;\\r\\n  height: 100vh;\\r\\n}\\r\\n\\r\\n.share-content {\\r\\n  max-width: 480px;\\r\\n  min-width: 300px;\\r\\n  min-height: 400px;\\r\\n  max-height: 90%;\\r\\n\\r\\n  background: #fbfdfd;\\r\\n  box-shadow: 0px 0px 40px rgba(12, 13, 13, 0.7);\\r\\n  border-radius: 8px;\\r\\n  padding: 18px 20px 2px 20px;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.share-title {\\r\\n  display: flex;\\r\\n  padding-bottom: 20px;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  color: #324045;\\r\\n}\\r\\n\\r\\n.list-button {\\r\\n  display: flex;\\r\\n  gap: 10px;\\r\\n  padding: 20px 0;\\r\\n  overflow-x: auto;\\r\\n  margin: 0 10px;\\r\\n}\\r\\n\\r\\n.share-button {\\r\\n  height: 40px;\\r\\n  width: 52px;\\r\\n  min-height: 40px;\\r\\n  min-width: 52px;\\r\\n  border-radius: 8px;\\r\\n  padding: 0;\\r\\n  border: 1px solid #f1f1f1;\\r\\n  padding: 0 16px;\\r\\n}\\r\\n\\r\\n.share-image-button {\\r\\n  height: 20px;\\r\\n  width: 20px;\\r\\n  object-fit: contain;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.share-area-copy {\\r\\n  max-width: 100%;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  padding: 30px 5%;\\r\\n  gap: 13px;\\r\\n}\\r\\n\\r\\n.share-area-copy-button {\\r\\n  border: none;\\r\\n  font-family: \\\"Poppins\\\";\\r\\n  font-style: normal;\\r\\n  font-weight: 600;\\r\\n  font-size: 12px;\\r\\n  line-height: 18px;\\r\\n  /* identical to box height */\\r\\n  letter-spacing: 0.2em;\\r\\n  text-transform: uppercase;\\r\\n  color: white;\\r\\n  background-color: #32817e;\\r\\n  cursor: pointer;\\r\\n  width: 80%;\\r\\n  height: 40px;\\r\\n  border-radius: 8px;\\r\\n}\\r\\n.share-area-copy-button:hover{\\r\\n  background-color: #3a8e8b;\\r\\n  \\r\\n}\\r\\n.share-area-copy-input {\\r\\n  border: 0px;\\r\\n  border-radius: 6px;\\r\\n  padding: 10px 5px;\\r\\n  font-size: 16px;\\r\\n  line-height: 18px;\\r\\n  /* identical to box height */\\r\\n  background-color: white;\\r\\n  color: #3fa2a0;\\r\\n  cursor: pointer;\\r\\n  width: 70%;\\r\\n}\\r\\n\\r\\n.share-footer {\\r\\n  display: flex;\\r\\n  justify-content: end;\\r\\n  padding: 20px 0 5px;\\r\\n  background: none;\\r\\n}\\r\\n\\r\\n.share-footer-button {\\r\\n  border: none;\\r\\n  font-family: \\\"Poppins\\\";\\r\\n  font-style: normal;\\r\\n  font-weight: 600;\\r\\n  font-size: 12px;\\r\\n  line-height: 18px;\\r\\n  /* identical to box height */\\r\\n  text-align: right;\\r\\n  letter-spacing: 0.2em;\\r\\n  text-transform: uppercase;\\r\\n  color: #3fa2a0;\\r\\n  cursor: pointer;\\r\\n  max-width: 20%;\\r\\n  background: none;\\r\\n}\\r\\n\\r\\n.list-button::-webkit-scrollbar {\\r\\n  width: 0px !important;\\r\\n  height: 5px !important;\\r\\n}\\r\\n\\r\\n.list-button::-webkit-scrollbar-track {\\r\\n  box-shadow: inset 0 0 6px #e7e7e7 !important;\\r\\n}\\r\\n\\r\\n.list-button::-webkit-scrollbar-thumb {\\r\\n  background-color: #d6d7d9 !important;\\r\\n  outline: 0px solid #aeaeae !important;\\r\\n}\\r\\n\\r\\n.share-button-name {\\r\\n  visibility: hidden;\\r\\n  position: absolute;\\r\\n  text-align: center;\\r\\n  color: white;\\r\\n  background: #0B2B29;\\r\\nborder-radius: 4px;\\r\\n  font-size: 10px;\\r\\n  padding: 5px;\\r\\n  top: -10px;\\r\\n  left: 15px;\\r\\n  z-index: 999;\\r\\n  width: 115%;\\r\\n}\\r\\n\\r\\n.share-button:hover {\\r\\n  background: #85E1DF;\\r\\n}\\r\\n\\r\\n.share-button-item:hover .share-image-button {\\r\\n  filter: contrast(0%);\\r\\n\\r\\n}\\r\\n.share-button-item:hover .share-button-name {\\r\\n  visibility: visible;\\r\\n}\\r\\n\\r\\n.share-button-item {\\r\\n  position: relative;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.button-close {\\r\\n  color: #82898c;\\r\\n  font-size: 32px;\\r\\n  font-weight: lighter;\\r\\n  cursor: pointer;\\r\\n  border: none;\\r\\n  background: none;\\r\\n}\\r\\n\\r\\n.share-check-label {\\r\\n  font-family: \\\"Poppins\\\";\\r\\n  font-style: normal;\\r\\n  font-weight: 500;\\r\\n  font-size: 12px;\\r\\n  line-height: 18px;\\r\\n\\r\\n  letter-spacing: 0.2em;\\r\\n  text-transform: uppercase;\\r\\n\\r\\n  color: #aeb0b5;\\r\\n}\\r\\n\\r\\n.share-check-input {\\r\\n  border: 1px solid #d6d7d9;\\r\\n  width: 24px;\\r\\n  height: 24px;\\r\\n\\r\\n  border-radius: 8px;\\r\\n}\\r\\n.share-check-input-selected{\\r\\n  border: 1px solid #d6d7d9;\\r\\n  width: 24px;\\r\\n  height: 24px;\\r\\nbackground: #32817E;\\r\\n  border-radius: 8px;\\r\\n  \\r\\n}\\r\\n\\r\\n.share-check-input-selected-icon{\\r\\n  margin-top: 1px;\\r\\n    margin-left: 3px;\\r\\n}\\r\\n\\r\\n.share-input-group {\\r\\n  display: flex;\\r\\n  justify-content: start;\\r\\n  align-items: center;\\r\\n  gap: 10px;\\r\\n}\\r\\n\\r\\n.share-selects-full-group {\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  flex-wrap: wrap;\\r\\n  gap: 10px;\\r\\n  padding: 10px 0;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.share-selects-item {\\r\\n  width: 200px;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.share-selects-group {\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  background: #FBFDFD;\\r\\n  /* background/gray-lighter */\\r\\n  padding: 10px;\\r\\n  border: 1px solid #D6D7D9;\\r\\n  border-radius: 8px;\\r\\n  width: 200px;\\r\\n  \\r\\n}\\r\\n\\r\\n.share-selects-content {\\r\\n\\r\\n  font-family: 'Poppins';\\r\\n  font-style: normal;\\r\\n  font-weight: 600;\\r\\n  font-size: 12px;\\r\\n  line-height: 18px;\\r\\n  /* identical to box height */\\r\\n  text-overflow: ellipsis;\\r\\n  white-space: nowrap;\\r\\n    overflow: hidden;\\r\\n    max-width: 200px;\\r\\n  letter-spacing: 0.2em;\\r\\n  text-transform: uppercase;\\r\\n\\r\\n  /* background/gray-medium */\\r\\n\\r\\n  color: #82898C;\\r\\n}\\r\\n\\r\\n.share-select-list {\\r\\n  position: absolute;\\r\\n  background: #FBFDFD;\\r\\n  box-shadow: 0px 8px 16px rgba(21, 29, 28, 0.16);\\r\\n  border-radius: 8px;\\r\\n  left: 3px;\\r\\n  top: 57px;\\r\\n  z-index: 999;\\r\\n  width: 220px;\\r\\n  max-height: 276px;\\r\\n  padding: 10px;\\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n.share-select-list-elements>li {\\r\\n  display: flex;\\r\\n  gap: 10px;\\r\\n  justify-content: start;\\r\\n  padding: 6px 5px;\\r\\n  line-height: 18px;\\r\\n  font-family: 'Poppins';\\r\\nfont-style: normal;\\r\\nfont-weight: 400;\\r\\nfont-size: 14px;\\r\\nline-height: 21px;\\r\\ndisplay: flex;\\r\\nalign-items: center;\\r\\ncolor: #324045;\\r\\n}\\r\\n.share-active-element:hover, .share-active-element:hover>div {\\r\\n  font-family: 'Poppins';\\r\\n  background: #F1F1F1;\\r\\n  border-radius: 4px;\\r\\n  font-style: normal;\\r\\n  font-weight: 600;\\r\\n  color: #3FA2A0;\\r\\n      text-overflow: initial;\\r\\n    white-space: pre-wrap;\\r\\n    overflow: visible;\\r\\n}\\r\\n.share-list-guide-avatar{\\r\\n  \\r\\n  font-family: 'Poppins';\\r\\n  font-style: normal;\\r\\n  font-weight: 600;\\r\\n  font-size: 12px;\\r\\n  line-height: 18px;\\r\\n  \\r\\n  letter-spacing: 0.2em;\\r\\n  text-transform: uppercase;\\r\\n    \\r\\n  color: #3FA2A0;\\r\\n}\\r\\n\\r\\n.share-select-list-elements{\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.share-selec-list-text{\\r\\n    text-overflow: ellipsis;\\r\\n    white-space: nowrap;\\r\\n    width: 155px;\\r\\n    overflow: hidden;\\r\\n}\\r\\n  \\r\\n  .share-selec-list-text-tooltip{\\r\\n    visibility: hidden;\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    \\r\\n  }\\r\\n  \\r\\n  \\r\\n  \\r\\n  \\r\\n  .share-select-list-elements>li:hover:hover .share-selec-list-text-tooltip {\\r\\n  visibility: hidden;\\r\\n}\\r\\n.share-area-copy-button-copied{\\r\\n    color: #32817E;\\r\\n    position: absolute;\\r\\n    bottom: 95px;\\r\\n    right: 0px;\\r\\n    left: 70%;\\r\\n}\\r\\n\\r\\n.spin-animation{\\r\\n   \\tanimation: rotate-animation 3s infinite linear;\\r\\n}\\r\\n\\r\\n@keyframes rotate-animation {\\r\\n  from { transform: rotate(0); }\\r\\n  to { transform: rotate(-360deg); }\\r\\n}\\r\\n.hidden{\\r\\n  visibility: hidden\\r\\n}\\r\\n\\r\\n\\r\\n@media (max-width: 600px) {\\r\\n\\r\\n.share-selects-content, .share-selects-group,.share-selects-item,{\\r\\n  width:100%;\\r\\n  max-width: 100%;\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"",
              "customTempalateScripts": "[]",
              "customTemplateVueScript": "async () => {\n    return {\n  template: {\n    data() {\n      return {\n      openListLeft: false,\n      openListRight: false,\n      newURL: '',\n      initials: 'TG',\n      startChat: '',\n      endChat: '',\n      startIndex: 0,\n      endIndex: 99999,\n      shareAll: true,\n      copied: false\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n     mounted() {\n\n      window.parent.postMessage(\"unselectShare\", '*');\n\n    this.newURL = this.urlBase.replaceAll('/', '%2F');\n    this.newURL = this.newURL.replaceAll(':', '%3A');\n    this.historyConversation = JSON.parse(this.historyConversation);\n    let init = this.guide.split(' ');\n    this.initials = init.lengt > 1 ? init[0]+init[1] : init[0].substring(0,2);\n    setTimeout(()=>{\n      this.selectConv('start', 0, true);\n      this.endIndex = this.historyConversation.length -1;\n      this.selectConv('end', this.historyConversation.length -1, true);\n    }, 1000)\n  \n  },\n  methods: {\n    selectConv(type, index, all){\n      if(type == 'start' && index > this.endIndex) return;\n      if(type == 'end' && index < this.startIndex) return;\n      this.shareAll = all;\n      type == 'start' ? this.startChat = Object.values(this.historyConversation[index])[0] : this.endChat = Object.values(this.historyConversation[index])[0];\n      if (type == 'start') {\n        this.startIndex= index;\n        const items = document.getElementsByClassName('share-select-list-element-right')\n        Array.prototype.forEach.call(items, function(el, ind) {\n          if (ind > index)\n          el.classList.add('share-active-element')\n          else\n          el.classList.remove('share-active-element')\n        })        \n      } else {\n        this.endIndex= index;\n        const items = document.getElementsByClassName('share-select-list-element-left')\n        Array.prototype.forEach.call(items, function(el, ind) {\n          if (ind < index)\n          el.classList.add('share-active-element')\n          else\n          el.classList.remove('share-active-element')\n          \n        })        \n \n        \n      }\n      \n   this.openListLeft = false;\n   this.openListRight = false;\n    },\n    shareAllConv(){\n      this.selectConv('start', 0,this.shareAll);\n      this.endIndex = this.historyConversation.length -1;\n      this.selectConv('end', this.historyConversation.length -1,this.shareAll);\n      this.shareAll = !this.shareAll;\n    },\n    twitter() {\n      let link = 'https://twitter.com/intent/tweet?text=Your%20Contact%20' + this.user + '%20is%20sharing%20their%20conversation%20with%20' + this.guide + '%20%20' + this.newURL + '%20&hashtags=AI,TimeMachine';\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n    facebook() {\n      let link = 'https://www.facebook.com/sharer/sharer.php?u=' + this.newURL;\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n\n    linkedin() {\n      let link = 'https://www.linkedin.com/sharing/share-offsite/?url=' + this.newURL;\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n    whatsapp() {\n      let link = 'https://wa.me/?text=Your%20Contact%20' + this.user + '%20is%20sharing%20their%20conversation%20with%20' + this.guide + '%20%20' + this.newURL;\n      window.open(link, \"_blank\");\n      this.send('exit');\n    },\n    copyUrl(){\n    let copyTextarea = document.createElement(\"textarea\");\n    copyTextarea.style.position = \"fixed\";\n    copyTextarea.style.opacity = \"0\";\n    copyTextarea.textContent = this.urlBase;\n \n    document.body.appendChild(copyTextarea);\n    copyTextarea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(copyTextarea);\n    this.copied = true;\n    setTimeout(()=>{\n      this.copied = false;\n    }, 5000)\n    this.send('exit');\n\n    },\n\n    send(msg) {\n      let close = document.getElementById('close');\n      close.classList.add('hidden')\n      let spin = document.getElementById('spin');\n      spin.classList.remove('hidden')\n      \n\n      \n      /**\n       * `message` field will be sent as user reply and will NOT be stored in mergeField\n       * `myData` field will be stored in mergeField\n      **/\n      let a = this.historyConversation.slice(this.startIndex, this.endIndex+1);\n      if(this.startIndex %2 == 1){\n        let c  = {\"Bot\": ''};\n        a.unshift(c)\n      }\n      const bio = {\n        figureFullName:this.guide,\n        title: this.title,\n        biography: this.biography,\n        bioimage: this.bioimage,\n        year: this.year\n      }\n      let b = \n      {\n        \"conv\": a,\n        \"init\": this.startIndex,\n        \"bioCard\": bio,\n        \"friend\": this.user,\n      }\n      \n      window.parent.postMessage(\"enableShare\", '*');\n      this.sendMessage({\n        message: \"\",\n        myData: msg,\n        newConv: b\n      });\n    }\n   }\n  }\n}\n}",
              "autoSubmitCustomTemplate": "false",
              "customTemplateCompiledCSS": "\"@import url(\\\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\\\");\\n.custom-component-cf74c2149a2149e992308c75aa227c27 { }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area {\\n    background: #323232ab;\\n    font-family: \\\"Poppins\\\";\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    bottom: 0;\\n    right: 0;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    z-index: 999999999;\\n    width: 100vw;\\n    height: 100vh; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-content {\\n    max-width: 480px;\\n    min-width: 300px;\\n    min-height: 400px;\\n    max-height: 90%;\\n    background: #fbfdfd;\\n    box-shadow: 0px 0px 40px rgba(12, 13, 13, 0.7);\\n    border-radius: 8px;\\n    padding: 18px 20px 2px 20px;\\n    position: relative; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-title {\\n    display: flex;\\n    padding-bottom: 20px;\\n    justify-content: space-between;\\n    align-items: center;\\n    color: #324045; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button {\\n    display: flex;\\n    gap: 10px;\\n    padding: 20px 0;\\n    overflow-x: auto;\\n    margin: 0 10px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button {\\n    height: 40px;\\n    width: 52px;\\n    min-height: 40px;\\n    min-width: 52px;\\n    border-radius: 8px;\\n    padding: 0;\\n    border: 1px solid #f1f1f1;\\n    padding: 0 16px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-image-button {\\n    height: 20px;\\n    width: 20px;\\n    object-fit: contain;\\n    cursor: pointer; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy {\\n    max-width: 100%;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 30px 5%;\\n    gap: 13px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-button {\\n    border: none;\\n    font-family: \\\"Poppins\\\";\\n    font-style: normal;\\n    font-weight: 600;\\n    font-size: 12px;\\n    line-height: 18px;\\n    /* identical to box height */\\n    letter-spacing: 0.2em;\\n    text-transform: uppercase;\\n    color: white;\\n    background-color: #32817e;\\n    cursor: pointer;\\n    width: 80%;\\n    height: 40px;\\n    border-radius: 8px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-button:hover {\\n    background-color: #3a8e8b; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-input {\\n    border: 0px;\\n    border-radius: 6px;\\n    padding: 10px 5px;\\n    font-size: 16px;\\n    line-height: 18px;\\n    /* identical to box height */\\n    background-color: white;\\n    color: #3fa2a0;\\n    cursor: pointer;\\n    width: 70%; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-footer {\\n    display: flex;\\n    justify-content: end;\\n    padding: 20px 0 5px;\\n    background: none; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-footer-button {\\n    border: none;\\n    font-family: \\\"Poppins\\\";\\n    font-style: normal;\\n    font-weight: 600;\\n    font-size: 12px;\\n    line-height: 18px;\\n    /* identical to box height */\\n    text-align: right;\\n    letter-spacing: 0.2em;\\n    text-transform: uppercase;\\n    color: #3fa2a0;\\n    cursor: pointer;\\n    max-width: 20%;\\n    background: none; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button::-webkit-scrollbar {\\n    width: 0px !important;\\n    height: 5px !important; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button::-webkit-scrollbar-track {\\n    box-shadow: inset 0 0 6px #e7e7e7 !important; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .list-button::-webkit-scrollbar-thumb {\\n    background-color: #d6d7d9 !important;\\n    outline: 0px solid #aeaeae !important; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-name {\\n    visibility: hidden;\\n    position: absolute;\\n    text-align: center;\\n    color: white;\\n    background: #0B2B29;\\n    border-radius: 4px;\\n    font-size: 10px;\\n    padding: 5px;\\n    top: -10px;\\n    left: 15px;\\n    z-index: 999;\\n    width: 115%; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button:hover {\\n    background: #85E1DF; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-item:hover .share-image-button {\\n    filter: contrast(0%); }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-item:hover .share-button-name {\\n    visibility: visible; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-button-item {\\n    position: relative;\\n    cursor: pointer; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .button-close {\\n    color: #82898c;\\n    font-size: 32px;\\n    font-weight: lighter;\\n    cursor: pointer;\\n    border: none;\\n    background: none; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-label {\\n    font-family: \\\"Poppins\\\";\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 12px;\\n    line-height: 18px;\\n    letter-spacing: 0.2em;\\n    text-transform: uppercase;\\n    color: #aeb0b5; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-input {\\n    border: 1px solid #d6d7d9;\\n    width: 24px;\\n    height: 24px;\\n    border-radius: 8px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-input-selected {\\n    border: 1px solid #d6d7d9;\\n    width: 24px;\\n    height: 24px;\\n    background: #32817E;\\n    border-radius: 8px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-check-input-selected-icon {\\n    margin-top: 1px;\\n    margin-left: 3px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-input-group {\\n    display: flex;\\n    justify-content: start;\\n    align-items: center;\\n    gap: 10px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-full-group {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    flex-wrap: wrap;\\n    gap: 10px;\\n    padding: 10px 0;\\n    position: relative; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-item {\\n    width: 200px;\\n    position: relative; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-group {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    background: #FBFDFD;\\n    /* background/gray-lighter */\\n    padding: 10px;\\n    border: 1px solid #D6D7D9;\\n    border-radius: 8px;\\n    width: 200px; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-content {\\n    font-family: 'Poppins';\\n    font-style: normal;\\n    font-weight: 600;\\n    font-size: 12px;\\n    line-height: 18px;\\n    /* identical to box height */\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    max-width: 200px;\\n    letter-spacing: 0.2em;\\n    text-transform: uppercase;\\n    /* background/gray-medium */\\n    color: #82898C; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list {\\n    position: absolute;\\n    background: #FBFDFD;\\n    box-shadow: 0px 8px 16px rgba(21, 29, 28, 0.16);\\n    border-radius: 8px;\\n    left: 3px;\\n    top: 57px;\\n    z-index: 999;\\n    width: 220px;\\n    max-height: 276px;\\n    padding: 10px;\\n    overflow-y: auto; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list-elements > li {\\n    display: flex;\\n    gap: 10px;\\n    justify-content: start;\\n    padding: 6px 5px;\\n    line-height: 18px;\\n    font-family: 'Poppins';\\n    font-style: normal;\\n    font-weight: 400;\\n    font-size: 14px;\\n    line-height: 21px;\\n    display: flex;\\n    align-items: center;\\n    color: #324045; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-active-element:hover, .custom-component-cf74c2149a2149e992308c75aa227c27 .share-active-element:hover > div {\\n    font-family: 'Poppins';\\n    background: #F1F1F1;\\n    border-radius: 4px;\\n    font-style: normal;\\n    font-weight: 600;\\n    color: #3FA2A0;\\n    text-overflow: initial;\\n    white-space: pre-wrap;\\n    overflow: visible; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-list-guide-avatar {\\n    font-family: 'Poppins';\\n    font-style: normal;\\n    font-weight: 600;\\n    font-size: 12px;\\n    line-height: 18px;\\n    letter-spacing: 0.2em;\\n    text-transform: uppercase;\\n    color: #3FA2A0; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list-elements {\\n    padding: 0; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selec-list-text {\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    width: 155px;\\n    overflow: hidden; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selec-list-text-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    top: 0;\\n    left: 0; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-select-list-elements > li:hover:hover .share-selec-list-text-tooltip {\\n    visibility: hidden; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .share-area-copy-button-copied {\\n    color: #32817E;\\n    position: absolute;\\n    bottom: 95px;\\n    right: 0px;\\n    left: 70%; }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .spin-animation {\\n    animation: rotate-animation 3s infinite linear; }\\n\\n@keyframes rotate-animation {\\n  from {\\n    transform: rotate(0); }\\n  to {\\n    transform: rotate(-360deg); } }\\n  .custom-component-cf74c2149a2149e992308c75aa227c27 .hidden {\\n    visibility: hidden; }\\n  @media (max-width: 600px) {\\n    .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-content, .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-group, .custom-component-cf74c2149a2149e992308c75aa227c27 .share-selects-item {\\n      width: 100%;\\n      max-width: 100%;\\n      text-align: left; } }\\n\"",
              "showCustomComponentInMessage": "false",
              "customTemplateVueHtmlTemplate": "\"  <div class=\\\"share-area\\\">\\r\\n    <div class=\\\"share-content\\\">\\r\\n      <div class=\\\"share-title\\\">\\r\\n        <div>Share</div>\\r\\n        <button class=\\\" button-close\\\" @click=\\\"send('close')\\\">&times;</button>\\r\\n      </div>\\r\\n      <div>\\r\\n        <div class=\\\"share-input-group\\\">\\r\\n            <div class=\\\"share-check-input-selected\\\"  @click=\\\"shareAllConv()\\\" v-if=\\\"shareAll\\\">\\r\\n              \\r\\n                <svg\\r\\n                class=\\\"share-check-input-selected-icon\\\"\\r\\n    width=\\\"16\\\"\\r\\n    height=\\\"20\\\"\\r\\n    viewBox=\\\"0 0 14 11\\\"\\r\\n    fill=\\\"none\\\"\\r\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n  >\\r\\n    <path\\r\\n      fill-rule=\\\"evenodd\\\"\\r\\n      clip-rule=\\\"evenodd\\\"\\r\\n      d=\\\"M13.7071 0.483811C14.0976 0.874335 14.0976 1.5075 13.7071 1.89802L5.70711 9.89802C5.31658 10.2885 4.68342 10.2885 4.29289 9.89802L0.292893 5.89802C-0.0976311 5.5075 -0.0976311 4.87434 0.292893 4.48381C0.683417 4.09329 1.31658 4.09329 1.70711 4.48381L5 7.7767L12.2929 0.483811C12.6834 0.0932869 13.3166 0.0932869 13.7071 0.483811Z\\\"\\r\\n      fill=\\\"white\\\"\\r\\n    />\\r\\n  </svg>\\r\\n\\r\\n            </div>\\r\\n          <div v-else class=\\\"share-check-input\\\" @click=\\\"shareAllConv()\\\">\\r\\n          </div>\\r\\n          <label for=\\\"share-checkbox\\\" class=\\\"share-check-label\\\" @click=\\\"shareAllConv()\\\">Share complete conversation</label>\\r\\n        </div>\\r\\n        <div class=\\\"share-selects-full-group\\\">\\r\\n          <div class=\\\"share-selects-item\\\">\\r\\n            <button class=\\\"share-selects-group\\\" @click=\\\"openListLeft = !openListLeft\\\">\\r\\n              <div class=\\\"share-selects-content\\\">\\r\\n                START: {{startChat}}\\r\\n              </div>\\r\\n              <div>\\r\\n                <img class=\\\"share-image-button\\\"\\r\\n                  src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/chevron-down.png\\\"\\r\\n                  alt=\\\"\\\" />\\r\\n              </div>\\r\\n            </button>\\r\\n            <div class=\\\"share-select-list\\\" v-show=\\\"openListLeft\\\">\\r\\n\\r\\n              <ul class=\\\"share-select-list-elements\\\">\\r\\n                <li v-for=\\\"item, index in historyConversation\\\" :key='item+index' @click=\\\"selectConv('start', index, false)\\\" class=\\\"share-select-list-element-left \\\">\\r\\n                  <div v-if=\\\"Object.keys(item)[0] == 'Bot'\\\" class=\\\"share-list-guide-avatar\\\">{{initials}}</div>\\r\\n                  <div v-else>\\r\\n                    <img class=\\\"share-image-button\\\"\\r\\n                      src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/user.png\\\"\\r\\n                      alt=\\\"\\\" />\\r\\n                  </div>\\r\\n                  <div class=\\\"share-selec-list-text\\\">{{ Object.values(item)[0] }}</div>\\r\\n                  <div class=\\\"share-selec-list-text-tooltip\\\">{{ Object.values(item)[0] }}</div>\\r\\n                </li>\\r\\n              </ul>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"share-selects-item\\\">\\r\\n            <button class=\\\"share-selects-group\\\"  @click=\\\"openListRight = !openListRight\\\">\\r\\n              <div class=\\\"share-selects-content\\\">\\r\\n                END: {{endChat}}\\r\\n              </div>\\r\\n              <div>\\r\\n                <img class=\\\"share-image-button\\\"\\r\\n                  src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/chevron-down.png\\\" alt=\\\"\\\" />\\r\\n              </div>\\r\\n            </button>\\r\\n            <div class=\\\"share-select-list\\\" v-show=\\\"openListRight\\\">\\r\\n                          <ul class=\\\"share-select-list-elements\\\">\\r\\n                <li v-for=\\\"item, index in historyConversation\\\" :key='item+index' @click=\\\"selectConv('end', index, false)\\\" class=\\\"share-select-list-element-right \\\">\\r\\n                  <div v-if=\\\"Object.keys(item)[0] == 'Bot'\\\" class=\\\"share-list-guide-avatar\\\">{{initials}}</div>\\r\\n                  <div v-else>\\r\\n                    <img class=\\\"share-image-button\\\"\\r\\n                      src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/user.png\\\"\\r\\n                      alt=\\\"\\\" />\\r\\n                  </div>\\r\\n                  <div class=\\\"share-selec-list-text\\\">{{ Object.values(item)[0] }}</div>\\r\\n                  <div class=\\\"share-selec-list-text-tooltip\\\">{{ Object.values(item)[0] }}</div>\\r\\n                </li>\\r\\n              </ul>\\r\\n\\r\\n          </div>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"list-button\\\">\\r\\n        <div class=\\\"share-button-item\\\" @click=\\\"send('email')\\\">\\r\\n          <button class=\\\"share-button\\\">\\r\\n            <img class=\\\"share-image-button\\\"\\r\\n              src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/mail.png\\\" alt=\\\"\\\" />\\r\\n          </button>\\r\\n          <div class=\\\"share-button-name\\\">E-Mail</div>\\r\\n        </div>\\r\\n        <div class=\\\"share-button-item\\\">\\r\\n          <button class=\\\"share-button\\\" @click=\\\"send('phone')\\\">\\r\\n            <img class=\\\"share-image-button\\\"\\r\\n              src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/sms.png\\\" alt=\\\"\\\" />\\r\\n          </button>\\r\\n          <div class=\\\"share-button-name\\\">SMS</div>\\r\\n        </div>\\r\\n        <div class=\\\"share-button-item\\\">\\r\\n          <button class=\\\"share-button\\\" @click=\\\"whatsapp()\\\">\\r\\n            <img class=\\\"share-image-button\\\"\\r\\n              src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/wsp.png\\\" alt=\\\"\\\" />\\r\\n          </button>\\r\\n          <div class=\\\"share-button-name\\\">WhatsApp</div>\\r\\n        </div>\\r\\n        <div class=\\\"share-button-item\\\">\\r\\n          <button class=\\\"share-button\\\" @click=\\\"facebook()\\\">\\r\\n            <img class=\\\"share-image-button\\\"\\r\\n              src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/fb.png\\\" alt=\\\"\\\" />\\r\\n          </button>\\r\\n          <div class=\\\"share-button-name\\\" >Facebook</div>\\r\\n        </div>\\r\\n        <div class=\\\"share-button-item\\\">\\r\\n          <button class=\\\"share-button\\\" @click=\\\"twitter()\\\">\\r\\n            <img class=\\\"share-image-button\\\"\\r\\n              src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/twitter.png\\\" alt=\\\"\\\" />\\r\\n          </button>\\r\\n          <div class=\\\"share-button-name\\\">Twitter</div>\\r\\n        </div>\\r\\n        <div class=\\\"share-button-item\\\">\\r\\n          <button class=\\\"share-button\\\" @click=\\\"linkedin()\\\">\\r\\n            <img class=\\\"share-image-button\\\"\\r\\n              src=\\\"https://dev-timemachine-static-site.s3.us-west-2.amazonaws.com/assets/share/linkedin.png\\\" alt=\\\"\\\" />\\r\\n          </button>\\r\\n          <div class=\\\"share-button-name\\\">LinkedIn</div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"share-area-copy\\\">\\r\\n        <button class=\\\"share-area-copy-button\\\" @click=\\\"copyUrl()\\\">COPY URL</button>\\r\\n      </div>\\r\\n      <div v-show=\\\"copied\\\" class=\\\"share-area-copy-button-copied\\\">\\r\\n        Copied!\\r\\n      </div>\\r\\n      <div class=\\\"share-footer\\\">\\r\\n        <button class=\\\"share-footer-button\\\" @click=\\\"send('close')\\\">\\r\\n          <span id=\\\"close\\\">Close</span>\\r\\n          <span id=\\\"spin\\\" class=\\\"hidden\\\">\\r\\n            <svg style=\\\"width:30px;height:30px\\\" class=\\\"spin-animation\\\" viewBox=\\\"0 0 24 24\\\">\\r\\n    <path fill=\\\"#3a8e8b\\\" d=\\\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\\\" />\\r\\n</svg>\\r\\n            \\r\\n          </span>\\r\\n          \\r\\n          </button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"dot-inactive\\\"></div>\\r\\n  </div>\"",
              "hideCustomComponentAfterSubmit": "true",
              "customTemplateCSSWrapperClassName": "\"custom-component-cf74c2149a2149e992308c75aa227c27\""
            },
            "outputExample": {},
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "requestTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Request Transcript",
                "enabled": true
              },
              "responseTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Response Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "8c4c7db0-f75d-4b4b-bb20-bbf2f51c8431",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "8fc48bf1-4a4b-43fc-b8ea-8d0525ce76d4",
            "label": "addValue",
            "icon": "database",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "d042fa69-0da9-440b-90da-849d786ec514",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "b56224fc-62e3-4da5-af80-74115fcdd689",
                  "condition": ""
                }
              ],
              "value": "JSON.stringify(await this.mergeFields['loadedData'].get({path: 'events'}))",
              "prefix": "``",
              "ttl_label": "Never",
              "collection": "`${await this.botConfig['stepEventsCollection'].get()}`",
              "__codeModes": {},
              "processError": false,
              "ttl_value_after": "`24h`",
              "ttl_value_until": null
            },
            "stepInputData": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "value": "JSON.stringify(await this.mergeFields['loadedData'].get({path: 'events'}))",
              "prefix": "``",
              "ttl_label": "\"Never\"",
              "collection": "`${await this.botConfig['stepEventsCollection'].get()}`",
              "processError": false,
              "ttl_value_after": "`24h`",
              "ttl_value_until": "null"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "920ab4e5-d3ad-4028-8e3d-64a2d376e9c7",
            "label": "addNewValue",
            "icon": "database",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "d042fa69-0da9-440b-90da-849d786ec514",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "e5bb172b-ddce-4568-b2c9-70e70c001d58",
                  "condition": ""
                }
              ],
              "value": "JSON.stringify(await this.mergeFields['reportingData'].get({path: 'events'}))",
              "prefix": "``",
              "ttl_label": "Never",
              "collection": "`${await this.botConfig['stepEventsCollection'].get()}`",
              "__codeModes": {},
              "processError": false,
              "ttl_value_after": "`24h`",
              "ttl_value_until": null
            },
            "stepInputData": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "value": "JSON.stringify(await this.mergeFields['reportingData'].get({path: 'events'}))",
              "prefix": "``",
              "ttl_label": "\"Never\"",
              "collection": "`${await this.botConfig['stepEventsCollection'].get()}`",
              "processError": false,
              "ttl_value_after": "`24h`",
              "ttl_value_until": "null"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "923e96a9-c6c8-4bd0-96c8-a2777471279e",
            "label": "generateImageMetaTags",
            "icon": "convert_html_to_pdf",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "557b57fe-ff2e-486e-ae50-954e6ad128d9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "869b80e7-ff13-410c-88ac-40b21df09067",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "name": "generateImageMetaTags",
                "type": "session"
              },
              "newName": "await this.mergeFields['waitRequest'].get({path: 'params.wikiName'})",
              "filePath": "`bioCardImages/`",
              "fileType": "image",
              "useFiles": true,
              "assetsUrl": "/api/v1/assets",
              "authToken": "AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BTZvWIxJgs3q9aiBjG4QhAwAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMPP6EUsHS+mfBRTTmAgEQgIIBGyKk1AMw1vbIVJpHKalRetLLq3cEFR5SYHeqmQXMbS77Iv+Fc/AsyGoEZBAWwkCvjpepdNH9yC61iHVYTOCxOSd71PxjcQEM58JHgcxT/7NEai/ccHHXPimReK+1YO0vvTaYVtaJ/Z0kL+KmrR9Q72MrDevvIqYBv63NS/CtOKWoGBILobSrHiB4G3qgZJzotFNegJDuMO6eHruzWAD3C1tVq/bFFwFdzyoEEwDuarCeOMfyGwc+pM931rHfpmcY/6yp2NAW5AEJXcnvZdVKbvg6E5/4le26qzn0kGyN5mmNRVTJ+4tTinQUQa2yeUpD6rhJjcU8//JsZn7rgohpzQcQB/CF8OQWAa1gLVQp0v4AADrCqK7F2G4E9XsAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOamcyT1RBNU1qaDkuSFFnbnY4dUtWUkNZbHVMdGhrRGlQYlZOeDFhRWJCTkpGOENPaEVZaWJnRQ==",
              "imageSize": "full",
              "topMargin": "``",
              "urlSource": "``",
              "htmlSource": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      style=\"display: flex; filter: grayscale(1); width: 300px; height: 300px\"\r\n    >\r\n      <img\r\n        style=\"object-fit: cover; width: 300px; height: 300px\"\r\n        src=\"${await this.mergeFields['waitRequest'].get({path: 'params.bioimage'})}\"\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n  </body>\r\n</html>\r\n",
              "leftMargin": "``",
              "__codeModes": {},
              "pdfViewType": "predefined",
              "rightMargin": "``",
              "bottomMargin": "``",
              "imageQuality": "80",
              "pdfSizeUnits": "px",
              "processError": false,
              "imageFileType": "png",
              "fileSourceType": "html",
              "footerTemplate": "``",
              "headerTemplate": "``",
              "pdfCustomWidth": "``",
              "backgroundToPdf": true,
              "isMobileVersion": false,
              "loadWaitingTime": "`3 sec`",
              "makeFilePrivate": false,
              "pdfCustomHeight": "``",
              "backgroundToImage": false,
              "pdfPredefinedSize": "`Letter`",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "58c7a475-2a25-4d8d-ac97-79b56e69a2d0",
                "condition": ""
              },
              "websiteResolution": "custom",
              "fullPageScreenShot": false,
              "imageSizeClipWidth": "``",
              "imageSizeClipHeight": "``",
              "websitePrintVersion": false,
              "imageSizeClipXOffset": "``",
              "imageSizeClipYOffset": "``",
              "imageSizeCustomWidth": "``",
              "maxNavigationTimeout": "`10 sec`",
              "customResolutionWidth": "`300`",
              "imageSizeCustomHeight": "``",
              "customResolutionHeight": "`300`",
              "pdfPredefinedOrientation": "`landscape`"
            },
            "stepInputData": {
              "newName": "await this.mergeFields['waitRequest'].get({path: 'params.wikiName'})",
              "filePath": "`bioCardImages/`",
              "fileType": "\"image\"",
              "useFiles": true,
              "assetsUrl": "\"/api/v1/assets\"",
              "authToken": "\"AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BTZvWIxJgs3q9aiBjG4QhAwAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMPP6EUsHS+mfBRTTmAgEQgIIBGyKk1AMw1vbIVJpHKalRetLLq3cEFR5SYHeqmQXMbS77Iv+Fc/AsyGoEZBAWwkCvjpepdNH9yC61iHVYTOCxOSd71PxjcQEM58JHgcxT/7NEai/ccHHXPimReK+1YO0vvTaYVtaJ/Z0kL+KmrR9Q72MrDevvIqYBv63NS/CtOKWoGBILobSrHiB4G3qgZJzotFNegJDuMO6eHruzWAD3C1tVq/bFFwFdzyoEEwDuarCeOMfyGwc+pM931rHfpmcY/6yp2NAW5AEJXcnvZdVKbvg6E5/4le26qzn0kGyN5mmNRVTJ+4tTinQUQa2yeUpD6rhJjcU8//JsZn7rgohpzQcQB/CF8OQWAa1gLVQp0v4AADrCqK7F2G4E9XsAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJMllXSmlZMk5qTVMweU1UVmhMVFE1WW1JdFlUTTVaaTAwTlRka00yWmhPVEUyTm1ZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSmtNVGhoTldaaFl5MHhNVFE1TFRRMU16UXRZV00wT1Mxa056UmlZekJoTm1NNVpUTWlMQ0pwWVhRaU9qRTJOamcyT1RBNU1qaDkuSFFnbnY4dUtWUkNZbHVMdGhrRGlQYlZOeDFhRWJCTkpGOENPaEVZaWJnRQ==\"",
              "imageSize": "\"full\"",
              "topMargin": "``",
              "urlSource": "``",
              "htmlSource": "`<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <div\r\n      style=\"display: flex; filter: grayscale(1); width: 300px; height: 300px\"\r\n    >\r\n      <img\r\n        style=\"object-fit: cover; width: 300px; height: 300px\"\r\n        src=\"${await this.mergeFields['waitRequest'].get({path: 'params.bioimage'})}\"\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n  </body>\r\n</html>\r\n`",
              "leftMargin": "``",
              "pdfViewType": "\"predefined\"",
              "rightMargin": "``",
              "bottomMargin": "``",
              "imageQuality": "\"80\"",
              "pdfSizeUnits": "\"px\"",
              "processError": false,
              "imageFileType": "\"png\"",
              "fileSourceType": "\"html\"",
              "footerTemplate": "``",
              "headerTemplate": "``",
              "pdfCustomWidth": "``",
              "backgroundToPdf": true,
              "isMobileVersion": false,
              "loadWaitingTime": "`3 sec`",
              "pdfCustomHeight": "``",
              "backgroundToImage": false,
              "pdfPredefinedSize": "`Letter`",
              "websiteResolution": "\"custom\"",
              "fullPageScreenShot": false,
              "imageSizeClipWidth": "``",
              "imageSizeClipHeight": "``",
              "websitePrintVersion": false,
              "imageSizeClipXOffset": "``",
              "imageSizeClipYOffset": "``",
              "imageSizeCustomWidth": "``",
              "maxNavigationTimeout": "`10 sec`",
              "customResolutionWidth": "`300`",
              "imageSizeCustomHeight": "``",
              "customResolutionHeight": "`300`",
              "pdfPredefinedOrientation": "`landscape`"
            },
            "outputExample": {
              "url": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "9a44759f-752a-44b9-bbb0-dcc02ebf79ec",
            "label": "go to request receiver Phone",
            "icon": "goto",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [],
              "firstEnter": true,
              "gotoStepId": "`3324e635-3530-435f-8653-46df28e310be`",
              "__codeModes": {},
              "handleLimit": false,
              "selectedStep": {
                "label": "requestReceiverPhone",
                "value": "`3324e635-3530-435f-8653-46df28e310be`"
              },
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "textExpressionMode": "text"
            },
            "stepInputData": {
              "firstEnter": true,
              "gotoStepId": "`3324e635-3530-435f-8653-46df28e310be`",
              "handleLimit": false,
              "selectedStep": "{label: \"requestReceiverPhone\",value: \"`3324e635-3530-435f-8653-46df28e310be`\"}",
              "loopDetection": true,
              "numberOfPasses": "`10`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "a483aa86-deef-4b1d-8f90-aef866391dd4",
            "label": "combineSharedAppUrlwithPhoneContactID",
            "icon": "combine_text",
            "iconType": "default",
            "iconUrl": "",
            "shape": "hexagon",
            "type": "066d6b8c-04ec-4b25-9b3d-ccaa191a8d4e",
            "description": "",
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "b944d56b-58a3-4bbd-b259-07a0b8fcd575",
                  "condition": ""
                }
              ],
              "method": "inputs",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "combineSharedAppUrlwithPhoneContactId",
                "type": "session"
              },
              "arrayData": {
                "jsonTable": "[]",
                "separator": "``"
              },
              "inputData": [
                {
                  "data": "`&receiverContactID=${await this.mergeFields['createOrFindReceiverContactPhone'].get({path: 'contactId'})}&receiverPhone=${await this.mergeFields['validatedReceiverPhone'].get({path: 'phone'})}`",
                  "vforkey": "96e77fff-82d2-49ed-bed8-030544450ed9",
                  "separator": "``"
                }
              ],
              "separators": [
                {
                  "label": "None",
                  "value": "``"
                },
                {
                  "label": "New line",
                  "value": "`\n`"
                },
                {
                  "label": "Comma",
                  "value": "`,`"
                },
                {
                  "label": "Tab",
                  "value": "`\t`"
                },
                {
                  "label": "Break tag (HTML)",
                  "value": "`<br />`"
                },
                {
                  "label": "Space",
                  "value": "` `"
                }
              ],
              "__codeModes": {},
              "processError": false,
              "startingText": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`"
            },
            "stepInputData": {
              "method": "\"inputs\"",
              "arrayData": "{jsonTable: [],separator: ``}",
              "inputData": "[{data: `&receiverContactID=${await this.mergeFields['createOrFindReceiverContactPhone'].get({path: 'contactId'})}&receiverPhone=${await this.mergeFields['validatedReceiverPhone'].get({path: 'phone'})}`,vforkey: \"96e77fff-82d2-49ed-bed8-030544450ed9\",separator: ``}]",
              "separators": "[{label: \"None\",value: ``},{label: \"New line\",value: `\n`},{label: \"Comma\",value: `,`},{label: \"Tab\",value: `\t`},{label: \"Break tag (HTML)\",value: `<br />`},{label: \"Space\",value: ` `}]",
              "processError": false,
              "startingText": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`"
            },
            "outputExample": {
              "value": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "a5817feb-7715-4977-aac8-57b93dd8994c",
            "label": "log timeout",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "28ae91ac-8542-4fcc-a407-40b4d891d345"
                }
              ],
              "logData": "await this.mergeFields['handleError'].get()",
              "logType": {
                "class": "error",
                "label": "Error",
                "value": "error"
              },
              "logMessage": "`===>Timeout`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "await this.mergeFields['handleError'].get()",
              "logType": "{\"class\": \"error\",\"label\": \"Error\",\"value\": \"error\"}",
              "logMessage": "`===>Timeout`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "a8b6511c-71ca-4f79-b991-57a3cb22ec1b",
            "label": "createOrFindReceiverContactEmail",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "result",
                  "label": "result",
                  "stepId": "37f5053e-0204-4e72-94f0-20939abe2d8e",
                  "dynamic": true
                }
              ],
              "flowId": "9abdcba0-2ced-4ac0-896a-ce68025112e5",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "createOrFindReceiverContactEmail",
                "type": "session"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [
                "result"
              ],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [
                {
                  "name": "firstName",
                  "value": "``",
                  "vforkey": "8845d3d1-1eef-49a2-903e-17fe4ccfae66"
                },
                {
                  "name": "phone",
                  "value": "``",
                  "vforkey": "d027c3d8-26e4-4880-bed8-56f8195e4f19"
                },
                {
                  "name": "email",
                  "value": "`${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`",
                  "vforkey": "3892bdc9-1abe-4ca6-9105-e605e9843e9c"
                },
                {
                  "name": "lastName",
                  "value": "``",
                  "vforkey": "8d5c5351-32b6-4380-9726-18245d55edbb"
                },
                {
                  "name": "channelData",
                  "value": "[\n  {\n  \"channelId\": await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'}),\n  \"channelType\": \"Email\"\n  }\n]",
                  "vforkey": "0de0350f-4b1e-4966-8308-910d2079826c"
                },
                {
                  "name": "browserFingerprint",
                  "value": "``",
                  "vforkey": "3da0861c-bfa1-4cd1-9386-bc087b6b0cc6"
                }
              ],
              "processTimeout": false,
              "flowIdToTrigger": "create-contact",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "b5fc343c-7d7e-4aad-a514-9dddade9838f"
                }
              ],
              "customSubFlowName": "``",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "result",
                "label": "result",
                "stepId": "3d17f134-7299-4044-a886-b74b314dc648",
                "dynamic": true
              },
              "isUseCustomSubflow": false,
              "flowToGetParamsFrom": "9abdcba0-2ced-4ac0-896a-ce68025112e5",
              "customFlowParameters": [],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0
            },
            "stepInputData": {
              "flowId": "\"9abdcba0-2ced-4ac0-896a-ce68025112e5\"",
              "isAsync": "true",
              "processError": false,
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "flowParameters": "[{name: \"firstName\",value: ``,vforkey: \"8845d3d1-1eef-49a2-903e-17fe4ccfae66\"},{name: \"phone\",value: ``,vforkey: \"d027c3d8-26e4-4880-bed8-56f8195e4f19\"},{name: \"email\",value: `${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`,vforkey: \"3892bdc9-1abe-4ca6-9105-e605e9843e9c\"},{name: \"lastName\",value: ``,vforkey: \"8d5c5351-32b6-4380-9726-18245d55edbb\"},{name: \"channelData\",value: [\n  {\n  \"channelId\": await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'}),\n  \"channelType\": \"Email\"\n  }\n],vforkey: \"0de0350f-4b1e-4966-8308-910d2079826c\"},{name: \"browserFingerprint\",value: ``,vforkey: \"3da0861c-bfa1-4cd1-9386-bc087b6b0cc6\"}]",
              "processTimeout": false,
              "flowIdToTrigger": "\"create-contact\"",
              "timeoutDuration": "`30 sec`",
              "customSubFlowName": "``",
              "paramsProcessType": "\"manually\"",
              "isUseCustomSubflow": false,
              "flowToGetParamsFrom": "\"9abdcba0-2ced-4ac0-896a-ce68025112e5\"",
              "customFlowParameters": "[]"
            },
            "outputExample": {
              "contactId": "",
              "firstName": "",
              "phoneNumbers": [
                {
                  "val": "",
                  "type": ""
                }
              ]
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "aa7e107e-0c50-4e30-8c21-842c6b084b69",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "b01fddef-1ffa-484e-b450-3bcb0ab36c6a",
            "label": "Report",
            "icon": "label_or_note",
            "iconType": "default",
            "iconUrl": "",
            "shape": "octagon",
            "type": "7e80c113-ea4a-4c40-b0fe-f3650d919371",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "e3b25663-0b19-45fd-819f-a38c9410728c",
                  "condition": ""
                },
                {
                  "id": "aa71f8b0-345e-4263-8d93-e993b000e6b0",
                  "label": "step",
                  "stepId": "cbf06deb-c664-42b8-81f2-aed40f9be8e2",
                  "condition": "schema.botEventsFilter === 'some' && schema.processStep"
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "report",
                "type": "session"
              },
              "processApi": false,
              "processNLU": false,
              "processTag": false,
              "__codeModes": {},
              "processStep": true,
              "processOptOut": false,
              "processMessage": false,
              "processSession": false,
              "botEventsFilter": "some",
              "processTelephony": false,
              "processIdentifier": false,
              "processUserAction": false,
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "66b62dcc-5728-4db9-9376-33b17aad9d87",
                "condition": ""
              },
              "isProvidersAccount": false,
              "processPhoneLookup": false,
              "processTransacript": false,
              "providerEventsFilter": "any"
            },
            "stepInputData": {
              "processApi": "false",
              "processNLU": "false",
              "processStep": "true",
              "processOptOut": "false",
              "processMessage": "false",
              "processSession": "false",
              "botEventsFilter": "'some'",
              "processTelephony": "false",
              "processIdentifier": "false",
              "processUserAction": "false",
              "isProvidersAccount": "false",
              "processPhoneLookup": "false",
              "processTransacript": "false"
            },
            "outputExample": {
              "type": "",
              "event": {
                "Tags": [],
                "BotId": "",
                "Event": "",
                "FlowId": "",
                "StepId": "",
                "EventId": "",
                "AccountId": "",
                "SessionId": "",
                "Timestamp": "",
                "EventValue": {},
                "EventCategory": "",
                "TransactionId": ""
              }
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "b07c891e-af90-438d-a98b-598f5c08c519",
            "label": "createOrFindReceiverContactPhone",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "result",
                  "label": "result",
                  "stepId": "a483aa86-deef-4b1d-8f90-aef866391dd4",
                  "dynamic": true
                }
              ],
              "flowId": "9abdcba0-2ced-4ac0-896a-ce68025112e5",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "createOrFindReceiverContactPhone",
                "type": "session"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [
                "result"
              ],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [
                {
                  "name": "firstName",
                  "value": "``",
                  "vforkey": "8845d3d1-1eef-49a2-903e-17fe4ccfae66"
                },
                {
                  "name": "phone",
                  "value": "`${await this.mergeFields['requestReceiverPhone'].get({path: 'userReply'})}`",
                  "vforkey": "d027c3d8-26e4-4880-bed8-56f8195e4f19"
                },
                {
                  "name": "email",
                  "value": "``",
                  "vforkey": "3892bdc9-1abe-4ca6-9105-e605e9843e9c"
                },
                {
                  "name": "lastName",
                  "value": "``",
                  "vforkey": "8d5c5351-32b6-4380-9726-18245d55edbb"
                },
                {
                  "name": "channelData",
                  "value": "[\n  {\n  \"channelId\": await this.mergeFields['requestReceiverPhone'].get({path: 'userReply'}),\n  \"channelType\": \"Email\"\n  }\n]",
                  "vforkey": "0de0350f-4b1e-4966-8308-910d2079826c"
                },
                {
                  "name": "browserFingerprint",
                  "value": "``",
                  "vforkey": "3da0861c-bfa1-4cd1-9386-bc087b6b0cc6"
                },
                {
                  "name": "company",
                  "value": "``",
                  "vforkey": "9e089eb8-7fa1-4599-bd29-735e73ea9d04"
                },
                {
                  "name": "tag",
                  "value": "``",
                  "vforkey": "0d472c6c-1dab-4c04-b3e3-265397c9fa43"
                }
              ],
              "processTimeout": false,
              "flowIdToTrigger": "create-contact",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "b5fc343c-7d7e-4aad-a514-9dddade9838f"
                }
              ],
              "customSubFlowName": "``",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "result",
                "label": "result",
                "stepId": "3d17f134-7299-4044-a886-b74b314dc648",
                "dynamic": true
              },
              "isUseCustomSubflow": false,
              "flowToGetParamsFrom": "9abdcba0-2ced-4ac0-896a-ce68025112e5",
              "customFlowParameters": [],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0
            },
            "stepInputData": {
              "flowId": "\"9abdcba0-2ced-4ac0-896a-ce68025112e5\"",
              "isAsync": "true",
              "processError": false,
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "flowParameters": "[{name: \"firstName\",value: ``,vforkey: \"8845d3d1-1eef-49a2-903e-17fe4ccfae66\"},{name: \"phone\",value: `${await this.mergeFields['requestReceiverPhone'].get({path: 'userReply'})}`,vforkey: \"d027c3d8-26e4-4880-bed8-56f8195e4f19\"},{name: \"email\",value: ``,vforkey: \"3892bdc9-1abe-4ca6-9105-e605e9843e9c\"},{name: \"lastName\",value: ``,vforkey: \"8d5c5351-32b6-4380-9726-18245d55edbb\"},{name: \"channelData\",value: [\n  {\n  \"channelId\": await this.mergeFields['requestReceiverPhone'].get({path: 'userReply'}),\n  \"channelType\": \"Email\"\n  }\n],vforkey: \"0de0350f-4b1e-4966-8308-910d2079826c\"},{name: \"browserFingerprint\",value: ``,vforkey: \"3da0861c-bfa1-4cd1-9386-bc087b6b0cc6\"},{name: \"company\",value: ``,vforkey: \"9e089eb8-7fa1-4599-bd29-735e73ea9d04\"},{name: \"tag\",value: ``,vforkey: \"0d472c6c-1dab-4c04-b3e3-265397c9fa43\"}]",
              "processTimeout": false,
              "flowIdToTrigger": "\"create-contact\"",
              "timeoutDuration": "`30 sec`",
              "customSubFlowName": "``",
              "paramsProcessType": "\"manually\"",
              "isUseCustomSubflow": false,
              "flowToGetParamsFrom": "\"9abdcba0-2ced-4ac0-896a-ce68025112e5\"",
              "customFlowParameters": "[]"
            },
            "outputExample": {
              "contactId": "",
              "firstName": "",
              "phoneNumbers": [
                {
                  "val": "",
                  "type": ""
                }
              ]
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "b08eb03f-8334-4d4d-9a87-76f0f355b2e0",
            "label": "loadedData",
            "icon": "create_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "1683b915-08e7-419c-b4b1-b99cdce7717b",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "e98402b7-1379-4cdb-841b-afe1c038ad75",
                  "condition": ""
                }
              ],
              "jsonE": {},
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "loadedData",
                "type": "session"
              },
              "valueType": "string",
              "variables": [
                {
                  "vforkey": "0344f79d-0ad3-4206-8e6a-f5cb82709b67",
                  "valueType": "code",
                  "variableName": "events",
                  "variableValue": "JSON.parse(await this.mergeFields['getEvents'].get({path: 'value'}))"
                }
              ],
              "mergeField": "",
              "nativeJson": {},
              "simpleData": "",
              "__codeModes": {},
              "virtualJson": [],
              "processError": false,
              "selectedMode": "Extended",
              "virtualJsonEditable": []
            },
            "stepInputData": {
              "jsonE": "{}",
              "valueType": "\"string\"",
              "variables": "[{vforkey: \"0344f79d-0ad3-4206-8e6a-f5cb82709b67\",valueType: \"code\",variableName: \"events\",variableValue: JSON.parse(await this.mergeFields['getEvents'].get({path: 'value'}))}]",
              "mergeField": "\"\"",
              "nativeJson": "{}",
              "simpleData": "",
              "virtualJson": "[]",
              "processError": false,
              "selectedMode": "\"Extended\"",
              "virtualJsonEditable": "[]"
            },
            "outputExample": {
              "events": "JSON.parse(await this.mergeFields['getEvents'].get({path: 'value'}))"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "b140677a-42fa-4a15-b4f5-052e2da9e62c",
            "label": "converTableDiv",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "5a0f4005-e5f8-4c89-b4bc-79761aca012c",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "generateTable.html"
                  },
                  "variableValue": "await this.mergeFields['generateTable'].get({path: 'html'}).replaceAll('</td><td class=\"string\">', '</td><td class=\"string-human\">').replaceAll('<td class=\"string\">', '<td class=\"string-bot\">').replaceAll(\"<table>\", \"<div>\").replaceAll(\"</table>\", \"</div>\").replaceAll(\"<tr\", \"<div\").replaceAll(\"</tr>\", \"</div>\").replaceAll(\"<td\", \"<div\").replaceAll(\"</td>\", \"</div>\").replaceAll('<td class=\"string\">', '<td class=\"string-bot\">')"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "stepInputData": {
              "variables": "[{vforkey: \"c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a\",valueType: \"code\",variableName: {type: \"session\",label: \"generateTable.html\"},variableValue: await this.mergeFields['generateTable'].get({path: 'html'}).replaceAll('</td><td class=\"string\">', '</td><td class=\"string-human\">').replaceAll('<td class=\"string\">', '<td class=\"string-bot\">').replaceAll(\"<table>\", \"<div>\").replaceAll(\"</table>\", \"</div>\").replaceAll(\"<tr\", \"<div\").replaceAll(\"</tr>\", \"</div>\").replaceAll(\"<td\", \"<div\").replaceAll(\"</td>\", \"</div>\").replaceAll('<td class=\"string\">', '<td class=\"string-bot\">')}]",
              "mountedFlag": "true",
              "processError": false,
              "changeDataStepErrors": "[]",
              "additionalMergeFields": "[]",
              "isInvalidChangeDataStep": "false"
            },
            "outputExample": {
              "undefined": "await this.mergeFields['generateTable'].get({path: 'html'}).replaceAll('</td><td class=\"string\">', '</td><td class=\"string-human\">').replaceAll('<td class=\"string\">', '<td class=\"string-bot\">').replaceAll(\"<table>\", \"<div>\").replaceAll(\"</table>\", \"</div>\").replaceAll(\"<tr\", \"<div\").replaceAll(\"</tr>\", \"</div>\").replaceAll(\"<td\", \"<div\").replaceAll(\"</td>\", \"</div>\").replaceAll('<td class=\"string\">', '<td class=\"string-bot\">')"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "b39aa5cb-e416-4db4-a843-9396d42260a7",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "b56224fc-62e3-4da5-af80-74115fcdd689",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "b944d56b-58a3-4bbd-b259-07a0b8fcd575",
            "label": "sanitizingPhone",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "fb0fd462-c5ac-4d3c-872c-a483ad75b6b8",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "combineSharedAppUrlwithPhoneContactId.value"
                  },
                  "variableValue": "await this.mergeFields['combineSharedAppUrlwithPhoneContactId'].get({path: 'value'}).replaceAll('+','%2B')"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "stepInputData": {
              "variables": "[{vforkey: \"c1fba9a0-ae3e-4ce6-ae34-347b0c9b874a\",valueType: \"code\",variableName: {type: \"session\",label: \"combineSharedAppUrlwithPhoneContactId.value\"},variableValue: await this.mergeFields['combineSharedAppUrlwithPhoneContactId'].get({path: 'value'}).replaceAll('+','%2B')}]",
              "mountedFlag": "true",
              "processError": false,
              "changeDataStepErrors": "[]",
              "additionalMergeFields": "[]",
              "isInvalidChangeDataStep": "false"
            },
            "outputExample": {
              "undefined": "await this.mergeFields['combineSharedAppUrlwithPhoneContactId'].get({path: 'value'}).replaceAll('+','%2B')"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "be8c5b0f-f0a6-4150-85c3-7150ed6c0451",
            "label": "saveConversationCut",
            "icon": "database",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "d042fa69-0da9-440b-90da-849d786ec514",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "02b5b72e-d810-47ea-bb74-89665b93a4ff",
                  "condition": ""
                }
              ],
              "value": "JSON.stringify(await this.mergeFields['shareOption'].get({path: 'newConv'}))",
              "prefix": "``",
              "ttl_label": "After interval",
              "collection": "`${await this.botConfig['conversationPartsCollection'].get()}`",
              "__codeModes": {},
              "processError": false,
              "ttl_value_after": "`7 d`",
              "ttl_value_until": null
            },
            "stepInputData": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "value": "JSON.stringify(await this.mergeFields['shareOption'].get({path: 'newConv'}))",
              "prefix": "``",
              "ttl_label": "\"After interval\"",
              "collection": "`${await this.botConfig['conversationPartsCollection'].get()}`",
              "processError": false,
              "ttl_value_after": "`7 d`",
              "ttl_value_until": "null"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "c09e2bb9-4893-42da-aa61-f796d4f9d001",
            "label": "generateTable",
            "icon": "map_values",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "ec28190a-e1ba-42bd-a254-418270f832d9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "b140677a-42fa-4a15-b4f5-052e2da9e62c",
                  "condition": ""
                }
              ],
              "input": "await this.mergeFields['shareOption'].get({path: 'newConv'})[\"conv\"]",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "generateTable",
                "type": "session"
              },
              "__codeModes": {},
              "doMapHeaders": false
            },
            "stepInputData": {
              "input": "await this.mergeFields['shareOption'].get({path: 'newConv'})[\"conv\"]",
              "doMapHeaders": "false"
            },
            "outputExample": {
              "html": "HTML presentation of table"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "c6367947-5ce0-45c2-969d-2dbf5d49a6ae",
            "label": "combineSharedAppUrlwithDifferentFigure",
            "icon": "combine_text",
            "iconType": "default",
            "iconUrl": "",
            "shape": "hexagon",
            "type": "066d6b8c-04ec-4b25-9b3d-ccaa191a8d4e",
            "description": "",
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "5dd6b9d8-7391-4182-8098-45102c892405",
                  "condition": ""
                }
              ],
              "method": "inputs",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "combineSharedAppUrlwithDifferentFigure",
                "type": "session"
              },
              "arrayData": {
                "jsonTable": "[]",
                "separator": "``"
              },
              "inputData": [
                {
                  "data": "`&receiverContactID=${await this.mergeFields['createOrFindReceiverContactEmail'].get({path: 'contactId'})}&receiverEmail=${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`",
                  "vforkey": "96e77fff-82d2-49ed-bed8-030544450ed9",
                  "separator": "``"
                }
              ],
              "separators": [
                {
                  "label": "None",
                  "value": "``"
                },
                {
                  "label": "New line",
                  "value": "`\n`"
                },
                {
                  "label": "Comma",
                  "value": "`,`"
                },
                {
                  "label": "Tab",
                  "value": "`\t`"
                },
                {
                  "label": "Break tag (HTML)",
                  "value": "`<br />`"
                },
                {
                  "label": "Space",
                  "value": "` `"
                }
              ],
              "__codeModes": {},
              "processError": false,
              "startingText": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`"
            },
            "stepInputData": {
              "method": "\"inputs\"",
              "arrayData": "{jsonTable: [],separator: ``}",
              "inputData": "[{data: `&receiverContactID=${await this.mergeFields['createOrFindReceiverContactEmail'].get({path: 'contactId'})}&receiverEmail=${await this.mergeFields['requestReceiverEmail'].get({path: 'userReply'})}`,vforkey: \"96e77fff-82d2-49ed-bed8-030544450ed9\",separator: ``}]",
              "separators": "[{label: \"None\",value: ``},{label: \"New line\",value: `\n`},{label: \"Comma\",value: `,`},{label: \"Tab\",value: `\t`},{label: \"Break tag (HTML)\",value: `<br />`},{label: \"Space\",value: ` `}]",
              "processError": false,
              "startingText": "`${await this.mergeFields['combineSharedAppUrl'].get({path: 'value'})}`"
            },
            "outputExample": {
              "value": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "c6ba4659-68c9-44b3-8d75-9d37caf4c4c1",
            "label": "log different",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "29ba8d03-b72d-439d-81e8-a251508e5625"
                }
              ],
              "logData": "{\n  \"Diff\": await this.mergeFields['combineSharedAppUrlwithDifferentFigure'].get({path: 'value'}) ,\n  \"Same\": await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'})\n}",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`====>Email-URLs`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "{\n  \"Diff\": await this.mergeFields['combineSharedAppUrlwithDifferentFigure'].get({path: 'value'}) ,\n  \"Same\": await this.mergeFields['combineSharedAppUrlwithSameFigure'].get({path: 'value'})\n}",
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`====>Email-URLs`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "c904d3bc-e156-42c1-bfc1-94bb3ba34ad5",
            "label": "tinyURLDifferent",
            "icon": "parse_url",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "88e7cd37-10dd-42e4-9f31-93875e70ed3a",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                  "label": "next",
                  "stepId": "c09e2bb9-4893-42da-aa61-f796d4f9d001",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "tinyUrlDifferent",
                "type": "session"
              },
              "urlData": {
                "shortURL": "",
                "sourceURL": "`${await this.mergeFields['combineSharedAppUrlwithDifferentFigure'].get({path: 'value'})}`",
                "isCodeMode": false,
                "showPreview": false,
                "disableButton": true
              },
              "isDeepLink": false,
              "__codeModes": {},
              "processError": false,
              "skipStepLogicExit": {
                "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                "label": "next",
                "stepId": "a33fbd54-cab6-4003-8b9b-a688b7c68f3d",
                "condition": ""
              }
            },
            "stepInputData": {
              "urlData": "{shortURL: \"\",sourceURL: `${await this.mergeFields['combineSharedAppUrlwithDifferentFigure'].get({path: 'value'})}`,isCodeMode: false,showPreview: false,disableButton: true}",
              "isDeepLink": "false",
              "processError": false
            },
            "outputExample": {
              "generatedURL": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "cacb167a-1a81-46c6-9102-23a4f8f4eae2",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "cbf06deb-c664-42b8-81f2-aed40f9be8e2",
            "label": "getEvents",
            "icon": "database",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "39c8bcee-82f4-453b-ac8d-c1677f9260e9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "b08eb03f-8334-4d4d-9a87-76f0f355b2e0",
                  "condition": ""
                },
                {
                  "id": "3effbf22-00d4-428a-802d-83ae1208d412",
                  "label": "not found",
                  "stepId": "1039b9b2-34f2-4694-95f9-9bf7f64427c7",
                  "condition": "schema.notFound"
                }
              ],
              "prefix": "``",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "getEvents",
                "type": "session"
              },
              "notFound": true,
              "collection": "`${await this.botConfig['stepEventsCollection'].get()}`",
              "__codeModes": {},
              "processError": false,
              "valueOutputExample": null,
              "dynamicExitsArrayStart": 1
            },
            "stepInputData": {
              "key": "`${await this.mergeFields['waitRequest'].get({path: 'params.sessionID'})}`",
              "prefix": "``",
              "notFound": "true",
              "collection": "`${await this.botConfig['stepEventsCollection'].get()}`",
              "processError": false
            },
            "outputExample": {
              "value": {}
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "cc902c95-d55f-4b31-83e5-6202e349bfed",
            "label": "go to request share option",
            "icon": "goto",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-down",
            "type": "f043f88d-a268-4c5d-b0c5-bffa4428a0c7",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [],
              "firstEnter": true,
              "gotoStepId": "`24fae94b-5269-4f60-a2df-35b970828ef5`",
              "__codeModes": {},
              "handleLimit": false,
              "selectedStep": {
                "label": "convString",
                "value": "`24fae94b-5269-4f60-a2df-35b970828ef5`"
              },
              "loopDetection": true,
              "numberOfPasses": "`10`",
              "textExpressionMode": "text"
            },
            "stepInputData": {
              "firstEnter": true,
              "gotoStepId": "`24fae94b-5269-4f60-a2df-35b970828ef5`",
              "handleLimit": false,
              "selectedStep": "{label: \"convString\",value: \"`24fae94b-5269-4f60-a2df-35b970828ef5`\"}",
              "loopDetection": true,
              "numberOfPasses": "`10`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "d0c839b0-3073-47c6-a53e-34ab0613960a",
            "label": "return close",
            "icon": "success",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "e1a9d280-cc03-4fa4-abc6-15636a2917b5",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "25515674-7a87-4f1a-9ae5-7a968b353af6",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "waitRequest",
              "selectedExit": "result",
              "executionResult": "`close`",
              "selectedStepExits": [
                {
                  "label": "result",
                  "value": "result"
                }
              ]
            },
            "stepInputData": {
              "conversation": "\"waitRequest\"",
              "selectedExit": "\"result\"",
              "executionResult": "`close`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "d8903c37-7a19-49d2-8ffc-9161ae6d3d96",
            "label": "updateNameContact",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "efc014cb-d50b-4bf7-8799-7a9ac27287ef",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "a4bd4491-693e-4689-b66e-5a8e3b803d11",
                  "label": "next",
                  "stepId": "24fae94b-5269-4f60-a2df-35b970828ef5",
                  "condition": ""
                }
              ],
              "flowId": "",
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "exits": [
                    "result"
                  ],
                  "conversationType": "subflow",
                  "doNotExpectResult": false,
                  "conversationStarter": true,
                  "conversationStepType": "trigger_n_proceed"
                },
                "name": "updateNameContact",
                "type": "session"
              },
              "__codeModes": {},
              "resultExits": [],
              "processError": false,
              "flowParameters": [],
              "flowIdToTrigger": "",
              "targetAccountId": "",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "54fb3259-8e01-4ab9-bc27-26ea97fc4d17"
                }
              ],
              "customSubFlowName": "`UPDATE-contact`",
              "doNotExpectResult": false,
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "a4bd4491-693e-4689-b66e-5a8e3b803d11",
                "label": "next",
                "stepId": "24fae94b-5269-4f60-a2df-35b970828ef5",
                "condition": ""
              },
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "",
              "customFlowParameters": [
                {
                  "name": "contactId",
                  "value": "`${await this.mergeFields['waitRequest'].get({path: 'params.userContactId'})}`",
                  "vforkey": "7035ccd9-d703-4b12-98a0-f574bf0ad9cf"
                },
                {
                  "name": "firstName",
                  "value": "`${await this.mergeFields['requestUserName'].get({path: 'userReply'})}`",
                  "vforkey": "4fde4dd1-8856-4aff-9626-a79a5e9b58a5"
                },
                {
                  "name": "lastName",
                  "value": "``",
                  "vforkey": "fd316b52-f8ef-489f-9be1-94a6c77bdf95"
                },
                {
                  "name": "phone",
                  "value": "``",
                  "vforkey": "56efbcca-61ac-4ccb-b3ed-fe328b00eaa1"
                },
                {
                  "name": "email",
                  "value": "``",
                  "vforkey": "976a82b6-7faa-4328-8d81-99c3ebc97d1d"
                }
              ],
              "cachedFlowListOptions": [],
              "customTriggerTargetAccountId": "``"
            },
            "stepInputData": {
              "flowId": "\"\"",
              "processError": false,
              "flowParameters": "{}",
              "flowIdToTrigger": "\"\"",
              "targetAccountId": "\"\"",
              "customSubFlowName": "`UPDATE-contact`",
              "doNotExpectResult": "false",
              "paramsProcessType": "\"manually\"",
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "\"\"",
              "customFlowParameters": "{\"contactId\": `${await this.mergeFields['waitRequest'].get({path: 'params.userContactId'})}`,\"firstName\": `${await this.mergeFields['requestUserName'].get({path: 'userReply'})}`,\"lastName\": ``,\"phone\": ``,\"email\": ``}",
              "customTriggerTargetAccountId": "``"
            },
            "outputExample": {
              "id": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "e3576b46-7ba7-4494-ade8-422d1058a92c",
            "label": "log error",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "7bff1055-0475-4265-9f01-907d95be4727"
                }
              ],
              "logData": "await this.mergeFields['handleError'].get()",
              "logType": {
                "class": "error",
                "label": "Error",
                "value": "error"
              },
              "logMessage": "`===>Error`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "await this.mergeFields['handleError'].get()",
              "logType": "{\"class\": \"error\",\"label\": \"Error\",\"value\": \"error\"}",
              "logMessage": "`===>Error`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "e3b25663-0b19-45fd-819f-a38c9410728c",
            "label": "checkUserName",
            "icon": "condition",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "14d1ca2c-9bdd-40c1-be51-5a65c59b3525",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "dba7f289-dfbf-4710-8287-b7c22b872ad1",
                  "label": "missingNam...",
                  "stepId": "ebbcec0a-3245-4bc8-8336-0a039ddf3542",
                  "dynamic": true
                },
                {
                  "id": "else",
                  "label": "hasName",
                  "stepId": "cc902c95-d55f-4b31-83e5-6202e349bfed",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "elseExitName": "hasName",
              "isSingleExit": false,
              "conditionExits": [
                {
                  "label": "`missingName`",
                  "rules": [
                    {
                      "vforkey": "a97baa24-a973-42a1-b701-552007eead21",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`",
                      "secondValue": "`undefined`",
                      "isDisabledSecondValue": false
                    },
                    {
                      "vforkey": "02458646-7994-4f98-b27e-dec10c96d9ee",
                      "ruleType": "function (firstValue, secondValue) {\nreturn _.isEmpty(firstValue);\n}",
                      "codeValue": "``",
                      "valueType": "string",
                      "firstValue": "`${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`",
                      "secondValue": "``",
                      "isDisabledSecondValue": true
                    }
                  ],
                  "dataOut": "``",
                  "vforkey": "dba7f289-dfbf-4710-8287-b7c22b872ad1",
                  "trueValue": "any",
                  "description": "``",
                  "isNotCollapsed": true,
                  "isEditableHeader": false
                }
              ],
              "isCaseSensitive": false,
              "hasNoConditionDataOut": true,
              "dynamicExitsArrayStart": 0,
              "conditionRuleHasDataOut": true,
              "noConditionDataOutValue": "``"
            },
            "stepInputData": {
              "elseExitName": "\"hasName\"",
              "isSingleExit": false,
              "conditionExits": "[{label: `missingName`,rules: [{vforkey: \"a97baa24-a973-42a1-b701-552007eead21\",compareMethod: function (firstValue, secondValue) {\nreturn _.includes(firstValue, secondValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`,secondValue: `undefined`,isDisabledSecondValue: false},{vforkey: \"02458646-7994-4f98-b27e-dec10c96d9ee\",compareMethod: function (firstValue, secondValue) {\nreturn _.isEmpty(firstValue);\n},codeValue: ``,valueType: \"string\",firstValue: `${await this.mergeFields['waitRequest'].get({path: 'params.userName'})}`,secondValue: ``,isDisabledSecondValue: true}],dataOut: ``,id: \"dba7f289-dfbf-4710-8287-b7c22b872ad1\",trueValue: \"any\",description: ``,isNotCollapsed: true,isEditableHeader: false}]",
              "isCaseSensitive": "false",
              "hasNoConditionDataOut": true,
              "conditionRuleHasDataOut": true,
              "noConditionDataOutValue": "``"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "e5bb172b-ddce-4568-b2c9-70e70c001d58",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          },
          {
            "id": "e98402b7-1379-4cdb-841b-afe1c038ad75",
            "label": "addStepEventToArray",
            "icon": "add_item_to_array",
            "iconType": "default",
            "iconUrl": "",
            "shape": "sun",
            "type": "43d3d9da-bc39-44d3-953c-64a4d01b0f62",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "8fc48bf1-4a4b-43fc-b8ea-8d0525ce76d4",
                  "condition": ""
                }
              ],
              "items": [
                {
                  "value": "{\n  \"flowName\": this.config.flowLabel,\n  \"sessionID\": await this.mergeFields['waitRequest'].get({path: 'params.sessionID'}),\n  \"stepName\": await this.mergeFields['report'].get({path: 'event.EventValue.StepLabel'}),\n  \"date\": await this.mergeFields['report'].get({path: 'event.Timestamp'}),\n  \"stepID\": await this.mergeFields['report'].get({path: 'event.StepId'})\n}",
                  "vforkey": "9113b054-358d-43f3-8290-e6e42cfb7ba2"
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "addStepEventToArray",
                "type": "session"
              },
              "mergeField": "`loadedData.events`",
              "__codeModes": {},
              "isMergeField": "existing",
              "processError": false,
              "arrayInputBehavior": "`individually`",
              "positionToAddInputData": "`lastAdded`"
            },
            "stepInputData": {
              "items": "[({\n  \"flowName\": this.config.flowLabel,\n  \"sessionID\": await this.mergeFields['waitRequest'].get({path: 'params.sessionID'}),\n  \"stepName\": await this.mergeFields['report'].get({path: 'event.EventValue.StepLabel'}),\n  \"date\": await this.mergeFields['report'].get({path: 'event.Timestamp'}),\n  \"stepID\": await this.mergeFields['report'].get({path: 'event.StepId'})\n})]",
              "dataOut": "{\"ttl\": 86400000,\"meta\": {},\"name\": \"addStepEventToArray\",\"type\": \"session\"}",
              "mergeField": "`loadedData.events`",
              "isMergeField": "\"existing\"",
              "processError": false,
              "arrayInputBehavior": "`individually`",
              "positionToAddInputData": "`lastAdded`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "ebbcec0a-3245-4bc8-8336-0a039ddf3542",
            "label": "requestUserName",
            "icon": "rwc",
            "iconType": "default",
            "iconUrl": "",
            "shape": "bubble-right",
            "type": "7c427ba2-9701-41ae-90f3-b50a1f6bd997",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "d8903c37-7a19-49d2-8ffc-9161ae6d3d96",
                  "condition": ""
                }
              ],
              "medias": [],
              "dataOut": {
                "ttl": 86400000,
                "meta": {
                  "type": "rwc-request-response"
                },
                "name": "requestUserName",
                "type": "session"
              },
              "videoSrc": {},
              "rateInput": true,
              "sliderMax": "``",
              "sliderMin": "``",
              "dataOutput": {
                "userReply": "String"
              },
              "rwcContext": {
                "store": "this.get('__rwc_context') || await this.getShared('__rwc_context')",
                "output": {
                  "selectStyle": "inherited"
                },
                "contextKey": "__rwc_context"
              },
              "sliderStep": "``",
              "sliderType": "single",
              "sliderUnit": "``",
              "__codeModes": {},
              "creditTerms": {},
              "savedStepId": "ebbcec0a-3245-4bc8-8336-0a039ddf3542",
              "showBotIcon": false,
              "textMessage": "`<div class=\"bot-speaking-reqnumber bot-speaking\">Thanks. Also please give your name so this person knows who is sharing this experience.</div>`",
              "videoPoster": {},
              "conversation": {},
              "processError": false,
              "radioDefault": "`No option`",
              "radioOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "signatureBtn": "``",
              "workingHours": {
                "to": null,
                "from": null,
                "timezone": {
                  "id": "1",
                  "zone": "GMT+00:00"
                },
                "timeFormat": "12"
              },
              "additionalCss": "",
              "hasCancelExit": false,
              "skipStepLogic": false,
              "textInputType": "text",
              "videoAutoplay": true,
              "videoBtnLabel": "``",
              "videoUsedLink": false,
              "additionalHtml": "",
              "autoSuggestion": {
                "input": true,
                "isExtraLeg": false
              },
              "creditBtnLabel": "``",
              "geolocationBtn": "``",
              "geolocationLat": "``",
              "geolocationLng": "``",
              "inputComponent": "`textFiles`",
              "isPrivateFiles": false,
              "optionsButtons": [
                {
                  "label": "``",
                  "value": "``",
                  "buttonStyle": "default"
                }
              ],
              "processTimeout": false,
              "videoStartTime": "0",
              "carouselOptions": [
                {
                  "html": "<div class=\"additonal-info-wrapper\">\n    <h2>Neil deGrasse Tyson Ipsum</h2>\n    <p class=\"paragraph\">\n        Short description about content or a <a href=\"#\">link</a>\n    </p>\n    <div class=\"picture\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"label\">As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist.</div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        As a scientist, I want to go to Mars and back to asteroids and the Moon because I'm a scientist. But I can tell you, I'm not so naive a scientist to think that the nation might not have geopolitical reasons for going into space. \n    </p>\n    <p class=\"paragraph\">\n        Big ideas, big ambitious projects need to be embedded within culture at a level deeper than the political winds. It needs to be deeper than the economic fluctuations that could turn people against an expensive project because they're on an unemployment line and can't feed their families.\n    </p>\n    <div class=\"product-info\">\n        <div class=\"image\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"40px\" height=\"40px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/></svg>\n            <!-- <img src=\"your image url\"> -->\n        </div>\n        <div class=\"info\">\n            <h4>Heading</h4>\n            <p class=\"paragraph\">\n                Scientists in different disciplines don't speak the same language. They publish in different journals. \n            </p>\n            <a href=\"#\"></a><button class=\"info-button\">Button</button></a>\n        </div>\n    </div>\n    <h2>Heading</h2>\n    <p class=\"paragraph\">\n        Let's find a new way to think about the entire taxonomy of solar system objects, and not clutch to this concept of 'planet,' which, of course, only ever meant, 'Do you move against the background stars, regardless of what you're made of?'\n    </p>\n    <div class=\"info-footer\">\n        <a href=\"https://google.com\"><button class=\"info-button outlined\">Button 1</button></a>\n        <a href=\"#\"><button class=\"info-button\">Button 2</button></a>\n    </div>\n</div>\n<style>\n    .additonal-info-wrapper a {\n        text-decoration: none;\n        font-weight: bold;\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .picture {\n        margin: 2rem 0;\n    }\n    .additonal-info-wrapper .picture .image {\n        width: 100%;\n        height: 280px;\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .picture .image svg,\n    .additonal-info-wrapper .product-info .image {\n        fill: var(--textColor);\n    }\n    .additonal-info-wrapper .picture .label {\n        margin-top: 10px;\n        color: rgb(145, 150, 157);\n        font-size: 12px;\n        font-weight: normal;\n        letter-spacing: 0px;\n        line-height: 18px;\n    }\n    .additonal-info-wrapper .paragraph {\n        color: var(--textColor);\n        font-size: 14px;\n        font-weight: normal;\n        line-height: 21px;\n    }\n    .additonal-info-wrapper .info-footer {\n        width: 100%;\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n    }\n    .additonal-info-wrapper .info-footer a {\n        margin-right: 1rem;\n        display: block;\n    }\n    .additonal-info-wrapper .info-footer a:last-child {\n        margin-right: 0;\n    }\n    .additonal-info-wrapper .info-button {\n        background: rgb(23, 138, 231);\n        border-radius: 4px;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(255, 255, 255);\n        font-size: 14px;\n        font-weight: 600;\n        text-align: center;\n        padding: .5rem 1rem;\n        outline: none;\n        cursor: pointer;\n    }\n    .additonal-info-wrapper .info-button.outlined {\n        background: none;\n        border: 1px solid rgb(23, 138, 231);\n        color: rgb(23, 138, 231);\n    }\n    .additonal-info-wrapper .product-info {\n        display: flex;\n        align-items: center;\n        background: var(--bodyBackground);\n        align-items: center;\n        margin: 2rem 0;\n        width: 100%;\n    }\n    .additonal-info-wrapper .product-info .image {\n        background: var(--bodyBackground);\n        color: var(--textColor);\n        width: 40%;\n        height: 210px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n        object-fit: cover;\n    }\n    .additonal-info-wrapper .product-info .info {\n        width: 60%;\n        padding: 0 1rem;\n        color: var(--textColor);\n    }\n    .additonal-info-wrapper .product-info .info h4 {\n        color: var(--textColor);\n    }\n    .rwc-embed .additonal-info-wrapper .paragraph {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .picture .label {\n        font-size: 14px\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer {\n        justify-content: space-between;\n    }\n    .rwc-embed .additonal-info-wrapper .info-button {\n        font-size: 16px;\n        width: 100%;\n        padding: 1rem;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info {\n        display: flex;\n        flex-direction: column;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .image {\n        width: 100%;\n        height: 220px;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info {\n        box-sizing: border-box;\n        width: 100%;\n        padding: 16px;\n        width: auto;\n    }\n    .rwc-embed .additonal-info-wrapper .product-info .info h4 {\n        font-size: 16px;\n    }\n    .rwc-embed .additonal-info-wrapper .info-footer a {\n        width: 100%;\n    }\n    @media only screen and (max-width: 768px) {\n        .additonal-info-wrapper .paragraph {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .picture .label {\n            font-size: 14px\n        }\n        .additonal-info-wrapper .info-footer {\n            justify-content: space-between;\n        }\n        .additonal-info-wrapper .info-button {\n            font-size: 16px;\n            width: 100%;\n            padding: 1rem;\n        }\n        .additonal-info-wrapper .product-info {\n            display: flex;\n            flex-direction: column;\n        }\n        .additonal-info-wrapper .product-info .image {\n            width: 100%;\n            height: 220px;\n        }\n        .additonal-info-wrapper .product-info .info {\n            width: 100%;\n            padding: 16px;\n            width: auto;\n        }\n        .additonal-info-wrapper .product-info .info h4 {\n            font-size: 16px;\n        }\n        .additonal-info-wrapper .info-footer a {\n            width: 100%;\n        }\n    }\n</style>",
                  "image": {},
                  "title": "``",
                  "value": "``",
                  "video": {},
                  "hasModal": false,
                  "modalType": "default-modal",
                  "buttonLabel": "``",
                  "buttonStyle": "default",
                  "description": "``",
                  "childWindowType": "html",
                  "additionalContentLink": {},
                  "showModalButtonInUserResponse": true
                }
              ],
              "checkboxDefault": [],
              "checkboxOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "customVariables": [],
              "dropdownOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratePlaceholder": "``",
              "textPlaceholder": "`Message`",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": false,
              "additionalScript": "",
              "creditTermsLabel": "``",
              "customTemplateId": null,
              "datepickerFormat": "`MM-DD-YYYY`",
              "sliderDefaultEnd": "``",
              "timepickerFormat": "`auto`",
              "attachmentsNumber": "`0`",
              "optionListOptions": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "ratingSubmitLabel": "``",
              "scheduleDisableMf": "this.get('')",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "2d6f537c-8424-4406-bb1a-78eb8e09cd71",
                "condition": ""
              },
              "videoShowInThread": true,
              "autoSuggestionType": "`emty`",
              "customTemplateType": "`vue`",
              "ratingDiscardLabel": "``",
              "sliderCustomLabels": [
                {
                  "label": "``",
                  "value": "``"
                },
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "sliderDefaultStart": "``",
              "sliderDefaultValue": "``",
              "sliderUnitPosition": "`start`",
              "userAnswerFunction": "// You have access to userReply: string\nreturn ''",
              "videoTotalDuration": 0,
              "carouselAlternative": {
                "value": "``",
                "buttonLabel": "``",
                "buttonStyle": "default",
                "description": "``"
              },
              "carouselMultiselect": false,
              "dropdownPlaceholder": "``",
              "scheduleButtonLabel": "``",
              "scheduleDisableByMf": false,
              "scheduleOptionItems": [
                {
                  "label": "``",
                  "value": "``"
                }
              ],
              "creditCancelBtnLabel": "``",
              "datepickerBlockDates": false,
              "datepickerStartsFrom": "`0`",
              "sliderCustomFunction": "// you have access to value:number\n// example:\n// if (value < 50) {\n//  return 'value < 50'\n// } else {\n//  return 'value > 50'\n// }",
              "customTemplateCSSCode": ".custom-send-button {\n  // add styles for button  \n  // with this step execution css will be applied for for follow-up messages of the flow\n}",
              "datepickerBlockedFunc": "// tip: return true to disable and false to enable date\n// disable all wednesdays\n// return moment(date).day() === 3;\n// disable 10s day of month\n// return moment(date).date() === 10;\n// disable Novembers\n// return moment(date).month() === 10;",
              "geolocationSetDefault": false,
              "scheduleDisableManual": [],
              "sliderUseCustomLabels": false,
              "additionalContentVideo": [],
              "attachmentsAllowChosen": false,
              "carouselCancelBtnLabel": "``",
              "carouselHasAlternative": false,
              "carouselSubmitBtnLabel": "``",
              "customTempalateScripts": [],
              "customTemplateHtmlCode": "<button class=\"custom-send-button\" id=\"custom-button\">send</button>",
              "textInputCustomPattern": "``",
              "additionalCardvariables": [],
              "attachmentsAllowedTypes": [],
              "customTemplateVueScript": "return {\n  template: {\n    data() {\n      return {\n        testData: 'test data'\n      }\n    },\n    props: {\n      readonly: Boolean, // true if message is sent\n      loading: Boolean, // true on message sending and false when message received in chat\n      isInPreview: Boolean, // true if message is in preview mode\n      isMessageLast: Boolean // true if current message is last in chat and false on next message sending\n    },\n    methods: {\n      send(msg) {\n        /**\n         * `message` field will be sent as user reply and will NOT be stored in mergeField\n         * `myData` field will be stored in mergeField\n        **/\n        this.sendMessage({\n          message: msg,\n          myData: msg\n        });\n      }\n    }\n  }\n}",
              "datepickerSuggestedFunc": "// tip: return true to highlight date\n// highlight all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// highlight 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// highlight Novembers\n// return moment(date).month() === 10;",
              "recordMultimediaOptions": [
                "`audio`",
                "`video`",
                "`screen`",
                "`file`"
              ],
              "scheduleDisableFunction": "// tip: You have access to date: String, time: String\n// you must return true to disable or false to enable time slot\n// disable all mondays and fridays\n// return moment(date).day() === 1 || moment(date).day() === 5;\n// disable 1st - 11s day of month\n// return moment(date).date() >= 1 && moment(date).date() <= 11;\n// disable Novembers\n// return moment(date).month() === 10;",
              "autoSubmitCustomTemplate": true,
              "datepickerBlockedOptions": [],
              "datepickerSuggestedDates": false,
              "scheduleAllowMultiselect": false,
              "videoStartTimeTimestring": "``",
              "autoSuggestionOptionsList": [
                {
                  "text": "``"
                }
              ],
              "customTemplateCompiledCSS": "",
              "scheduleDisableByFunction": false,
              "scheduleDisableByManually": false,
              "datepickerSuggestedOptions": [],
              "datepickerBlockedMergefield": "this.get('')",
              "scheduleMultiselectQuantity": "3",
              "customTemplateJavaScriptCode": "// readonly <Boolean> - true if message is sent\n// loading <Boolean> - true on message sending and false when message received in chat\n// isInPreview <Boolean> - true if message is in preview mode\n// isMessageLast <Boolean> - true if current message is last in chat and false on next message sending\n\nconst testData = 'test data';\n\nconst btn = document.getElementById('custom-button');\nbtn.addEventListener('click', send);\n\nfunction send() {\n  /**\n   * `message` field will be sent as user reply and will NOT be stored in mergeField\n   * `myData` field will be stored in mergeField\n  **/\n  sendMessage({ \n    message: testData, \n    myData: testData \n  });\n}",
              "showCustomComponentInMessage": true,
              "customTemplateVueHtmlTemplate": "<button @click=\"send(testData)\">\n  {{ testData }}\n</button>",
              "datepickerSuggestedMergefield": "this.get('')",
              "hideCustomComponentAfterSubmit": false,
              "additionalContentCardChangeType": "`append`",
              "autoSuggestionOptionsMergeField": "this.get('')",
              "customTemplateCSSWrapperClassName": ""
            },
            "stepInputData": {
              "medias": "[]",
              "dataOutput": "{\"userReply\": \"String\"}",
              "rwcContext": "(async (Context) => Context.init({contextKey: \"__rwc_context\",store: this.get('__rwc_context') || await this.getShared('__rwc_context'),output: {selectStyle: \"inherited\",value: {from: \"last\"}},ttlBuffer: undefined,resolve: function resolve(flow) {\n  switch (this.output.selectStyle) {\n    case 'inherited':\n      return _.get(this.store, this.output.value.from);\n\n    default:\n      return this.output.value.conversation;\n  }\n}}, this))(require('conv-context'))",
              "savedStepId": "\"ebbcec0a-3245-4bc8-8336-0a039ddf3542\"",
              "textMessage": "`<div class=\"bot-speaking-reqnumber bot-speaking\">Thanks. Also please give your name so this person knows who is sharing this experience.</div>`",
              "processError": false,
              "textInputType": "'text'",
              "autoSuggestion": "{input: true,isExtraLeg: false}",
              "inputComponent": "`textFiles`",
              "processTimeout": false,
              "textPlaceholder": "`Message`",
              "timeoutDuration": "`1h`",
              "useCustomAnswer": "false",
              "autoSuggestionType": "`emty`"
            },
            "outputExample": {
              "userReply": "String"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              },
              "requestTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Request Transcript",
                "enabled": true
              },
              "responseTranscript": {
                "tags": [],
                "type": "transcript",
                "label": "Response Transcript",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "eefda9bb-12b3-45d8-9b15-0feb38768c1a",
            "label": "return sms finished",
            "icon": "success",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "e1a9d280-cc03-4fa4-abc6-15636a2917b5",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "78403bc1-92a2-4e05-b91a-b2f19ec559ef",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "waitRequest",
              "selectedExit": "result",
              "executionResult": "`Finished`",
              "selectedStepExits": [
                {
                  "label": "result",
                  "value": "result"
                }
              ]
            },
            "stepInputData": {
              "conversation": "\"waitRequest\"",
              "selectedExit": "\"result\"",
              "executionResult": "`Finished`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "fb0fd462-c5ac-4d3c-872c-a483ad75b6b8",
            "label": "tinyPhoneURL",
            "icon": "parse_url",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "88e7cd37-10dd-42e4-9f31-93875e70ed3a",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "219140e0-337f-48fa-81c0-a096c671ae9f",
                  "label": "next",
                  "stepId": "5f0bc8e1-ccce-4cf8-a5f9-193879dbeffd",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "tinyPhoneUrl",
                "type": "session"
              },
              "urlData": {
                "shortURL": "",
                "sourceURL": "`${await this.mergeFields['combineSharedAppUrlwithPhoneContactId'].get({path: 'value'})}`",
                "isCodeMode": false,
                "showPreview": false,
                "disableButton": true
              },
              "isDeepLink": false,
              "__codeModes": {},
              "processError": false
            },
            "stepInputData": {
              "urlData": "{shortURL: \"\",sourceURL: `${await this.mergeFields['combineSharedAppUrlwithPhoneContactId'].get({path: 'value'})}`,isCodeMode: false,showPreview: false,disableButton: true}",
              "isDeepLink": "false",
              "processError": false
            },
            "outputExample": {
              "generatedURL": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "fd210c53-468b-42fc-9598-3d3400d91d63",
            "label": "return url finished",
            "icon": "success",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "e1a9d280-cc03-4fa4-abc6-15636a2917b5",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "aa7e107e-0c50-4e30-8c21-842c6b084b69",
                  "condition": ""
                }
              ],
              "__codeModes": {},
              "conversation": "waitRequest",
              "selectedExit": "result",
              "executionResult": "`Finished`",
              "selectedStepExits": [
                {
                  "label": "result",
                  "value": "result"
                }
              ]
            },
            "stepInputData": {
              "conversation": "\"waitRequest\"",
              "selectedExit": "\"result\"",
              "executionResult": "`Finished`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          }
        ]
      },
      "3da67793-756b-41de-817b-0c51e991dfcf": {
        "position": {
          "x": -863.0418870747089,
          "y": 1005.7111241817474
        },
        "steps": [
          {
            "id": "05f95bdf-45ec-44b0-a02b-f5098d7f498c",
            "label": "lognewConv",
            "icon": "log",
            "iconType": "default",
            "iconUrl": "",
            "shape": "diamond",
            "type": "3af03e4b-a39d-4217-a682-daa9ff3728a3",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "bcc09d07-fac8-4ad5-97cb-401256531dfe"
                }
              ],
              "logData": "await this.mergeFields['generateImageMetaTags'].get({path: 'url'})",
              "logType": {
                "class": "warn",
                "label": "Warning",
                "value": "warn"
              },
              "logMessage": "`img ====>`",
              "__codeModes": {}
            },
            "stepInputData": {
              "logData": "await this.mergeFields['generateImageMetaTags'].get({path: 'url'})",
              "logType": "{\"class\": \"warn\",\"label\": \"Warning\",\"value\": \"warn\"}",
              "logMessage": "`img ====>`"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "bcc09d07-fac8-4ad5-97cb-401256531dfe",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          }
        ]
      },
      "512d796e-097f-477e-b09e-ce11980c0c07": {
        "position": {
          "x": -793.3454873561859,
          "y": 642.1490094661713
        },
        "steps": [
          {
            "id": "a1854d6f-8296-48fd-b1ce-05bd34222062",
            "label": "addUserName",
            "icon": "change_data",
            "iconType": "default",
            "iconUrl": "",
            "shape": "square",
            "type": "d6145e55-1d9d-4321-9830-cecf06189dfa",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "49b01867-5c26-4c9c-b505-560cc3cffc90",
                  "condition": ""
                }
              ],
              "variables": [
                {
                  "vforkey": "78fab33d-6642-4e9f-83c2-49ca9125bac5",
                  "valueType": "code",
                  "variableName": {
                    "type": "session",
                    "label": "gpt3Data.userName"
                  },
                  "variableValue": "await this.mergeFields['requestUserName'].get({path: 'userReply'}).replace(' ', '_')"
                }
              ],
              "__codeModes": {},
              "mountedFlag": true,
              "processError": false,
              "changeDataStepErrors": [],
              "additionalMergeFields": [],
              "isInvalidChangeDataStep": false
            },
            "stepInputData": {
              "variables": "[{vforkey: \"78fab33d-6642-4e9f-83c2-49ca9125bac5\",valueType: \"code\",variableName: {type: \"session\",label: \"gpt3Data.userName\"},variableValue: await this.mergeFields['requestUserName'].get({path: 'userReply'}).replace(' ', '_')}]",
              "mountedFlag": "true",
              "processError": false,
              "changeDataStepErrors": "[]",
              "additionalMergeFields": "[]",
              "isInvalidChangeDataStep": "false"
            },
            "outputExample": {
              "undefined": "await this.mergeFields['requestUserName'].get({path: 'userReply'}).replace(' ', '_')"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "49b01867-5c26-4c9c-b505-560cc3cffc90",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          }
        ]
      },
      "720fb432-38f0-4a2f-a7c0-e39eb5f8eeb8": {
        "position": {
          "x": -37.62989044189453,
          "y": 1171.2238974571228
        },
        "steps": [
          {
            "id": "96607dc1-0a9c-4a39-abb7-4085b1e98724",
            "label": "saveConversation",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "b5fc343c-7d7e-4aad-a514-9dddade9838f",
                  "label": "result",
                  "stepId": "72385468-fad9-4381-a0e2-081194d2c0b0",
                  "dynamic": true
                }
              ],
              "flowId": "48a89dc8-afab-4594-9fac-c8f732efdd31",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "saveConversation",
                "type": "session"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [
                "result"
              ],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [],
              "processTimeout": false,
              "flowIdToTrigger": "d04e0d7f-facf-43c5-be30-067d985b8b6f",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "b5fc343c-7d7e-4aad-a514-9dddade9838f"
                }
              ],
              "customSubFlowName": "`TM-Save-Conversation`",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "b5fc343c-7d7e-4aad-a514-9dddade9838f",
                "label": "result",
                "stepId": "5ff03224-4d6f-4393-8bda-db16be1fb5ef",
                "dynamic": true
              },
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "48a89dc8-afab-4594-9fac-c8f732efdd31",
              "customFlowParameters": [
                {
                  "name": "contactID",
                  "value": "`${await this.mergeFields['gpt3Data'].get({path: 'userContactID'})}`",
                  "vforkey": "f0cf4033-c377-4eb7-a9cd-0bc08fac956b"
                },
                {
                  "name": "sessionID",
                  "value": "`${await this.mergeFields['gpt3Data'].get({path: 'sessionID'})}`",
                  "vforkey": "1f2e2f83-925e-4efa-9e5a-03a46b0d143a"
                },
                {
                  "name": "phoneNumber",
                  "value": "`${await this.mergeFields['gpt3Data'].get({path: 'phoneNumber'})}`",
                  "vforkey": "806e00b0-943f-4baa-9ee3-85ca0c5c19db"
                },
                {
                  "name": "figureTypeId",
                  "value": "`${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`",
                  "vforkey": "ae760b8a-31e6-46cc-846d-54266a62ec65"
                },
                {
                  "name": "genericFigureName",
                  "value": "`${await this.mergeFields['gpt3Data'].get({path: 'genericFigureName'})}`",
                  "vforkey": "cd742250-ca87-435d-802e-d90c87bd3a4b"
                },
                {
                  "name": "convTranscript",
                  "value": "await this.mergeFields['gpt3Data'].get({path: 'array'})",
                  "vforkey": "30c64ff1-dabd-4ca0-b2b4-eb89d6c3a149"
                },
                {
                  "name": "convOutputOrder",
                  "value": "await this.mergeFields['gpt3Data'].get({path: 'convOutput'})",
                  "vforkey": "93a024a0-9485-4cf8-aad8-c2b635b0cd31"
                }
              ],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0
            },
            "stepInputData": {
              "flowId": "\"48a89dc8-afab-4594-9fac-c8f732efdd31\"",
              "isAsync": "true",
              "processError": false,
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "flowParameters": "[]",
              "processTimeout": false,
              "flowIdToTrigger": "\"d04e0d7f-facf-43c5-be30-067d985b8b6f\"",
              "timeoutDuration": "`30 sec`",
              "customSubFlowName": "`TM-Save-Conversation`",
              "paramsProcessType": "\"manually\"",
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "\"48a89dc8-afab-4594-9fac-c8f732efdd31\"",
              "customFlowParameters": "[{name: \"contactID\",value: `${await this.mergeFields['gpt3Data'].get({path: 'userContactID'})}`,vforkey: \"f0cf4033-c377-4eb7-a9cd-0bc08fac956b\"},{name: \"sessionID\",value: `${await this.mergeFields['gpt3Data'].get({path: 'sessionID'})}`,vforkey: \"1f2e2f83-925e-4efa-9e5a-03a46b0d143a\"},{name: \"phoneNumber\",value: `${await this.mergeFields['gpt3Data'].get({path: 'phoneNumber'})}`,vforkey: \"806e00b0-943f-4baa-9ee3-85ca0c5c19db\"},{name: \"figureTypeId\",value: `${await this.mergeFields['gpt3Data'].get({path: 'figureTypeId'})}`,vforkey: \"ae760b8a-31e6-46cc-846d-54266a62ec65\"},{name: \"genericFigureName\",value: `${await this.mergeFields['gpt3Data'].get({path: 'genericFigureName'})}`,vforkey: \"cd742250-ca87-435d-802e-d90c87bd3a4b\"},{name: \"convTranscript\",value: await this.mergeFields['gpt3Data'].get({path: 'array'}),vforkey: \"30c64ff1-dabd-4ca0-b2b4-eb89d6c3a149\"},{name: \"convOutputOrder\",value: await this.mergeFields['gpt3Data'].get({path: 'convOutput'}),vforkey: \"93a024a0-9485-4cf8-aad8-c2b635b0cd31\"}]"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "72385468-fad9-4381-a0e2-081194d2c0b0",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          }
        ]
      },
      "9a283278-650a-429b-bd90-3602a7b61a3e": {
        "position": {
          "x": -809.7975168228149,
          "y": 495.67392885684967
        },
        "steps": [
          {
            "id": "e679714e-de7a-44fe-bf08-5e3a6f288918",
            "label": "updateNameContact",
            "icon": "flow",
            "iconType": "default",
            "iconUrl": "",
            "shape": "arrow-right",
            "type": "05686b75-9048-4162-808e-e1153fe76b79",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "b5fc343c-7d7e-4aad-a514-9dddade9838f",
                  "label": "result",
                  "stepId": "80014ff8-56d5-4380-8517-4c76b70e8a95",
                  "dynamic": true
                }
              ],
              "flowId": "95ede279-98c6-4a24-bd53-dd8a5b027fe8",
              "dataOut": {
                "ttl": 86400000,
                "meta": {},
                "name": "updateNameContact",
                "type": "session"
              },
              "isAsync": true,
              "__codeModes": {},
              "resultExits": [
                "result"
              ],
              "timeoutSync": {
                "input": "`30 sec`",
                "outputMode": "ms"
              },
              "processError": false,
              "timeoutAsync": {
                "input": "`1 h`",
                "outputMode": "ms"
              },
              "flowParameters": [],
              "processTimeout": false,
              "flowIdToTrigger": "update-contact",
              "timeoutDuration": "`30 sec`",
              "customResultExits": [
                {
                  "name": "result",
                  "vforkey": "b5fc343c-7d7e-4aad-a514-9dddade9838f"
                }
              ],
              "customSubFlowName": "`UPDATE-contact`",
              "paramsProcessType": "manually",
              "skipStepLogicExit": {
                "id": "b5fc343c-7d7e-4aad-a514-9dddade9838f",
                "label": "result",
                "stepId": "76af6189-3f82-4853-adbe-7c35a097522c",
                "dynamic": true
              },
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "95ede279-98c6-4a24-bd53-dd8a5b027fe8",
              "customFlowParameters": [
                {
                  "name": "contactId",
                  "value": "`${await this.mergeFields['waitRequest'].get({path: 'params.userContactId'})}`",
                  "vforkey": "2a90e46e-cf6c-430d-ba2c-07298d340c32"
                },
                {
                  "name": "firstName",
                  "value": "`${await this.mergeFields['requestUserName'].get({path: 'userReply'})}`",
                  "vforkey": "2084c73a-ee19-49ca-8c55-82e3cf3862c9"
                },
                {
                  "name": "lastName",
                  "value": "``",
                  "vforkey": "f8f80ec3-7e86-4718-ad16-d6d8a449454b"
                },
                {
                  "name": "phone",
                  "value": "``",
                  "vforkey": "712e948f-4b8f-43a6-a2ad-e4e3e981a961"
                },
                {
                  "name": "email",
                  "value": "``",
                  "vforkey": "36e45cae-707b-454d-9a17-48800d7768dc"
                }
              ],
              "cachedFlowListOptions": [],
              "dynamicExitsArrayStart": 0
            },
            "stepInputData": {
              "flowId": "\"95ede279-98c6-4a24-bd53-dd8a5b027fe8\"",
              "isAsync": "true",
              "processError": false,
              "timeoutAsync": "{input: `1 h`,outputMode: \"ms\"}",
              "flowParameters": "[]",
              "processTimeout": false,
              "flowIdToTrigger": "\"update-contact\"",
              "timeoutDuration": "`30 sec`",
              "customSubFlowName": "`UPDATE-contact`",
              "paramsProcessType": "\"manually\"",
              "isUseCustomSubflow": true,
              "flowToGetParamsFrom": "\"95ede279-98c6-4a24-bd53-dd8a5b027fe8\"",
              "customFlowParameters": "[{name: \"contactId\",value: `${await this.mergeFields['waitRequest'].get({path: 'params.userContactId'})}`,vforkey: \"2a90e46e-cf6c-430d-ba2c-07298d340c32\"},{name: \"firstName\",value: `${await this.mergeFields['requestUserName'].get({path: 'userReply'})}`,vforkey: \"2084c73a-ee19-49ca-8c55-82e3cf3862c9\"},{name: \"lastName\",value: ``,vforkey: \"f8f80ec3-7e86-4718-ad16-d6d8a449454b\"},{name: \"phone\",value: ``,vforkey: \"712e948f-4b8f-43a6-a2ad-e4e3e981a961\"},{name: \"email\",value: ``,vforkey: \"36e45cae-707b-454d-9a17-48800d7768dc\"}]"
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "80014ff8-56d5-4380-8517-4c76b70e8a95",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          }
        ]
      },
      "b0148664-9730-4cf0-8d2d-d490f5246c71": {
        "position": {
          "x": -711.5686199963093,
          "y": 999.2604308128357
        },
        "steps": [
          {
            "id": "420bc5ec-4e77-4272-97e6-fce97c5e363a",
            "label": "bioCardAsImage",
            "icon": "convert_html_to_pdf",
            "iconType": "default",
            "iconUrl": "",
            "shape": "circle",
            "type": "557b57fe-ff2e-486e-ae50-954e6ad128d9",
            "description": "",
            "isGatewayStep": false,
            "pinLabel": true,
            "data": {
              "exits": [
                {
                  "id": "next",
                  "label": "next",
                  "stepId": "dd5fd4ea-5f45-43e3-9370-072d3f26df0b",
                  "condition": ""
                }
              ],
              "dataOut": {
                "ttl": 86400000,
                "name": "bioCardAsImage",
                "type": "session"
              },
              "newName": "`${await this.mergeFields['gpt3Data'].get({path: 'wikiName'})}`",
              "filePath": "`bioCardImages/`",
              "fileType": "image",
              "useFiles": true,
              "assetsUrl": "/api/v1/assets",
              "authToken": "AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BayHGHXesNoXRQF7c9niTowAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMOcGd7AbSWDn1LtkMAgEQgIIBG7OA2h4IA/T+UyWXVPhVqFwiC/0Ja2fBeDrkzy2hkCQND+tPmGgqyrh9k2uXqQVTTBed2XF7C/LfTpxjLn87sXhRqq1jfdIjVqngUAp7bRVuMYP0rH83DceUC4XHK7+YruiA0hvo/ruae4HHZLZUa4TALq3Zz0BhPS3vBizataJ7QfBLhNntfpuzL42C3BFPwTPZ44uV+s8RRy2ZLWa2V8OWpMJAxfLmjT0E/+cQlQL4rhQS90T4QqNR9uS0eFLonc4UYDX26y8vE241t2FdxWm4F81K9AZCoewdb96oZsqfQoAHC4X1bRYcy5vxEZhC4et0fofS9sVmB/HVbMIwE9JrWUbezPEtxo3yF0gnDudvU1WOChJfwdFaa7wAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJNU5XTmhabU16T1MwMVl6VXhMVFJsTlRndFlqRmxaQzAwWW1Ka1lXSTVZVE14WkRZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSTRPREUwTUdJMk55MW1abU14TFRSak9XSXRPVEUyWkMxaVl6ZGpNVFk1T0dReE1EVWlMQ0pwWVhRaU9qRTJOVGN4TWpBMk1qRjkuTFdsMUdpOGl6YlV1OW5rUHhqekd5MGZNUlFuOHNKeHFFWVhLRFVSMFhvSQ==",
              "imageSize": "full",
              "topMargin": "``",
              "urlSource": "``",
              "htmlSource": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n    <style>\r\n      /* Styles for the BioGuide */\r\n      @import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n      html {\r\n        width: 645px;\r\n        height: 386px;\r\n        margin: 0 0;\r\n        display: flex;\r\n        overflow: hidden;\r\n      }\r\n      .custom-bio--area {\r\n        padding: 1px;\r\n        border: 3px solid #f1f1f1;\r\n        border-radius: 6px;\r\n        width: 645px;\r\n        margin: 0 0;\r\n        display: flex;\r\n        overflow: hidden;\r\n      }\r\n\r\n      .custom-bio--card > span {\r\n        visibility: hidden;\r\n        display: none;\r\n      }\r\n      .custom-bio--card > br {\r\n        visibility: hidden;\r\n        display: none;\r\n      }\r\n\r\n      .custom-bio--card {\r\n        display: flex;\r\n        width: 639px;\r\n        height: 380px;\r\n        position: relative;\r\n        background-color: white;\r\n        border-radius: 5px;\r\n      }\r\n\r\n      .custom-bio--1box {\r\n        padding: 24px 32px;\r\n        width: 259px;\r\n        z-index: 999;\r\n      }\r\n      .custom-bio--2box {\r\n        width: 380px;\r\n        position: relative;\r\n      }\r\n      .custom-bio--title {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 24px;\r\n        line-height: 36px;\r\n        /* identical to box height */\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        color: #3fa2a0;\r\n        text-transform: capitalize;\r\n        white-space: nowrap;\r\n      }\r\n      .custom-bio--subtitle {\r\n        font-family: \"Roboto Serif\";\r\n        font-style: italic;\r\n        font-weight: 300;\r\n        font-size: 14px;\r\n        line-height: 16px;\r\n        display: flex;\r\n        color: #324045;\r\n        align-items: center;\r\n        padding: 15px 0;\r\n      }\r\n      .custom-bio--biography {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        color: #151d1c;\r\n        max-height: 160px;\r\n        overflow: hidden;\r\n      }\r\n      .custom-bio--learn-more {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        color: #3fa2a0;\r\n        padding: 15px 0 10px;\r\n\r\n        text-align: left;\r\n        letter-spacing: 0.2em;\r\n        text-transform: uppercase;\r\n      }\r\n\r\n      .custom-bio--learn-more > a {\r\n        text-decoration: none;\r\n        color: #3fa2a0;\r\n      }\r\n      .custom-bio--avatar {\r\n        width: 50px;\r\n        height: 50px;\r\n      }\r\n      .custom-bio--avatar {\r\n        position: relative;\r\n        width: 100%;\r\n      }\r\n      .custom-bio--avatar > img {\r\n        width: 50px;\r\n        height: 50px;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 999;\r\n        object-fit: cover;\r\n        border-radius: 50%;\r\n        filter: grayscale(1);\r\n        background: white;\r\n      }\r\n      .custom-bio--yellow-box-image {\r\n        z-index: 9;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 25px;\r\n        width: 25px;\r\n        height: 25px;\r\n        background-color: #f9c642;\r\n      }\r\n      .custom-bio--yellow-box {\r\n        width: 10px;\r\n        height: 10px;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        background-color: #f9c642;\r\n      }\r\n      .custom-bio--main-image {\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n      .custom-bio--main-image > img {\r\n        object-fit: cover;\r\n        height: 100%;\r\n        width: 100%;\r\n        border-radius: 5px;\r\n        min-width: 100% !important;\r\n      }\r\n      .custom-bio--custom-img {\r\n        filter: grayscale(100%);\r\n      }\r\n      .custom-bio--custom-img-overlap {\r\n        position: absolute;\r\n        left: 0%;\r\n        top: 0%;\r\n        overflow: hidden;\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n\r\n      .custom-bio--custom-img-overlap > img {\r\n        object-fit: cover;\r\n        height: 120%;\r\n        width: 110%;\r\n        border-radius: 5px;\r\n        min-width: 100% !important;\r\n        opacity: 0.3;\r\n        filter: grayscale(100%);\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n      }\r\n      .custom-bio--white-box {\r\n        width: 70px;\r\n        height: 70px;\r\n        background-color: #ffffff;\r\n        position: absolute;\r\n        top: 0px;\r\n        left: 0px;\r\n        z-index: 99;\r\n      }\r\n      .custom-bio--logo > svg {\r\n        fill: #3fa2a0;\r\n        position: absolute;\r\n        top: 30px;\r\n        right: 30px;\r\n      }\r\n      .custom-bio--random {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-size: 60px;\r\n        line-height: 90px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: right;\r\n        letter-spacing: 0.07em;\r\n        color: rgba(63, 162, 160, 0.7);\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 0px;\r\n      }\r\n      .custom-bio--vertical-lines-1 {\r\n        position: absolute;\r\n        bottom: 130px;\r\n        right: 336px;\r\n        width: 10px;\r\n        height: 180px;\r\n        background-color: rgba(133, 225, 223, 0.7);\r\n      }\r\n      .custom-bio--vertical-lines-2 {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 336px;\r\n        width: 10px;\r\n        height: 110px;\r\n        background-color: rgba(133, 225, 223, 0.7);\r\n      }\r\n\r\n      .custom-bio--background-lines {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 0px;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n\r\n      .custom-bio--change-guide-button {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        /* identical to box height */\r\n\r\n        text-align: right;\r\n        letter-spacing: 0.2em;\r\n        text-transform: uppercase;\r\n        width: 630px;\r\n        margin-top: 16px;\r\n      }\r\n\r\n      .custom-bio--change-guide-button > a {\r\n        color: #3fa2a0;\r\n        /* cursor: not-allowed !important; */\r\n        cursor: pointer !important;\r\n      }\r\n\r\n      @media (max-width: 600px) {\r\n        .custom-bio--area {\r\n          margin-left: -15px;\r\n          width: 320px;\r\n        }\r\n        .custom-bio--change-guide-button {\r\n          margin-left: -25px;\r\n        }\r\n        .custom-bio--card {\r\n          display: inline;\r\n          width: 300px;\r\n          height: 620px;\r\n        }\r\n        .custom-bio--1box {\r\n          width: 300px;\r\n          height: 320px;\r\n          background-color: white;\r\n          border-top-left-radius: 5px;\r\n          border-top-right-radius: 5px;\r\n        }\r\n        .custom-bio--2box {\r\n          width: 300px;\r\n          overflow: hidden;\r\n          max-height: 350px;\r\n        }\r\n\r\n        .custom-bio--title {\r\n          font-size: 20px;\r\n          line-height: 30px;\r\n        }\r\n        .custom-bio--subtitle {\r\n          font-size: 14px;\r\n          line-height: 16px;\r\n          padding: 5px 0 15px;\r\n        }\r\n        .custom-bio--biography {\r\n          max-height: 126px;\r\n        }\r\n        .custom-bio--learn-more {\r\n          padding: 7px 0 10px;\r\n        }\r\n\r\n        .custom-bio--white-box {\r\n          width: 50px;\r\n          height: 50px;\r\n          background-color: #ffffff;\r\n        }\r\n        .custom-bio--vertical-lines-1 {\r\n          left: 50px;\r\n          top: 315px;\r\n          height: 10px;\r\n          width: 155px;\r\n        }\r\n        .custom-bio--vertical-lines-2 {\r\n          left: 225px;\r\n          top: 315px;\r\n          height: 10px;\r\n          width: 75px;\r\n        }\r\n        .custom-bio--change-guide-button {\r\n          width: 320px;\r\n        }\r\n      }\r\n      /* Styles for the BioGuide */\r\n    </style>\r\n  </head>\r\n  <body class=\"custom-bio--area\">\r\n    <div class=\"custom-bio--card\">\r\n      <div class=\"custom-bio--1box\">\r\n        <div class=\"custom-bio--title\">${await this.mergeFields['gpt3Data'].get({path: 'figureFullName'})}</div>\r\n        <div class=\"custom-bio--subtitle\">${await this.mergeFields['gpt3Data'].get({path: 'title'})}</div>\r\n        <div class=\"custom-bio--biography\">\r\n          ${await this.mergeFields['gpt3Data'].get({path: 'biography'})}\r\n        </div>\r\n        <div class=\"custom-bio--learn-more\">Learn More</div>\r\n        <div class=\"custom-bio--avatar\">\r\n          <img\r\n            src=\"${await this.mergeFields['gpt3Data'].get({path: 'bioimage'})}\"\r\n            alt=\"\"\r\n          />\r\n          <div class=\"custom-bio--yellow-box-image\"></div>\r\n          <div class=\"custom-bio--yellow-box\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"custom-bio--2box\">\r\n        <div class=\"custom-bio--main-image\">\r\n          <img\r\n            class=\"custom-bio--custom-img\"\r\n            src=\"${await this.mergeFields['gpt3Data'].get({path: 'bioimage'})}\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div class=\"custom-bio--white-box\"></div>\r\n        <div class=\"custom-bio--random\">${await this.mergeFields['gpt3Data'].get({path: 'year'})}</div>\r\n      </div>\r\n      <div class=\"custom-bio--vertical-lines-1\"></div>\r\n      <div class=\"custom-bio--vertical-lines-2\"></div>\r\n    </div>\r\n  </body>\r\n</html>\r\n",
              "leftMargin": "``",
              "__codeModes": {},
              "pdfViewType": "predefined",
              "rightMargin": "``",
              "bottomMargin": "``",
              "imageQuality": "80",
              "pdfSizeUnits": "px",
              "processError": false,
              "imageFileType": "png",
              "fileSourceType": "html",
              "footerTemplate": "``",
              "headerTemplate": "``",
              "pdfCustomWidth": "``",
              "_ignoreMFAlerts": [
                "gpt3Data"
              ],
              "backgroundToPdf": true,
              "isMobileVersion": false,
              "loadWaitingTime": "`3 sec`",
              "makeFilePrivate": false,
              "pdfCustomHeight": "``",
              "backgroundToImage": false,
              "pdfPredefinedSize": "`Letter`",
              "skipStepLogicExit": {
                "id": "next",
                "label": "next",
                "stepId": "ae861834-6738-4e44-a885-1ed6b67edd0e",
                "condition": ""
              },
              "websiteResolution": "custom",
              "fullPageScreenShot": false,
              "imageSizeClipWidth": "``",
              "imageSizeClipHeight": "``",
              "websitePrintVersion": false,
              "imageSizeClipXOffset": "``",
              "imageSizeClipYOffset": "``",
              "imageSizeCustomWidth": "``",
              "maxNavigationTimeout": "`10 sec`",
              "customResolutionWidth": "`645`",
              "imageSizeCustomHeight": "``",
              "customResolutionHeight": "`390`",
              "pdfPredefinedOrientation": "`landscape`"
            },
            "stepInputData": {
              "newName": "`${await this.mergeFields['gpt3Data'].get({path: 'wikiName'})}`",
              "filePath": "`bioCardImages/`",
              "fileType": "\"image\"",
              "useFiles": true,
              "assetsUrl": "\"/api/v1/assets\"",
              "authToken": "\"AAABogECAQB4lO5qrMbBPYllyByB6U98HpyJ7eWikC9ICFdAdnZ+Co8BayHGHXesNoXRQF7c9niTowAAAWgwggFkBgkqhkiG9w0BBwagggFVMIIBUQIBADCCAUoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMOcGd7AbSWDn1LtkMAgEQgIIBG7OA2h4IA/T+UyWXVPhVqFwiC/0Ja2fBeDrkzy2hkCQND+tPmGgqyrh9k2uXqQVTTBed2XF7C/LfTpxjLn87sXhRqq1jfdIjVqngUAp7bRVuMYP0rH83DceUC4XHK7+YruiA0hvo/ruae4HHZLZUa4TALq3Zz0BhPS3vBizataJ7QfBLhNntfpuzL42C3BFPwTPZ44uV+s8RRy2ZLWa2V8OWpMJAxfLmjT0E/+cQlQL4rhQS90T4QqNR9uS0eFLonc4UYDX26y8vE241t2FdxWm4F81K9AZCoewdb96oZsqfQoAHC4X1bRYcy5vxEZhC4et0fofS9sVmB/HVbMIwE9JrWUbezPEtxo3yF0gnDudvU1WOChJfwdFaa7wAAAFFZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmhZMk52ZFc1MFNXUWlPaUkyTm1GbFl6TTFPUzFoWWpVNExUUm1ZbUV0T0dWbE1DMDROamRqTnpNd1ltVTVZakFpTENKMWMyVnlTV1FpT2lJNU5XTmhabU16T1MwMVl6VXhMVFJsTlRndFlqRmxaQzAwWW1Ka1lXSTVZVE14WkRZaUxDSnliMnhsSWpvaVFVUk5TVTRpTENKaGRYUm9WRzlyWlc0aU9pSTRPREUwTUdJMk55MW1abU14TFRSak9XSXRPVEUyWkMxaVl6ZGpNVFk1T0dReE1EVWlMQ0pwWVhRaU9qRTJOVGN4TWpBMk1qRjkuTFdsMUdpOGl6YlV1OW5rUHhqekd5MGZNUlFuOHNKeHFFWVhLRFVSMFhvSQ==\"",
              "imageSize": "\"full\"",
              "topMargin": "``",
              "urlSource": "``",
              "htmlSource": "`<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n    <style>\r\n      /* Styles for the BioGuide */\r\n      @import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Serif:ital,opsz,wght@1,8..144,300;1,8..144,400&family=Roboto:wght@300;400&display=swap\");\r\n      html {\r\n        width: 645px;\r\n        height: 386px;\r\n        margin: 0 0;\r\n        display: flex;\r\n        overflow: hidden;\r\n      }\r\n      .custom-bio--area {\r\n        padding: 1px;\r\n        border: 3px solid #f1f1f1;\r\n        border-radius: 6px;\r\n        width: 645px;\r\n        margin: 0 0;\r\n        display: flex;\r\n        overflow: hidden;\r\n      }\r\n\r\n      .custom-bio--card > span {\r\n        visibility: hidden;\r\n        display: none;\r\n      }\r\n      .custom-bio--card > br {\r\n        visibility: hidden;\r\n        display: none;\r\n      }\r\n\r\n      .custom-bio--card {\r\n        display: flex;\r\n        width: 639px;\r\n        height: 380px;\r\n        position: relative;\r\n        background-color: white;\r\n        border-radius: 5px;\r\n      }\r\n\r\n      .custom-bio--1box {\r\n        padding: 24px 32px;\r\n        width: 259px;\r\n        z-index: 999;\r\n      }\r\n      .custom-bio--2box {\r\n        width: 380px;\r\n        position: relative;\r\n      }\r\n      .custom-bio--title {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 24px;\r\n        line-height: 36px;\r\n        /* identical to box height */\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        color: #3fa2a0;\r\n        text-transform: capitalize;\r\n        white-space: nowrap;\r\n      }\r\n      .custom-bio--subtitle {\r\n        font-family: \"Roboto Serif\";\r\n        font-style: italic;\r\n        font-weight: 300;\r\n        font-size: 14px;\r\n        line-height: 16px;\r\n        display: flex;\r\n        color: #324045;\r\n        align-items: center;\r\n        padding: 15px 0;\r\n      }\r\n      .custom-bio--biography {\r\n        font-family: \"Roboto\";\r\n        font-style: normal;\r\n        font-weight: 300;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        color: #151d1c;\r\n        max-height: 160px;\r\n        overflow: hidden;\r\n      }\r\n      .custom-bio--learn-more {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        color: #3fa2a0;\r\n        padding: 15px 0 10px;\r\n\r\n        text-align: left;\r\n        letter-spacing: 0.2em;\r\n        text-transform: uppercase;\r\n      }\r\n\r\n      .custom-bio--learn-more > a {\r\n        text-decoration: none;\r\n        color: #3fa2a0;\r\n      }\r\n      .custom-bio--avatar {\r\n        width: 50px;\r\n        height: 50px;\r\n      }\r\n      .custom-bio--avatar {\r\n        position: relative;\r\n        width: 100%;\r\n      }\r\n      .custom-bio--avatar > img {\r\n        width: 50px;\r\n        height: 50px;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 999;\r\n        object-fit: cover;\r\n        border-radius: 50%;\r\n        filter: grayscale(1);\r\n        background: white;\r\n      }\r\n      .custom-bio--yellow-box-image {\r\n        z-index: 9;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 25px;\r\n        width: 25px;\r\n        height: 25px;\r\n        background-color: #f9c642;\r\n      }\r\n      .custom-bio--yellow-box {\r\n        width: 10px;\r\n        height: 10px;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        background-color: #f9c642;\r\n      }\r\n      .custom-bio--main-image {\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n      .custom-bio--main-image > img {\r\n        object-fit: cover;\r\n        height: 100%;\r\n        width: 100%;\r\n        border-radius: 5px;\r\n        min-width: 100% !important;\r\n      }\r\n      .custom-bio--custom-img {\r\n        filter: grayscale(100%);\r\n      }\r\n      .custom-bio--custom-img-overlap {\r\n        position: absolute;\r\n        left: 0%;\r\n        top: 0%;\r\n        overflow: hidden;\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n\r\n      .custom-bio--custom-img-overlap > img {\r\n        object-fit: cover;\r\n        height: 120%;\r\n        width: 110%;\r\n        border-radius: 5px;\r\n        min-width: 100% !important;\r\n        opacity: 0.3;\r\n        filter: grayscale(100%);\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n      }\r\n      .custom-bio--white-box {\r\n        width: 70px;\r\n        height: 70px;\r\n        background-color: #ffffff;\r\n        position: absolute;\r\n        top: 0px;\r\n        left: 0px;\r\n        z-index: 99;\r\n      }\r\n      .custom-bio--logo > svg {\r\n        fill: #3fa2a0;\r\n        position: absolute;\r\n        top: 30px;\r\n        right: 30px;\r\n      }\r\n      .custom-bio--random {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-size: 60px;\r\n        line-height: 90px;\r\n        display: flex;\r\n        align-items: center;\r\n        text-align: right;\r\n        letter-spacing: 0.07em;\r\n        color: rgba(63, 162, 160, 0.7);\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 0px;\r\n      }\r\n      .custom-bio--vertical-lines-1 {\r\n        position: absolute;\r\n        bottom: 130px;\r\n        right: 336px;\r\n        width: 10px;\r\n        height: 180px;\r\n        background-color: rgba(133, 225, 223, 0.7);\r\n      }\r\n      .custom-bio--vertical-lines-2 {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 336px;\r\n        width: 10px;\r\n        height: 110px;\r\n        background-color: rgba(133, 225, 223, 0.7);\r\n      }\r\n\r\n      .custom-bio--background-lines {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 0px;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n\r\n      .custom-bio--change-guide-button {\r\n        font-family: \"Poppins\";\r\n        font-style: normal;\r\n        font-weight: 600;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        /* identical to box height */\r\n\r\n        text-align: right;\r\n        letter-spacing: 0.2em;\r\n        text-transform: uppercase;\r\n        width: 630px;\r\n        margin-top: 16px;\r\n      }\r\n\r\n      .custom-bio--change-guide-button > a {\r\n        color: #3fa2a0;\r\n        /* cursor: not-allowed !important; */\r\n        cursor: pointer !important;\r\n      }\r\n\r\n      @media (max-width: 600px) {\r\n        .custom-bio--area {\r\n          margin-left: -15px;\r\n          width: 320px;\r\n        }\r\n        .custom-bio--change-guide-button {\r\n          margin-left: -25px;\r\n        }\r\n        .custom-bio--card {\r\n          display: inline;\r\n          width: 300px;\r\n          height: 620px;\r\n        }\r\n        .custom-bio--1box {\r\n          width: 300px;\r\n          height: 320px;\r\n          background-color: white;\r\n          border-top-left-radius: 5px;\r\n          border-top-right-radius: 5px;\r\n        }\r\n        .custom-bio--2box {\r\n          width: 300px;\r\n          overflow: hidden;\r\n          max-height: 350px;\r\n        }\r\n\r\n        .custom-bio--title {\r\n          font-size: 20px;\r\n          line-height: 30px;\r\n        }\r\n        .custom-bio--subtitle {\r\n          font-size: 14px;\r\n          line-height: 16px;\r\n          padding: 5px 0 15px;\r\n        }\r\n        .custom-bio--biography {\r\n          max-height: 126px;\r\n        }\r\n        .custom-bio--learn-more {\r\n          padding: 7px 0 10px;\r\n        }\r\n\r\n        .custom-bio--white-box {\r\n          width: 50px;\r\n          height: 50px;\r\n          background-color: #ffffff;\r\n        }\r\n        .custom-bio--vertical-lines-1 {\r\n          left: 50px;\r\n          top: 315px;\r\n          height: 10px;\r\n          width: 155px;\r\n        }\r\n        .custom-bio--vertical-lines-2 {\r\n          left: 225px;\r\n          top: 315px;\r\n          height: 10px;\r\n          width: 75px;\r\n        }\r\n        .custom-bio--change-guide-button {\r\n          width: 320px;\r\n        }\r\n      }\r\n      /* Styles for the BioGuide */\r\n    </style>\r\n  </head>\r\n  <body class=\"custom-bio--area\">\r\n    <div class=\"custom-bio--card\">\r\n      <div class=\"custom-bio--1box\">\r\n        <div class=\"custom-bio--title\">${await this.mergeFields['gpt3Data'].get({path: 'figureFullName'})}</div>\r\n        <div class=\"custom-bio--subtitle\">${await this.mergeFields['gpt3Data'].get({path: 'title'})}</div>\r\n        <div class=\"custom-bio--biography\">\r\n          ${await this.mergeFields['gpt3Data'].get({path: 'biography'})}\r\n        </div>\r\n        <div class=\"custom-bio--learn-more\">Learn More</div>\r\n        <div class=\"custom-bio--avatar\">\r\n          <img\r\n            src=\"${await this.mergeFields['gpt3Data'].get({path: 'bioimage'})}\"\r\n            alt=\"\"\r\n          />\r\n          <div class=\"custom-bio--yellow-box-image\"></div>\r\n          <div class=\"custom-bio--yellow-box\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"custom-bio--2box\">\r\n        <div class=\"custom-bio--main-image\">\r\n          <img\r\n            class=\"custom-bio--custom-img\"\r\n            src=\"${await this.mergeFields['gpt3Data'].get({path: 'bioimage'})}\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div class=\"custom-bio--white-box\"></div>\r\n        <div class=\"custom-bio--random\">${await this.mergeFields['gpt3Data'].get({path: 'year'})}</div>\r\n      </div>\r\n      <div class=\"custom-bio--vertical-lines-1\"></div>\r\n      <div class=\"custom-bio--vertical-lines-2\"></div>\r\n    </div>\r\n  </body>\r\n</html>\r\n`",
              "leftMargin": "``",
              "pdfViewType": "\"predefined\"",
              "rightMargin": "``",
              "bottomMargin": "``",
              "imageQuality": "\"80\"",
              "pdfSizeUnits": "\"px\"",
              "processError": false,
              "imageFileType": "\"png\"",
              "fileSourceType": "\"html\"",
              "footerTemplate": "``",
              "headerTemplate": "``",
              "pdfCustomWidth": "``",
              "backgroundToPdf": true,
              "isMobileVersion": false,
              "loadWaitingTime": "`3 sec`",
              "pdfCustomHeight": "``",
              "backgroundToImage": false,
              "pdfPredefinedSize": "`Letter`",
              "websiteResolution": "\"custom\"",
              "fullPageScreenShot": false,
              "imageSizeClipWidth": "``",
              "imageSizeClipHeight": "``",
              "websitePrintVersion": false,
              "imageSizeClipXOffset": "``",
              "imageSizeClipYOffset": "``",
              "imageSizeCustomWidth": "``",
              "maxNavigationTimeout": "`10 sec`",
              "customResolutionWidth": "`645`",
              "imageSizeCustomHeight": "``",
              "customResolutionHeight": "`390`",
              "pdfPredefinedOrientation": "`landscape`"
            },
            "outputExample": {
              "url": ""
            },
            "reporting": {
              "step": {
                "tags": [],
                "type": "step",
                "label": "Step",
                "enabled": true
              }
            },
            "dataOutLabelConnected": true
          },
          {
            "id": "dd5fd4ea-5f45-43e3-9370-072d3f26df0b",
            "icon": "add",
            "iconType": "default",
            "iconUrl": "",
            "shape": "empty",
            "type": "empty",
            "pinLabel": true,
            "stepInputData": {}
          }
        ]
      }
    },
    "changelog": [
      {
        "date": 1663181605761,
        "text": "",
        "version": "1.0.1",
        "flowVersion": 1668691018000
      },
      {
        "date": 1663181600512,
        "text": "",
        "version": "1.0.0"
      }
    ]
  },
  "accountId": "66aec359-ab58-4fba-8ee0-867c730be9b0",
  "schemaVersion": 21,
  "dateCreated": 1661887195358,
  "dateModified": 1668691018000,
  "isDeleted": false,
  "version": "b1b81006-cf6d-4441-ab3c-b5296e4400be"
}