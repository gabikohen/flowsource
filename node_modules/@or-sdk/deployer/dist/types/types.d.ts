import { Token } from '@or-sdk/base';
import { StepTemplateRaw } from '@or-sdk/step-templates';
export { StepTemplateRaw } from '@or-sdk/step-templates';
export declare type DeployerConfig = {
    token: Token;
    discoveryUrl?: string;
    accountId?: string;
    deployerUrl?: string;
};
export declare type Step = {
    id: string;
    label?: string;
    type?: string;
    data?: {
        code?: string;
    };
    stepInputData?: {
        code?: string;
    };
};
export declare type Tree = {
    position: {
        x: number;
        y: number;
    };
    steps: Step[];
};
export declare type AnnotationType = 'text' | 'icon' | 'video' | 'image';
export declare type Annotation = {
    x: number;
    y: number;
    text?: string;
    type: AnnotationType;
    id: string;
    color?: string;
    icon?: string;
    size?: string;
    src?: string;
    width?: number;
    height?: number;
};
export declare type Flow = {
    accountId: string;
    number: string;
    data: {
        label: string;
        isHidden: boolean;
        type: unknown;
        deploy: {
            timeout?: number;
            memory?: number;
            role: string;
        };
        description: string;
        stepTemplates: StepTemplateRaw[];
        trees: {
            [key: string]: Tree;
        };
        packages: unknown;
        meta: {
            [key: string]: unknown;
        };
        color: string | null;
        categories: string[] | null;
        annotations: Annotation[] | null;
    };
    botId: string;
    id?: string;
    tags?: string[];
    version: string;
};
export declare type Trigger = {
    name: string;
    target: string;
    params: {
        name: string;
        params?: {
            method?: string;
            path?: string;
        };
    };
    reporting: {
        [key: string]: unknown;
    };
    processed: boolean;
};
export declare type PollingResultPending = {
    status: string;
    data?: {
        message?: string;
        progress?: number;
    };
};
export declare type PollingResultActivateSuccess = Trigger[];
export declare type PollingResultDeactivateSuccessElement = {
    id: string;
    botId: string;
    flowId: string;
    schemaVersion: number;
    dateCreated: number;
    dateModified: number;
    data: {
        memory: number;
        role: string;
        alias: string;
        flowVersionTimestamp: number;
        flowVersion: string;
        triggers: Trigger[];
        timeout: number;
    };
    dateDeactivated: number;
    triggersRemoved: boolean;
};
export declare type PollingResultDeactivateSuccess = PollingResultDeactivateSuccessElement[];
export declare type PollingResultError = {
    error?: string;
    stack?: string;
    statusCode?: number;
    errorData?: {
        statusCode?: number;
        error?: string;
        message?: string;
    };
    name?: string;
};
export declare type PollingResult = PollingResultPending | PollingResultActivateSuccess | PollingResultDeactivateSuccess | PollingResultError;
export declare type PollingParams = {
    flowId: string;
    requestId: string;
};
//# sourceMappingURL=types.d.ts.map