var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Base, timeout } from '@or-sdk/base';
import { SERVICE_KEY } from './constants';
export class Deployer extends Base {
    constructor(params) {
        const { token, discoveryUrl, accountId, deployerUrl } = params;
        super({
            token,
            discoveryUrl,
            serviceKey: SERVICE_KEY,
            accountId,
            serviceUrl: deployerUrl,
        });
    }
    removeRole() {
        return __awaiter(this, void 0, void 0, function* () {
            const route = '/role';
            return this.callApi({
                method: 'DELETE',
                route,
                params: {
                    accountId: this.currentAccountId,
                },
            });
        });
    }
    activateFlowNoPoll({ id, data: { deploy: { role } } }, interactiveDebug = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('Id is required');
            }
            const flowAlias = `v-${Date.now()}`;
            const data = {
                flowId: id,
                flowAlias,
                interactiveDebug: interactiveDebug,
                role,
            };
            const route = `${this.isCrossAccount ? `/accounts/${this.currentAccountId}` : ''}/flows/deploy`;
            const { requestId } = yield this.callApi({
                method: 'POST',
                route,
                data,
            });
            return {
                flowId: id,
                requestId,
            };
        });
    }
    activateFlow(flowSource, interactiveDebug = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const { flowId, requestId } = yield this.activateFlowNoPoll(flowSource, interactiveDebug);
            return this.pollResult({
                flowId,
                requestId,
            });
        });
    }
    deactivateFlowNoPoll({ id, data: { deploy: { role } } }, flowAlias, deleteLambda = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                throw new Error('Id is required');
            }
            const data = {
                flow: {
                    id,
                },
                flowAlias,
                role,
                deleteLambda,
            };
            const route = `${this.isCrossAccount ? `/accounts/${this.currentAccountId}` : ''}/flows/deploy`;
            const { requestId } = yield this.callApi({
                method: 'DELETE',
                route,
                data,
            });
            return {
                flowId: id,
                requestId,
            };
        });
    }
    deactivateFlow(flowSource, flowAlias, deleteLambda = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const { flowId, requestId } = yield this.deactivateFlowNoPoll(flowSource, flowAlias, deleteLambda);
            return this.pollResult({
                flowId,
                requestId,
            });
        });
    }
    pollResult({ flowId, requestId }) {
        return __awaiter(this, void 0, void 0, function* () {
            let counter = 0;
            const route = `${this.isCrossAccount ? `/accounts/${this.currentAccountId}` : ''}/flows/check/${flowId}/${requestId}`;
            do {
                counter++;
                yield timeout(1000);
                const result = yield this.callApi({
                    method: 'GET',
                    route,
                });
                if (result.status !== 'pending') {
                    if (result.errorData) {
                        throw result;
                    }
                    return result;
                }
            } while (counter < 100);
            throw new Error('Polling is too long');
        });
    }
}
//# sourceMappingURL=Deployer.js.map