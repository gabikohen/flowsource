"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployer = void 0;
var base_1 = require("@or-sdk/base");
var constants_1 = require("./constants");
var Deployer = (function (_super) {
    __extends(Deployer, _super);
    function Deployer(params) {
        var token = params.token, discoveryUrl = params.discoveryUrl, accountId = params.accountId, deployerUrl = params.deployerUrl;
        return _super.call(this, {
            token: token,
            discoveryUrl: discoveryUrl,
            serviceKey: constants_1.SERVICE_KEY,
            accountId: accountId,
            serviceUrl: deployerUrl,
        }) || this;
    }
    Deployer.prototype.removeRole = function () {
        return __awaiter(this, void 0, void 0, function () {
            var route;
            return __generator(this, function (_a) {
                route = '/role';
                return [2, this.callApi({
                        method: 'DELETE',
                        route: route,
                        params: {
                            accountId: this.currentAccountId,
                        },
                    })];
            });
        });
    };
    Deployer.prototype.activateFlowNoPoll = function (_a, interactiveDebug) {
        var id = _a.id, role = _a.data.deploy.role;
        if (interactiveDebug === void 0) { interactiveDebug = false; }
        return __awaiter(this, void 0, void 0, function () {
            var flowAlias, data, route, requestId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!id) {
                            throw new Error('Id is required');
                        }
                        flowAlias = "v-".concat(Date.now());
                        data = {
                            flowId: id,
                            flowAlias: flowAlias,
                            interactiveDebug: interactiveDebug,
                            role: role,
                        };
                        route = "".concat(this.isCrossAccount ? "/accounts/".concat(this.currentAccountId) : '', "/flows/deploy");
                        return [4, this.callApi({
                                method: 'POST',
                                route: route,
                                data: data,
                            })];
                    case 1:
                        requestId = (_b.sent()).requestId;
                        return [2, {
                                flowId: id,
                                requestId: requestId,
                            }];
                }
            });
        });
    };
    Deployer.prototype.activateFlow = function (flowSource, interactiveDebug) {
        if (interactiveDebug === void 0) { interactiveDebug = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, flowId, requestId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.activateFlowNoPoll(flowSource, interactiveDebug)];
                    case 1:
                        _a = _b.sent(), flowId = _a.flowId, requestId = _a.requestId;
                        return [2, this.pollResult({
                                flowId: flowId,
                                requestId: requestId,
                            })];
                }
            });
        });
    };
    Deployer.prototype.deactivateFlowNoPoll = function (_a, flowAlias, deleteLambda) {
        var id = _a.id, role = _a.data.deploy.role;
        if (deleteLambda === void 0) { deleteLambda = false; }
        return __awaiter(this, void 0, void 0, function () {
            var data, route, requestId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!id) {
                            throw new Error('Id is required');
                        }
                        data = {
                            flow: {
                                id: id,
                            },
                            flowAlias: flowAlias,
                            role: role,
                            deleteLambda: deleteLambda,
                        };
                        route = "".concat(this.isCrossAccount ? "/accounts/".concat(this.currentAccountId) : '', "/flows/deploy");
                        return [4, this.callApi({
                                method: 'DELETE',
                                route: route,
                                data: data,
                            })];
                    case 1:
                        requestId = (_b.sent()).requestId;
                        return [2, {
                                flowId: id,
                                requestId: requestId,
                            }];
                }
            });
        });
    };
    Deployer.prototype.deactivateFlow = function (flowSource, flowAlias, deleteLambda) {
        if (deleteLambda === void 0) { deleteLambda = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, flowId, requestId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.deactivateFlowNoPoll(flowSource, flowAlias, deleteLambda)];
                    case 1:
                        _a = _b.sent(), flowId = _a.flowId, requestId = _a.requestId;
                        return [2, this.pollResult({
                                flowId: flowId,
                                requestId: requestId,
                            })];
                }
            });
        });
    };
    Deployer.prototype.pollResult = function (_a) {
        var flowId = _a.flowId, requestId = _a.requestId;
        return __awaiter(this, void 0, void 0, function () {
            var counter, route, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        counter = 0;
                        route = "".concat(this.isCrossAccount ? "/accounts/".concat(this.currentAccountId) : '', "/flows/check/").concat(flowId, "/").concat(requestId);
                        _b.label = 1;
                    case 1:
                        counter++;
                        return [4, (0, base_1.timeout)(1000)];
                    case 2:
                        _b.sent();
                        return [4, this.callApi({
                                method: 'GET',
                                route: route,
                            })];
                    case 3:
                        result = _b.sent();
                        if (result.status !== 'pending') {
                            if (result.errorData) {
                                throw result;
                            }
                            return [2, result];
                        }
                        _b.label = 4;
                    case 4:
                        if (counter < 100) return [3, 1];
                        _b.label = 5;
                    case 5: throw new Error('Polling is too long');
                }
            });
        });
    };
    return Deployer;
}(base_1.Base));
exports.Deployer = Deployer;
//# sourceMappingURL=Deployer.js.map