import { Token } from '@or-sdk/base';
import { StepTemplateRaw } from '@or-sdk/step-templates';
export { StepTemplateRaw } from '@or-sdk/step-templates';

export type DeployerConfig = {
  /**
   * token
   */
  token: Token;

  /**
   * Url of OneReach service discovery api
   */
  discoveryUrl?: string;

  /**
   * Account ID for cross-account requests (super admin only)
   */
  accountId?: string;

  /**
   * Url of OneReach Deployer api
   */
  deployerUrl?: string;
};

export type Step = {
  id: string;
  label?: string;
  type?: string;
  data?: {
    code?: string;
  };
  stepInputData?: {
    code?: string;
  };
};

export type Tree = {
  position: {
    x: number;
    y: number;
  };
  steps: Step[];
};

export type AnnotationType = 'text' | 'icon' | 'video' | 'image';

export type Annotation = {
  x: number;
  y: number;
  text?: string;
  type: AnnotationType;
  id: string;
  color?: string;
  icon?: string;
  size?: string;
  src?: string;
  width?: number;
  height?: number;
};

export type Flow = {
  accountId: string;
  number: string;
  data: {
    label: string;
    isHidden: boolean;
    type: unknown;
    deploy: {
      timeout?: number;
      memory?: number;
      role: string;
    };
    description: string;
    stepTemplates: StepTemplateRaw[];
    trees: {
      [key: string]: Tree;
    };
    packages: unknown;
    meta: {
      [key: string]: unknown;
    };
    color: string | null;
    categories: string[] | null;
    annotations: Annotation[] | null;
  };
  botId: string;
  id?: string;
  tags?: string[];
  version: string;
};

export type Trigger = {
  name: string;
  target: string;
  params: {
    name: string;
    params?: {
      method?: string;
      path?: string;
    };
  };
  reporting: {
    [key: string]: unknown;
  }; //TODO: always empty?
  processed: boolean;
};

export type PollingResultPending = {
  status: string;
  data?: {
    message?: string;
    progress?: number;
  };
};

export type PollingResultActivateSuccess = Trigger[];

export type PollingResultDeactivateSuccessElement = {
  id: string;
  botId: string;
  flowId: string;
  schemaVersion: number;
  dateCreated: number;
  dateModified: number;
  data: {
    memory: number;
    role: string;
    alias: string;
    flowVersionTimestamp: number;
    flowVersion: string;
    triggers: Trigger[];
    timeout: number;
  };
  dateDeactivated: number;
  triggersRemoved: boolean;
};

export type PollingResultDeactivateSuccess = PollingResultDeactivateSuccessElement[];

export type PollingResultError = {
  error?: string;
  stack?: string;
  statusCode?: number;
  errorData?: {
    statusCode?: number;
    error?: string;
    message?: string;
  };
  name?: string;
};

export type PollingResult = PollingResultPending | PollingResultActivateSuccess | PollingResultDeactivateSuccess | PollingResultError;

export type PollingParams = {
  flowId: string;
  requestId: string;
};
