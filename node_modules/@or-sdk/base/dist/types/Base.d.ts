import { AxiosRequestHeaders, AxiosError } from 'axios';
import { BaseConfig, CalApiParams, MakeApiUrlData } from './types';
export declare abstract class Base {
    private readonly token;
    private readonly axios;
    private readonly discoveryUrl;
    private readonly serviceKey;
    private readonly requestAccountId;
    private readonly requestProvidersAccountId;
    private readonly feature;
    private readonly _isCrossAccount;
    private status;
    private _currentAccountId;
    private _targetAccountId;
    private _providersAccountId;
    private _serviceUrl;
    protected constructor({ token, discoveryUrl, serviceKey, requestAccountId, requestProvidersAccountId, feature, accountId, serviceUrl, useDefaultSerializer, }: BaseConfig);
    /**
     * @deprecated used for migration stage only
     * @ignore
     */
    get currentAccountId(): string | null;
    /** @ignore */
    get targetAccountId(): string | null;
    /**
     * @deprecated used for migration stage only
     * @ignore
     */
    get providersAccountId(): string | null;
    /** @ignore */
    get isCrossAccount(): boolean;
    /** @ignore */
    init(): Promise<void>;
    /** @ignore */
    private getServiceData;
    /** @ignore */
    private getAccountId;
    /** @ignore */
    private getProvidersAccountId;
    /** @ignore */
    get serviceUrl(): string | null;
    /**
     *
     * Override this method in case if api url has specific url arguments
     * @ignore
     */
    makeApiUrl(data: MakeApiUrlData): string;
    /**
     * Method for parsing errors thrown from callApi request
     *
     * Override this method in case if you need specific error handling
     * @ignore
     */
    parseError(e: AxiosError): Error;
    /** @ignore */
    protected getHeaders(): AxiosRequestHeaders;
    /** @ignore */
    private getToken;
    /**
     * Make api request
     * ```typescript
     * const result = await instance.callApi({
     *   route: '/route',
     *   method: 'GET',
     *   data: requestData,
     *   params: queryParams,
     * });
     * ```
     * @ignore
     */
    protected callApi<T>(params: CalApiParams): Promise<T>;
    /**
     * Make api request
     * ```typescript
     * const result = await instance.callApi({
     *   route: '/route',
     *   method: 'GET',
     *   data: requestData,
     *   params: queryParams,
     * });
     * ```
     * @ignore
     */
    protected callApiV2<T>(params: CalApiParams): Promise<T>;
}
//# sourceMappingURL=Base.d.ts.map