var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from 'axios';
import { normalizeRoute, normalizeUrl, paramsSerializer, parseAxiosError } from './utils';
import { DISCOVERY_ROUTE, DISCOVERY_ROUTE_ACCOUNTID, DISCOVERY_ROUTE_PROVIDERS_ACCOUNT_ID, SdkStatus, } from './constants';
export class Base {
    constructor({ token, discoveryUrl, serviceKey, requestAccountId, requestProvidersAccountId, feature, accountId, serviceUrl, useDefaultSerializer, }) {
        this.discoveryUrl = null;
        this.requestAccountId = false;
        this.requestProvidersAccountId = false;
        this._isCrossAccount = false;
        this.status = SdkStatus.NEW;
        this._currentAccountId = null;
        this._targetAccountId = null;
        this._providersAccountId = null;
        this._serviceUrl = null;
        this.token = token;
        this.discoveryUrl = discoveryUrl || null;
        this.serviceKey = serviceKey;
        this.axios = axios.create(useDefaultSerializer ? {} : { paramsSerializer });
        this._serviceUrl = serviceUrl || null;
        if (accountId) {
            this._currentAccountId = accountId;
            this._targetAccountId = accountId;
            this._isCrossAccount = true;
        }
        else {
            this.requestAccountId = requestAccountId || false;
        }
        this.requestProvidersAccountId = requestProvidersAccountId || false;
        this.feature = feature || null;
    }
    /**
     * @deprecated used for migration stage only
     * @ignore
     */
    get currentAccountId() {
        return this._currentAccountId;
    }
    /** @ignore */
    get targetAccountId() {
        return this._targetAccountId;
    }
    /**
     * @deprecated used for migration stage only
     * @ignore
     */
    get providersAccountId() {
        return this._providersAccountId;
    }
    /** @ignore */
    get isCrossAccount() {
        return this._isCrossAccount;
    }
    /** @ignore */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.serviceUrl) {
                    this._serviceUrl = this.makeApiUrl({ url: normalizeUrl(this.serviceUrl) });
                }
                else if (this.discoveryUrl) {
                    const [data, accountId, providersAccountId,] = yield Promise.all([
                        this.getServiceData(),
                        this.requestAccountId ? this.getAccountId() : null,
                        this.requestProvidersAccountId ? this.getProvidersAccountId() : null,
                    ]);
                    if (this.requestAccountId)
                        this._currentAccountId = accountId;
                    if (this.requestProvidersAccountId)
                        this._providersAccountId = providersAccountId;
                    this._serviceUrl = this.makeApiUrl(Object.assign(Object.assign({}, data), (accountId ? { accountId } : {})));
                }
                else {
                    throw new Error(`Url for '${this.serviceKey}' or 'discoveryUrl' in missing`);
                }
                this.status = SdkStatus.SUCCESS;
            }
            catch (e) {
                this.status = SdkStatus.ERROR;
                throw e;
            }
        });
    }
    /** @ignore */
    getServiceData() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.axios({
                url: `${normalizeUrl(this.discoveryUrl)}/${normalizeRoute(DISCOVERY_ROUTE)}`,
                params: Object.assign({ serviceName: this.serviceKey }, (this.feature ? { feature: this.feature } : {})),
            });
            return data;
        });
    }
    /** @ignore */
    getAccountId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: { accountId } } = yield this.axios({
                url: `${normalizeUrl(this.discoveryUrl)}/${normalizeRoute(DISCOVERY_ROUTE_ACCOUNTID)}`,
                headers: this.getHeaders(),
            });
            return accountId;
        });
    }
    /** @ignore */
    getProvidersAccountId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data: { providersAccountId } } = yield this.axios({
                url: `${normalizeUrl(this.discoveryUrl)}/${normalizeRoute(DISCOVERY_ROUTE_PROVIDERS_ACCOUNT_ID)}`,
                headers: this.getHeaders(),
            });
            return providersAccountId;
        });
    }
    /** @ignore */
    get serviceUrl() {
        return this._serviceUrl;
    }
    /**
     *
     * Override this method in case if api url has specific url arguments
     * @ignore
     */
    makeApiUrl(data) {
        return data.url;
    }
    /**
     * Method for parsing errors thrown from callApi request
     *
     * Override this method in case if you need specific error handling
     * @ignore
     */
    parseError(e) {
        return parseAxiosError(e);
    }
    /** @ignore */
    getHeaders() {
        return Object.assign({ 'Content-Type': 'application/json;charset=UTF-8' }, this.getToken() ? { Authorization: this.getToken() } : {});
    }
    /** @ignore */
    getToken() {
        if (typeof this.token === 'string') {
            return this.token;
        }
        if (typeof this.token === 'function') {
            return this.token();
        }
        throw new Error('token is not defined');
    }
    /**
     * Make api request
     * ```typescript
     * const result = await instance.callApi({
     *   route: '/route',
     *   method: 'GET',
     *   data: requestData,
     *   params: queryParams,
     * });
     * ```
     * @ignore
     */
    callApi(params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.status === SdkStatus.NEW) {
                yield this.init();
            }
            try {
                const conf = {
                    url: `${this._serviceUrl}/${normalizeRoute(params.route)}`,
                    method: params.method || 'GET',
                    data: params.data,
                    params: params.params,
                    headers: Object.assign(Object.assign({}, this.getHeaders()), params.customHeaders ? params.customHeaders : {}),
                    signal: params.signal,
                };
                const { data } = yield this.axios(conf);
                return data;
            }
            catch (e) {
                throw this.parseError(e);
            }
        });
    }
    /**
     * Make api request
     * ```typescript
     * const result = await instance.callApi({
     *   route: '/route',
     *   method: 'GET',
     *   data: requestData,
     *   params: queryParams,
     * });
     * ```
     * @ignore
     */
    callApiV2(params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.status === SdkStatus.NEW) {
                yield this.init();
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const query = params.params || {};
            if (this.isCrossAccount) {
                query.accountId = this.targetAccountId;
            }
            const { data } = yield this.axios({
                url: `${params.url || this._serviceUrl}/${normalizeRoute(params.route)}`,
                method: params.method || 'GET',
                data: params.data,
                params: query,
                headers: this.getHeaders(),
                signal: params.signal,
            })
                .catch(e => {
                throw this.parseError(e);
            });
            return data;
        });
    }
}
//# sourceMappingURL=Base.js.map