"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base = void 0;
var axios_1 = __importDefault(require("axios"));
var utils_1 = require("./utils");
var constants_1 = require("./constants");
var Base = /** @class */ (function () {
    function Base(_a) {
        var token = _a.token, discoveryUrl = _a.discoveryUrl, serviceKey = _a.serviceKey, requestAccountId = _a.requestAccountId, requestProvidersAccountId = _a.requestProvidersAccountId, feature = _a.feature, accountId = _a.accountId, serviceUrl = _a.serviceUrl, useDefaultSerializer = _a.useDefaultSerializer;
        this.discoveryUrl = null;
        this.requestAccountId = false;
        this.requestProvidersAccountId = false;
        this._isCrossAccount = false;
        this.status = constants_1.SdkStatus.NEW;
        this._currentAccountId = null;
        this._targetAccountId = null;
        this._providersAccountId = null;
        this._serviceUrl = null;
        this.token = token;
        this.discoveryUrl = discoveryUrl || null;
        this.serviceKey = serviceKey;
        this.axios = axios_1.default.create(useDefaultSerializer ? {} : { paramsSerializer: utils_1.paramsSerializer });
        this._serviceUrl = serviceUrl || null;
        if (accountId) {
            this._currentAccountId = accountId;
            this._targetAccountId = accountId;
            this._isCrossAccount = true;
        }
        else {
            this.requestAccountId = requestAccountId || false;
        }
        this.requestProvidersAccountId = requestProvidersAccountId || false;
        this.feature = feature || null;
    }
    Object.defineProperty(Base.prototype, "currentAccountId", {
        /**
         * @deprecated used for migration stage only
         * @ignore
         */
        get: function () {
            return this._currentAccountId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Base.prototype, "targetAccountId", {
        /** @ignore */
        get: function () {
            return this._targetAccountId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Base.prototype, "providersAccountId", {
        /**
         * @deprecated used for migration stage only
         * @ignore
         */
        get: function () {
            return this._providersAccountId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Base.prototype, "isCrossAccount", {
        /** @ignore */
        get: function () {
            return this._isCrossAccount;
        },
        enumerable: false,
        configurable: true
    });
    /** @ignore */
    Base.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, data, accountId, providersAccountId, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        if (!this.serviceUrl) return [3 /*break*/, 1];
                        this._serviceUrl = this.makeApiUrl({ url: (0, utils_1.normalizeUrl)(this.serviceUrl) });
                        return [3 /*break*/, 4];
                    case 1:
                        if (!this.discoveryUrl) return [3 /*break*/, 3];
                        return [4 /*yield*/, Promise.all([
                                this.getServiceData(),
                                this.requestAccountId ? this.getAccountId() : null,
                                this.requestProvidersAccountId ? this.getProvidersAccountId() : null,
                            ])];
                    case 2:
                        _a = _b.sent(), data = _a[0], accountId = _a[1], providersAccountId = _a[2];
                        if (this.requestAccountId)
                            this._currentAccountId = accountId;
                        if (this.requestProvidersAccountId)
                            this._providersAccountId = providersAccountId;
                        this._serviceUrl = this.makeApiUrl(__assign(__assign({}, data), (accountId ? { accountId: accountId } : {})));
                        return [3 /*break*/, 4];
                    case 3: throw new Error("Url for '".concat(this.serviceKey, "' or 'discoveryUrl' in missing"));
                    case 4:
                        this.status = constants_1.SdkStatus.SUCCESS;
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _b.sent();
                        this.status = constants_1.SdkStatus.ERROR;
                        throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /** @ignore */
    Base.prototype.getServiceData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios({
                            url: "".concat((0, utils_1.normalizeUrl)(this.discoveryUrl), "/").concat((0, utils_1.normalizeRoute)(constants_1.DISCOVERY_ROUTE)),
                            params: __assign({ serviceName: this.serviceKey }, (this.feature ? { feature: this.feature } : {})),
                        })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /** @ignore */
    Base.prototype.getAccountId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var accountId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios({
                            url: "".concat((0, utils_1.normalizeUrl)(this.discoveryUrl), "/").concat((0, utils_1.normalizeRoute)(constants_1.DISCOVERY_ROUTE_ACCOUNTID)),
                            headers: this.getHeaders(),
                        })];
                    case 1:
                        accountId = (_a.sent()).data.accountId;
                        return [2 /*return*/, accountId];
                }
            });
        });
    };
    /** @ignore */
    Base.prototype.getProvidersAccountId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var providersAccountId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios({
                            url: "".concat((0, utils_1.normalizeUrl)(this.discoveryUrl), "/").concat((0, utils_1.normalizeRoute)(constants_1.DISCOVERY_ROUTE_PROVIDERS_ACCOUNT_ID)),
                            headers: this.getHeaders(),
                        })];
                    case 1:
                        providersAccountId = (_a.sent()).data.providersAccountId;
                        return [2 /*return*/, providersAccountId];
                }
            });
        });
    };
    Object.defineProperty(Base.prototype, "serviceUrl", {
        /** @ignore */
        get: function () {
            return this._serviceUrl;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * Override this method in case if api url has specific url arguments
     * @ignore
     */
    Base.prototype.makeApiUrl = function (data) {
        return data.url;
    };
    /**
     * Method for parsing errors thrown from callApi request
     *
     * Override this method in case if you need specific error handling
     * @ignore
     */
    Base.prototype.parseError = function (e) {
        return (0, utils_1.parseAxiosError)(e);
    };
    /** @ignore */
    Base.prototype.getHeaders = function () {
        return __assign({ 'Content-Type': 'application/json;charset=UTF-8' }, this.getToken() ? { Authorization: this.getToken() } : {});
    };
    /** @ignore */
    Base.prototype.getToken = function () {
        if (typeof this.token === 'string') {
            return this.token;
        }
        if (typeof this.token === 'function') {
            return this.token();
        }
        throw new Error('token is not defined');
    };
    /**
     * Make api request
     * ```typescript
     * const result = await instance.callApi({
     *   route: '/route',
     *   method: 'GET',
     *   data: requestData,
     *   params: queryParams,
     * });
     * ```
     * @ignore
     */
    Base.prototype.callApi = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var conf, data, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.status === constants_1.SdkStatus.NEW)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        conf = {
                            url: "".concat(this._serviceUrl, "/").concat((0, utils_1.normalizeRoute)(params.route)),
                            method: params.method || 'GET',
                            data: params.data,
                            params: params.params,
                            headers: __assign(__assign({}, this.getHeaders()), params.customHeaders ? params.customHeaders : {}),
                            signal: params.signal,
                        };
                        return [4 /*yield*/, this.axios(conf)];
                    case 3:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 4:
                        e_2 = _a.sent();
                        throw this.parseError(e_2);
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Make api request
     * ```typescript
     * const result = await instance.callApi({
     *   route: '/route',
     *   method: 'GET',
     *   data: requestData,
     *   params: queryParams,
     * });
     * ```
     * @ignore
     */
    Base.prototype.callApiV2 = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.status === constants_1.SdkStatus.NEW)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        query = params.params || {};
                        if (this.isCrossAccount) {
                            query.accountId = this.targetAccountId;
                        }
                        return [4 /*yield*/, this.axios({
                                url: "".concat(params.url || this._serviceUrl, "/").concat((0, utils_1.normalizeRoute)(params.route)),
                                method: params.method || 'GET',
                                data: params.data,
                                params: query,
                                headers: this.getHeaders(),
                                signal: params.signal,
                            })
                                .catch(function (e) {
                                throw _this.parseError(e);
                            })];
                    case 3:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return Base;
}());
exports.Base = Base;
//# sourceMappingURL=Base.js.map