import { List, makeList } from '@or-sdk/base';
import { DataHubSvc, setDiff } from '@or-sdk/data-hub-svc';
import { BotsConfig, Bot, ListBotsParams, PaginationOptions, GetBotsParams, DownloadTemplateResult } from './types';
import { Tags, Taggable, filterTagIds, addTagsIds, removeTagIds } from '@or-sdk/tags';

export class Bots implements Taggable<Bot> {
  private readonly dataHubSvc: DataHubSvc;
  private readonly tags: Tags;

  constructor(params: BotsConfig) {
    const { token, discoveryUrl, accountId, dataHubSvcUrl } = params;

    this.dataHubSvc = new DataHubSvc({
      token,
      discoveryUrl,
      accountId,
      dataHubSvcUrl,
    });
    this.tags = new Tags({
      token,
      discoveryUrl,
      accountId,
      dataHubSvcUrl,
    });
  }

  /**
   * List bots
   * ```typescript
   * const botList = await bots.listBots();
   * ```
   */
  public async listBots(params: ListBotsParams = {}, paginationOptions: PaginationOptions = {}): Promise<List<Bot>> {
    let includeQuery = {};

    if (params.includeDeleted === false || (params.includeDeleted === undefined && params.includeExisting !== false)) {
      includeQuery = { isDeleted: false };
    }
    if (params.includeExisting === false) {
      includeQuery = { isDeleted: true };
    }

    const paramsToSend = {
      ...params,
      query: {
        ...params.query,
        ...includeQuery,
      },
      ...paginationOptions,
      ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
    };

    delete paramsToSend.includeDeleted;
    delete paramsToSend.includeExisting;

    const result = await this.dataHubSvc.makeRequest<Bot[]>({
      method: 'GET',
      route: 'bots',
      params: paramsToSend,
    });

    return makeList<Bot>(result);
  }

  /**
   * Get bot
   * ```typescript
   * const bot = await bots.getBot('bot-id');
   * ```
   */
  public async getBot(id: string, params: GetBotsParams = {}): Promise<Bot> {
    return this.dataHubSvc.makeRequest<Bot>({
      method: 'GET',
      route: `bots/${id}`,
      params: {
        ...params,
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }

  /**
   * Save bot
   *
   * If source contains existing id - existing bot will be updated
   * ```typescript
   * const savedBot = await bots.saveBot(botSource);
   * ```
   */
  public async saveBot(source: Bot): Promise<Bot> {
    const result = await this.dataHubSvc.makeRequest<{ id: string; }>({
      method: 'POST',
      route: `bots/${(source.id && source.id !== 'new') ? source.id : 'new'}`,
      data: {
        bot: (source.id && source.id !== 'new') ? source : {
          ...source,
          id: 'new', //TODO: remove later
        },
      },
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });

    return setDiff<Bot>(source, result);
  }

  /**
   * Delete bot
   * ```typescript
   * await bots.deleteBot('bot-id');
   * ```
   */
  public async deleteBot(botId: string, temporarily = true): Promise<void> {
    return this.dataHubSvc.makeRequest<void>({
      method: 'DELETE',
      route: `bots/${botId}`,
      data: {
        temporarily,
      },
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }

  /**
   * Recover bot
   * ```typescript
   * await bots.recoverBot('bot-id');
   * ```
   */
  public async recoverBot(botId: string): Promise<void> {
    return this.dataHubSvc.makeRequest<void>({
      method: 'PATCH',
      route: `bots/${botId}`,
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }

  /**
   * Download bot template to account
   * ```typescript
   * const result = await bots.downloadTemplate('bot-template-id');
   * ```
   */
  public async downloadTemplate(botTemplateId: string): Promise<DownloadTemplateResult> {
    return this.dataHubSvc.makeRequest<DownloadTemplateResult>({
      method: 'PUT',
      route: 'bots',
      data: {
        botId: botTemplateId,
      },
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }

  /**
   * Add tags
   * ```typescript
   * const bot = await bots.addTags(botSource, tagIdsArr);
   * ```
   */
  public async addTags(source: Bot, tagNames: string[]): Promise<Bot> {
    const tags = await this.tags.getMultipleTagsByName(tagNames, true);
    const tagIds = tags.map(tag => tag.id!);

    const { newIds } = filterTagIds(source.tags, tagIds);

    if (!newIds.length) {
      throw Error('No tags to add.');
    }

    return this.saveBot({
      ...source,
      tags: addTagsIds(source.tags, newIds),
    });
  }

  /**
   * Remove tags
   * ```typescript
   * const bot = await bots.removeTags(botSource, tagIdsArr);
   * ```
   */
  public async removeTags(source: Bot, tagNames: string[]): Promise<Bot> {
    const tags = await this.tags.getMultipleTagsByName(tagNames);
    const tagIds = tags.map(tag => tag.id!);

    const { existingIds } = filterTagIds(source.tags, tagIds);

    if (!existingIds.length) {
      throw Error('No tags to remove.');
    }

    return this.saveBot({
      ...source,
      tags: removeTagIds(source.tags, existingIds),
    });
  }

}
