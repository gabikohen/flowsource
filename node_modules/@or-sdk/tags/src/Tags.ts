import { List, makeList } from '@or-sdk/base';
import { DataHubSvc, setDiff } from '@or-sdk/data-hub-svc';
import { GetTagParams, ListTagsParams, PaginationOptions, Tag, TagsConfig } from './types';
import { findMissingTagNames } from './utils';

export class Tags {
  private readonly dataHubSvc: DataHubSvc;

  constructor(params: TagsConfig) {
    const { token, discoveryUrl, accountId, dataHubSvcUrl } = params;

    this.dataHubSvc = new DataHubSvc({
      token,
      discoveryUrl,
      accountId,
      dataHubSvcUrl,
    });
  }

  /**
   * List all tags
   * ```typescript
   * const tagList = await tags.listAllTags();
   * ```
   */
  public async listAllTags(params: ListTagsParams = {}, paginationOptions: PaginationOptions = {}): Promise<List<Tag>> {
    const result = await this.dataHubSvc.makeRequest<Tag[]>({
      method: 'GET',
      route: 'tags',
      params: {
        ...params,
        ...paginationOptions,
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });

    return makeList<Tag>(result);
  }

  /**
   * List tags
   * ```typescript
   * const tagList = await tags.listTags();
   * ```
   */
  public async listTags(params: ListTagsParams = {}): Promise<List<Tag>> {
    return this.listAllTags({
      ...params,
      query: {
        ...params.query,
        isDeleted: false,
      },
    });
  }

  /**
   * Get tag by id
   * ```typescript
   * const tag = await tags.getTagById('tag-id');
   * ```
   */
  public async getTagById(id: string, params: GetTagParams = {}): Promise<Tag> {
    return this.dataHubSvc.makeRequest<Tag>({
      method: 'GET',
      route: `tags/${id}`,
      params: {
        ...params,
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }

  /**
   * Get tags by name
   *
   * If createMissing is set to TRUE, if tags were not found they will be created
   * ```typescript
   * const tags = await tags.getMultipleTagsByName(['tag-name']);
   * ```
   */
  public async getMultipleTagsByName(tagNames: string[], createMissing = false): Promise<Tag[]> {
    const { items: tagList } = await this.listTags();
    let tags = tagList.filter((tag: Tag) => tagNames.find(tagName => tagName === tag.data.label));

    if (createMissing) {
      const missingTagNames = findMissingTagNames(tags, tagNames);
      const newTags = [];
      for (const tagName of missingTagNames) {
        const newTag = await this.createTag({
          data: {
            label: tagName,
          },
        });
        newTags.push(newTag);
      }

      if (newTags.length) {
        const { items: tagList } = await this.listTags();
        tags = tagList.filter((tag: Tag) => tagNames.find(tagName => tagName === tag.data.label));
      }
    }

    if (!tags.length) {
      throw Error('No tags were found.');
    }

    return tags;
  }

  /**
   * Get tag by name
   *
   * If createMissing is set to TRUE, if tag was not found it will be created
   * ```typescript
   * const tag = await tags.getTagByName('tag-name');
   * ```
   */
  public async getTagByName(tagName: string, createMissing = false): Promise<Tag> {
    const result = await this.getMultipleTagsByName([tagName], createMissing);
    return result[0];
  }

  /**
   * Save tag
   *
   * If source contains existing id - existing tag will be updated
   * ```typescript
   * const savedTag = await tags.saveTag(tagSource);
   * ```
   */
  public async saveTag(source: Tag): Promise<Tag> {
    return (source.id && source.id !== 'new') ? this.updateTag(source) : this.createTag(source);
  }

  /**
   * Create tag
   * ```typescript
   * const savedTag = await tags.saveTag(tagSource);
   * ```
   */
  public async createTag(source: Tag): Promise<Tag> {
    const result = await this.dataHubSvc.makeRequest<{ id: string; }>({
      method: 'POST',
      route: 'tags/new',
      data: {
        tag: {
          ...source,
          id: 'new', //TODO: remove later
        },
      },
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });

    return setDiff<Tag>(source, result);
  }

  /**
   * Update tag
   * ```typescript
   * const savedTag = await tags.updateTag(tagSource);
   * ```
   */
  public async updateTag(source: Tag): Promise<Tag> {
    const result = await this.dataHubSvc.makeRequest<{ id: string; }>({
      method: 'POST',
      route: `tags/${source.id}`,
      data: {
        tag: source,
      },
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });

    return setDiff<Tag>(source, result);
  }

  /**
   * Delete tag
   * ```typescript
   * await tags.deleteTag(tagSource);
   * ```
   */
  async deleteTag(source: Tag): Promise<void> {
    return this.dataHubSvc.makeRequest<void>({
      method: 'DELETE',
      route: `tags/${source.id}`,
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }
}
