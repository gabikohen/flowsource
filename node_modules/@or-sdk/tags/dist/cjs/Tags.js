"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tags = void 0;
var base_1 = require("@or-sdk/base");
var data_hub_svc_1 = require("@or-sdk/data-hub-svc");
var utils_1 = require("./utils");
var Tags = (function () {
    function Tags(params) {
        var token = params.token, discoveryUrl = params.discoveryUrl, accountId = params.accountId, dataHubSvcUrl = params.dataHubSvcUrl;
        this.dataHubSvc = new data_hub_svc_1.DataHubSvc({
            token: token,
            discoveryUrl: discoveryUrl,
            accountId: accountId,
            dataHubSvcUrl: dataHubSvcUrl,
        });
    }
    Tags.prototype.listAllTags = function (params, paginationOptions) {
        if (params === void 0) { params = {}; }
        if (paginationOptions === void 0) { paginationOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.dataHubSvc.makeRequest({
                            method: 'GET',
                            route: 'tags',
                            params: __assign(__assign(__assign({}, params), paginationOptions), this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                        })];
                    case 1:
                        result = _a.sent();
                        return [2, (0, base_1.makeList)(result)];
                }
            });
        });
    };
    Tags.prototype.listTags = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.listAllTags(__assign(__assign({}, params), { query: __assign(__assign({}, params.query), { isDeleted: false }) }))];
            });
        });
    };
    Tags.prototype.getTagById = function (id, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.dataHubSvc.makeRequest({
                        method: 'GET',
                        route: "tags/".concat(id),
                        params: __assign(__assign({}, params), this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                    })];
            });
        });
    };
    Tags.prototype.getMultipleTagsByName = function (tagNames, createMissing) {
        if (createMissing === void 0) { createMissing = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tagList, tags, missingTagNames, newTags, _i, missingTagNames_1, tagName, newTag, tagList_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.listTags()];
                    case 1:
                        tagList = (_a.sent()).items;
                        tags = tagList.filter(function (tag) { return tagNames.find(function (tagName) { return tagName === tag.data.label; }); });
                        if (!createMissing) return [3, 7];
                        missingTagNames = (0, utils_1.findMissingTagNames)(tags, tagNames);
                        newTags = [];
                        _i = 0, missingTagNames_1 = missingTagNames;
                        _a.label = 2;
                    case 2:
                        if (!(_i < missingTagNames_1.length)) return [3, 5];
                        tagName = missingTagNames_1[_i];
                        return [4, this.createTag({
                                data: {
                                    label: tagName,
                                },
                            })];
                    case 3:
                        newTag = _a.sent();
                        newTags.push(newTag);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3, 2];
                    case 5:
                        if (!newTags.length) return [3, 7];
                        return [4, this.listTags()];
                    case 6:
                        tagList_1 = (_a.sent()).items;
                        tags = tagList_1.filter(function (tag) { return tagNames.find(function (tagName) { return tagName === tag.data.label; }); });
                        _a.label = 7;
                    case 7:
                        if (!tags.length) {
                            throw Error('No tags were found.');
                        }
                        return [2, tags];
                }
            });
        });
    };
    Tags.prototype.getTagByName = function (tagName, createMissing) {
        if (createMissing === void 0) { createMissing = false; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getMultipleTagsByName([tagName], createMissing)];
                    case 1:
                        result = _a.sent();
                        return [2, result[0]];
                }
            });
        });
    };
    Tags.prototype.saveTag = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, (source.id && source.id !== 'new') ? this.updateTag(source) : this.createTag(source)];
            });
        });
    };
    Tags.prototype.createTag = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.dataHubSvc.makeRequest({
                            method: 'POST',
                            route: 'tags/new',
                            data: {
                                tag: __assign(__assign({}, source), { id: 'new' }),
                            },
                            params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                        })];
                    case 1:
                        result = _a.sent();
                        return [2, (0, data_hub_svc_1.setDiff)(source, result)];
                }
            });
        });
    };
    Tags.prototype.updateTag = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.dataHubSvc.makeRequest({
                            method: 'POST',
                            route: "tags/".concat(source.id),
                            data: {
                                tag: source,
                            },
                            params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                        })];
                    case 1:
                        result = _a.sent();
                        return [2, (0, data_hub_svc_1.setDiff)(source, result)];
                }
            });
        });
    };
    Tags.prototype.deleteTag = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.dataHubSvc.makeRequest({
                        method: 'DELETE',
                        route: "tags/".concat(source.id),
                        params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                    })];
            });
        });
    };
    return Tags;
}());
exports.Tags = Tags;
//# sourceMappingURL=Tags.js.map