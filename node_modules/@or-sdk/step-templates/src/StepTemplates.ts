import { List, makeList } from '@or-sdk/base';
import {
  DownloadStepDataParam,
  ListStepTemplatesParams, PaginationOptions,
  StepTemplate,
  StepTemplatesConfig,
} from './types';
import { DataHubSvc } from '@or-sdk/data-hub-svc';
import { getNewStepTemplate } from './utils';

export class StepTemplates {
  private readonly dataHubSvc: DataHubSvc;

  constructor(params: StepTemplatesConfig) {
    const { token, discoveryUrl, accountId, dataHubSvcUrl } = params;

    this.dataHubSvc = new DataHubSvc({
      token,
      discoveryUrl,
      accountId,
      dataHubSvcUrl,
    });
  }

  /**
   * List step templates
   * ```typescript
   * const list = await stepTemplates.listStepTemplates();
   * ```
   */
  public async listStepTemplates(params: ListStepTemplatesParams = {}, paginationOptions: PaginationOptions = {}): Promise<List<StepTemplate>> {
    const result = await this.dataHubSvc.makeRequest<StepTemplate[]>({
      method: 'GET',
      route: 'step-templates',
      params: {
        ...params,
        ...paginationOptions,
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });

    return makeList<StepTemplate>(result);
  }

  /**
   * Get step template by Id
   * ```typescript
   * const result = await stepTemplates.getStepTemplateById('step-template-id');
   * ```
   */
  public async getStepTemplateById(id: string, params: ListStepTemplatesParams = {}): Promise<StepTemplate> {
    const { items: [step] } = await this.listStepTemplates({
      ...params,
      query: {
        ...params?.query,
        id,
      },
    });
    return step;
  }

  /**
   * Download step template to a flow
   * ```typescript
   * const result = await stepTemplates.download({ id: 'step-template-id' }, 'flow-id');
   * ```
   */
  public async download(stepTemplateData: DownloadStepDataParam, flowId: string): Promise<void> {
    const data = stepTemplateData?.isExternal ?
      { externalStep: stepTemplateData } :
      { stepId: stepTemplateData.id };

    return this.dataHubSvc.makeRequest<void>({
      method: 'PUT',
      route: `step-templates/${flowId}`,
      data,
      params: {
        ... this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {},
      },
    });
  }

  /**
   * Generate new step template
   * ```typescript
   * const result = StepTemplates.getNewStepTemplate();
   * ```
   */
  public static getNewStepTemplate(stepId?: string) {
    return getNewStepTemplate(stepId);
  }
}
