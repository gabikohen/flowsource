var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { makeList } from '@or-sdk/base';
import { DataHubSvc } from '@or-sdk/data-hub-svc';
import { getNewStepTemplate } from './utils';
export class StepTemplates {
    constructor(params) {
        const { token, discoveryUrl, accountId, dataHubSvcUrl } = params;
        this.dataHubSvc = new DataHubSvc({
            token,
            discoveryUrl,
            accountId,
            dataHubSvcUrl,
        });
    }
    listStepTemplates(params = {}, paginationOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.dataHubSvc.makeRequest({
                method: 'GET',
                route: 'step-templates',
                params: Object.assign(Object.assign(Object.assign({}, params), paginationOptions), this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
            });
            return makeList(result);
        });
    }
    getStepTemplateById(id, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { items: [step] } = yield this.listStepTemplates(Object.assign(Object.assign({}, params), { query: Object.assign(Object.assign({}, params === null || params === void 0 ? void 0 : params.query), { id }) }));
            return step;
        });
    }
    download(stepTemplateData, flowId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (stepTemplateData === null || stepTemplateData === void 0 ? void 0 : stepTemplateData.isExternal) ?
                { externalStep: stepTemplateData } :
                { stepId: stepTemplateData.id };
            return this.dataHubSvc.makeRequest({
                method: 'PUT',
                route: `step-templates/${flowId}`,
                data,
                params: Object.assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
            });
        });
    }
    static getNewStepTemplate(stepId) {
        return getNewStepTemplate(stepId);
    }
}
//# sourceMappingURL=StepTemplates.js.map