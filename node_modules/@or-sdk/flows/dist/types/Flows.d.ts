import { List } from '@or-sdk/base';
import { Flow, PollingResultActivateSuccess, PollingResultDeactivateSuccess, StepTemplateRaw } from '@or-sdk/deployer';
import { FlowsConfig, ListFlowsParams, StepTemplateToDelete, PaginationOptions, DownloadTemplateResult, ListDataOutsParams, DataOut, GetFlowParams } from './types';
import { Taggable } from '@or-sdk/tags';
export declare class Flows implements Taggable<Flow> {
    private readonly dataHubSvc;
    private readonly deployer;
    private readonly tags;
    constructor(params: FlowsConfig);
    listFlows(botId?: string, params?: ListFlowsParams, paginationOptions?: PaginationOptions): Promise<List<Flow>>;
    getFlow(id: string, params?: GetFlowParams): Promise<Flow>;
    saveFlow(source: Flow): Promise<Flow>;
    deleteFlow(flowId: string | Flow, temporarily?: boolean): Promise<void>;
    recoverFlow(flowId: string): Promise<void>;
    activateFlow(source: Flow, interactiveDebug?: boolean): Promise<PollingResultActivateSuccess>;
    deactivateFlow(source: Flow, flowAlias: string, deleteLambda?: boolean): Promise<PollingResultDeactivateSuccess>;
    listDataOuts(paginationOptions?: PaginationOptions, params?: ListDataOutsParams): Promise<List<DataOut>>;
    addTags(source: Flow, tagNames: string[]): Promise<Flow>;
    removeTags(source: Flow, tagNames: string[]): Promise<Flow>;
    downloadTemplate(flowTemplateId: string, botId: string, shouldUpdateSteps?: boolean): Promise<DownloadTemplateResult>;
    static listUnusedStepTemplates(source: Flow): StepTemplateRaw[];
    static deleteUnusedStepTemplates(source: Flow, stepTemplates?: StepTemplateToDelete[]): Flow;
}
//# sourceMappingURL=Flows.d.ts.map