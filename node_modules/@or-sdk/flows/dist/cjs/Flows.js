"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flows = void 0;
var base_1 = require("@or-sdk/base");
var data_hub_svc_1 = require("@or-sdk/data-hub-svc");
var deployer_1 = require("@or-sdk/deployer");
var tags_1 = require("@or-sdk/tags");
var utils_1 = require("./utils");
var Flows = (function () {
    function Flows(params) {
        var discoveryUrl = params.discoveryUrl, token = params.token, accountId = params.accountId, dataHubSvcUrl = params.dataHubSvcUrl, deployerUrl = params.deployerUrl;
        this.dataHubSvc = new data_hub_svc_1.DataHubSvc({
            token: token,
            discoveryUrl: discoveryUrl,
            accountId: accountId,
            dataHubSvcUrl: dataHubSvcUrl,
        });
        this.deployer = new deployer_1.Deployer({
            token: token,
            discoveryUrl: discoveryUrl,
            accountId: accountId,
            deployerUrl: deployerUrl,
        });
        this.tags = new tags_1.Tags({
            token: token,
            discoveryUrl: discoveryUrl,
            accountId: accountId,
            dataHubSvcUrl: dataHubSvcUrl,
        });
    }
    Flows.prototype.listFlows = function (botId, params, paginationOptions) {
        if (params === void 0) { params = {}; }
        if (paginationOptions === void 0) { paginationOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var includeQuery, paramsToSend, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        includeQuery = {};
                        if (params.includeDeleted === false || (params.includeDeleted === undefined && params.includeExisting !== false)) {
                            includeQuery = { isDeleted: false };
                        }
                        if (params.includeExisting === false) {
                            includeQuery = { isDeleted: true };
                        }
                        paramsToSend = __assign(__assign(__assign(__assign({}, params), { query: __assign(__assign({}, params.query), includeQuery) }), paginationOptions), this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {});
                        delete paramsToSend.includeDeleted;
                        delete paramsToSend.includeExisting;
                        return [4, this.dataHubSvc.makeRequest({
                                method: 'GET',
                                route: 'flows',
                                params: paramsToSend,
                            })];
                    case 1:
                        result = _a.sent();
                        return [2, (0, base_1.makeList)(result)];
                }
            });
        });
    };
    Flows.prototype.getFlow = function (id, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.dataHubSvc.makeRequest({
                        method: 'GET',
                        route: "flows/".concat(id),
                        params: __assign(__assign({}, params), this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                    })];
            });
        });
    };
    Flows.prototype.saveFlow = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.dataHubSvc.makeRequest({
                            method: 'POST',
                            route: "flows/".concat((source.id && source.id !== 'new') ? source.id : 'new'),
                            data: {
                                flow: (source.id && source.id !== 'new') ? source : __assign(__assign({}, source), { id: 'new' }),
                                previousVersion: (source.id && source.id !== 'new') ? source.version : undefined,
                            },
                            params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                        })];
                    case 1:
                        result = _a.sent();
                        return [2, (0, data_hub_svc_1.setDiff)(source, result)];
                }
            });
        });
    };
    Flows.prototype.deleteFlow = function (flowId, temporarily) {
        if (temporarily === void 0) { temporarily = true; }
        return __awaiter(this, void 0, void 0, function () {
            var flowSourceId;
            return __generator(this, function (_a) {
                flowSourceId = typeof flowId === 'string' ? flowId : flowId.id;
                return [2, this.dataHubSvc.makeRequest({
                        method: 'DELETE',
                        route: "flows/".concat(flowId),
                        data: {
                            temporarily: temporarily,
                        },
                        params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                    })];
            });
        });
    };
    Flows.prototype.recoverFlow = function (flowId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.dataHubSvc.makeRequest({
                        method: 'PATCH',
                        route: "flows/".concat(flowId),
                        params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                    })];
            });
        });
    };
    Flows.prototype.activateFlow = function (source, interactiveDebug) {
        if (interactiveDebug === void 0) { interactiveDebug = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.deployer.activateFlow(source, interactiveDebug)];
            });
        });
    };
    Flows.prototype.deactivateFlow = function (source, flowAlias, deleteLambda) {
        if (deleteLambda === void 0) { deleteLambda = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.deployer.deactivateFlow(source, flowAlias, deleteLambda)];
            });
        });
    };
    Flows.prototype.listDataOuts = function (paginationOptions, params) {
        if (paginationOptions === void 0) { paginationOptions = {}; }
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.dataHubSvc.makeRequest({
                            method: 'GET',
                            route: '/flows/data-outs',
                            params: __assign(__assign(__assign({}, params), paginationOptions), this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                        })];
                    case 1:
                        result = _a.sent();
                        return [2, (0, base_1.makeList)(result)];
                }
            });
        });
    };
    Flows.prototype.addTags = function (source, tagNames) {
        return __awaiter(this, void 0, void 0, function () {
            var tags, tagIds, newIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.tags.getMultipleTagsByName(tagNames, true)];
                    case 1:
                        tags = _a.sent();
                        tagIds = tags.map(function (tag) { return tag.id; });
                        newIds = (0, tags_1.filterTagIds)(source.tags, tagIds).newIds;
                        if (!newIds.length) {
                            throw Error('No tags to add.');
                        }
                        return [2, this.saveFlow(__assign(__assign({}, source), { tags: (0, tags_1.addTagsIds)(source.tags, newIds) }))];
                }
            });
        });
    };
    Flows.prototype.removeTags = function (source, tagNames) {
        return __awaiter(this, void 0, void 0, function () {
            var tags, tagIds, existingIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.tags.getMultipleTagsByName(tagNames)];
                    case 1:
                        tags = _a.sent();
                        tagIds = tags.map(function (tag) { return tag.id; });
                        existingIds = (0, tags_1.filterTagIds)(source.tags, tagIds).existingIds;
                        if (!existingIds.length) {
                            throw Error('No tags to remove.');
                        }
                        return [2, this.saveFlow(__assign(__assign({}, source), { tags: (0, tags_1.removeTagIds)(source.tags, existingIds) }))];
                }
            });
        });
    };
    Flows.prototype.downloadTemplate = function (flowTemplateId, botId, shouldUpdateSteps) {
        if (shouldUpdateSteps === void 0) { shouldUpdateSteps = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.dataHubSvc.makeRequest({
                        method: 'PUT',
                        route: "flows/".concat(botId),
                        data: {
                            flowId: flowTemplateId,
                            shouldUpdateSteps: shouldUpdateSteps,
                        },
                        params: __assign({}, this.dataHubSvc.isCrossAccount ? { accountId: this.dataHubSvc.currentAccountId } : {}),
                    })];
            });
        });
    };
    Flows.listUnusedStepTemplates = function (source) {
        return (0, utils_1.listUnusedStepTemplates)(source);
    };
    Flows.deleteUnusedStepTemplates = function (source, stepTemplates) {
        if (stepTemplates === void 0) { stepTemplates = []; }
        return (0, utils_1.deleteUnusedStepTemplates)(source, stepTemplates);
    };
    return Flows;
}());
exports.Flows = Flows;
//# sourceMappingURL=Flows.js.map